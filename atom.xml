<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>charlesreid1</title><link href="https://charlesreid1.github.io/" rel="alternate"></link><link href="https://charlesreid1.github.io/atom.xml" rel="self"></link><id>https://charlesreid1.github.io/</id><updated>2022-03-02T21:00:00-08:00</updated><entry><title>How to Read Ulysses</title><link href="https://charlesreid1.github.io/how-to-read-ulysses.html" rel="alternate"></link><published>2022-03-02T21:00:00-08:00</published><updated>2022-03-02T21:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2022-03-02:/how-to-read-ulysses.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-little-bit-about-ulysses"&gt;A Little Bit About Ulysses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-we-read-ulysses"&gt;How We Read Ulysses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#two-parallel-routes-through-ulysses"&gt;Two Parallel Routes Through Ulysses&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-blue-route"&gt;The Blue Route&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-red-route"&gt;The Red Route&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-resources"&gt;More Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#happy-100th-birthday-ulysses"&gt;Happy 100th Birthday, Ulysses!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img alt="A visual map of our route through Ulysses." src="images/ulysses-transparent.png"&gt;&lt;/p&gt;
&lt;p&gt;A visual map of our route through &lt;em&gt;Ulysses&lt;/em&gt;. Read on for an explanation...&lt;/p&gt;
&lt;h2 id="a-little-bit-about-ulysses"&gt;A Little Bit About Ulysses&lt;/h2&gt;
&lt;p&gt;Let's talk about &lt;a href="https://en.wikipedia.org/wiki/Ulysses_(novel)"&gt;&lt;em&gt;Ulysses&lt;/em&gt;&lt;/a&gt; for a minute.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ulysses&lt;/em&gt; is regarded as one of the greatest books ever written. But, of course, it's also
barely comprehensible when you first read it.&lt;/p&gt;
&lt;p&gt;Getting to know why &lt;em&gt;Ulysses&lt;/em&gt; is so famous requires a lot of context, in the same way that understanding
what makes a film â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-little-bit-about-ulysses"&gt;A Little Bit About Ulysses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-we-read-ulysses"&gt;How We Read Ulysses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#two-parallel-routes-through-ulysses"&gt;Two Parallel Routes Through Ulysses&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-blue-route"&gt;The Blue Route&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-red-route"&gt;The Red Route&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-resources"&gt;More Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#happy-100th-birthday-ulysses"&gt;Happy 100th Birthday, Ulysses!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img alt="A visual map of our route through Ulysses." src="images/ulysses-transparent.png"&gt;&lt;/p&gt;
&lt;p&gt;A visual map of our route through &lt;em&gt;Ulysses&lt;/em&gt;. Read on for an explanation...&lt;/p&gt;
&lt;h2 id="a-little-bit-about-ulysses"&gt;A Little Bit About Ulysses&lt;/h2&gt;
&lt;p&gt;Let's talk about &lt;a href="https://en.wikipedia.org/wiki/Ulysses_(novel)"&gt;&lt;em&gt;Ulysses&lt;/em&gt;&lt;/a&gt; for a minute.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ulysses&lt;/em&gt; is regarded as one of the greatest books ever written. But, of course, it's also
barely comprehensible when you first read it.&lt;/p&gt;
&lt;p&gt;Getting to know why &lt;em&gt;Ulysses&lt;/em&gt; is so famous requires a lot of context, in the same way that understanding
what makes a film such a classic requires not just an appreciation of the aesthetics and the experience
of the film, but also the historical, social, and cultural context, the story surrounding the story.&lt;/p&gt;
&lt;p&gt;The best way we can describe &lt;em&gt;Ulysses&lt;/em&gt; is saying that it is a meta-novel. It is a novel that is nominally about
June 16, 1904, and how the two main characters spend that day - but throughout the story, there are so many more layers
that are added on - linguistics, art, language, history all make their appearances (as does just about every
major bodily function).&lt;/p&gt;
&lt;p&gt;The novel is meta in the way that it weaves together layer upon layer of storytelling and narrative tehnique,
aping so many different styles (newspaper headings, Old English legends, Irish mythology, vignettes that
have the feel of a short indie film, even FAQs).&lt;/p&gt;
&lt;h2 id="how-we-read-ulysses"&gt;How We Read Ulysses&lt;/h2&gt;
&lt;p&gt;Our first time reading through Ulysses was in 2011, (ironically) as a way of taking a mental break from
the stress of school. We had a special affinity for Joyce based on reading his short story collection
&lt;em&gt;Dubliners&lt;/em&gt;, so making it through &lt;em&gt;Ulysses&lt;/em&gt; was a goal we had had for a while.&lt;/p&gt;
&lt;p&gt;Almost immediately, it was clear that this was not a book that could simple be "read", start to finish,
the way a normal book is read. No, &lt;em&gt;Ulysses&lt;/em&gt; had more in common with a physics textbook than it did with
your typical novel. It is a thing to be experienced and studied, and taken slowly.&lt;/p&gt;
&lt;p&gt;We spent the first three chapters of &lt;em&gt;Ulysses&lt;/em&gt; extremely confused and without any hope of finishing the novel.
But then, we discovered two game-changing strategies:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, we consulted books about &lt;em&gt;Ulysses&lt;/em&gt;. Visit any academic library and you'll likely find an entire shelf of
books on &lt;em&gt;Ulysses&lt;/em&gt;, but there are a few that are considered classics. One of the works that is considered a
definitive interpretation of &lt;em&gt;Ulysses&lt;/em&gt; was written by Stuart Gilbert, who published his commentary on &lt;em&gt;Ulysses&lt;/em&gt; in 1930.
Gilbert knew Joyce personally, lending an air of officiality to the interpretation. The commentary includes a chapter-by-chapter 
discussion of themes, images, symbols, callbacks to Homer's &lt;em&gt;Odyssey&lt;/em&gt;, and key quotes to help make certain
passages of &lt;em&gt;Ulysses&lt;/em&gt; stand out in the mind much more clearly. This book gave us the road map to each chapter
of &lt;em&gt;Ulysses&lt;/em&gt;, and crucially, helped us realize that the chapters don't need to be read in linear order - there
are many converging and diverging timelines in &lt;em&gt;Ulysses&lt;/em&gt; and there are many routes through the book.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, we discovered a wonderful audiobook version of &lt;em&gt;Ulysses&lt;/em&gt; from Naxos audiobooks. (We started with Librivox
recordings, which were very hit-and-miss. Professionally-produced audiobooks are a cut above, and well worth 
seeking out.)&lt;/p&gt;
&lt;p&gt;When we discovered audiobooks, we sometimes listened to the audio book version of the &lt;em&gt;Ulysses&lt;/em&gt; chapter by itself,
and sometimes we read along with the audio recording. Either way, it's a very different way to experience a book,
to hear it read aloud, and doubly so with &lt;em&gt;Ulysses&lt;/em&gt;, which has many sections that seem to take on a completely
different tone and life when they are read aloud versus read off of the page.&lt;/p&gt;
&lt;h2 id="two-parallel-routes-through-ulysses"&gt;Two Parallel Routes Through Ulysses&lt;/h2&gt;
&lt;p&gt;As we got to know &lt;em&gt;Ulysses&lt;/em&gt; better, we gravitated toward Leopold Bloom's character. In particular,
we charted two different routes through the book - the first (mostly) following Leopold Bloom, and
the second following Stephen Dedalus. Here's a visual guide to our map to reading &lt;em&gt;Ulysses&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="A visual map of our route through Ulysses." src="images/ulysses-transparent.png"&gt;&lt;/p&gt;
&lt;p&gt;We start with the blue route, which means the first few chapters of &lt;em&gt;Ulysses&lt;/em&gt; that we read are
Chapters 4, 5, and 6. This is out of order, but the important thing is &lt;em&gt;enjoying&lt;/em&gt; the experience
of reading &lt;em&gt;Ulysses&lt;/em&gt; - and Chapters 4, 5, and 6 are far more enjoyable and comprehensible than
Chapters 1, 2, and 3.&lt;/p&gt;
&lt;h3 id="the-blue-route"&gt;The Blue Route&lt;/h3&gt;
&lt;p&gt;The Blue Route through &lt;em&gt;Ulysses&lt;/em&gt; (the first route that we take when we read it)
consists of the following chapters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Calypso"&gt;Chapter 4 - Calypso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Lotus_Eaters"&gt;Chapter 5 - Lotus Eaters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Hades"&gt;Chapter 6 - Hades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Lestrygonians"&gt;Chapter 8 - Lestrygonians&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Wandering_Rocks"&gt;Chapter 10 - Wandering Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Sirens"&gt;Chapter 11 - Sirens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Cyclops"&gt;Chapter 12 - Cyclops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Oxen_of_the_Sun"&gt;Chapter 14 - Oxen of the Sun&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Eumaeus"&gt;Chapter 16 - Eumaeus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Ithaca"&gt;Chapter 17 - Ithaca&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This route follows Bloom from the start of his day (Chapter 4), follows him as he wanders
about town in the morning (Chapter 5), attends a funeral (Chapter 6), eats lunch (Chapter 8),
visits a pub in the afternoon (Chapter 12), and visits a hospital in the evening (Chapter 14).&lt;/p&gt;
&lt;p&gt;The two main characters, Stephen Dedalus and Leopold Bloom, finally meet in Chapter 14, so
Chapters 16 and 17 cover the drunken evening and long path back home that the two take.&lt;/p&gt;
&lt;p&gt;Chapter 17 is an absolute delight and takes the cake as our favorite chapter. It takes the form
of an FAQ, and reads almost like a technical specification for some omnipotent entity that will
one day need to reproduce, from scratch, every detail of the scenes depicted in Chapter 17.&lt;/p&gt;
&lt;p&gt;Taken on its own, the Blue Path may leave out "notable" or "significant" chapters of &lt;em&gt;Ulysses&lt;/em&gt;,
but the selection is lighter and more enjoyable than reading the novel start to finish.&lt;/p&gt;
&lt;p&gt;One curious aspect of the Blue Path (perhaps true of the novel in general, though) is the way the
chapters seem to balloon in size, and sometimes in complexity. For example, Chapters 4, 5, 6, and 8
are similar in style, yet Chapter 4 is far shorter than Chapter 8; by the time the novel reaches Chapter 8
the narrative begins to wander a great deal, the stream of consciousness grows thicker and more
complicated with each page, the narrative captures ever more goings-on, and time seems to stretch and
dilate as the novel progresses.&lt;/p&gt;
&lt;p&gt;(The novel's longest chapter, Chapter 15, comes near the end of the Red Path.)&lt;/p&gt;
&lt;p&gt;Regarding the way the Blue and Red Paths read the novel out of order - one of the things that makes
it so easy to read &lt;em&gt;Ulysses&lt;/em&gt; out of order is the nebulous nature of cross-references in the book.
You could read the entire novel backwards and probably find the same structure of references as if
you were reading it forward. Chapter 8 references Chaper 14, Chpater 12 references Chapter 8, then 14,
then 11, 5 references 3, 14 references everyone, and so on. Certain themes, words, motifs, and images
recur through the book, like cycles.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ulysses&lt;/em&gt; must be pieced together, and read many times. Whatever order you read it in, reading the text
is like scouring for clues in a crime scene, except it's a perfectly-preserved crime scene that yields
infinite clues. The deeper you dig, the more clues you find, the more intricate the weaved web becomes.&lt;/p&gt;
&lt;p&gt;The Blue Path makes &lt;em&gt;Ulysses&lt;/em&gt; lighter, easier, and more digestible. If you only finish the Blue Route,
it's an accomplishment all in itself!&lt;/p&gt;
&lt;h3 id="the-red-route"&gt;The Red Route&lt;/h3&gt;
&lt;p&gt;The Red Route through &lt;em&gt;Ulysses&lt;/em&gt; (the second route that we take through the book)
consists of the following chapters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Telemachus"&gt;Chapter 1 - Telemachus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Nestor"&gt;Chapter 2 - Nestor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Proteus"&gt;Chapter 3 - Proteus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Aeolus"&gt;Chapter 7 - Aeolus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Scylla_and_Cherybdis"&gt;Chapter 9 - Scylla and Charybdis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Nausicaa"&gt;Chapter 13 - Nausicaa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Circe"&gt;Chapter 15 - Circe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Ulysses/Penelope"&gt;Chapter 18 - Penelope&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Red Route through the novel mainly follows Stephen Dedalus (with the exception of Chapter 7 (Aeolus), but it 
links up with Chapter 9 (Scylla and Charybdis)). Be warned, the Red Route chapters start off easy with Chapters 1 and 2,
but Chapter 3 (Proteus) feels like intellectual quicksand, and is a significant hurdle to getting through the novel
(hence its inclusion in the Red Path).&lt;/p&gt;
&lt;p&gt;Chapter 3 is difficult because it's a rambling stream of consciousness from Stephen Dedalus, who is
a lot more intellectual (professorial) and abstract than Leopold Bloom. It makes Chapter 3 one of the more 
difficult chapters in &lt;em&gt;Ulysses&lt;/em&gt;. But after taking the entire Blue Path through the novel, Chapter 3 is easier
to handle - the stream of consciousness format is familiar, but more abstract than the streams of consciousness
we saw from Leopold Bloom. Being familiar with the stream of consciousness format makes it easier to wade through
the generous heaping of historical, literary, and linguistic references in Chapter 3.&lt;/p&gt;
&lt;p&gt;(Side note: Chapter 3 is when we first discovered the wonder of asking the library for help understanding
what the hell is going on in &lt;em&gt;Ulysses&lt;/em&gt;. It turns out, a lot of people have a lot to say, and the last thing
anyone should do is get frustrated trying to make it through Chapter 3 by themselves!)&lt;/p&gt;
&lt;p&gt;Chapter 7 (Aeolus) is left out of the Blue Path because its format of newspaper-like headlines and paragraphs
is a significant break from the stream of consciousness format of Chapters 4, 5, 6, and 8.&lt;/p&gt;
&lt;p&gt;Chapter 9 is like the scene in the movie when we think the two storylines are finally going to converge,
except it turns out to be a near-miss, and the storylines remain separate. Bloom visits the library to 
retrieve a picture of two keys for an advertisement he's placing in the newspaper (for a client) in Chapter 7,
while Stephen is holding forth on Shakespeare in a discussion at the same library.&lt;/p&gt;
&lt;p&gt;Chapter 13 is the infamous chapter that got &lt;em&gt;Ulysses&lt;/em&gt; banned for its stream of consciousness description 
of Bloom getting his jollies off while watching fireworks at the beach. Another deviation of the Red Path
back to Bloom, but we think Chapter 13 is better appreciated after going through the Blue Path - especially
after Chapter 14.&lt;/p&gt;
&lt;p&gt;Chapter 15 is, hands down, the single most difficult chapter of &lt;em&gt;Ulysses&lt;/em&gt;, but also the richest.
Chapter 15 is best experienced by not reading it start-to-finish, not reading it off the page, but by
hearing it, by visualizing it. The less you read Chapter 15 like a novel, the more you get out of it.&lt;/p&gt;
&lt;p&gt;Chapter 18 is the perfect way to end the book. Reading Chapter 18 at the end of the Red Path is like
finishing a long, excruciating, multi-day excursion through the woods by sitting beside a babbling brook,
peeling off your socks, and sticking your feet in the stream to soak for an hour or two.&lt;/p&gt;
&lt;p&gt;And that's it - that's my recommended path through &lt;em&gt;Ulysses&lt;/em&gt; in a nutshell.&lt;/p&gt;
&lt;h2 id="more-resources"&gt;More Resources&lt;/h2&gt;
&lt;p&gt;Notes on &lt;em&gt;Ulysses&lt;/em&gt; on our charlesreid1.com wiki: &lt;a href="https://charlesreid1.com/wiki/Ulysses"&gt;https://charlesreid1.com/wiki/Ulysses&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Notes from our (very first) 2011 reading of &lt;em&gt;Ulysses&lt;/em&gt;: &lt;a href="https://charlesreid1.com/wiki/Ulysses/2011"&gt;https://charlesreid1.com/wiki/Ulysses/2011&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Notes from our 2016 reading of &lt;em&gt;Ulysses&lt;/em&gt; (the first year we charted the Blue Path and the Red Path): &lt;a href="https://charlesreid1.com/wiki/Ulysses/2016"&gt;https://charlesreid1.com/wiki/Ulysses/2016&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Notes from our (current) 2022 reading of &lt;em&gt;Ulysses&lt;/em&gt;: &lt;a href="https://charlesreid1.com/wiki/Ulysses/2022"&gt;https://charlesreid1.com/wiki/Ulysses/2022&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="happy-100th-birthday-ulysses"&gt;Happy 100th Birthday, Ulysses!&lt;/h2&gt;
&lt;p&gt;A very happy (belated) 100th birthday to one of the greatest novels of all time,
if only measuring by the enjoyment that we have extracted from this 
novel-puzzle-enigma-slash-undefinable-book-thing.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ulysses&lt;/em&gt; was first published on February 2, 1922, a little over 100 years ago today.&lt;/p&gt;
&lt;p&gt;We think the Wikipedia article for &lt;em&gt;Ulysses&lt;/em&gt; sums it up best:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The publication history of Ulysses is complex.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/Ulysses_(novel)#Publication_history&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</content><category term="Ulysses"></category><category term="reading"></category><category term="Ulysses"></category><category term="Joyce"></category></entry><entry><title>MediaWiki Patterns for a Zettelkasten: Todo Lists</title><link href="https://charlesreid1.github.io/mediawiki-patterns-for-a-zettelkasten-todo-lists.html" rel="alternate"></link><published>2022-02-28T16:00:00-08:00</published><updated>2022-02-28T16:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2022-02-28:/mediawiki-patterns-for-a-zettelkasten-todo-lists.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo-lists"&gt;Todo Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-todo-category"&gt;The Todo Category&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#start-with-top-level-sections"&gt;Start with Top Level Sections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#topic-subsubsections"&gt;Topic Subsubsections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo-subpages"&gt;Todo Subpages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#notes-first-overview-last"&gt;Notes First, Overview Last&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#an-example"&gt;An Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-details"&gt;More Details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;This post is part 5 of a series.&lt;/p&gt;
&lt;h2 id="what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.github.io/using-mediawiki-as-a-zettelkasten-or-external-brain.html"&gt;Part 1&lt;/a&gt; of this series for a little more background on what we're
talking about! But basically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A zettelkasten is a system of note-taking, where notes are kept simple
  and tags, or categories, are added to notes to interlink them and create
  a network of connected notes that aid in discovery and memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MediaWiki (the software that runs â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo-lists"&gt;Todo Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-todo-category"&gt;The Todo Category&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#start-with-top-level-sections"&gt;Start with Top Level Sections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#topic-subsubsections"&gt;Topic Subsubsections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#todo-subpages"&gt;Todo Subpages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#notes-first-overview-last"&gt;Notes First, Overview Last&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#an-example"&gt;An Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-details"&gt;More Details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;This post is part 5 of a series.&lt;/p&gt;
&lt;h2 id="what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.github.io/using-mediawiki-as-a-zettelkasten-or-external-brain.html"&gt;Part 1&lt;/a&gt; of this series for a little more background on what we're
talking about! But basically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A zettelkasten is a system of note-taking, where notes are kept simple
  and tags, or categories, are added to notes to interlink them and create
  a network of connected notes that aid in discovery and memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MediaWiki (the software that runs Wikipedia) is a mature PHP software package
  for creating a wiki, that has many built-in features that make it very amenable
  for use as a zettelkasten.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="todo-lists"&gt;Todo Lists&lt;/h2&gt;
&lt;p&gt;This post will use information covered in our previous posts, mainly from &lt;a href="https://charlesreid1.github.io/mediawiki-patterns-for-a-zettelkasten-organizing-pages.html"&gt;Part 3&lt;/a&gt;
on organizing pages, but applied to pages in the wiki that are dedicated to keeping track of todo lists.&lt;/p&gt;
&lt;h2 id="the-todo-category"&gt;The Todo Category&lt;/h2&gt;
&lt;p&gt;Before we get into how we organize todo lists, we should mention that we make heavy use of this pattern in our wiki, 
so we have many todo lists. To keep track of all the todo lists, it can be useful to have a way to get a list of todo lists.&lt;/p&gt;
&lt;p&gt;Whenever we create a new todo list page, we always add the category [[Category:Todo]] to the todo list.
If we need to see all our todo lists in one place, we just visit that Category:Todo page, and MediaWiki
will automatically generate a list of all todo lists.&lt;/p&gt;
&lt;h2 id="start-with-top-level-sections"&gt;Start with Top Level Sections&lt;/h2&gt;
&lt;p&gt;When starting a todo list page, we use a strategy covered in &lt;a href="https://charlesreid1.github.io/mediawiki-patterns-for-a-zettelkasten-organizing-pages.html"&gt;Part 3&lt;/a&gt;,
which is to reserve top-level sections for the different purposes the page may serve.&lt;/p&gt;
&lt;p&gt;Typical top-level sections in our todo list pages are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Overview&lt;/strong&gt; - used if we are revisiting the page and need a brief summary of the most important information&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plan&lt;/strong&gt; - contains planned todo items, work that is not yet in progress&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Todo&lt;/strong&gt; - contains items that are currently in progress, usually notes from today or this week (and empty if a todo page is not being actively used)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Done&lt;/strong&gt; - items that were previously in Todo, but were completed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notes&lt;/strong&gt; - a top-level section that contains notes about the todo list topic. Not necessarily todo items, but useful/related to the todo list.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Notes section is useful when the todo list is still taking shape; the Overview section is useful when the todo
list is done, and there is a concrete outcome or important summary information to refer back to.
The Plan section is useful as a catch-all basket for future tasks, or tasks that aren't being addressed yet.
And so on.&lt;/p&gt;
&lt;h2 id="topic-subsubsections"&gt;Topic Subsubsections&lt;/h2&gt;
&lt;p&gt;The top-level sections of the page are dedicated to different uses of the page: Overview, Planned Todo Items,
In-Progress Todo Items, Completed Todo Items, Notes, etc.&lt;/p&gt;
&lt;p&gt;Within those sections, the second-level headers organize information and notes by date. The second-level headers
have the form &lt;code&gt;YYYYMMDD&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The third-level headers are topic headers. If a single todo item requires completing tasks A, B, and C,
which are completed on the same date, then tasks A, B, and C would have their own third-level headers.&lt;/p&gt;
&lt;p&gt;As a more concrete example, if I start working on a task to "Foo the bar" on 2016-01-01, I will go to the
top-level section for In-Progress Todo Items, add a subsection 20160101, and then add a sub-subsection "Foo the
bar":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;=Todo In Progress=

==20160101==

===Foo the bar===

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent maximus, purus a gravida suscipit, urna neque
pharetra sem, in luctus nisl arcu eu risus. Aliquam vulputate ac tortor et ornare.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="todo-subpages"&gt;Todo Subpages&lt;/h2&gt;
&lt;p&gt;What if halfway through task C, things start to get complicated? Starting notes at a third-level header doesn't
leave room for many more headers - so if you find yourself needing to organize notes for task C into their own
sections and subsections, start a subpage. If your todo list is at &lt;code&gt;[[Todo/Foobar]]&lt;/code&gt;, then split the notes for task C
into their own subpage, &lt;code&gt;[[Todo/Foobar/Task C]]&lt;/code&gt;. Create links between the two pages, so it's easier to navigate
to/from them.&lt;/p&gt;
&lt;h2 id="notes-first-overview-last"&gt;Notes First, Overview Last&lt;/h2&gt;
&lt;p&gt;In terms of order, we usually organize the top level sections of the page in the order we've specified above:
Overview, Planned Todo Items, In-Progress Todo Items, Done Todo Items, and Notes. These can be modified to suit
your own purposes or the particular todo list.&lt;/p&gt;
&lt;p&gt;Usually, we will start with the last section - Notes - and end with the first section - the Overview.&lt;/p&gt;
&lt;p&gt;The Notes section is where we start when we're trying to figure out how to organize the todo list page. The notes
section is typically only useful when you're starting up a todo list, which is why it goes at the bottom - it is
rarely used once the todo list is started.&lt;/p&gt;
&lt;p&gt;The Overview section is where we summarize important outcomes from various todo tasks. It might be a summary of
major efforts, or a list or table that's the outcome of all of the work on the todo list. In any case, if you need
to add an Overview section, you'll know it.&lt;/p&gt;
&lt;h2 id="an-example"&gt;An Example&lt;/h2&gt;
&lt;p&gt;We have an example page showing this pattern in action. It's here: &lt;a href="https://charlesreid1.com/wiki/Todo/Foo"&gt;https://charlesreid1.com/wiki/Todo/Foo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="more-details"&gt;More Details&lt;/h2&gt;
&lt;p&gt;For more details, see the full writeup on our (public non-zettelkasten!) wiki here:
&lt;a href="https://charlesreid1.com/wiki/Zettelkasten/Patterns/Todo_Lists"&gt;https://charlesreid1.com/wiki/Zettelkasten/Patterns/Todo_Lists&lt;/a&gt;&lt;/p&gt;</content><category term="Zettelkasten"></category><category term="zettelkasten"></category><category term="mediawiki"></category><category term="note taking"></category><category term="memory"></category></entry><entry><title>MediaWiki Patterns for a Zettelkasten: Organizing Pages</title><link href="https://charlesreid1.github.io/mediawiki-patterns-for-a-zettelkasten-organizing-pages.html" rel="alternate"></link><published>2022-02-04T16:00:00-08:00</published><updated>2022-02-04T16:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2022-02-04:/mediawiki-patterns-for-a-zettelkasten-organizing-pages.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#organizing-a-page"&gt;Organizing a Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-problem-are-we-trying-to-solve"&gt;What Problem Are We Trying To Solve?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pattern-1-reserve-top-level-sections"&gt;Pattern 1: Reserve Top Level Sections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pattern-2-taking-notes-chronologically"&gt;Pattern 2: Taking Notes Chronologically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pattern-3-subpages"&gt;Pattern 3: Subpages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-details"&gt;More Details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;This post is part 4 of a series.&lt;/p&gt;
&lt;h2 id="what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.github.io/using-mediawiki-as-a-zettelkasten-or-external-brain.html"&gt;Part 1&lt;/a&gt; of this series for a little more background on what we're
talking about! But basically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A zettelkasten is a system of note-taking, where notes are kept simple
  and tags, or categories, are added to notes to interlink them and create
  a network of connected notes that aid in discovery and memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MediaWiki â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#organizing-a-page"&gt;Organizing a Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-problem-are-we-trying-to-solve"&gt;What Problem Are We Trying To Solve?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pattern-1-reserve-top-level-sections"&gt;Pattern 1: Reserve Top Level Sections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pattern-2-taking-notes-chronologically"&gt;Pattern 2: Taking Notes Chronologically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pattern-3-subpages"&gt;Pattern 3: Subpages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-details"&gt;More Details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;This post is part 4 of a series.&lt;/p&gt;
&lt;h2 id="what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.github.io/using-mediawiki-as-a-zettelkasten-or-external-brain.html"&gt;Part 1&lt;/a&gt; of this series for a little more background on what we're
talking about! But basically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A zettelkasten is a system of note-taking, where notes are kept simple
  and tags, or categories, are added to notes to interlink them and create
  a network of connected notes that aid in discovery and memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MediaWiki (the software that runs Wikipedia) is a mature PHP software package
  for creating a wiki, that has many built-in features that make it very amenable
  for use as a zettelkasten.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="organizing-a-page"&gt;Organizing a Page&lt;/h2&gt;
&lt;p&gt;The way that pages are organized on a wiki is central to the way the entire wiki is structured. While it may seem
like a trivial topic that anyone can figure out as they go, a zettelkasten is intended to hold notes accumulated
over many years, and as pages accumulate more information they can start to become inconsistent, crowded, and
messy.&lt;/p&gt;
&lt;p&gt;We are here with some battle-tested patterns to help manage that mess and keep pages organized and useful
(for all of the many purposes a note in a zettelkasten may need to serve) for years to come.&lt;/p&gt;
&lt;p&gt;The three patterns we use to help organize pages on the MediaWiki zettelkasten are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reserve top-level headers for meta-level page organization (different sections for different uses of the page).&lt;/li&gt;
&lt;li&gt;Take notes chronologically in a top-level Notes section.&lt;/li&gt;
&lt;li&gt;Move information to sub-pages as it accumulates or if requires more room.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="what-problem-are-we-trying-to-solve"&gt;What Problem Are We Trying To Solve?&lt;/h2&gt;
&lt;p&gt;To understand what problem these patterns are trying to solve, suppose you have your MediaWiki zettelkasten, and
you start a single note that is on a broad topic. The note might start with a simple structure, have its own
internal logic, and be organized consistently. Easy as that!&lt;/p&gt;
&lt;p&gt;But now suppose you come back to that same topic three months later, with a different perspective and a different
purpose. Maybe you're starting a new project, and re-using some information from the existing note but also adding new
information. Or maybe you learned some new information that changes the way the page should be organized.&lt;/p&gt;
&lt;p&gt;With a page in place, with its own structure and organization and logic, it can be difficult to know where to
incorporate new information down the road. The ideal note-taking system eliminates that kind of internal friction,
and makes it as easy as possible to capture new information, without the cognitive burden of having to reorganize
the page again and again.&lt;/p&gt;
&lt;h2 id="pattern-1-reserve-top-level-sections"&gt;Pattern 1: Reserve Top Level Sections&lt;/h2&gt;
&lt;p&gt;This strategy is a small and easy-to-implement change in how new pages are created, that keeps the page flexible
for multiple different uses. &lt;/p&gt;
&lt;p&gt;The strategy is this: when creating a page, the initial version of the page should only use second-level or deeper
section headers, so any section like &lt;code&gt;=Specifications=&lt;/code&gt; would become &lt;code&gt;==Specifications==&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Yup, that's it! We also have a simple example of a MediaWiki page before/after applying this pattern here:
&lt;a href="https://charlesreid1.com/wiki/Zettelkasten/Patterns/Page_Organization#Pattern_1:_Reserve_Top_Level_Sections"&gt;https://charlesreid1.com/wiki/Zettelkasten/Patterns/Page_Organization#Pattern_1:_Reserve_Top_Level_Sections&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pattern-2-taking-notes-chronologically"&gt;Pattern 2: Taking Notes Chronologically&lt;/h2&gt;
&lt;p&gt;We reserve top-level headers for dividing the page based on its different uses. If we want to start taking notes,
we can add a top-level Notes section to the bottom and start taking notes there. &lt;/p&gt;
&lt;p&gt;To keep notes organized chronologically, we add a second-level header with the year, month, and date. That way,
while we're taking notes, we don't have to worry about how to incorporate the information into the existing
"Overview" information, or try and filter the information as we go. We add notes to the notes section, and can copy
or move information to other parts of the page later. &lt;/p&gt;
&lt;p&gt;Here is a simple example of a MediaWiki page after applying this pattern:
&lt;a href="https://charlesreid1.com/wiki/Zettelkasten/Patterns/Page_Organization#Pattern_2:_Taking_Notes_Chronologically"&gt;https://charlesreid1.com/wiki/Zettelkasten/Patterns/Page_Organization#Pattern_2:_Taking_Notes_Chronologically&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pattern-3-subpages"&gt;Pattern 3: Subpages&lt;/h2&gt;
&lt;p&gt;While following the pattern covered above, you might find that on a particular day, working on a particular task,
the notes for that task end up being much more complicated than initially expected - it might involve research,
links, tasks, notes, and in general require more room than the sub-sub-subsection allotted to it by using the
two patterns we have covered.&lt;/p&gt;
&lt;p&gt;In that situation, you can replace the sub-sub-section's text with a link to a subpage (for example, on the
&lt;code&gt;[[Foobar]]&lt;/code&gt; page, if you are working on Baz and it gets complicated, you create a subpage &lt;code&gt;[[Foobar/Baz]]&lt;/code&gt;).
The original page should link to the subpage, and vice-versa, to make it easy to navigate. Any relevant
Category tags should also be added to the subpage, to help make it findable.&lt;/p&gt;
&lt;p&gt;This page shows another simple MediaWiki example page showing the subpage pattern in action:
&lt;a href="https://charlesreid1.com/wiki/Zettelkasten/Patterns/Page_Organization#Pattern_3:_Subpages"&gt;https://charlesreid1.com/wiki/Zettelkasten/Patterns/Page_Organization#Pattern_3:_Subpages&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="more-details"&gt;More Details&lt;/h2&gt;
&lt;p&gt;For more details, see the full writeup on our (public non-zettelkasten!) wiki here:
&lt;a href="https://charlesreid1.com/wiki/Zettelkasten/Patterns/Page_Organization"&gt;https://charlesreid1.com/wiki/Zettelkasten/Patterns/Page_Organization&lt;/a&gt;&lt;/p&gt;</content><category term="Zettelkasten"></category><category term="zettelkasten"></category><category term="mediawiki"></category><category term="note taking"></category><category term="memory"></category></entry><entry><title>MediaWiki Patterns for a Zettelkasten: Monthly Template Pattern</title><link href="https://charlesreid1.github.io/mediawiki-patterns-for-a-zettelkasten-monthly-template-pattern.html" rel="alternate"></link><published>2022-01-31T09:00:00-08:00</published><updated>2022-01-31T09:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2022-01-31:/mediawiki-patterns-for-a-zettelkasten-monthly-template-pattern.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-monthly-template-pattern"&gt;The Monthly Template Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-the-monthly-template"&gt;What is the Monthly Template?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whats-in-the-monthly-template"&gt;What's in the Monthly Template?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#example-monthly-template"&gt;Example Monthly Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-details"&gt;More Details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;This post is part 3 of a series.&lt;/p&gt;
&lt;h2 id="what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.github.io/using-mediawiki-as-a-zettelkasten-or-external-brain.html"&gt;Part 1&lt;/a&gt; of this series for a little more background on what we're
talking about! But basically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A zettelkasten is a system of note-taking, where notes are kept simple
  and tags, or categories, are added to notes to interlink them and create
  a network of connected notes that aid in discovery and memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MediaWiki (the software that runs Wikipedia) is a â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-monthly-template-pattern"&gt;The Monthly Template Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-the-monthly-template"&gt;What is the Monthly Template?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whats-in-the-monthly-template"&gt;What's in the Monthly Template?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#example-monthly-template"&gt;Example Monthly Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-details"&gt;More Details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;This post is part 3 of a series.&lt;/p&gt;
&lt;h2 id="what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.github.io/using-mediawiki-as-a-zettelkasten-or-external-brain.html"&gt;Part 1&lt;/a&gt; of this series for a little more background on what we're
talking about! But basically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A zettelkasten is a system of note-taking, where notes are kept simple
  and tags, or categories, are added to notes to interlink them and create
  a network of connected notes that aid in discovery and memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MediaWiki (the software that runs Wikipedia) is a mature PHP software package
  for creating a wiki, that has many built-in features that make it very amenable
  for use as a zettelkasten.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-monthly-template-pattern"&gt;The Monthly Template Pattern&lt;/h2&gt;
&lt;p&gt;We cover the monthly template pattern in full detail here: &lt;a href="https://charlesreid1.com/wiki/Zettelkasten/Patterns/Monthly_Template_Pattern"&gt;https://charlesreid1.com/wiki/Zettelkasten/Patterns/Monthly_Template_Pattern&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This blog post is a summary of what's on that page.&lt;/p&gt;
&lt;h2 id="what-is-the-monthly-template"&gt;What is the Monthly Template?&lt;/h2&gt;
&lt;p&gt;The monthly template is a MediaWiki template (a bit of text that can be dynamically inserted into other pages)
that inserts links to all daily pages for a given month.
The monthly template is called something like &lt;code&gt;[[Template:January2016]]&lt;/code&gt;. All daily pages in January 2016 would dynamically include
this monthly template by having the text &lt;code&gt;{{January2016}}&lt;/code&gt; at the end of the note. &lt;/p&gt;
&lt;p&gt;We have mentioned before (&lt;a href="https://charlesreid1.github.io/mediawiki-patterns-for-a-zettelkasten-daily-page-pattern.html"&gt;Part 2&lt;/a&gt;)
that interlinks between different pages are crucial to making the wiki easy to navigate; the monthly template
is a way to make navigation easier by inserting links for all daily pages in a given month.&lt;/p&gt;
&lt;h2 id="whats-in-the-monthly-template"&gt;What's in the Monthly Template?&lt;/h2&gt;
&lt;p&gt;Each monthly template consists of a box with the following links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List of links to all other daily pages in the given month&lt;/li&gt;
&lt;li&gt;Links to the previous month's template and the next month's template&lt;/li&gt;
&lt;li&gt;Links (direct links) to view or edit the monthly template&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last bullet point seems minor, but we have found it enormously useful to include with all templates.&lt;/p&gt;
&lt;h2 id="example-monthly-template"&gt;Example Monthly Template&lt;/h2&gt;
&lt;p&gt;We've set up an example monthly template on our public wiki (which is not a zettelkasten!) for a hypothetical
January 2016: &lt;a href="https://charlesreid1.com/wiki/Template:January2016"&gt;https://charlesreid1.com/wiki/Template:January2016&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We hope the example shows the monthly template in action and helps clarify some of the details in this post.&lt;/p&gt;
&lt;h2 id="more-details"&gt;More Details&lt;/h2&gt;
&lt;p&gt;For more details, see the full writeup on our (public non-zettelkasten!) wiki here:
&lt;a href="https://charlesreid1.com/wiki/Zettelkasten/Patterns/Monthly_Template_Pattern"&gt;https://charlesreid1.com/wiki/Zettelkasten/Patterns/Monthly_Template_Pattern&lt;/a&gt;&lt;/p&gt;</content><category term="Zettelkasten"></category><category term="zettelkasten"></category><category term="mediawiki"></category><category term="note taking"></category><category term="memory"></category></entry><entry><title>MediaWiki Patterns for a Zettelkasten: Daily Page Pattern</title><link href="https://charlesreid1.github.io/mediawiki-patterns-for-a-zettelkasten-daily-page-pattern.html" rel="alternate"></link><published>2022-01-30T18:00:00-08:00</published><updated>2022-01-30T18:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2022-01-30:/mediawiki-patterns-for-a-zettelkasten-daily-page-pattern.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-daily-page-pattern"&gt;The Daily Page Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-the-daily-page"&gt;What is the Daily Page?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whats-on-the-daily-page"&gt;What's on the Daily Page?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#example-daily-page"&gt;Example Daily Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-the-daily-page-pattern"&gt;Advantages of the Daily Page Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#disadvantages-of-daily-page-pattern"&gt;Disadvantages of Daily Page Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#overcoming-the-disadvantages"&gt;Overcoming the Disadvantages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-details"&gt;More Details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;This post is part 2 of a series.&lt;/p&gt;
&lt;h2 id="what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.github.io/using-mediawiki-as-a-zettelkasten-or-external-brain.html"&gt;Part 1&lt;/a&gt; of this series for a little more background on what we're
talking about! But basically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A zettelkasten is a system of note-taking, where notes are kept simple
  and tags, or categories, are added to notes to interlink them and create
  a network of connected notes â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-daily-page-pattern"&gt;The Daily Page Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-the-daily-page"&gt;What is the Daily Page?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whats-on-the-daily-page"&gt;What's on the Daily Page?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#example-daily-page"&gt;Example Daily Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advantages-of-the-daily-page-pattern"&gt;Advantages of the Daily Page Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#disadvantages-of-daily-page-pattern"&gt;Disadvantages of Daily Page Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#overcoming-the-disadvantages"&gt;Overcoming the Disadvantages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-details"&gt;More Details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;This post is part 2 of a series.&lt;/p&gt;
&lt;h2 id="what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.github.io/using-mediawiki-as-a-zettelkasten-or-external-brain.html"&gt;Part 1&lt;/a&gt; of this series for a little more background on what we're
talking about! But basically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A zettelkasten is a system of note-taking, where notes are kept simple
  and tags, or categories, are added to notes to interlink them and create
  a network of connected notes that aid in discovery and memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MediaWiki (the software that runs Wikipedia) is a mature PHP software package
  for creating a wiki, that has many built-in features that make it very amenable
  for use as a zettelkasten.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-daily-page-pattern"&gt;The Daily Page Pattern&lt;/h2&gt;
&lt;p&gt;We cover the daily page pattern in full detail here: &lt;a href="https://charlesreid1.com/wiki/Zettelkasten/Patterns/Daily_Page_Pattern"&gt;https://charlesreid1.com/wiki/Zettelkasten/Patterns/Daily_Page_Pattern&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This blog post is a summary of what's on that page.&lt;/p&gt;
&lt;h2 id="what-is-the-daily-page"&gt;What is the Daily Page?&lt;/h2&gt;
&lt;p&gt;The Daily Page pattern consists of creating a new page named &lt;code&gt;[[YYYYMMDD]]&lt;/code&gt; each day,
and using that page to organize and assemble notes for that day.&lt;/p&gt;
&lt;p&gt;By creating a new note/article to collect everything from a given day, it means there is a clean slate each day. &lt;/p&gt;
&lt;p&gt;Interlinks from each day's page to other pages are crucial: many inter-wiki links create a link structure that
allow easy navigation of the wiki. Each article in the wiki is a node in a network of interlinked pages; an article
with lots of wiki links makes it easy to jump around the network.&lt;/p&gt;
&lt;h2 id="whats-on-the-daily-page"&gt;What's on the Daily Page?&lt;/h2&gt;
&lt;p&gt;Each daily page has a specific structure. (Note that using MediaWiki means the creation of daily pages can be
automated using bots!) A daily page contains the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Summary of prior day, plus link to prior day (making it easy to navigate backwards)&lt;/li&gt;
&lt;li&gt;Work daily page - we have a separate daily page for work notes&lt;/li&gt;
&lt;li&gt;Links section - here, we collect interesting links. This usually starts as a copy-paste dump, but most links
  will eventually be moved to their own notes (a place to collect information about the link, in addition to the
  link itself).&lt;/li&gt;
&lt;li&gt;Monthly template - we make heavy use of MediaWiki templates (chunks of transcluded text) on our zettelkasten.
  The Monthly Template Pattern (to be covered in a later post) consists of a template with a list of links to all
  daily pages for a given month. This makes it easy to navigate from one day of the month to another.&lt;/li&gt;
&lt;li&gt;Categories - we don't tend to add many categories to daily notes, but we add a category for notes in a give
  month, of the form &lt;code&gt;[[Category:YYYYMM]]&lt;/code&gt;, to collect all daily pages from a given month. (We also add a category
  for the year, &lt;code&gt;[[Category:YYYY]]&lt;/code&gt;, which can be helpful in finding older notes.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, not every day is spent in front of a computer, and sometimes days must be retroactively logged,
but those days can be back-filled with notes.&lt;/p&gt;
&lt;h2 id="example-daily-page"&gt;Example Daily Page&lt;/h2&gt;
&lt;p&gt;We've set up an example daily page on our public wiki (which is not a zettelkasten!) from a hypothetical January 1,
2016: &lt;a href="https://charlesreid1.com/wiki/20160101"&gt;https://charlesreid1.com/wiki/20160101&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seeing the daily page in action might help this post make a little more sense.&lt;/p&gt;
&lt;h2 id="advantages-of-the-daily-page-pattern"&gt;Advantages of the Daily Page Pattern&lt;/h2&gt;
&lt;p&gt;The daily page pattern has several advantages. Here are a few:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The daily page pattern scales well; combined with other patterns, it can help categorize and sift through a large
  amount of information from any one day, and create a detailed record of goings-on from a given day that can
  greatly aid the memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As notes on a particular task or topic get more complicated, we move them to subpages, like
  &lt;code&gt;[[YYYYMMDD/Foobar]]&lt;/code&gt;, to allow more space to develop the idea or take notes on a blank page.
  The subpage links back to the daily page, and the daily page links to the subpage, to keep all
  pages networked and easy to navigate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The daily page pattern is flexible in terms of the time scales it can handle. A zettelkasten that's started in
  2022 can still be used to create detailed notes in the past; if we have a note from July 1, 2007, we can make a new
  page &lt;code&gt;[[20070701]]&lt;/code&gt; and add the information there. (As mentioned above, adding a category like
  &lt;code&gt;[[Category:2007]]&lt;/code&gt; to that page can make it easier to find again.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="disadvantages-of-daily-page-pattern"&gt;Disadvantages of Daily Page Pattern&lt;/h2&gt;
&lt;p&gt;The daily page pattern does have some disadvantages: when information throughput is low, the daily page
pattern can tend to make pages feel barren and empty.
When there is too much information coming in, a blank canvas can help things feel more calm.
But when there is only a trickle of information coming in, the blank canvas an feel like it is swallowing work.&lt;/p&gt;
&lt;h2 id="overcoming-the-disadvantages"&gt;Overcoming the Disadvantages&lt;/h2&gt;
&lt;p&gt;We have given some thought to this problem, and have a few thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One useful general principle is persistence - having lists or chunks of text that persist across days, so it
  doesn't feel like work is being swallowed by the wiki. MediaWiki templates are perfect for this, and can be used
  to maintain lists of pages, lists of todo pages, or lists of projects being worked on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have put the persistence principle into practice by keeping a template for our monthly projects.
  In a given month, we have many projects that we're working on, and each one has various topic pages
  and todo pages to keep track of what we're working on with that project. The monthly project template
  allows us to keep track of what projects we're working on over the course of a month, but each month
  we also get the chance to refresh the list by creating a new one, and preserve that project list in whatever
  state it was in at the end of the month.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It's possible to use a Weekly Page Pattern or a Monthly Page Pattern in place of a Daily Page Pattern,
  but we do have some thoughts on that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In our experience, the weekly pages create a complication in naming - there isn't a good way to conveniently
  know, in advance, which weekly page to go to for a given date. If figuring that out isn't a problem,
  then this would be a good option - a week is a good timeframe for a single page of notes.
  Enough time for ideas to persist and stew, but not so long that the page gets stale.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We feel that a monthly page is too long a time period to organize notes on a single page - after just a few days,
  the page's content can begin to feel stale, the page may lack the room for accommodating a new idea, or it may
  just feel like all the old ideas are distracting from coming up with new ideas. Whatever it is, we don't
  think the monthly page pattern works well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All of that being said, try things out to see what suits your needs!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="more-details"&gt;More Details&lt;/h2&gt;
&lt;p&gt;For more details, see the full writeup on our (public non-zettelkasten!) wiki here:
&lt;a href="https://charlesreid1.com/wiki/Zettelkasten/Patterns/Daily_Page_Pattern"&gt;https://charlesreid1.com/wiki/Zettelkasten/Patterns/Daily_Page_Pattern&lt;/a&gt;&lt;/p&gt;</content><category term="Zettelkasten"></category><category term="zettelkasten"></category><category term="mediawiki"></category><category term="note taking"></category><category term="memory"></category></entry><entry><title>Using MediaWiki as a Zettelkasten or External Brain</title><link href="https://charlesreid1.github.io/using-mediawiki-as-a-zettelkasten-or-external-brain.html" rel="alternate"></link><published>2022-01-28T13:00:00-08:00</published><updated>2022-01-28T13:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2022-01-28:/using-mediawiki-as-a-zettelkasten-or-external-brain.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mediawiki-as-zettelkasten"&gt;MediaWiki As Zettelkasten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#in-the-beginning-some-history"&gt;In The Beginning: Some History&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-dark-ages"&gt;The Dark Ages:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-renaissance"&gt;The Renaissance:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-enlightenment"&gt;The Enlightenment:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-modern-era"&gt;The Modern Era:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#zettelkasten-is-not-a-public-wiki"&gt;Zettelkasten Is Not A Public Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#private-wiki-details"&gt;Private Wiki Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-will-be-covered-in-this-series"&gt;What Will Be Covered In This Series?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;This post is part 1 of a series.&lt;/p&gt;
&lt;h2 id="what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/h2&gt;
&lt;p&gt;Before we talk about using MediaWiki as a zettelkasten, let's start with the basics:
&lt;em&gt;what is a zettelkasten?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Zettelkasten"&gt;(Wikipedia article)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;German for "slip box", a zettelkasten is a system for organizing notes and thoughts
that facilitates cross-references and serendipitous connections. The key to a good
zettelkasten is â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mediawiki-as-zettelkasten"&gt;MediaWiki As Zettelkasten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#in-the-beginning-some-history"&gt;In The Beginning: Some History&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-dark-ages"&gt;The Dark Ages:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-renaissance"&gt;The Renaissance:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-enlightenment"&gt;The Enlightenment:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-modern-era"&gt;The Modern Era:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#zettelkasten-is-not-a-public-wiki"&gt;Zettelkasten Is Not A Public Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#private-wiki-details"&gt;Private Wiki Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-will-be-covered-in-this-series"&gt;What Will Be Covered In This Series?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;This post is part 1 of a series.&lt;/p&gt;
&lt;h2 id="what-is-a-zettelkasten"&gt;What is a Zettelkasten?&lt;/h2&gt;
&lt;p&gt;Before we talk about using MediaWiki as a zettelkasten, let's start with the basics:
&lt;em&gt;what is a zettelkasten?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Zettelkasten"&gt;(Wikipedia article)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;German for "slip box", a zettelkasten is a system for organizing notes and thoughts
that facilitates cross-references and serendipitous connections. The key to a good
zettelkasten is filling it with many notes that are well-tagged. Once the zettelkasten
is filled with notes, it can facilitate connections between new notes and existing notes.
In this way, a zettelkasten is not only a way to help store and remember information,
it is a way to enhance creativity by facilitating connections between material.&lt;/p&gt;
&lt;p&gt;By nature, each zettelkasten will be unique to its owner, as the goal of the zettelkasten
is to help facilitate memory and connections between ideas, and everyone's mind works
differently. Each zettelkasten uses different media - index cards, filing cabinets, software - 
and different techniques.&lt;/p&gt;
&lt;h2 id="mediawiki-as-zettelkasten"&gt;MediaWiki As Zettelkasten&lt;/h2&gt;
&lt;p&gt;In the series of blog posts that will follow this one, we will be giving you an inside glimpse
of our particular zettelkasten, which is built around &lt;a href="https://mediawiki.org"&gt;MediaWiki&lt;/a&gt;, the same
wiki software that runs Wikipedia. We will cover what our
daily zettelkasten "routine" looks like, some general techniques for anyone using a zettelkasten,
and some particular features of MediaWiki that we use in our zettelkasten.&lt;/p&gt;
&lt;p&gt;But first, a bit of history to cover how we got here.&lt;/p&gt;
&lt;h2 id="in-the-beginning-some-history"&gt;In The Beginning: Some History&lt;/h2&gt;
&lt;p&gt;We first stumbled on the idea of a zettelkasten around May of 2020, and it immediately resonated.
But our search for the perfect note-taking system had far predated this discovery. We have sampled
our share of note-taking systems over the years, and each has had its pain points. Finding the
perfect note-taking system requires discovering the pitfalls of many not-so-perfect note-taking systems.&lt;/p&gt;
&lt;h3 id="the-dark-ages"&gt;The Dark Ages:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Spiral notebooks&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Back in the analog days, we kept several sets of spiral notebooks for different
subjects. We always valued the ability of this note-taking system to allow a context-switch by just
closing one notebook and opening another. And nothing beats the tactile sensation of paging through
a spiral notebook that is filled with writing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Palm pilot&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;As a teenager, we got our hands on a used Palm Pilot, and it quickly became
a combination note-taking device and library. My notes were stuffed with abridged summaries of historical
facts, philosophy books, chemistry facts, and mathematical formulas. 
(It would take about a decade before internet on cellphones was commonplace, and you could easily
resolve an argument during a car trip about some historical trivia by looking something up on Wikipedia.
Come to mention it, Wikipedia was still in its infancy.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Binders&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Our spiral notebook system got upgraded into a binder system when we were taking college
courses and had to keep notes, homework, exams, and papers together. It mostly worked well, but you could
only carry two or three binders at a time. With a textbook or two, the backpack became a rucksack.
The portability/availability tradeoff was a constant and common tradeoff in the pre-cloud, pre-mobile internet 
days. As a younger person, you don't have your own office, so portability is particularly important.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hipster PDA&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Yes, we admit to adopting the &lt;a href="https://en.wikipedia.org/wiki/Hipster_PDA"&gt;Hipster PDA&lt;/a&gt; at
one point. (What is a hipster PDA, you ask? Imagine a small stack of half-cut index cards, held together by a binder
clip or rubber band or box, small enough to slip into a pocket. That was essentially our hipster PDA.)&lt;/p&gt;
&lt;p&gt;We had a stack of white cards, plus different colored cards inserted to mark different sections.
The top section of cards were the calendar, with one card for each of the next 30 days or so; 
the back of those cards had brief notes or tasks for that day, or any important events.
There was a section for todo cards, which had a topic for the tasks on the front, and a list of tasks on the back.
There was a section for cards with information to study, perfect while waiting to catch a bus.&lt;/p&gt;
&lt;p&gt;No surprises, this method was just too inefficient to last long. The lack of space on the cards, and the
constant desire to rearrange the information on the cards, made it hard to strike the right balance.&lt;/p&gt;
&lt;p&gt;Here is the most value lesson we learned from that entire experience, distilled down to its essence:&lt;/p&gt;
&lt;p&gt;There are some things that are best done with paper, not digital tools. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CALENDARS ARE NOT ONE OF THOSE THINGS.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="the-renaissance"&gt;The Renaissance:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Evernote&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Around the turn of 2010, we made heavy use of Evernote as a central place for
storing information and notes. We can say, with the benefit of hindsight, that we were trying to implement
something like a zettelkasten with Evernote.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The way we used Evernote was by trying to implement the idea that Evernote could serve two purposes:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First, it could be used to capture external information - ideas, links, books, a quote, a key reference.
  (The Evernote Web Clipper, a browser extension that would save a website to Evernote, was invaluable.)
  If you could get the text into Evernote, then it could be searched, and the search function
  cold become a path to discovering connections between notes and topics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Second, if you created notes for each day, or for specific events or meetings on specific days,
  you could use it as a journal, and start to create a cross-referenced record of what you did
  on different days with different ideas. This could help with strengthening memory and recall.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Evernote soured on me when Evernote the company began to hop on the commercialization train, leaving many
long-standing and basic user interface bugs unfixed while they spent all their time and effort developing
and marketing products like digital pens and special paper that would convert handwritten notes into Evernote
notes. It was absurd.&lt;/p&gt;
&lt;p&gt;Ultimately, the Achilles Heel was the fact that their application was a walled garden of content, in a format
that was complicated to export and in a custom XML format that had to be picked apart to get your stuff out.&lt;/p&gt;
&lt;p&gt;Combined with the UI bugs in the Evernote application, the prospect of sinking time and effort into organizing
my "external brain" in the form of notes in their walled garden application made no sense.&lt;/p&gt;
&lt;p&gt;We also discovered a problem with our method of capturing external information. If information is
simply dumped wholesale into a search engine, as the Web Clipper did, it created an enormous amount of
noise in search results. Nothing useful gets unearthed, no new connections are made.
Too much content leads to no meaning.&lt;/p&gt;
&lt;p&gt;Ideas need to be carefully extracted from their environment and placed in a fresh, empty note, with plenty of space to grow.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;We have approximately one billion GitHub repositories and/or Gists accumulated from
our various side projects and distractions. Of these, several are just plain old readmes, because you can
make a Readme look like a million bucks by adding some lorem ipsum and some fake badges from badge.io,
and Markdown is a very convenient way to write up technical content (except math, but even that problem has solutions)
(get it).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AMP (Apache + MySQL + PHP) and DynDNS&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;In the early 2010s we discovered the wonder of hosting our own website
on our own machine, thanks to the now-defunct DynDNS service. By running this wonderful desktop widget 
you could turn a local server into a public website, and we began the time-honored tradition of nerds everywhere
of using technology to document our adventures with technology, and to document the technology we were using to
run the technology used to document our adventures with technology. All gone now, but some of the pages live on
somewhere on &lt;a href="https://charlesreid1.com/wiki"&gt;https://charlesreid1.com/wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="the-enlightenment"&gt;The Enlightenment:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Joplin&lt;/strong&gt;: &lt;/p&gt;
&lt;p&gt;A sensible alternative to Evernote that we wish we had discovered sooner.
A nice, easy-to-use, open-source application that implements the Evernote concept, but using Markdown,
simple flat text files, optional backup via cloud synchronization service, encryption, and many other features,
all wrapped in a handsome and simple UI. (Why... Why didn't we discover it sooner??)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MediaWiki&lt;/strong&gt;: &lt;/p&gt;
&lt;p&gt;While we were learning about PHP, we discovered that MediaWiki, the software
that runs Wikipedia, is built on PHP, and we spun up our own wiki. We have maintained that same
wiki for over a decade at &lt;a href="https://charlesreid1.com/wiki/"&gt;https://charlesreid1.com/wiki/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="the-modern-era"&gt;The Modern Era:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Private MediaWiki Zettelkasten&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;We have reached a point where we know both what we want and what technology
can provide it. MediaWiki is that technology. In the blog posts that follow, we will detail the reasons we think
MediaWiki is the best choice for zettelkasten software, and how we've used MediaWiki features to supercharge
our note-taking, thinking, and information retention.&lt;/p&gt;
&lt;h2 id="zettelkasten-is-not-a-public-wiki"&gt;Zettelkasten Is Not A Public Wiki&lt;/h2&gt;
&lt;p&gt;We use our zettelkasten MediaWiki (hereafter referred to as the "private wiki") the same way a person would use a 
private journal or appointment book: it is not intended for public consumption. So to be clear, we do not use our 
public wiki &lt;a href="https://charlesreid1.com/wiki"&gt;https://charlesreid1.com/wiki&lt;/a&gt; as the zettelkasten - we have a totally separate private wiki
serving that role.&lt;/p&gt;
&lt;p&gt;(That being said, a lot of the patterns we developed for using our public wiki for note-taking, studying, and side
projects ended up being very helpful for the private wiki.)&lt;/p&gt;
&lt;h2 id="private-wiki-details"&gt;Private Wiki Details&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Where is the private wiki run?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We run it on a desktop server sitting in the living room, so that we have physical access to the machine
  (for troubleshooting, backups, security, and fast local network)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What software is it running?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The desktop server runs Linux, the MediaWiki software, plus an Apache server with PHP enabled&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MediaWiki can be a bit complicated to get up and running and properly configured, and is the biggest hurdle to
  setting up a private wiki. But the payoff is tremendous.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have made our personal situation more complicated by using Docker to run MediaWiki, MySQL, Apache, PHP, and
  an Nginx reverse proxy via networked containers. &lt;strong&gt;&lt;em&gt;We do not recommend our Docker pod approach to anyone, ever.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The private wiki pod looks similar to the pod that runs the public wiki, pod-charlesreid1
  (&lt;a href="https://github.com/charlesreid1-docker/pod-charlesreid1"&gt;https://github.com/charlesreid1-docker/pod-charlesreid1&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What network is it on? How do you keep it private, but also accessible remotely?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The private wiki server is connected to a &lt;a href="https://www.tinc-vpn.org/"&gt;Tinc&lt;/a&gt; virtual private network in the cloud.
  Tinc can form mesh VPN networks, meaning if two VPN clients (the wiki server and a laptop accessing the wiki)
  live on the same local network with very short hop, but the VPN server is hundreds of miles away, the traffic can
  traverse the shortest route (local network only), rather than having to pass through the server, with a higher 
  latency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When away from home, any machine that is a VPN client (for example, a work laptop and a personal laptop)
  can access the private wiki. Tinc uses certificates for identity verification, and becoming a client
  requires copying a client certificate to the VPN server.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How do you make URLs pretty, so the private wiki is available at wiki.example.com?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Making the private wiki available at pretty URLs (using a domain you own) works as follows:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a public DNS entry for wiki.example.com that points to an IP at a local network IP address, like
  &lt;code&gt;10.1.2.3&lt;/code&gt;. This should be the VPN IP address of the private wiki server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When random people visit wiki.example.com, it will redirect them to that local network IP address, 
  which will never resolve to the private wiki because they will never be connected to the VPN network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When VPN clients visit wiki.example.com, it will redirect them to that local network IP address,
  which will route the traffic to the private wiki server via the VPN network connection. It will
  load just like a normal site.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How do you handle HTTPS and SSL Certificates?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For the above to actually work and for the page to load, the browser will want a certificate for wiki.example.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are using LetsEncrypt, so periodically we have to switch the DNS entry from the private IP address to a public
  IP address, perform the certificate renewal process on that machine, and then switch the DNS entry back.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the private wiki server is behind a NAT and not publicly accessible, then the machine that renews the
  certificate will be separate from the machine that runs the private wiki. In this case, certificates
  must be copied from one machine to another. That turns out to be complicated, because LetsEncrypt cert files
  are owned by root, and LetsEncrypt is extremely picky about its entire directory structure - anything in the
  wrong place will cause mysterious certbot failures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the DNS provider doesn't allow programmatic DNS changes, then the above certificate renewal process
  can only be done manually.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the DNS provider does allow programmatic DNS changes, make sure it's locked down, for example by restricting
  the source IP of API calls that make DNS changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Is that all?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Probably not, but we did our best. Good luck.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The end result is a private MediaWiki that's all yours! Available at your own domain! Accessible only to you!&lt;/p&gt;
&lt;p&gt;It's an exciting feeling, opening a brand-new wiki for the first time.&lt;/p&gt;
&lt;h2 id="what-will-be-covered-in-this-series"&gt;What Will Be Covered In This Series?&lt;/h2&gt;
&lt;p&gt;A brief preview of what we will cover in this series of blog posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to use daily/monthly pages to organize notes and work&lt;/li&gt;
&lt;li&gt;How to use MediaWiki Categories and Templates to connect notes together&lt;/li&gt;
&lt;li&gt;How to keep track of random bits of information like links&lt;/li&gt;
&lt;li&gt;How to keep track of todo lists and projects&lt;/li&gt;
&lt;li&gt;How to organize information on a page, and general organization patterns&lt;/li&gt;
&lt;li&gt;How to make the wiki easy to navigate&lt;/li&gt;
&lt;li&gt;Flag templates&lt;/li&gt;
&lt;li&gt;Rolling text templates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check back soon for links.&lt;/p&gt;</content><category term="Zettelkasten"></category><category term="zettelkasten"></category><category term="mediawiki"></category><category term="vpn"></category><category term="note taking"></category><category term="memory"></category></entry><entry><title>June 2021 TILs</title><link href="https://charlesreid1.github.io/june-2021-tils.html" rel="alternate"></link><published>2021-06-30T19:00:00-07:00</published><updated>2021-06-30T19:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2021-06-30:/june-2021-tils.html</id><summary type="html">&lt;p&gt;This month, I started keeping track of some of the surprising things
that I learn. I'm using a Slack channel to collect them in one place,
which gives me a nice colelction of personal TILs that I can review
occasionally - and share with other people!&lt;/p&gt;
&lt;p&gt;June 27, 2021:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TIL "headship" is a word.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;June 29, 2021:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TIL Superfund sites name a Potentially Responsible Party (PRP) who is held responsible (through legal and administrative actions) for cleaning up the site.
  (&lt;a href="https://www.epa.gov/superfund/superfund-glossary#p"&gt;Link&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TIL that Operation Valuable/Fiend, an early CIA operation to overthrow the leftist government of
  Albania. It was sabotaged by â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This month, I started keeping track of some of the surprising things
that I learn. I'm using a Slack channel to collect them in one place,
which gives me a nice colelction of personal TILs that I can review
occasionally - and share with other people!&lt;/p&gt;
&lt;p&gt;June 27, 2021:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TIL "headship" is a word.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;June 29, 2021:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TIL Superfund sites name a Potentially Responsible Party (PRP) who is held responsible (through legal and administrative actions) for cleaning up the site.
  (&lt;a href="https://www.epa.gov/superfund/superfund-glossary#p"&gt;Link&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TIL that Operation Valuable/Fiend, an early CIA operation to overthrow the leftist government of
  Albania. It was sabotaged by Kim Philby, a Cambridge-educated double agent working as a Soviet mole inside MI6
  (British Intelligence Service). (&lt;a href="https://en.wikipedia.org/wiki/Operation_Valuable#Valuable_Project/Fiend"&gt;Link&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TIL about the Philby Tape. In a secret videotape from 1981, discovered by the BBC in the Stasi
  (East German Secret Police) archives in 2016, Philby describes his experience being recruited as a Soviet spy,
  his role in sabotaging various operations, and why he believes that his sabotage of Operation Valuable/Fiend
  prevented World War 3. (&lt;a href="https://www.bbc.co.uk/sounds/play/b076v1zq"&gt;Link&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;June 30, 2021:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TIL ginger, cardamom, and tumeric are all in the same plant family.
  (&lt;a href="https://en.wikipedia.org/wiki/Ginger"&gt;Link&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TIL the world produced 2.8 million tons of ginger in 2018. (I have no idea how to put that into
  perspective.) (&lt;a href="https://en.wikipedia.org/wiki/Ginger"&gt;Link&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="TIL"></category><category term="til"></category></entry><entry><title>Applied Gitflow</title><link href="https://charlesreid1.github.io/applied-gitflow.html" rel="alternate"></link><published>2020-07-01T12:00:00-07:00</published><updated>2020-07-01T12:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2020-07-01:/applied-gitflow.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-we-apply-gitflow"&gt;How We Apply Gitflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-tools"&gt;The Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recap-of-gitflow"&gt;Recap of Gitflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying-and-releasing"&gt;Deploying and Releasing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#environment-file"&gt;Environment File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy-action"&gt;Deploy Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#release-action"&gt;Release Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#release-script"&gt;Release Script&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#breaking-it-down"&gt;Breaking It Down&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#makefile"&gt;Makefile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-details"&gt;More Details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;This is a retroactive blog post. This post was authored in February 2022,
using material authored in July 2020.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The most up-to-date version of this content is here: &lt;a href="https://charlesreid1.com/wiki/Applied_Gitflow"&gt;https://charlesreid1.com/wiki/Applied_Gitflow&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="how-we-apply-gitflow"&gt;How We Apply Gitflow&lt;/h2&gt;
&lt;p&gt;In some prior blog posts, we've covered a few patterns that we use for software development,
including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.github.io/automatically-generating-up-to-date-requirementstxt-for-python-projects.html"&gt;Automatically generating requirements.txt files with pinned versions for Python
  projects&lt;/a&gt;,
  which covered a Makefile rule â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-we-apply-gitflow"&gt;How We Apply Gitflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-tools"&gt;The Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recap-of-gitflow"&gt;Recap of Gitflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying-and-releasing"&gt;Deploying and Releasing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#environment-file"&gt;Environment File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy-action"&gt;Deploy Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#release-action"&gt;Release Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#release-script"&gt;Release Script&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#breaking-it-down"&gt;Breaking It Down&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#makefile"&gt;Makefile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-details"&gt;More Details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;This is a retroactive blog post. This post was authored in February 2022,
using material authored in July 2020.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The most up-to-date version of this content is here: &lt;a href="https://charlesreid1.com/wiki/Applied_Gitflow"&gt;https://charlesreid1.com/wiki/Applied_Gitflow&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="how-we-apply-gitflow"&gt;How We Apply Gitflow&lt;/h2&gt;
&lt;p&gt;In some prior blog posts, we've covered a few patterns that we use for software development,
including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.github.io/automatically-generating-up-to-date-requirementstxt-for-python-projects.html"&gt;Automatically generating requirements.txt files with pinned versions for Python
  projects&lt;/a&gt;,
  which covered a Makefile rule that would programmatically generate a fresh, up-to-date requirements.txt file
  for a Python project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.github.io/incorporating-terraform-commands-into-makefiles.html"&gt;Incorporating Terraform commands into
  Makefiles&lt;/a&gt; to make it easy
  to use &lt;code&gt;make&lt;/code&gt; and terraform to manage multiple cloud deployments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.github.io/git-workflows-part-1-supercharging-your-git-config.html"&gt;Git workflows: supercharging your git
  config&lt;/a&gt;, which covers
  some tricks and aliases for the git configuration file that makes some git operations a lot easier&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.github.io/git-workflows-part-3-refactoring-large-branches-and-pull-requests.html"&gt;Git workflows: refactoring large branches and pull
  requests&lt;/a&gt;,
  which covered strategies and techniques for refactoring a large set of changes
  or pull request into smaller chunks that are simpler and easier to review,
  without having to start from scratch&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post, we'll get into some details about how we manage software in git repositories.&lt;/p&gt;
&lt;p&gt;Specifically, we want to provide some details about how gitflow looks
when it's being used to manage software with different versions,
and when that software is being deployed in multiple environments.&lt;/p&gt;
&lt;p&gt;The original gitflow pattern doesn't talk much about how software
deployments in multiple environments fits in with the gitflow model,
or even &lt;em&gt;if&lt;/em&gt; it fits in the gitflow model.&lt;/p&gt;
&lt;p&gt;With a few adjustments and patterns, gitflow can easily handle both.
In this post we'll share patterns we have found useful when using
gitflow to manage both deployments and releases.&lt;/p&gt;
&lt;h2 id="the-tools"&gt;The Tools&lt;/h2&gt;
&lt;p&gt;The main tool for this writeup is git, used for version control of the repository. GitHub and Gitea provide an
interface to manage the git repository and to collaborate/review code. We use the gitflow model for managing
branches and code, so we'll summarize it, and provide a link with the details. &lt;/p&gt;
&lt;p&gt;We are also using a cloud provider where we upload the code to the cloud, and the code is run there. 
(Think AWS lambda function.) That code is separate from the git repository, so we need a way to track
what code is in what environment. We'll cover how we do that, too. &lt;/p&gt;
&lt;h2 id="recap-of-gitflow"&gt;Recap of Gitflow&lt;/h2&gt;
&lt;p&gt;Since this post is talking about how to apply &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;Gitflow&lt;/a&gt;,
let's go through a quick recap of how it works.&lt;/p&gt;
&lt;p&gt;Gitflow requires that a few branches be created, but
let's assume you're working in a repo already set up with Gitflow.
In that case, regular development work looks like thi:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;develop&lt;/code&gt; branch is where the newest version is being worked on&lt;/li&gt;
&lt;li&gt;Specific fixes or features go into their own feature branch&lt;/li&gt;
&lt;li&gt;Feature branches are reviewed/tested before being merged into &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When it is time for a new version, the accumulated features on &lt;code&gt;develop&lt;/code&gt; are
  put into a new branch for the new version.&lt;/li&gt;
&lt;li&gt;When the new version is ready, the &lt;code&gt;main&lt;/code&gt; branch is updated to point to the new version branch.
  A new release is made from the main branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is also a workflow for bug fixes for versions that have already been released:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new hotfix branch is created from the version branch (which is also what the &lt;code&gt;main&lt;/code&gt; branch is pointing to)&lt;/li&gt;
&lt;li&gt;The changes are added to the hotfix branch&lt;/li&gt;
&lt;li&gt;The hotfix branch is merged back into the version branch, the version number is bumped, and a new release is cut.&lt;/li&gt;
&lt;li&gt;The hotfix branch is also merged into the &lt;code&gt;develop&lt;/code&gt; branch, so that it will make it into future releases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="deploying-and-releasing"&gt;Deploying and Releasing&lt;/h2&gt;
&lt;p&gt;As the original author himself says on the page describing Gitflow,
this model doesn't say much about how to handle deployments into
multiple cloud environments.&lt;/p&gt;
&lt;p&gt;There are two main actions that an operator can take, using the system we have devised:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deploy code (upload the code to a cloud stage, and have that version of the code running in the cloud)&lt;/li&gt;
&lt;li&gt;release code (update which version of the code is considered the "latest version")&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, the actions the operator can take will require certain variables to be defined - the location of the
source code, and which cloud environment (development, integration, production) we're deploying to, for example. Those
variables are defined using environment variables, so that we can use scripts to do deploy or release actions.&lt;/p&gt;
&lt;h2 id="environment-file"&gt;Environment File&lt;/h2&gt;
&lt;p&gt;Before covering the deploy and release scripts, here is an example environment file. The example release script
below refers to these variables. The deploy script (no example provided, since it will inevitably be case-specific)
also uses these environment variables. More environment variables can be added as needed, to grow with the
complexity of the software and deployment process.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#!/bin/bash

export PROJECTNAME_PACKAGENAME_HOME=&amp;quot;${HOME}/path/to/package&amp;quot;
export PROJECTNAME_PACKAGENAME_STAGE=&amp;quot;dev&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="deploy-action"&gt;Deploy Action&lt;/h2&gt;
&lt;p&gt;The deploy action is the action that takes the code in its current state and uploads it to the cloud. That can take
many forms depending on the cloud service being used, but for example deploying an AWS lambda function would mean
creating a new .zip file from the lambda function code, and uploading that zip file to the corresponding lambda
function using the AWS CLI.&lt;/p&gt;
&lt;p&gt;The deploy action is a script that is run. It deploys the code in its current state in the repository. Environment
variables are used to parameterize the script. There are environment variables to specify the repository location
on disk, to specify the deployment stage, and any others that are needed.&lt;/p&gt;
&lt;p&gt;The deploy script is also the place to assert certain conditions are true before the deploy action is taken. We
keep it simple, but these can be expanded on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check various environment variables are set&lt;/li&gt;
&lt;li&gt;Check environment variable values&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These can be done in the deploy script directly, if the checks are simple, or they can be moved to an entire
separate script like a hypothetical &lt;code&gt;check_env.sh&lt;/code&gt;, which would be run before the deploy script (using a make rule
dependency).&lt;/p&gt;
&lt;p&gt;(Note that if checks are TOO strict, they can interfere with deployment, so they should be adjusted accordingly.) &lt;/p&gt;
&lt;p&gt;Another step the deployment action might have before the actual deployment is to assemble any deployment
configuration files. For example, if the deployment process requires a JSON file that is dynamically assembled from
other bits of information, that could go in its own script that would be run before the deploy script (using a make
rule dependency).&lt;/p&gt;
&lt;p&gt;For this writeup, we keep things simple and do all the checks in the deploy script.&lt;/p&gt;
&lt;h2 id="release-action"&gt;Release Action&lt;/h2&gt;
&lt;p&gt;The release action can be thought of as a git repository operation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When does a release happen?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When using gitflow, features and bugfixes will accumulate in the develop branch. Eventually the time for a new
release will come (scheduled, or because enough changes have accumulated). A new branch will be created that will
"freeze" the code in whatever state the develop branch is in. (Freeze is in quotes, because there are small changes
that need to be made to that "frozen" code before a release happens, but those are changes like bumping the version
number - no core changes.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where does the release script come in?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once the code in the release branch is ready to go, the release script is run. The script will create a git tag, reset the head of the branch corresponding to the release (the "stable release" branch, usually main) to the head of the pre-release branch - whatever branch you're on when the release script is being run. Using our convention, we name this branch release/v1 (prefixed with release/ and a v plus the major version number only). &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What does the release script do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The release script starts by running some checks to make sure the code is in a state that's ready to release. There
must be no uncommitted files in the repo, there must be no changes to tracked files, and there must be no unpushed
changes in the repository (local commits that haven't been pushed to the remote).&lt;/p&gt;
&lt;p&gt;If those conditions are met, then the release script proceeds. The release script will start by creating a git tag,
which records the date, time, and branch being released to. Next, the head of the branch to release to (usually
main) will be reset to the head of the branch to release from (the "frozen" code that's all fixed up for the
release). Finally, the release script will push the results of the reset operation, and the new tag, to the remote.&lt;/p&gt;
&lt;p&gt;To keep it more general, the release script uses the concept of a "source" and "destination" branch - the source is
the branch to release from, the destination is the branch to release to. The destination branch is the one whose
head is reset to the source branch's head. (That should help clarify the script below a bit more.) &lt;/p&gt;
&lt;p&gt;Also, the Makefile (which we cover below) will take care of providing the right destination and source branch
names.&lt;/p&gt;
&lt;h2 id="release-script"&gt;Release Script&lt;/h2&gt;
&lt;p&gt;Here is an example release script, which we would add to our repository at &lt;code&gt;scripts/release.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -euo pipefail
&lt;span class="nb"&gt;set&lt;/span&gt; -x

&lt;span class="nv"&gt;REMOTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;origin&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Check that environment file has been sourced&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECTNAME_PACKAGENAME_HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;You must set the $PROJECTNAME_PACKAGENAME_HOME environment variable to proceed.&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# Check the script is being called correctly&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$#&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Given a source (pre-release) branch and a destination (release) branch,&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;this script does the following:&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; - create a git tag&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; - reset head of destination branch to head of source branch&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; - push result to git repo&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Usage: &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; source_branch dest_branch&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Example: &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; release/v2 main&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# Check that all changes are committed&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; ! git diff-index --quiet HEAD --&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You have uncommitted files in your Git repository. Please commit or stash them.&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROMOTE_FROM_BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="nv"&gt;PROMOTE_DEST_BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;

&lt;span class="c1"&gt;# Check that there are no local commits that haven&amp;#39;t been pushed yet&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git log &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REMOTE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMOTE_FROM_BRANCH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;..&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMOTE_FROM_BRANCH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You have unpushed changes on your promote from branch &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMOTE_FROM_BRANCH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;! Aborting.&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nv"&gt;RELEASE_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date -u +&lt;span class="s2"&gt;&amp;quot;%Y-%m-%d-%H-%M-%S&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROMOTE_DEST_BRANCH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.release

&lt;span class="c1"&gt;# Check whether there are commits on the destination branch that aren&amp;#39;t on the source branch (changes would be thrown away)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git --no-pager log --graph --abbrev-commit --pretty&lt;span class="o"&gt;=&lt;/span&gt;oneline --no-merges -- &lt;span class="nv"&gt;$PROMOTE_DEST_BRANCH&lt;/span&gt; ^&lt;span class="nv"&gt;$PROMOTE_FROM_BRANCH&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Warning: The following commits are present on &lt;/span&gt;&lt;span class="nv"&gt;$PROMOTE_DEST_BRANCH&lt;/span&gt;&lt;span class="s2"&gt; but not on &lt;/span&gt;&lt;span class="nv"&gt;$PROMOTE_FROM_BRANCH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    git --no-pager log --graph --abbrev-commit --pretty&lt;span class="o"&gt;=&lt;/span&gt;oneline --no-merges &lt;span class="nv"&gt;$PROMOTE_DEST_BRANCH&lt;/span&gt; ^&lt;span class="nv"&gt;$PROMOTE_FROM_BRANCH&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;\nYou must transfer them, or overwrite and discard them, from branch &lt;/span&gt;&lt;span class="nv"&gt;$PROMOTE_DEST_BRANCH&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# Check that untracked files are not present&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; ! git --no-pager diff --ignore-submodules&lt;span class="o"&gt;=&lt;/span&gt;untracked --exit-code&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Working tree contains changes to tracked files. Please commit or discard your changes and try again.&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# Perform the actual release operations&lt;/span&gt;
git fetch --all
git -c advice.detachedHead&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; checkout &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REMOTE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="nv"&gt;$PROMOTE_FROM_BRANCH&lt;/span&gt;
git checkout -B &lt;span class="nv"&gt;$PROMOTE_DEST_BRANCH&lt;/span&gt;
git tag &lt;span class="nv"&gt;$RELEASE_TAG&lt;/span&gt;
git push --force &lt;span class="nv"&gt;$REMOTE&lt;/span&gt; &lt;span class="nv"&gt;$PROMOTE_DEST_BRANCH&lt;/span&gt;
git push --tags &lt;span class="nv"&gt;$REMOTE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="breaking-it-down"&gt;Breaking It Down&lt;/h3&gt;
&lt;p&gt;Let's break down the essential commands, starting with the checks: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff-index --quiet HEAD --&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checks that all changes are committed&lt;/li&gt;
&lt;li&gt;git diff-index is basically the same as git diff, but restricted to the working tree or index only&lt;/li&gt;
&lt;li&gt;See &lt;a href="https://stackoverflow.com/q/24197606"&gt;https://stackoverflow.com/q/24197606&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git log ${REMOTE}/${PROMOTE_FROM_BRANCH}..${PROMOTE_FROM_BRANCH}&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checks the difference between the remote and local versions of the promote from branch&lt;/li&gt;
&lt;li&gt;If this command turns up any commits, those are all local, unpushed commits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;RELEASE_TAG=$(date -u +"%Y-%m-%d-%H-%M-%S")-${PROMOTE_DEST_BRANCH}.release&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creates a name for the git tag with the date and time, and branch being released to&lt;/li&gt;
&lt;li&gt;This stores the release history in git tags&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git --no-pager log --graph --abbrev-commit --pretty=oneline --no-merges -- $PROMOTE_DEST_BRANCH ^$PROMOTE_FROM_BRANCH)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This command checks for any commits that are on the destination branch and not on the source branch&lt;/li&gt;
&lt;li&gt;Because the destination branch's head will be reset, commits on the destination branch but not on the source branch would be lost&lt;/li&gt;
&lt;li&gt;(This script could optionally add a --force flag, to power through the release even if this check fails)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git --no-pager diff --ignore-submodules=untracked --exit-code&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checks if there are any untracked changes in the working tree&lt;/li&gt;
&lt;li&gt;If there are, the release can't proceed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now here's a breakdown of the release process commands:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git fetch --all&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensures we have an up-to-date picture of where the remotes are at&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git -c advice.detachedHead=false checkout ${REMOTE}/$PROMOTE_FROM_BRANCH&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Checks out the source branch from the remote&lt;/li&gt;
&lt;li&gt;This command is the reason why we have to make sure all local commits are pushed to the remote&lt;/li&gt;
&lt;li&gt;The release process uses the remote version of the source/destination branches&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git checkout -B $PROMOTE_DEST_BRANCH&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This step forces the destination branch to be the same as the source branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git tag $RELEASE_TAG&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creates a record of what was released and when via a git tag&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git push --force $REMOTE $PROMOTE_DEST_BRANCH&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push --tags $REMOTE&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pushes the results of the operations to the remote&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="makefile"&gt;Makefile&lt;/h2&gt;
&lt;p&gt;Now we add a Makefile with rules for releasing and deploying.&lt;/p&gt;
&lt;p&gt;The first rule is the release rule - run this when the current branch is release/vX and it's ready for it's final release.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;CB&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell git branch --show-current&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;release_mainx&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @echo &lt;span class="s2"&gt;&amp;quot;Releasing current branch &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CB&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; to mainx&amp;quot;&lt;/span&gt;
    scripts/release.sh &lt;span class="k"&gt;$(&lt;/span&gt;CB&lt;span class="k"&gt;)&lt;/span&gt; mainx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;$(CB)&lt;/code&gt; is short for current branch.&lt;/p&gt;
&lt;p&gt;Now on to the deploy rule.&lt;/p&gt;
&lt;p&gt;Because we might want to deploy the code in an arbitrary state (temporarily deploying a feature branch to the development stage, for example), the deploy script and deploy rule are intended to deploy the code in its current state, and don't have the same kinds of checks as the release script. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    scripts/deploy.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As mentioned above, the deploy script will be case-specific so we don't provide an example.&lt;/p&gt;
&lt;p&gt;How does the deploy script know which environment to deploy to? It depends on the environment file that was
sourced, and the value of the &lt;code&gt;PROJECTNAME_PACKAGENAME_STAGE&lt;/code&gt; variable. The deploy script should be checking that
that environment variable is set to a valid value before proceeding with the deploy.&lt;/p&gt;
&lt;h2 id="more-details"&gt;More Details&lt;/h2&gt;
&lt;p&gt;For more details, see the full writeup on our wiki here:
&lt;a href="https://charlesreid1.com/wiki/Applied_Gitflow"&gt;https://charlesreid1.com/wiki/Applied_Gitflow&lt;/a&gt;&lt;/p&gt;</content><category term="Git"></category><category term="git"></category><category term="github"></category><category term="programming"></category><category term="gitflow"></category><category term="hubflow"></category><category term="patterns"></category></entry><entry><title>A Singleton Configuration Class in Python</title><link href="https://charlesreid1.github.io/a-singleton-configuration-class-in-python.html" rel="alternate"></link><published>2020-04-28T16:00:00-07:00</published><updated>2020-04-28T16:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2020-04-28:/a-singleton-configuration-class-in-python.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-singleton-pattern"&gt;The Singleton Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#get-variable-functions"&gt;Get Variable Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#config-functions"&gt;Config Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reset-method"&gt;Reset method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-a-configuration-context-manager"&gt;Creating a configuration context manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="overview"&gt;Overview&lt;/h1&gt;
&lt;p&gt;In this post we cover a strategy for managing configurations for programs using
a Singleton pattern to create a static &lt;code&gt;Config&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;This allows the user to create an instance of the &lt;code&gt;Config&lt;/code&gt; class, pointing it
to a specific config file, which it loads into memory.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Config&lt;/code&gt; class provides several static methods for accessing configuration
options from the config file. Here's an example of its usage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Config(&amp;#39;/path/to/config.json&amp;#39;)

if Config.get_foo() == &amp;quot;bar&amp;quot;:
    do â€¦&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-singleton-pattern"&gt;The Singleton Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#get-variable-functions"&gt;Get Variable Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#config-functions"&gt;Config Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reset-method"&gt;Reset method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-a-configuration-context-manager"&gt;Creating a configuration context manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="overview"&gt;Overview&lt;/h1&gt;
&lt;p&gt;In this post we cover a strategy for managing configurations for programs using
a Singleton pattern to create a static &lt;code&gt;Config&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;This allows the user to create an instance of the &lt;code&gt;Config&lt;/code&gt; class, pointing it
to a specific config file, which it loads into memory.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Config&lt;/code&gt; class provides several static methods for accessing configuration
options from the config file. Here's an example of its usage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Config(&amp;#39;/path/to/config.json&amp;#39;)

if Config.get_foo() == &amp;quot;bar&amp;quot;:
    do_stuff()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The principle is to &lt;strong&gt;define one configuration file location, and be done with it.&lt;/strong&gt;
The configuration file is JSON formatted, but the pattern can be adapted to use
any format.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Config&lt;/code&gt; class can also be used to wrap and process both variables in the configuration
file &lt;em&gt;and&lt;/em&gt; environment variables.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Config&lt;/code&gt; class implements a &lt;strong&gt;separation of concerns&lt;/strong&gt; by only processing top-level
configuration variable options, and leaving more detailed configuration file parsing
to the classes that need it. This allows for more flexible config files.&lt;/p&gt;
&lt;h1 id="the-singleton-pattern"&gt;The Singleton Pattern&lt;/h1&gt;
&lt;p&gt;The Singleton pattern involves the use of instance variables, which the variables
&lt;code&gt;_CONFIG_FILE&lt;/code&gt; and &lt;code&gt;_CONFIG&lt;/code&gt; are. These are shared across all instances of class
&lt;code&gt;Config&lt;/code&gt; and can be accessed via &lt;code&gt;Config._CONFIG_FILE&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;The location of the config file can be set in the constructor,
or can be provided via the &lt;code&gt;CONFIG_FILE&lt;/code&gt; environment variable.
The config class also provides a method for accessing environment
variables that are required by the Config class, and raising a
custom exception if it is not present.&lt;/p&gt;
&lt;p&gt;The constructor starts by checking that the configuration file exists, then loads
the configuration file into memory (at &lt;code&gt;Config._CONFIG&lt;/code&gt; as a dictionary):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;#########################&lt;/span&gt;
    &lt;span class="c1"&gt;# Begin Singleton Section&lt;/span&gt;
    &lt;span class="c1"&gt;#########################&lt;/span&gt;

    &lt;span class="n"&gt;_CONFIG_FILE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;typing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;_CONFIG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;typing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;config_file&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;config_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_required_env_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CONFIG_FILE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Check that specified config file exists&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Use singleton pattern to store config file location/load config once&lt;/span&gt;
        &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_CONFIG_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_file&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_CONFIG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_config_file&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_CONFIG_FILE&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_required_env_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;envvar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;envvar&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ConfigException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Please set the &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;envvar&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; environment variable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;envvar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aside from the constructor, every method in the &lt;code&gt;Config&lt;/code&gt; class is a
&lt;code&gt;@staticmethod&lt;/code&gt; or a &lt;code&gt;@classmethod&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="get-variable-functions"&gt;Get Variable Functions&lt;/h1&gt;
&lt;p&gt;We add two additional methods to get configuration variables: one to get variables
from the config file, one to get environment variables. Here they are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_required_env_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;envvar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;envvar&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Please set the &lt;/span&gt;&lt;span class="si"&gt;{envvar}&lt;/span&gt;&lt;span class="s2"&gt; environment variable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;envvar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_required_config_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configvar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_CONFIG&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;configvar&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_CONFIG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Please set the &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;configvar&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; variable in the config file &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_CONFIG_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_CONFIG&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;configvar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We saw the get_required_env_var()&lt;code&gt;function in action in the constructor.
The&lt;/code&gt;get_required_config_var()` can be useful for config variables that
are dependent on other config variables.&lt;/p&gt;
&lt;h1 id="config-functions"&gt;Config Functions&lt;/h1&gt;
&lt;p&gt;Continuing with the &lt;code&gt;Config&lt;/code&gt; class defined above,
we now define methods that implement logic for specific 
configuration variables.&lt;/p&gt;
&lt;p&gt;Here are two example config variables.&lt;/p&gt;
&lt;p&gt;The variable &lt;code&gt;foo&lt;/code&gt; is set using the configuration file.
The configuration file is a dictionary, meaning it consists
of key-value pairs, so the variable &lt;code&gt;foo&lt;/code&gt; is set by the value
corresponding to the &lt;code&gt;foo&lt;/code&gt; key in the config file.&lt;/p&gt;
&lt;p&gt;For example, using the following simple configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{
    &amp;quot;foo&amp;quot;: &amp;quot;hello world&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;if the &lt;code&gt;Config&lt;/code&gt; class is initialized with that configuration file,
&lt;code&gt;Config.get_foo_var()&lt;/code&gt;  will return the string &lt;code&gt;hello world&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, the &lt;code&gt;bar&lt;/code&gt;variable is set using the environment variable &lt;code&gt;BAR&lt;/code&gt;.
If the &lt;code&gt;BAR&lt;/code&gt; variable is not set, the program will raise an exception
when &lt;code&gt;Config.get_bar_var()&lt;/code&gt; is called.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="n"&gt;above&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="c1"&gt;#############################&lt;/span&gt;
    &lt;span class="c1"&gt;# Begin Configuration Section&lt;/span&gt;
    &lt;span class="c1"&gt;#############################&lt;/span&gt;

    &lt;span class="n"&gt;_FOO&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;typing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;_BAR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;typing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_foo_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Example variable that is set in the config file (preferred)&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_FOO&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_FOO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_required_config_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_FOO&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_bar_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Example variable that is set via env var (not preferred)&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_BAR&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_BAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_required_env_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;BAR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_BAR&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_wuz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_WUZ&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wuz&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_CONFIG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_WUZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_required_env_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WUZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_WUZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_CONFIG&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wuz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_WUZ&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Error: Path &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_WUZ&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not a directory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_WUZ&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;wuz&lt;/code&gt; variable, in this example, is a variable that can be set with a config
file variable, or (if it is not present in the config file) with an environment
variable. The &lt;code&gt;wuz&lt;/code&gt; variable msut also be a path, so there is logic for checking
whether the path exists.&lt;/p&gt;
&lt;h1 id="reset-method"&gt;Reset method&lt;/h1&gt;
&lt;p&gt;It can be useful to clear out an existing config file in order to
load a new config file - specifically, when testing. Here we define a &lt;code&gt;reset()&lt;/code&gt;
method that clears out variable values. We will show an example of how to
use the &lt;code&gt;reset()&lt;/code&gt; method below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    @classmethod
    def reset(cls) -&amp;gt; None:
        cls._CONFIG_FILE = None
        cls._CONFIG = None
        cls._FOO = None
        cls._BAR = None
        cls._WUZ = None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This could be done more gracefully by iterating over each attribute of the Config class
and only nullifying those attributes whose variable name matches the given pattern (start
with an underscore, only contain capital letters and underscores) using a regular expression.&lt;/p&gt;
&lt;h1 id="creating-a-configuration-context-manager"&gt;Creating a configuration context manager&lt;/h1&gt;
&lt;p&gt;To make tests more convenient, we define a context manager that takes
a dictionary as an input. The context manager creates a temporary file
with the contents of that dictionary, and resets the Config class using
the temporary file as the new config file. This allows tests to be written
using different configurations on the fly, very useful when testing
different configuration options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;peanut_butter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;jelly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;TempConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Temporary configuration file is at &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;config_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_required_config_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;peanut_butter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jelly&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is the context manager class to temporarily replace the configuration
wrapped by the &lt;code&gt;Config&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TempConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Temporarily patch the Config class to use the config&lt;/span&gt;
&lt;span class="sd"&gt;    dictionary specified in the constructor.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config_dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This is the step that&amp;#39;s run when object constructed&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# This is the temp configuration the user specified&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_dict&lt;/span&gt;
        &lt;span class="c1"&gt;# Make a temp dir for our temp config file&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;temp_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdtemp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# Make a temp config file&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;temp_json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkstemp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;temp_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Set the wuz variable to the temporary directory&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wuz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;temp_dir&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This is what&amp;#39;s returned to the &amp;quot;as X&amp;quot; portion of the context manager&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_write_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;temp_json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config_dict&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# Re-init Config with new config file&lt;/span&gt;
        &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;temp_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;temp_json&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Close the context and clean up; the *args are needed in case there is&lt;/span&gt;
&lt;span class="sd"&gt;        an exception (we don&amp;#39;t deal with those here)&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# Delete temp file&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;temp_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Delete temp dir&lt;/span&gt;
        &lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rmtree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;temp_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Reset all config variables&lt;/span&gt;
        &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_write_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Utility method: write string contents to config file&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="next-steps"&gt;Next steps&lt;/h1&gt;
&lt;p&gt;That's it for now. This singleton configuration class is being written into a
new version of &lt;a href="https://charlesreid1.github.io/centillion-a-document-search-engine.html"&gt;centillion&lt;/a&gt;,
which will be &lt;a href="https://github.com/chmreid/centillion/pull/3"&gt;centillion version 2.0&lt;/a&gt;.
This is still a pull request in a centillion fork, though, so it's a work in progress.
Stay tuned!&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="programming"></category><category term="patterns"></category><category term="design patterns"></category><category term="registry"></category><category term="computer science"></category></entry><entry><title>Using Mock API Servers</title><link href="https://charlesreid1.github.io/using-mock-api-servers.html" rel="alternate"></link><published>2020-03-09T19:00:00-07:00</published><updated>2020-03-09T19:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2020-03-09:/using-mock-api-servers.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-mockapiserver-class"&gt;The MockAPIServer Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-basic-unit-test-with-mockapiserver"&gt;A Basic Unit Test with MockAPIServer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;p&gt;In a prior post, we covered how to write a mock API server that stored a thread
as a class attribute and used it to run the server in the background by starting
a thread.&lt;/p&gt;
&lt;p&gt;However, we neglected to cover how to actually &lt;em&gt;use&lt;/em&gt; the mock API server. So here
we include some examples of how you can use the mock API server to write better
tests for components that require interacting with APIs.&lt;/p&gt;
&lt;h1 id="the-mockapiserver-class"&gt;The MockAPIServer Class&lt;/h1&gt;
&lt;p&gt;Let's start with a recap of the mock API â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-mockapiserver-class"&gt;The MockAPIServer Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-basic-unit-test-with-mockapiserver"&gt;A Basic Unit Test with MockAPIServer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;p&gt;In a prior post, we covered how to write a mock API server that stored a thread
as a class attribute and used it to run the server in the background by starting
a thread.&lt;/p&gt;
&lt;p&gt;However, we neglected to cover how to actually &lt;em&gt;use&lt;/em&gt; the mock API server. So here
we include some examples of how you can use the mock API server to write better
tests for components that require interacting with APIs.&lt;/p&gt;
&lt;h1 id="the-mockapiserver-class"&gt;The MockAPIServer Class&lt;/h1&gt;
&lt;p&gt;Let's start with a recap of the mock API server class. Major features included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Inheriting from the base HTTP server class in Python, to take advantage of
  the methods available through it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using a singleton design pattern to start and stop the fake API server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically we create the server, call &lt;code&gt;start_serving()&lt;/code&gt;, and that starts the
server on a thread in the background.&lt;/p&gt;
&lt;p&gt;Here is the source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MockAPIServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseHTTPRequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_addr_port&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9876&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_serving&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Get the bind address and port&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_addr_port&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Create an HTTP server&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_port&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Create a thread to run the server&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Start the server&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop_serving&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Shut down the server&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Let the thread rejoin the worker pool&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ctype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pdict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# Enforce rule: JSON only&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ctype&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="c1"&gt;# Convert received JSON to dict&lt;/span&gt;
        &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content-length&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# Process the json&lt;/span&gt;

        &lt;span class="c1"&gt;# Send a response&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;utf8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_set_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="a-basic-unit-test-with-mockapiserver"&gt;A Basic Unit Test with MockAPIServer&lt;/h1&gt;
&lt;p&gt;Let's make a basic test that uses the &lt;code&gt;MockAPIServer&lt;/code&gt; class. We'll use
&lt;code&gt;unittest&lt;/code&gt; for simplicity, other testing frameworks offer similar
functionality.&lt;/p&gt;
&lt;p&gt;Before testing our code, we'll need to make sure the API URL is configurable,
sicne we will need to get the mock API server's bind address and port and use
those to instruct our code where to find the API server.&lt;/p&gt;
&lt;p&gt;Here is a short example function that we'll test:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;foobar.py&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_api_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A simple function that gets an API endpoint&lt;/span&gt;
&lt;span class="sd"&gt;    and returns if no problems raised.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Assemble our API call&lt;/span&gt;
    &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/hello/world&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urljoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# The basic mock server will just echo our request back&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we write a short test for our foobar script:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;test_foobar.py&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;foobar&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;make_api_call&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestAPICalls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUpClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MockAPIServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_serving&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_api_call&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
        &lt;span class="n"&gt;api_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urljoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;http://&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;make_api_cal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDownClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop_serving&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can run the test like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python test_foobar.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's what happens when we run the test:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;setUpClass()&lt;/code&gt; method is called, which creates a mock API server that starts on
  localhost on port 9876 and runs the server on a thread.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;test_api_call()&lt;/code&gt; method is run, which makes the API call to the mock API server.
  (Nothing interesting is happening on either end, right now, but stay tuned for more
  examples.)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;tearDownClass()&lt;/code&gt; method is called, which stops the mock API server and returns
  the thread worker to the pool of workers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stay tuned for more complicated examples in the future - we are currently working on
extending this mock API server to mock calls to the Github API.&lt;/p&gt;</content><category term="Python"></category><category term="http"></category><category term="server"></category><category term="python"></category><category term="mock"></category><category term="mocking"></category><category term="api"></category><category term="flask"></category><category term="web server"></category></entry><entry><title>Creating Mock API Servers</title><link href="https://charlesreid1.github.io/creating-mock-api-servers.html" rel="alternate"></link><published>2020-02-26T22:00:00-08:00</published><updated>2020-02-26T22:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2020-02-26:/creating-mock-api-servers.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mock-api-server-class"&gt;Mock API Server Class&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#startstop-serving"&gt;Start/Stop Serving&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-bind-addressport"&gt;Getting Bind Address/Port&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#start-serving"&gt;Start Serving&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stop-serving"&gt;Stop Serving&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#handling-requests"&gt;Handling Requests&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#defining-post-response-method"&gt;Defining POST Response Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#putting-it-all-together"&gt;Putting it all together&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="overview"&gt;Overview&lt;/h1&gt;
&lt;p&gt;In this post we discuss a way of mocking an API server during tests.
This technique will let you create a fake API server that can respond
to API calls however you want.&lt;/p&gt;
&lt;p&gt;The technique is twofold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, we create a mock API handler that extends &lt;code&gt;BaseHTTPRequestHandler&lt;/code&gt;, which is the built-in HTTP server
  class in Python. We can extend the server class to control how it responds to requests - to â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mock-api-server-class"&gt;Mock API Server Class&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#startstop-serving"&gt;Start/Stop Serving&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-bind-addressport"&gt;Getting Bind Address/Port&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#start-serving"&gt;Start Serving&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stop-serving"&gt;Stop Serving&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#handling-requests"&gt;Handling Requests&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#defining-post-response-method"&gt;Defining POST Response Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#putting-it-all-together"&gt;Putting it all together&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="overview"&gt;Overview&lt;/h1&gt;
&lt;p&gt;In this post we discuss a way of mocking an API server during tests.
This technique will let you create a fake API server that can respond
to API calls however you want.&lt;/p&gt;
&lt;p&gt;The technique is twofold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, we create a mock API handler that extends &lt;code&gt;BaseHTTPRequestHandler&lt;/code&gt;, which is the built-in HTTP server
  class in Python. We can extend the server class to control how it responds to requests - to implement a
  method to respond to POST requests, we implement a &lt;code&gt;do_POST()&lt;/code&gt; method, to respond to GET requests
  we implement a &lt;code&gt;do_GET()&lt;/code&gt; method, and so on. (In the example below, we restrict the types of requests
  to JSON content only.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second, we use the Singleton design pattern, by implementing 
  two class methods, &lt;code&gt;start_serving()&lt;/code&gt; and &lt;code&gt;stop_serving()&lt;/code&gt;, that
  we can call before and after our tests to set up and tear down
  the fake API server. This method will take care of starting the
  HTTP server on a separate thread, so that it does not block 
  execution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="mock-api-server-class"&gt;Mock API Server Class&lt;/h1&gt;
&lt;p&gt;Let's start with the mock server class. This is going to extend the
&lt;code&gt;BaseHTTPRequestHandler&lt;/code&gt; class from the &lt;code&gt;http.server&lt;/code&gt; module, and
extend it.&lt;/p&gt;
&lt;p&gt;We implement a stub method for the POST response behavior; this is the
only type of request that our mock API server will respond to.&lt;/p&gt;
&lt;p&gt;We also have two stub class methods to start and stop the server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MockAPIServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseHTTPRequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_serving&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop_serving&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="startstop-serving"&gt;Start/Stop Serving&lt;/h2&gt;
&lt;p&gt;We start with the two class methods to start and stop the server.&lt;/p&gt;
&lt;h3 id="getting-bind-addressport"&gt;Getting Bind Address/Port&lt;/h3&gt;
&lt;p&gt;Define another static method to get the address to bind to, and the
port to use; in this case we'll hard code values, but this function
could also find unused networking ports, etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_addr_port&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9876&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="start-serving"&gt;Start Serving&lt;/h3&gt;
&lt;p&gt;Next, the &lt;code&gt;start_serving()&lt;/code&gt; method should start a thread
(using the &lt;code&gt;cls._thread&lt;/code&gt; attribute to store it for later)
and create an underlying HTTP server (and using the &lt;code&gt;self._server&lt;/code&gt;
attribute to store it for later):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_serving&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Get the bind address and port&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_addr_port&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Create an HTTP server&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_port&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Create a thread to run the server&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Start the server&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="stop-serving"&gt;Stop Serving&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;stop_serving()&lt;/code&gt; method stops the thread&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop_serving&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Shut down the server&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Let the thread rejoin the worker pool&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="handling-requests"&gt;Handling Requests&lt;/h2&gt;
&lt;p&gt;The mock API server should only process POST requests, and should
only accept JSON-formatted requests. We can implement those checks
and have the server return a 500 error if clients do not send a
properly formatted JSON request.&lt;/p&gt;
&lt;h3 id="defining-post-response-method"&gt;Defining POST Response Method&lt;/h3&gt;
&lt;p&gt;To define a response to POST requests made to the API we are mocking,
we start by validating the JSON request that is received.&lt;/p&gt;
&lt;p&gt;Note: this utilizes several built-in methods of the HTTP server class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ctype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pdict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# Enforce rule: JSON only&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ctype&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="c1"&gt;# Convert received JSON to dict&lt;/span&gt;
        &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content-length&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# Process the json&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, the JSON can be processed using a validate function,
for example, or generic success/failure responses returned
based on the contents of a request.&lt;/p&gt;
&lt;p&gt;Let's do something very simple: have the API server return
whatever was sent in the request.&lt;/p&gt;
&lt;p&gt;We can turn the dictionary &lt;code&gt;message&lt;/code&gt; (a dictionary containing
the original request) back into a string, and the string into
a stream of bytes. Then we can write headers and the stream of
bytes into the response.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="c1"&gt;# Send a response&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;utf8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_set_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;_set_headers()&lt;/code&gt; method is a short method that just sends
(writes) the correct headers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: the &lt;code&gt;send_headers()&lt;/code&gt; and &lt;code&gt;end_headers()&lt;/code&gt; methods are built-in
to the HTTP server base class we are using.&lt;/p&gt;
&lt;h1 id="putting-it-all-together"&gt;Putting it all together&lt;/h1&gt;
&lt;p&gt;Putting it all together, we get one final mock API server class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MockAPIServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseHTTPRequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_addr_port&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9876&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_serving&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Get the bind address and port&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_addr_port&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Create an HTTP server&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_port&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Create a thread to run the server&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Start the server&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop_serving&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Shut down the server&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Let the thread rejoin the worker pool&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ctype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pdict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# Enforce rule: JSON only&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ctype&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="c1"&gt;# Convert received JSON to dict&lt;/span&gt;
        &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content-length&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# Process the json&lt;/span&gt;

        &lt;span class="c1"&gt;# Send a response&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;utf8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_set_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_set_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category><category term="http"></category><category term="server"></category><category term="python"></category><category term="mock"></category><category term="mocking"></category><category term="api"></category><category term="flask"></category><category term="web server"></category></entry><entry><title>Python: From Args to Kwargs</title><link href="https://charlesreid1.github.io/python-from-args-to-kwargs.html" rel="alternate"></link><published>2020-02-25T16:00:00-08:00</published><updated>2020-02-25T16:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2020-02-25:/python-from-args-to-kwargs.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-easy-way-locals"&gt;The Easy Way: locals()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when-locals-wont-work-getting-a-method-signature-programmatically"&gt;When locals() Won't Work: Getting a Method Signature Programmatically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#args-to-kwargs-parameter-extraction-from-decorator"&gt;Args to Kwargs: Parameter Extraction from Decorator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this short blog post, we talk about how and when you can take a method signature
that defines input positional arguments by name, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;def foo(arg1, arg2, arg3):
    pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and write code that will return a dictionary containing a keyword arguments-like structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; foo(&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;)
{
    &amp;#39;arg1&amp;#39;: &amp;#39;red&amp;#39;,
    &amp;#39;arg2&amp;#39;: &amp;#39;blue&amp;#39;,
    &amp;#39;arg3&amp;#39;: &amp;#39;green&amp;#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will cover an example of writing a decorator that utilizes input arguments from both
the decorator and from the â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-easy-way-locals"&gt;The Easy Way: locals()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when-locals-wont-work-getting-a-method-signature-programmatically"&gt;When locals() Won't Work: Getting a Method Signature Programmatically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#args-to-kwargs-parameter-extraction-from-decorator"&gt;Args to Kwargs: Parameter Extraction from Decorator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this short blog post, we talk about how and when you can take a method signature
that defines input positional arguments by name, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;def foo(arg1, arg2, arg3):
    pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and write code that will return a dictionary containing a keyword arguments-like structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; foo(&amp;#39;red&amp;#39;, &amp;#39;blue&amp;#39;, &amp;#39;green&amp;#39;)
{
    &amp;#39;arg1&amp;#39;: &amp;#39;red&amp;#39;,
    &amp;#39;arg2&amp;#39;: &amp;#39;blue&amp;#39;,
    &amp;#39;arg3&amp;#39;: &amp;#39;green&amp;#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will cover an example of writing a decorator that utilizes input arguments from both
the decorator and from the function it wraps, and how to keep all of that information
straight.&lt;/p&gt;
&lt;h2 id="the-easy-way-locals"&gt;The Easy Way: &lt;code&gt;locals()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We'll start with the easiest possible wyay to turn args into kwargs: &lt;code&gt;locals()&lt;/code&gt;. The &lt;code&gt;locals()&lt;/code&gt;
function is one of the built-in methods provided by Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(help(locals))

Help on built-in function locals in module builtins:

locals()
    Return a dictionary containing the current scope&amp;#39;s local variables.

    NOTE: Whether or not updates to this dictionary will affect name lookups in
    the local scope and vice-versa is *implementation dependent* and not
    covered by any backwards compatibility guarantees.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a straightforward way to get a dictionary of input argument names mapping to
the values provided by the user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; def foo(arg1, arg2, arg3):
...     print(locals())
...
&amp;gt;&amp;gt;&amp;gt; foo(&amp;#39;asdf&amp;#39;, &amp;#39;qwerty&amp;#39;, &amp;#39;oioioioi&amp;#39;)
{&amp;#39;arg3&amp;#39;: &amp;#39;oioioioi&amp;#39;, &amp;#39;arg2&amp;#39;: &amp;#39;qwerty&amp;#39;, &amp;#39;arg1&amp;#39;: &amp;#39;asdf&amp;#39;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="when-locals-wont-work-getting-a-method-signature-programmatically"&gt;When &lt;code&gt;locals()&lt;/code&gt; Won't Work: Getting a Method Signature Programmatically&lt;/h2&gt;
&lt;p&gt;Sometimes, &lt;code&gt;locals()&lt;/code&gt; won't get you what you need - like when you're decorating a function,
and you don't have the original method signature.&lt;/p&gt;
&lt;p&gt;In that case, you can still use a function handle and get the original positional argument
names from the function signature.&lt;/p&gt;
&lt;p&gt;In Python, the signature of a method can be obtained using the &lt;code&gt;inspect&lt;/code&gt; module's
&lt;code&gt;signature()&lt;/code&gt; method, which can be passed a function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import inspect
&amp;gt;&amp;gt;&amp;gt; def foo(arg1, arg2, arg3):
...      pass
...
&amp;gt;&amp;gt;&amp;gt; print(inspect.signature(foo))
(arg1, arg2, arg3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;_parameters&lt;/code&gt; attribute of the signature will yield an ordered list of parameters in the
method signature, which is equivalent to the variable names that are used in the method
definition (&lt;code&gt;arg1&lt;/code&gt;, &lt;code&gt;arg2&lt;/code&gt;, and &lt;code&gt;arg3&lt;/code&gt; in the example &lt;code&gt;foo()&lt;/code&gt; function above):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(list(inspect.signature(foo)._parameters))
[&amp;#39;arg1&amp;#39;, &amp;#39;arg2&amp;#39;, &amp;#39;arg3&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="args-to-kwargs-parameter-extraction-from-decorator"&gt;Args to Kwargs: Parameter Extraction from Decorator&lt;/h2&gt;
&lt;p&gt;We can use this to get the original variable names from a function handle, even if we don't
have its original method signature (i.e., if we're a decorator and are just passed the function).&lt;/p&gt;
&lt;p&gt;Here is an example of a decorator that extracts positional arguments from the function it
decorates (and prints them out!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;real_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c1"&gt;# This is where the interesting stuff starts!&lt;/span&gt;
        &lt;span class="c1"&gt;# We have a handle to a function that we&amp;#39;re&lt;/span&gt;
        &lt;span class="c1"&gt;# decorating, but we don&amp;#39;t have its original&lt;/span&gt;
        &lt;span class="c1"&gt;# method signature.&lt;/span&gt;
        &lt;span class="c1"&gt;# No sweat. Turn positional args into augmented&lt;/span&gt;
        &lt;span class="c1"&gt;# kwargs!&lt;/span&gt;
        &lt;span class="n"&gt;func_kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_parameters&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;func_kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Unspecified positional argument&lt;/span&gt;
                &lt;span class="c1"&gt;# (using default value)&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wrapper extracted the following params: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;func_kwargs&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="c1"&gt;# don&amp;#39;t forget to top it off&lt;/span&gt;
&lt;span class="c1"&gt;# by decorating a simple function&lt;/span&gt;
&lt;span class="c1"&gt;# and calling it if script is run&lt;/span&gt;
&lt;span class="nd"&gt;@real_decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;  &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;asdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;qwerty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wioioioio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And when run, the result is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ py five.py
wrapper extracted the following params: {&amp;#39;arg1&amp;#39;: &amp;#39;asdf&amp;#39;, &amp;#39;arg2&amp;#39;: &amp;#39;qwerty&amp;#39;, &amp;#39;arg3&amp;#39;: &amp;#39;wioioioio&amp;#39;}
hello world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category><category term="python"></category><category term="programming"></category><category term="arguments"></category><category term="functions"></category><category term="methods"></category><category term="parameters"></category></entry><entry><title>Confuse-A-Constructor: When Class A's Constructor Returns Objects of Type B</title><link href="https://charlesreid1.github.io/confuse-a-constructor-when-class-as-constructor-returns-objects-of-type-b.html" rel="alternate"></link><published>2020-02-22T13:00:00-08:00</published><updated>2020-02-22T13:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2020-02-22:/confuse-a-constructor-when-class-as-constructor-returns-objects-of-type-b.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#confuse-a-constructor"&gt;Confuse-A-Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-the-constructor"&gt;What is the constructor?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rewiring-the-constructor-to-do-weird-stuff"&gt;Rewiring the constructor to do... weird stuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-simple-example-class"&gt;A simple example class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-a-__new__-method"&gt;Adding a __new__ method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when-__new__-returns-objects-not-classes"&gt;When __new__ returns objects, not classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#moving-beyond-argparse"&gt;Moving beyond argparse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-__new__-in-your-patterns"&gt;Using __new__ in your patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="confuse-a-constructor"&gt;Confuse-A-Constructor&lt;/h2&gt;
&lt;p&gt;Today, we are going to confuse a constructor.&lt;/p&gt;
&lt;iframe allowFullScreen="allowFullScreen" src="https://www.youtube.com/embed/1tsIxNci_dE?ecver=1&amp;amp;iv_load_policy=1&amp;amp;rel=0&amp;amp;yt:stretch=16:9&amp;amp;autohide=1&amp;amp;color=red&amp;amp;width=560&amp;amp;width=560" width="560" height="315" allowtransparency="true" frameborder="0"&gt;
    &lt;script type="text/javascript"&gt;function execute_YTvideo(){return youtube.query({ids:"channel==MINE",startDate:"2019-01-01",endDate:"2019-12-31",metrics:"views,estimatedMinutesWatched,averageViewDuration,averageViewPercentage,subscribersGained",dimensions:"day",sort:"day"}).then(function(e){},function(e){console.error("Execute error",e)})}&lt;/script&gt;
&lt;/iframe&gt;

&lt;h2 id="what-is-the-constructor"&gt;What is the constructor?&lt;/h2&gt;
&lt;p&gt;One of the first concepts encountered in object-oriented programming
is that of the &lt;em&gt;constructor&lt;/em&gt;, the method that â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#confuse-a-constructor"&gt;Confuse-A-Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-the-constructor"&gt;What is the constructor?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rewiring-the-constructor-to-do-weird-stuff"&gt;Rewiring the constructor to do... weird stuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-simple-example-class"&gt;A simple example class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-a-__new__-method"&gt;Adding a __new__ method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when-__new__-returns-objects-not-classes"&gt;When __new__ returns objects, not classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#moving-beyond-argparse"&gt;Moving beyond argparse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-__new__-in-your-patterns"&gt;Using __new__ in your patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="confuse-a-constructor"&gt;Confuse-A-Constructor&lt;/h2&gt;
&lt;p&gt;Today, we are going to confuse a constructor.&lt;/p&gt;
&lt;iframe allowFullScreen="allowFullScreen" src="https://www.youtube.com/embed/1tsIxNci_dE?ecver=1&amp;amp;iv_load_policy=1&amp;amp;rel=0&amp;amp;yt:stretch=16:9&amp;amp;autohide=1&amp;amp;color=red&amp;amp;width=560&amp;amp;width=560" width="560" height="315" allowtransparency="true" frameborder="0"&gt;
    &lt;script type="text/javascript"&gt;function execute_YTvideo(){return youtube.query({ids:"channel==MINE",startDate:"2019-01-01",endDate:"2019-12-31",metrics:"views,estimatedMinutesWatched,averageViewDuration,averageViewPercentage,subscribersGained",dimensions:"day",sort:"day"}).then(function(e){},function(e){console.error("Execute error",e)})}&lt;/script&gt;
&lt;/iframe&gt;

&lt;h2 id="what-is-the-constructor"&gt;What is the constructor?&lt;/h2&gt;
&lt;p&gt;One of the first concepts encountered in object-oriented programming
is that of the &lt;em&gt;constructor&lt;/em&gt;, the method that is run immediately after
an object is instantiated that configures and initializes the object.&lt;/p&gt;
&lt;p&gt;In Python, a constructor is defined by the &lt;code&gt;__init__&lt;/code&gt; function.
The constructor is not permitted to return a value, because
constructing a new instance of class A should result in an object
of type A. Returning something would just be confusing things.&lt;/p&gt;
&lt;p&gt;But does it ever make sense for a constructor of class A to return
an object of type B? And if it does make sense, how do we go about
doing it?&lt;/p&gt;
&lt;h2 id="rewiring-the-constructor-to-do-weird-stuff"&gt;Rewiring the constructor to do... weird stuff&lt;/h2&gt;
&lt;p&gt;The answer lies in Python's &lt;code&gt;__new__&lt;/code&gt; method, which is a method called
when a class is defined (not instantiated). The &lt;code&gt;__new__&lt;/code&gt; method is
different from the &lt;code&gt;__init__&lt;/code&gt; method, and does not do the same thing.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;__new__&lt;/code&gt; method for class A should only return the type of class A.
If &lt;code&gt;__new__&lt;/code&gt; returns anything else, Python will not run the &lt;code&gt;__init__&lt;/code&gt;
method for class A.&lt;/p&gt;
&lt;p&gt;For example, suppose we want a wrapper class that transparently constructs
different kinds of objects conditionally - based on a configuration file,
or the state of a file, or some other condition. We want to construct an
object of type A and get back an object of type B, C, or D. How to do that?&lt;/p&gt;
&lt;p&gt;First, let's look at how the &lt;code&gt;__new__&lt;/code&gt; method works.&lt;/p&gt;
&lt;h2 id="a-simple-example-class"&gt;A simple example class&lt;/h2&gt;
&lt;p&gt;Start with a simple example class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Instance of class A created&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Executing this gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In [3]: my_object = A()
Instance of class A created

In [4]: my_object.hello()
Hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="adding-a-__new__-method"&gt;Adding a &lt;code&gt;__new__&lt;/code&gt; method&lt;/h2&gt;
&lt;p&gt;Now let's look at a class A where we define the &lt;code&gt;__new__&lt;/code&gt; method. This method
controls how the instantiation of objects of type A work, so we can do something
like limiting the creation of objects of type A to when a certain condition is
met:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tossCoin&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A5050&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;tossCoin&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Count not create instance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A5050&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Instance of class A5050 created&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can run this block of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_a5050&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;my_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A5050&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Better luck next time!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It takes a few tries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In [9]: make_a5050()
Better luck next time!

In [10]: make_a5050()
Instance of class A5050 created
Hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;__new__&lt;/code&gt; method for the &lt;code&gt;A5050&lt;/code&gt; class raises a runtime error
with a 50% probability. Otherwise, it calls the &lt;code&gt;__new__&lt;/code&gt; method
of the parent class (&lt;code&gt;object&lt;/code&gt;, which returns a class of type &lt;code&gt;object&lt;/code&gt;).
We pass the same arguments and keyword arguments (args/kwargs) on to the
super class &lt;code&gt;__new__&lt;/code&gt;, but we could optionally modify them here (say, add
a keyword, or check the state of a file, or etc.).&lt;/p&gt;
&lt;p&gt;This is just an example of how the instantiation behavior of a class
can be modified before its constructor is even called by using the
&lt;code&gt;__new__&lt;/code&gt; method.&lt;/p&gt;
&lt;h2 id="when-__new__-returns-objects-not-classes"&gt;When &lt;code&gt;__new__&lt;/code&gt; returns objects, not classes&lt;/h2&gt;
&lt;p&gt;In the above example, our &lt;code&gt;__new__&lt;/code&gt; method returned the result of
a call to &lt;code&gt;__new__&lt;/code&gt; of a parent class. What happens if &lt;code&gt;__new__&lt;/code&gt;
returns something else?&lt;/p&gt;
&lt;p&gt;First, repeating an important point made above: if &lt;code&gt;__new__&lt;/code&gt; for a class
returns anything &lt;em&gt;other&lt;/em&gt; than that class type, then &lt;code&gt;__init__&lt;/code&gt; will not 
be called for that class.&lt;/p&gt;
&lt;p&gt;That means that the &lt;code&gt;__new__&lt;/code&gt; method should &lt;em&gt;either&lt;/em&gt; return a class (if
returning the type of its parent class, like a normal &lt;code&gt;__new__&lt;/code&gt; method
does), &lt;em&gt;or&lt;/em&gt; it should return an instantiated object.&lt;/p&gt;
&lt;p&gt;Let's imagine that we want to create different instances of different
classes based on a command line flag passed to the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world from class &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Could not create instance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Return object of type B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Return object of type C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Return object of type D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now if we run this script and pass it different flags, we get
a variable &lt;code&gt;a&lt;/code&gt; with different types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ py wat2.py -h
usage: wat2.py [-h] [-B] [-C] [-D]

optional arguments:
  -h, --help  show this help message and exit
  -B          Return object of type B
  -C          Return object of type C
  -D          Return object of type D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now try the three flags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ py wat2.py -B
&amp;lt;class &amp;#39;__main__.B&amp;#39;&amp;gt;

$ py wat2.py -C
&amp;lt;class &amp;#39;__main__.C&amp;#39;&amp;gt;

$ py wat2.py -D
&amp;lt;class &amp;#39;__main__.D&amp;#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="moving-beyond-argparse"&gt;Moving beyond argparse&lt;/h2&gt;
&lt;p&gt;The example above shows how the constructor can use
argparse options to determine what kind of object
to return with &lt;code&gt;__new__&lt;/code&gt;, but you can use other
types of conditions as well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using command line options (see argparse example above)&lt;/li&gt;
&lt;li&gt;using configuration file options&lt;/li&gt;
&lt;li&gt;using environment variable values&lt;/li&gt;
&lt;li&gt;checking status of a file or port&lt;/li&gt;
&lt;li&gt;checking whether internet connection is available&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="using-__new__-in-your-patterns"&gt;Using &lt;code&gt;__new__&lt;/code&gt; in your patterns&lt;/h2&gt;
&lt;p&gt;We have already covered the &lt;a href="#"&gt;Registry&lt;/a&gt;
pattern in a prior blog post, but the
&lt;code&gt;__new__&lt;/code&gt; method lends itself well to
all kinds of other patterns, including the
Singleton pattern and the Factory pattern.&lt;/p&gt;
&lt;p&gt;There are some very useful patterns covered
in this Github repository: &lt;a href="https://github.com/faif/python-patterns"&gt;https://github.com/faif/python-patterns&lt;/a&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="constructor"></category><category term="computer science"></category><category term="object oriented programming"></category></entry><entry><title>Python Patterns: The Registry</title><link href="https://charlesreid1.github.io/python-patterns-the-registry.html" rel="alternate"></link><published>2020-02-20T22:22:00-08:00</published><updated>2020-02-20T22:22:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2020-02-20:/python-patterns-the-registry.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-the-registry-pattern"&gt;What is the Registry Pattern?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-registry-base-type"&gt;The Registry Base Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-base-registered-class"&gt;The Base Registered Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extending-the-base-registered-class"&gt;Extending the Base Registered Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#seeing-it-in-action"&gt;Seeing it in action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples"&gt;Examples&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#example-search-engine"&gt;Example: Search Engine&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#registry-subclasses"&gt;Registry Subclasses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#doctype-registry-base-type"&gt;Doctype Registry Base Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#base-registered-doctype-class"&gt;Base Registered Doctype Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#derived-registered-doctype-class"&gt;Derived Registered Doctype Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-registry"&gt;Using the Registry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#further-modifications"&gt;Further Modifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="overview"&gt;Overview&lt;/h1&gt;
&lt;p&gt;This post is a summary of a useful Python programming pattern called the Registry pattern.&lt;/p&gt;
&lt;p&gt;The Registry pattern is a way of keeping track of all subclasses of a given class.&lt;/p&gt;
&lt;p&gt;More details about this pattern are available at &lt;a href="https://github.com/faif/python-patterns"&gt;https://github.com/faif/python-patterns&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="what-is-the-registry-pattern"&gt;What is the Registry Pattern â€¦&lt;/h1&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-the-registry-pattern"&gt;What is the Registry Pattern?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-registry-base-type"&gt;The Registry Base Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-base-registered-class"&gt;The Base Registered Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extending-the-base-registered-class"&gt;Extending the Base Registered Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#seeing-it-in-action"&gt;Seeing it in action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples"&gt;Examples&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#example-search-engine"&gt;Example: Search Engine&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#registry-subclasses"&gt;Registry Subclasses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#doctype-registry-base-type"&gt;Doctype Registry Base Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#base-registered-doctype-class"&gt;Base Registered Doctype Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#derived-registered-doctype-class"&gt;Derived Registered Doctype Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-registry"&gt;Using the Registry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#further-modifications"&gt;Further Modifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="overview"&gt;Overview&lt;/h1&gt;
&lt;p&gt;This post is a summary of a useful Python programming pattern called the Registry pattern.&lt;/p&gt;
&lt;p&gt;The Registry pattern is a way of keeping track of all subclasses of a given class.&lt;/p&gt;
&lt;p&gt;More details about this pattern are available at &lt;a href="https://github.com/faif/python-patterns"&gt;https://github.com/faif/python-patterns&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="what-is-the-registry-pattern"&gt;What is the Registry Pattern?&lt;/h1&gt;
&lt;p&gt;Let's start with a common scenario: you have some kind of manager class that is
managing multiple related subclasses, and you are looking for a simpler way to
manage the subclasses.&lt;/p&gt;
&lt;p&gt;The registry pattern creates a map of labels to class types, and allows you to
access a single registry common to all of those classes. The registry is updated
every time a new class is added.&lt;/p&gt;
&lt;p&gt;This is useful for several situations, including these two examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You want the manager class to iterate over every available subclass and call a
  particular method on each subclass&lt;/li&gt;
&lt;li&gt;You want to streamline a factory class, which takes an input label (like the name
  of a class) and creates/returns an object of that type&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-registry-base-type"&gt;The Registry Base Type&lt;/h2&gt;
&lt;p&gt;We start by defining a registry base type (or class). This class defines one behavior,
which is adding itself to the class registry. It creates a shared instance variable called
&lt;code&gt;REGISTRY&lt;/code&gt; which is shared amongst all of the classes, and is also accessible via a class
method.&lt;/p&gt;
&lt;p&gt;This is the base class; any class we want registered should inherit from this class.
It should also extend the &lt;code&gt;type&lt;/code&gt; class, since it is itself a class type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegistryBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;REGISTRY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# instantiate a new type corresponding to the type of class being defined&lt;/span&gt;
        &lt;span class="c1"&gt;# this is currently RegisterBase but in child classes will be the child class&lt;/span&gt;
        &lt;span class="n"&gt;new_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;REGISTRY&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_cls&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_cls&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_registry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;REGISTRY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The design here is subtle, but the details are important to understand how it works.&lt;/p&gt;
&lt;p&gt;A few important things to note, progressing from top to bottom:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;REGISTRY&lt;/code&gt; variable is defined outside the scope of any class methods, meaning it is a
  shared instance variable (a variable that is shared across all instances of &lt;code&gt;RegistryBase&lt;/code&gt;);
  this is an example of the Borg pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;RegistryBase&lt;/code&gt; class defines &lt;code&gt;__new__&lt;/code&gt;, not &lt;code&gt;__init__&lt;/code&gt;; the &lt;code&gt;__new__&lt;/code&gt; method is run when
  the class is defined, while &lt;code&gt;__init__&lt;/code&gt; is run when the classs is instantiated. This ensures
  that any subclasses that inherit from &lt;code&gt;RegistryBase&lt;/code&gt; add themselves to the registry when they
  are defined, not when they are instantiated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the constructor, we store a reference to the current class using this line:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;new_cls = type.__new__(cls, name, bases, attrs)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This creates a new class, but of type &lt;code&gt;type&lt;/code&gt; (confusing, but basically it means we store
  a reference to this &lt;em&gt;&lt;strong&gt;type&lt;/strong&gt;&lt;/em&gt; of object, not just a reference to a particular object).&lt;/p&gt;
&lt;p&gt;It is important to note that once we use the registry, the value that is returned is callable,
  and will create an object corresponding to that type.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We define a &lt;code&gt;get_registry&lt;/code&gt; method to return a copy of the registry; this must be decorated with
  a &lt;code&gt;@classmethod&lt;/code&gt; decorator (not a &lt;code&gt;@staticmethod&lt;/code&gt; decorator) so that it has access to the registry,
  which is a class instance variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;BONUS NOTE:&lt;/strong&gt; From prior experience, we have found it easiest to ignore the case of the
label (uppercase, lowercase, CamelCase, etc) and convert all class names to lowercase in the
registry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;REGISTRY&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_cls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="the-base-registered-class"&gt;The Base Registered Class&lt;/h2&gt;
&lt;p&gt;Now we can define a base class that will extend the &lt;code&gt;RegistryBase&lt;/code&gt; class. However, because &lt;code&gt;RegistryBase&lt;/code&gt;
is a &lt;code&gt;type&lt;/code&gt; class, we shouldn't extend it directly - we should use it as a &lt;em&gt;metaclass&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseRegisteredClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RegistryBase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Any class that inherits from this &lt;code&gt;BaseRegisteredClass&lt;/code&gt; will now be included in the registry when it is
defined.&lt;/p&gt;
&lt;h2 id="extending-the-base-registered-class"&gt;Extending the Base Registered Class&lt;/h2&gt;
&lt;p&gt;The next step is to use the base registered class to start creating interesting classes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExtendedRegisteredClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseRegisteredClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We skip defining constructor behavior, as the call order is what's important.&lt;/p&gt;
&lt;h2 id="seeing-it-in-action"&gt;Seeing it in action&lt;/h2&gt;
&lt;p&gt;Now we can see the process of adding subclasses to the registry in action.&lt;/p&gt;
&lt;p&gt;Start by checking the registry before we have created any subclasses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(RegistryHolder.REGISTRY)
[&amp;#39;BaseRegisteredClass&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, define the extended registered class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; class ExtendedRegisteredClass(BaseRegisteredClass):
...     def __init__(self, *args, **kwargs):
...         pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember, we add the new class to the registry in the &lt;code&gt;__new__&lt;/code&gt; method, not the
&lt;code&gt;__init__&lt;/code&gt; method, so we don't even need to instantiate an &lt;code&gt;ExtendedRegisteredClass&lt;/code&gt;
object for it to be added to the registry. Check the registry again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print(RegistryHolder.REGISTRY)
[&amp;#39;BaseRegisteredClass&amp;#39;, &amp;#39;ExtendedRegisteredClass&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="examples"&gt;Examples&lt;/h1&gt;
&lt;p&gt;Let's consider a specific example to help illustrate the usefulness of the Registry pattern:
adding the ability to index different kinds of documents to a search engine.&lt;/p&gt;
&lt;h2 id="example-search-engine"&gt;Example: Search Engine&lt;/h2&gt;
&lt;p&gt;Suppose we are writing a search engine, and we are working on the search engine
backend. Specifically, consider the backend portion that iterates over a group of
documents, checks if the document is already in the search index, and either adds
a new item to the search index, updates an existing item in the search index, or
deletes an item from the search index.&lt;/p&gt;
&lt;h3 id="registry-subclasses"&gt;Registry Subclasses&lt;/h3&gt;
&lt;p&gt;A search engine may index multiple kinds of documents, each living in different locations.
For example, a search index may index .docx files in a Google Drive folder,
Github issues, and/or a local folder full of Markdown files. For each of these
document types, we must define:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to add or update all documents in the document storage system (Google Drive, Github
  API, local filesystem, etc.); this method should be able to get a list of documents of this
  document type that are already in the search index, either by running a query itself, or by
  accepting a list of documents already in the index as an input argument&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What schema to use (mapping various field names to data types) for documents of this type&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to display search results when they are documents of this type (i.e., how to display
  what fields when showing the user search results)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This can be done by defining classes corresponding to different document types, where
each class defines how to do the above actions, and wraps them in high-level API methods
that the manager classes can call.&lt;/p&gt;
&lt;p&gt;The manager classes want a way to get a list of available document types, and to call
each document type's high-level API methods. This can be done with the registry.&lt;/p&gt;
&lt;h3 id="doctype-registry-base-type"&gt;Doctype Registry Base Type&lt;/h3&gt;
&lt;p&gt;Start by defining a base type that will register new subclasses in a doctype registry. Note that
as per the &lt;a href="https://docs.python.org/3/reference/datamodel.html#object.__new__"&gt;&lt;code&gt;__new__&lt;/code&gt; documentation&lt;/a&gt;,
the &lt;code&gt;__new__&lt;/code&gt; method takes the class (in our case, a class of type &lt;code&gt;type&lt;/code&gt;) as the first argument &lt;code&gt;cls&lt;/code&gt;,
and it should return a new object instance (which, again, is an instance of type &lt;code&gt;type&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DoctypeRegistryBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;DOCTYPE_REGISTRY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;new_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DOCTYPE_REGISTRY&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_cls&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_cls&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_doctype_registry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DOCTYPE_REGISTRY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="base-registered-doctype-class"&gt;Base Registered Doctype Class&lt;/h3&gt;
&lt;p&gt;Next, we define a base class for any document type that we want registered in the doctype
registry, using &lt;code&gt;DoctypeRegistryBase&lt;/code&gt; as our metaclass (because it is a class of type &lt;code&gt;type&lt;/code&gt;,
as opposed to a normal class).  All document types are required to define three bits of behavior
(interacting with the document storage system to iterate over all documents; extracting information
from individual documents; and displaying a given document type when it is a search result. We
define these virtual methods on the base registered doctype class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseRegisteredDoctypeClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DoctypeRegistryBase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_update_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Iterate over all documents in the document storage system&lt;/span&gt;
&lt;span class="sd"&gt;        and add/update/delete documents as needed.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Assemble and return the schema (map of field names to data types)&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_search_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Use a Jinja template to render a single search result of type doctype&lt;/span&gt;
&lt;span class="sd"&gt;        to display to the user via the web interface&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="derived-registered-doctype-class"&gt;Derived Registered Doctype Class&lt;/h3&gt;
&lt;p&gt;Now that we have a base class, we can define child classes that have the specific
API functionality needed.&lt;/p&gt;
&lt;p&gt;Here is a high-level sketch of what the Github issue document type class might look like,
starting with the add/update/delete method, which boils down to some set operations to determine
what documents to add, update, or delete from the search index.&lt;/p&gt;
&lt;p&gt;(Also note, these methods are defined as class methods because they are called once for each
doctype class, but this does not necessarily need to be the case.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GithubIssueDoctype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseRegisteredDoctypeClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_update_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Get set of indexed document IDs&lt;/span&gt;
        &lt;span class="n"&gt;indexed_docs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run_search_index_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doctype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;indexed_docs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Get set of remote document IDs&lt;/span&gt;
        &lt;span class="n"&gt;remote_docs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;org_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;get_org_names&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;get_repo_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;get_repo_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;org_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;remote_docs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Do some set math to figure out what to add/update/delete&lt;/span&gt;
        &lt;span class="n"&gt;add_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remote_docs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexed_docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;update_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexed_docs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;delete_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexed_docs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Do the operations&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;add_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;add_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;add_document_to_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;update_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;update_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;update_document_in_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;delete_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;delete_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;delete_document_in_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delete_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_search_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we do the same for documents on Google Drive, defining a different &lt;code&gt;add_update_delete()&lt;/code&gt; method
specific to Google Drive documents (note that while the sketch of this method looks similar to the
Github doctype above, the implementation will look more and more different as we include more and more
detail in our method and API calls).&lt;/p&gt;
&lt;p&gt;As before, we make these methods class methods.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GoogleDocsDoctype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseRegisteredDoctypeClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_update_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Get set of indexed document IDs&lt;/span&gt;
        &lt;span class="n"&gt;indexed_dcos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run_search_index_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doctype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;indexed_docs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Get set of remote document IDs&lt;/span&gt;
        &lt;span class="n"&gt;remote_docs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;get_gdrive_file_list&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;remote_docs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Do some math to figure out what to add/update/delete&lt;/span&gt;
        &lt;span class="n"&gt;add_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remote_docs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexed_docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;update_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexed_docs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;delete_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indexed_docs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Do the operations&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;add_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;add_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;add_document_to_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;update_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;update_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;update_document_in_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;delete_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;delete_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;delete_document_in_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delete_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_search_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="using-the-registry"&gt;Using the Registry&lt;/h3&gt;
&lt;p&gt;The last step is to actually use the registry from the class that manages all of our subclasses.
In this case, we have a &lt;code&gt;Search&lt;/code&gt; class that defines high-level operations (such as, "add/update/delete
all documents indexed by this search engine") and in turn calls the corresponding method for each doctype
that has been registered.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_update_delete_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c1"&gt;# Iterate over every doc type&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;doctype_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;DoctypeRegistryBase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DOCTYPE_REGISTRY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="c1"&gt;# Get a handle to the doctype class&lt;/span&gt;
            &lt;span class="n"&gt;doctype_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DoctypeRegistryBase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DOCTYPE_REGISTRY&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;doctype_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="c1"&gt;# Call the class method add_update_delete on the doctype class&lt;/span&gt;
            &lt;span class="n"&gt;doctype_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_update_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# Note: if we need to create an instance first&lt;/span&gt;
            &lt;span class="c1"&gt;# doctype_instance = doctype_class()&lt;/span&gt;
            &lt;span class="c1"&gt;# doctype_instance.add_update_delete(*args, **kwargs)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="further-modifications"&gt;Further Modifications&lt;/h1&gt;
&lt;p&gt;In the example above, we don't have any need to create specific instances of the document type classes,
since they do not need to preserve their state between calls, and we only need one instance of the doctype
class per search engine.&lt;/p&gt;
&lt;p&gt;We could re-implement this pattern, modifying the search engine doctype classes to be normal, non-static
classes. This would allow us to have, say, two instances of the Github issues doctype class (corresponding
to two different sets of Github API credentials, or two different Github accounts), or two instances of the
Google Drive doctype class (corresponding to two different Google Drive folders). In this case, we would
want to restructure the Search class to instantiate and save doctype class instances in the constructor,
and use them later.&lt;/p&gt;
&lt;p&gt;Here's an example &lt;code&gt;Search&lt;/code&gt; class that would instantiate one of each subclass in the constructor, to be used
in later methods:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c1"&gt;# Store instances of each doctype&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all_doctypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="c1"&gt;# Iterate over every doc type&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;doctype_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;DoctypeRegistryBase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DOCTYPE_REGISTRY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="c1"&gt;# Get a handle to the doctype class&lt;/span&gt;
        &lt;span class="n"&gt;doctype_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DoctypeRegistryBase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DOCTYPE_REGISTRY&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;doctype_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;# Create an instance of type doctype_class&lt;/span&gt;
        &lt;span class="n"&gt;doctype_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;doctype_class&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Save for later&lt;/span&gt;
        &lt;span class="n"&gt;all_doctypes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doctype_instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_update_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c1"&gt;# Call the add_update_delete method on each doctype instance&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;doctype_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doctype_instance&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all_doctypes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;doctype_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_update_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Note that this would work best if we removed the &lt;code&gt;@classmethod&lt;/code&gt; decorators from the doctype classes
defined above.)&lt;/p&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;p&gt;In this post, we covered a useful programming pattern, the Registry, and showed it in action for one
example - allowing a search engine index to register various document type subclasses, then use those
registered subclasses to propagate calls to all document types later.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="programming"></category><category term="patterns"></category><category term="design patterns"></category><category term="registry"></category><category term="computer science"></category></entry><entry><title>Incorporating Terraform Commands into Makefiles</title><link href="https://charlesreid1.github.io/incorporating-terraform-commands-into-makefiles.html" rel="alternate"></link><published>2020-02-15T12:00:00-08:00</published><updated>2020-02-15T12:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2020-02-15:/incorporating-terraform-commands-into-makefiles.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-0-directory-and-file-layout"&gt;Step 0: Directory and File Layout&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#environment-variables"&gt;Environment Variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-1-top-level-makefile"&gt;Step 1: Top Level Makefile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2-infra-level-makefile"&gt;Step 2: Infra Level Makefile&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#fake-targets"&gt;Fake Targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commands-for-single-components"&gt;Commands for Single Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commands-for-all-components"&gt;Commands for All Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-makefile"&gt;Final Makefile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3-writing-terraform-components"&gt;Step 3: Writing Terraform Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-4-initializing-terraform-components"&gt;Step 4: Initializing Terraform Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#workflow"&gt;Workflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#plan"&gt;Plan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy"&gt;Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#update"&gt;Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#destroy"&gt;Destroy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;p&gt;This blog post covers a useful pattern for incorporating terraform commands
into a Makefile.&lt;/p&gt;
&lt;p&gt;This is useful for cases where terraform is being used to manage infrastructure.
In the end you will be able to run a command like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make plan-infra
make deploy-infra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and and have this call the â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-0-directory-and-file-layout"&gt;Step 0: Directory and File Layout&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#environment-variables"&gt;Environment Variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-1-top-level-makefile"&gt;Step 1: Top Level Makefile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2-infra-level-makefile"&gt;Step 2: Infra Level Makefile&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#fake-targets"&gt;Fake Targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commands-for-single-components"&gt;Commands for Single Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commands-for-all-components"&gt;Commands for All Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-makefile"&gt;Final Makefile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3-writing-terraform-components"&gt;Step 3: Writing Terraform Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-4-initializing-terraform-components"&gt;Step 4: Initializing Terraform Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#workflow"&gt;Workflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#plan"&gt;Plan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy"&gt;Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#update"&gt;Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#destroy"&gt;Destroy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;p&gt;This blog post covers a useful pattern for incorporating terraform commands
into a Makefile.&lt;/p&gt;
&lt;p&gt;This is useful for cases where terraform is being used to manage infrastructure.
In the end you will be able to run a command like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make plan-infra
make deploy-infra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and and have this call the corresponding terraform commands to plan and deploy your
terraformed cloud infrastructure.&lt;/p&gt;
&lt;p&gt;The post is divided into a few steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Directory and file layout - how we lay out the files for this tutorial&lt;/li&gt;
&lt;li&gt;Top level Makefile - make commands to add to the top level Makefile&lt;/li&gt;
&lt;li&gt;Infra level Makefile - make commands to add to the infra level Makefile&lt;/li&gt;
&lt;li&gt;Writing Terraform component - how to write a configurable component that is ready to terraform&lt;/li&gt;
&lt;li&gt;Initializing Terraform component - script to initialize terraform components&lt;/li&gt;
&lt;li&gt;Workflow - plan, deploy, update, destroy&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="step-0-directory-and-file-layout"&gt;Step 0: Directory and File Layout&lt;/h1&gt;
&lt;p&gt;This tutorial presumes you have a top level directory corresponding to a git repository.
We will use the following directory structure for this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;my-project/
    Readme.md
    environment
    Makefile
    infra/
        Makefile
        component-1/
            variables.tf
            main.tf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="environment-variables"&gt;Environment Variables&lt;/h2&gt;
&lt;p&gt;In order to keep track of environment variables used in the terraform
process, we use the file &lt;code&gt;envronment&lt;/code&gt; in the top level project directory
to keep all environment variable values under version control.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;SOURCE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[0]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -h &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SOURCE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;SOURCE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;readlink &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SOURCE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PROJECT_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; -P &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SOURCE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; -a
&lt;span class="nv"&gt;PROJECT_DEPLOYMENT_STAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# bucket name&lt;/span&gt;
&lt;span class="nv"&gt;PROJECT_S3_BUCKET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my-organization-my-project-my-bucket&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# aws tags&lt;/span&gt;
&lt;span class="nv"&gt;PROJECT_INFRA_TAG_PROJECT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my-project&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;PROJECT_INFRA_TAG_SERVICE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my-service&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;PROJECT_INFRA_TAG_OWNER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;whoami@email.com&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# aws settings&lt;/span&gt;
&lt;span class="nv"&gt;AWS_DEFAULT_OUTPUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;json
&lt;span class="nv"&gt;AWS_DEFAULT_REGION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-east-1
&lt;span class="nb"&gt;set&lt;/span&gt; +a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Optionally, a local environment file can contain environment variable values
that are sensitive or should not be kept under version control, so add this
to the bottom of the &lt;code&gt;environment&lt;/code&gt; file too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -f &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/environment.local&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PROJECT_HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/environment.local&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="step-1-top-level-makefile"&gt;Step 1: Top Level Makefile&lt;/h1&gt;
&lt;p&gt;Start by creating the &lt;code&gt;plan-infra&lt;/code&gt; and &lt;code&gt;deploy-infra&lt;/code&gt; commands in your top-level
Makefile. These commands will, in turn, call make commands defined in &lt;code&gt;infra/Makefile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;plan-infra&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; -C infra plan-all

&lt;span class="nf"&gt;deploy-infra&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; -C infra apply-all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;-C infra&lt;/code&gt; flag indicates make should use a Makefile in a subdirectory.&lt;/p&gt;
&lt;h1 id="step-2-infra-level-makefile"&gt;Step 2: Infra Level Makefile&lt;/h1&gt;
&lt;p&gt;Next we define &lt;code&gt;infra/Makefile&lt;/code&gt;. This Makefile will have two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;terraform commands for a single component (example: init, plan, apply, destroy)&lt;/li&gt;
&lt;li&gt;wrapper commands to run the above commands for every component (example: for each component,
  run the plan terraform command)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We cover the Makefile from the bottom up.&lt;/p&gt;
&lt;h2 id="fake-targets"&gt;Fake Targets&lt;/h2&gt;
&lt;p&gt;Start by defining "fake" targets or rules, that is, make rules whose names are not file names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;-&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;plan&lt;/span&gt;-&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;-&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;-&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;plan&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;destroy&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="commands-for-single-components"&gt;Commands for Single Components&lt;/h2&gt;
&lt;p&gt;Next, above that, we define terraform commands for a single component:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm -rf &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;/.terraform/*.tfstate
    ./build_deploy_config.py &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; terraform init&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nf"&gt;plan&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; terraform plan -detailed-exitcode

&lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; terraform apply

&lt;span class="nf"&gt;destroy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; terraform destroy

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; rm -rf .terraform
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the &lt;code&gt;init&lt;/code&gt; command is running a &lt;code&gt;build_deploy_config.py&lt;/code&gt; script,
which we will cover in a moment. This script creates the terraform variables
file &lt;code&gt;variables.tf&lt;/code&gt; and populates the variable values using environment
variables.&lt;/p&gt;
&lt;h2 id="commands-for-all-components"&gt;Commands for All Components&lt;/h2&gt;
&lt;p&gt;Above that, we have commands to perform each action on all components:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;-&lt;span class="n"&gt;all&lt;/span&gt;

&lt;span class="nf"&gt;init-all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @for c in &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; init &lt;span class="nv"&gt;COMPONENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;c &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nf"&gt;plan-all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @for c in &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; plan &lt;span class="nv"&gt;COMPONENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;c &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nf"&gt;apply-all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @for c in &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; apply &lt;span class="nv"&gt;COMPONENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;c &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nf"&gt;destroy-all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @for c in &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; destroy &lt;span class="nv"&gt;COMPONENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;c &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nf"&gt;clean-all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @for c in &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; clean &lt;span class="nv"&gt;COMPONENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;c &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="variables"&gt;Variables&lt;/h2&gt;
&lt;p&gt;Last but not least, we define a few variables at the top of the Makefile:
most importantly, the list of infrastructure components. This is created by
extracting the names of subdirectories in &lt;code&gt;infra/&lt;/code&gt; containing &lt;code&gt;*.tf&lt;/code&gt; files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;DIRS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="p"&gt; find . -name &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*.tf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt; -exec dirname {&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort --unique&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;COMPONENTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="p"&gt; for d in &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;DIRS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;; do basename &lt;/span&gt;&lt;span class="nv"&gt;$$d&lt;/span&gt;&lt;span class="p"&gt;; done&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="final-makefile"&gt;Final Makefile&lt;/h2&gt;
&lt;p&gt;Here is the final &lt;code&gt;infra/Makefile&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;infra/Makefile&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;DIRS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="p"&gt; find . -name &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*.tf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt; -exec dirname {&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort --unique&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;COMPONENTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;shell&lt;/span&gt;&lt;span class="p"&gt; for d in &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;DIRS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;; do basename &lt;/span&gt;&lt;span class="nv"&gt;$$d&lt;/span&gt;&lt;span class="p"&gt;; done&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;-&lt;span class="n"&gt;all&lt;/span&gt;

&lt;span class="nf"&gt;init-all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @for c in &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; init &lt;span class="nv"&gt;COMPONENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;c &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nf"&gt;plan-all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @for c in &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; plan &lt;span class="nv"&gt;COMPONENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;c &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nf"&gt;apply-all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @for c in &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; apply &lt;span class="nv"&gt;COMPONENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;c &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nf"&gt;destroy-all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @for c in &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; destroy &lt;span class="nv"&gt;COMPONENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;c &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nf"&gt;clean-all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @for c in &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; clean &lt;span class="nv"&gt;COMPONENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;c &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nf"&gt;plan&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; terraform plan -detailed-exitcode

&lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; terraform apply

&lt;span class="nf"&gt;destroy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; terraform destroy

&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    rm -rf &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;/.terraform/*.tfstate
    ./build_deploy_config.py &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; terraform init&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;COMPONENT&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; rm -rf .terraform

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;-&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;plan&lt;/span&gt;-&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;-&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;-&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;plan&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;destroy&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="step-3-writing-terraform-components"&gt;Step 3: Writing Terraform Components&lt;/h1&gt;
&lt;p&gt;As an example, we will consider an example of terraform-managed buckets.&lt;/p&gt;
&lt;p&gt;Start by creating a directory called &lt;code&gt;infra/buckets/&lt;/code&gt; to store terraform
files for creating and managing the buckets.&lt;/p&gt;
&lt;p&gt;We can create one file per cloud provider. As an example, here is &lt;code&gt;s3.tf&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;s3.tf&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;data &amp;quot;aws_caller_identity&amp;quot; &amp;quot;current&amp;quot; {}

locals {
  common_tags = &amp;quot;${map(
    &amp;quot;project&amp;quot;   , &amp;quot;${var.PROJECT_INFRA_TAG_PROJECT}&amp;quot;,
    &amp;quot;env&amp;quot;       , &amp;quot;${var.PROJECT_DEPLOYMENT_STAGE}&amp;quot;,
    &amp;quot;service&amp;quot;   , &amp;quot;${var.PROJECT_INFRA_TAG_SERVICE}&amp;quot;
  )}&amp;quot;
  aws_tags = &amp;quot;${map(
  &amp;quot;Name&amp;quot;      , &amp;quot;${var.PROJECT_INFRA_TAG_SERVICE}-s3-storage&amp;quot;,
  &amp;quot;owner&amp;quot;     , &amp;quot;${var.PROJECT_INFRA_TAG_OWNER}&amp;quot;,
  &amp;quot;managedBy&amp;quot; , &amp;quot;terraform&amp;quot;
  )}&amp;quot;
}

resource aws_s3_bucket dss_s3_bucket {
  count = length(var.PROJECT_S3_BUCKET) &amp;gt; 0 ? 1 : 0
  bucket = var.PROJECT_S3_BUCKET
  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = &amp;quot;AES256&amp;quot;
      }
    }
  }
  tags = merge(local.common_tags, local.aws_tags)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this requires several environment variables to be
defined in &lt;code&gt;environment&lt;/code&gt; and requires the operator to run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;source environment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="step-4-initializing-terraform-components"&gt;Step 4: Initializing Terraform Components&lt;/h1&gt;
&lt;p&gt;The following script will automatically generate terraform files for
our component that are populated with the correct environment variable
values.&lt;/p&gt;
&lt;p&gt;It is called &lt;code&gt;build_deploy_config.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Start with a simple argument parser that just accepts a single argument,
the component to make terraform files for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;component&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we define several terraform file templates using Python's
bracket template syntax. Start with a template for defining a
terraform variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;terraform_variable_template = &amp;quot;&amp;quot;&amp;quot;
variable &amp;quot;{name}&amp;quot; {{
  default = &amp;quot;{val}&amp;quot;
}}
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, define a template for the terraform backend buket:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;terraform_backend_template = &amp;quot;&amp;quot;&amp;quot;# Auto-generated during infra build process.
# Please edit infra/build_deploy_config.py directly.
terraform {{
  backend &amp;quot;s3&amp;quot; {{
    bucket = &amp;quot;{bucket}&amp;quot;
    key = &amp;quot;{comp}-{stage}.tfstate&amp;quot;
    region = &amp;quot;{region}&amp;quot;
    {profile_setting}
  }}
}}
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next define terraform cloud providers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;terraform_providers_template = &amp;quot;&amp;quot;&amp;quot;# Auto-generated during infra build process.
# Please edit infra/build_deploy_config.py directly.
provider aws {{
  region = &amp;quot;{aws_region}&amp;quot;
}}
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Provide a list of environment variables that should also be defined as
terraform variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;env_vars_to_infra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="nv"&gt;PROJECT_DEPLOYMENT_STAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# bucket name&lt;/span&gt;
&lt;span class="nv"&gt;PROJECT_S3_BUCKET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my-organization-my-project-my-bucket&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# aws tags&lt;/span&gt;
&lt;span class="nv"&gt;PROJECT_INFRA_TAG_PROJECT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my-project&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;PROJECT_INFRA_TAG_SERVICE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my-service&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;PROJECT_INFRA_TAG_OWNER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;whoami@email.com&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# aws settings&lt;/span&gt;
&lt;span class="nv"&gt;AWS_DEFAULT_OUTPUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;json
&lt;span class="nv"&gt;AWS_DEFAULT_REGION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;us-east-1

    &lt;span class="s2"&gt;&amp;quot;AWS_DEFAULT_REGION&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;PROJECT_DEPLOYMENT_STAGE&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;PROJECT_S3_BUCKET&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;PROJECT_INFRA_TAG_PROJECT&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;PROJECT_INFRA_TAG_SERVICE&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;PROJECT_INFRA_TAG_OWNER&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, substitute environment variable values into the templates, and write
the templated content to the appropriate &lt;code&gt;*.tf&lt;/code&gt; file. First, the backend:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Write backend.tf&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infra_root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;backend.tf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;caller_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_caller_identity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AWS_PROFILE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AWS_PROFILE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;profile_setting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;profile = &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;profile_setting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;terraform_backend_template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DSS_TERRAFORM_BACKEND_BUCKET_TEMPLATE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;caller_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DSS_DEPLOYMENT_STAGE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AWS_DEFAULT_REGION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;profile_setting&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;profile_setting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, the &lt;code&gt;variables.tf&lt;/code&gt; for the component:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Write variables.tf&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infra_root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;variables.tf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;# Auto-generated during infra build process.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linesep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;# Please edit infra/build_deploy_config.py directly.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linesep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;env_vars_to_infra&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;terraform_variable_template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, the cloud providers file &lt;code&gt;providers.tf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infra_root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;providers.tf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;terraform_providers_template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;aws_region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AWS_DEFAULT_REGION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;gcp_project_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;GCP_PROJECT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="workflow"&gt;Workflow&lt;/h1&gt;
&lt;p&gt;We now have a top-level Makefile that wraps the plan and apply commands directly,
and we have an infra-level Makefile with additional commands for managing infrastructure
(plan, apply, destroy).&lt;/p&gt;
&lt;h2 id="plan"&gt;Plan&lt;/h2&gt;
&lt;p&gt;The terraform plan step assembles the various templated terraform files and substitutes
environment variables into them, creating a new version of them with up-to-date values.&lt;/p&gt;
&lt;p&gt;The plan step (&lt;code&gt;make plan-infra&lt;/code&gt;) calls the &lt;code&gt;build_deploy_config.py&lt;/code&gt; script (detailed above)
to regenerate the terraform files when environment variables are changed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make plan-infra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This script will iterate over each cloud infrastructure component in &lt;code&gt;infra/&lt;/code&gt;, use terraform
to plan the changes it would make to cloud resources, and print a summary of those changes
to the screen.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;make plan-infra&lt;/code&gt; command does not change any cloud infra.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="deploy"&gt;Deploy&lt;/h2&gt;
&lt;p&gt;The terraform deploy step makes the changes summarized in the &lt;code&gt;make plan-infra&lt;/code&gt; step. This
command automates the terraform commands, but still requires interactive "yes" responses
to commands.&lt;/p&gt;
&lt;h2 id="update"&gt;Update&lt;/h2&gt;
&lt;p&gt;Using the &lt;code&gt;make plan-infra&lt;/code&gt; command will remake the terraform files using environment variable
values, and will display any changes that will be made to cloud infra. This includes updates to
existing infrastructure.&lt;/p&gt;
&lt;p&gt;When you finish deploying infrastructure, store the version of your &lt;code&gt;environment&lt;/code&gt; file in version
control and tag it as the current deployed infra. This will make it easier to delete infra later.&lt;/p&gt;
&lt;p&gt;If you need to rename infra, use the following workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Source the old &lt;code&gt;environment&lt;/code&gt; file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Destroy the old infra with the old names using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;text
make -C infra COMPONENT=buckets destroy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or destroy all infra with the &lt;code&gt;destroy-all&lt;/code&gt; command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;text
make -C infra destroy-all&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update the environment file with the new names, and source the new &lt;code&gt;environment&lt;/code&gt; file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plan the new infra with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;text
make plan-infra&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy the new infra with&lt;/p&gt;
&lt;p&gt;&lt;code&gt;text
make deploy-infra&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="destroy"&gt;Destroy&lt;/h2&gt;
&lt;p&gt;As seen above, infrastructure components can be deleted with the &lt;code&gt;delete&lt;/code&gt; command in the infra
Makefile, and all infrastructure components can be deleted with the &lt;code&gt;delete-all&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;To delete a particular component:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make -C infra COMPONENT=buckets destroy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To destroy all infra:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make -C infra destroy-all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Terraform"></category><category term="terraform"></category><category term="makefile"></category><category term="make"></category><category term="python"></category></entry><entry><title>Automatically Generating Up-To-Date requirements.txt for Python Projects</title><link href="https://charlesreid1.github.io/automatically-generating-up-to-date-requirementstxt-for-python-projects.html" rel="alternate"></link><published>2019-12-12T12:12:00-08:00</published><updated>2019-12-12T12:12:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-12-12:/automatically-generating-up-to-date-requirementstxt-for-python-projects.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-requirementstxt"&gt;What is requirements.txt?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#converting-requirementstxtin-to-requirementstxt"&gt;Converting requirements.txt.in to requirements.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automating-the-step-with-a-make-rule"&gt;Automating the step with a make rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refreshing-requirements"&gt;Refreshing requirements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post, we cover a pattern for automatically generating a &lt;code&gt;requirements.txt&lt;/code&gt; file that has the latest
compatible versions of required software, and that specifies the full and exact version of each package to
make the Python environment reproducible.&lt;/p&gt;
&lt;p&gt;This will turn a requirements input file (called &lt;code&gt;requirements.txt.in&lt;/code&gt; for example) that looks like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;numpy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;into a requirements file that specifies the exact version of &lt;code&gt;numpy&lt;/code&gt; and all dependencies, like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;numpy==1.18 â€¦&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-requirementstxt"&gt;What is requirements.txt?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#converting-requirementstxtin-to-requirementstxt"&gt;Converting requirements.txt.in to requirements.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automating-the-step-with-a-make-rule"&gt;Automating the step with a make rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refreshing-requirements"&gt;Refreshing requirements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post, we cover a pattern for automatically generating a &lt;code&gt;requirements.txt&lt;/code&gt; file that has the latest
compatible versions of required software, and that specifies the full and exact version of each package to
make the Python environment reproducible.&lt;/p&gt;
&lt;p&gt;This will turn a requirements input file (called &lt;code&gt;requirements.txt.in&lt;/code&gt; for example) that looks like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;numpy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;into a requirements file that specifies the exact version of &lt;code&gt;numpy&lt;/code&gt; and all dependencies, like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;numpy==1.18.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By the end of this post, you'll be able to do this to refresh and update the versions of all the software your
project depends on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;All of this code comes from the Human Cell Atlas &lt;a href="https://github.com/HumanCellAtlas/data-store"&gt;data-store&lt;/a&gt;
project!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="what-is-requirementstxt"&gt;What is requirements.txt?&lt;/h2&gt;
&lt;p&gt;When developing a Python project, the &lt;code&gt;requirements.txt&lt;/code&gt; file is a plain text file that contains a list of
Python software packages that need to be installed for the current Python software package to work. The software
can be installed using the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For example, if a package &lt;code&gt;foobar&lt;/code&gt; has &lt;code&gt;import numpy&lt;/code&gt; at the top of a Python file in the project, the &lt;code&gt;numpy&lt;/code&gt; package
must be installed before importing &lt;code&gt;foobar&lt;/code&gt;. In this case, the &lt;code&gt;requirements.txt&lt;/code&gt; could just contain&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;numpy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or it could specify a particular version of numpy, or a minimum version of numpy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;numpy &amp;gt;= 1.10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Start by creating a &lt;code&gt;requirements.txt.in&lt;/code&gt;, which should look like a normal &lt;code&gt;requirements.txt&lt;/code&gt; file,
listing software packages for pip to install (and optionally version information - but version information
does not &lt;em&gt;need&lt;/em&gt; to be specified).&lt;/p&gt;
&lt;p&gt;This file is a looser set of specifications of software versions.&lt;/p&gt;
&lt;p&gt;Example &lt;code&gt;requirements.txt.in&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;numpy
pandas &amp;gt; 0.22
sphinx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="converting-requirementstxtin-to-requirementstxt"&gt;Converting requirements.txt.in to requirements.txt&lt;/h2&gt;
&lt;p&gt;Next, we use the &lt;code&gt;requirements.txt.in&lt;/code&gt; file to install the latest versions of each software package (and all
dependent software packages) into a virtual environment.&lt;/p&gt;
&lt;p&gt;From that virtual environment, we can use &lt;code&gt;pip freeze&lt;/code&gt; to output the names of each software package installed in
the virtual environment, along with its exact version. This can be used to make a &lt;code&gt;requirements.txt&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;The manual steps are&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;virtualenv -p $(which python3) venv
venv/bin/pip install -r requirements.txt
venv/bin/pip install -r requirements.txt.in
venv/bin/pip freeze &amp;gt;&amp;gt; requirements.txt
rm -fr venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using pip freeze means the resulting &lt;code&gt;results.txt&lt;/code&gt; contains detailed version numbers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;alabaster==0.7.12
Babel==2.7.0
certifi==2019.11.28
chardet==3.0.4
docutils==0.15.2
idna==2.8
imagesize==1.1.0
Jinja2==2.10.3
MarkupSafe==1.1.1
numpy==1.17.4
packaging==19.2
pandas==0.25.3
Pygments==2.5.2
pyparsing==2.4.5
python-dateutil==2.8.1
pytz==2019.3
requests==2.22.0
six==1.13.0
snowballstemmer==2.0.0
Sphinx==2.2.2
sphinxcontrib-applehelp==1.0.1
sphinxcontrib-devhelp==1.0.1
sphinxcontrib-htmlhelp==1.0.2
sphinxcontrib-jsmath==1.0.1
sphinxcontrib-qthelp==1.0.2
sphinxcontrib-serializinghtml==1.1.3
urllib3==1.25.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is automated with a make rule next.&lt;/p&gt;
&lt;h2 id="automating-the-step-with-a-make-rule"&gt;Automating the step with a make rule&lt;/h2&gt;
&lt;p&gt;We have a nice Makefile rule that can be dropped into
any Makefile that allows users to run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and it will use &lt;code&gt;requirements.txt.in&lt;/code&gt;, perform the above steps, and output an updated &lt;code&gt;requirements.txt&lt;/code&gt; with the
latest compatible versions of software.&lt;/p&gt;
&lt;p&gt;Here is the Makefile rule:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;requirements.txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;txt&lt;/span&gt; : %.&lt;span class="n"&gt;txt&lt;/span&gt;.&lt;span class="n"&gt;in&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt; ! -e .requirements-env &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    virtualenv -p &lt;span class="k"&gt;$(&lt;/span&gt;shell which python3&lt;span class="k"&gt;)&lt;/span&gt; .$&amp;lt;-env
    .$&amp;lt;-env/bin/pip install -r &lt;span class="nv"&gt;$@&lt;/span&gt;
    .$&amp;lt;-env/bin/pip install -r $&amp;lt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;# You should not edit this file directly.  Instead, you should edit &lt;/span&gt;$&lt;span class="s2"&gt;&amp;lt;.&amp;quot;&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
    .$&amp;lt;-env/bin/pip freeze &amp;gt;&amp;gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
    rm -rf .$&amp;lt;-env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Summary of the make rule:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first two lines create a virtual environment at &lt;code&gt;.requirements-env/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The next two lines run &lt;code&gt;pip install&lt;/code&gt;, first on &lt;code&gt;requirements.txt&lt;/code&gt; (the existing version), then
  &lt;code&gt;requirements.txt.in&lt;/code&gt; (which installs/updates any software packages in &lt;code&gt;requirements.txt.in&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A comment is added to the top of the &lt;code&gt;requirements.txt&lt;/code&gt; file to help give users a hint about
  where to update software requirements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;pip freeze&lt;/code&gt; command is used to create a &lt;code&gt;requirements.txt&lt;/code&gt; file from the current virtual
  environment&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="refreshing-requirements"&gt;Refreshing requirements&lt;/h2&gt;
&lt;p&gt;To update the requirements, update the &lt;code&gt;requirements.txt&lt;/code&gt; with these manual steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;refresh_all_requirements&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @cat /dev/null &amp;gt; requirements.txt
    @if &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;uname -s&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Darwin&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; sleep &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;  &lt;span class="c1"&gt;# this is require because Darwin HFS+ only has second-resolution for timestamps.&lt;/span&gt;
    @touch requirements.txt.in
    @&lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now &lt;code&gt;requirements.txt&lt;/code&gt; can be updated with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make refresh_all_requirements
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can be done periodically, and the new &lt;code&gt;requirements.txt&lt;/code&gt; updated in the version control system.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="pip"></category><category term="version control"></category><category term="make"></category><category term="makefile"></category></entry><entry><title>Git Workflows, Part 3: Refactoring Large Branches and Pull Requests</title><link href="https://charlesreid1.github.io/git-workflows-part-3-refactoring-large-branches-and-pull-requests.html" rel="alternate"></link><published>2019-12-08T15:00:00-08:00</published><updated>2019-12-08T15:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-12-08:/git-workflows-part-3-refactoring-large-branches-and-pull-requests.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#managing-complexity"&gt;Managing Complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refactoring-large-branches"&gt;Refactoring Large Branches&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#converting-a-set-of-commits-to-unstaged-changes"&gt;Converting a Set of Commits to Unstaged Changes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#git-format-patch"&gt;git format-patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cherry-pick-and-unstage"&gt;cherry-pick and unstage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#soft-reset-and-commit"&gt;soft reset and commit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#refactoring-large-pull-requests"&gt;Refactoring Large Pull Requests&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#chaining-pull-requests"&gt;Chaining Pull Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#preparing-to-merge-a-large-pull-request"&gt;Preparing to Merge a Large Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rinse-and-repeat"&gt;Rinse and Repeat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-merge-into-master"&gt;Final Merge into Master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;If a feature branch or pull request gets too complicated and should be refactored
  into simpler pieces:&lt;ul&gt;
&lt;li&gt;Create a new feature branch from the original destination branch&lt;/li&gt;
&lt;li&gt;Turn commits into patches, or cherry-pick commits (leaving changes unstaged)&lt;/li&gt;
&lt;li&gt;Apply patches or cherry-picks to the feature branch&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git add --patch&lt;/code&gt; or &lt;code&gt;git add â€¦&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#managing-complexity"&gt;Managing Complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refactoring-large-branches"&gt;Refactoring Large Branches&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#converting-a-set-of-commits-to-unstaged-changes"&gt;Converting a Set of Commits to Unstaged Changes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#git-format-patch"&gt;git format-patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cherry-pick-and-unstage"&gt;cherry-pick and unstage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#soft-reset-and-commit"&gt;soft reset and commit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#refactoring-large-pull-requests"&gt;Refactoring Large Pull Requests&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#chaining-pull-requests"&gt;Chaining Pull Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#preparing-to-merge-a-large-pull-request"&gt;Preparing to Merge a Large Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rinse-and-repeat"&gt;Rinse and Repeat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-merge-into-master"&gt;Final Merge into Master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;If a feature branch or pull request gets too complicated and should be refactored
  into simpler pieces:&lt;ul&gt;
&lt;li&gt;Create a new feature branch from the original destination branch&lt;/li&gt;
&lt;li&gt;Turn commits into patches, or cherry-pick commits (leaving changes unstaged)&lt;/li&gt;
&lt;li&gt;Apply patches or cherry-picks to the feature branch&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git add --patch&lt;/code&gt; or &lt;code&gt;git add --edit&lt;/code&gt; to selectively split out changes into separate commits&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post contains many common patterns applied to different workflows.&lt;/p&gt;
&lt;h1 id="managing-complexity"&gt;Managing Complexity&lt;/h1&gt;
&lt;p&gt;When collaborating on software, especially large software with people who are not the
primary developers, it is important to limit the complexity of features and proposed
changes. Why is it bad practice to propose large, complex changes?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is harder to review the proposed changes&lt;/li&gt;
&lt;li&gt;Bugs increase in likelihood, and increase in likelihood far faster than the amount of code.&lt;/li&gt;
&lt;li&gt;More complex changes usually combine &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="refactoring-large-branches"&gt;Refactoring Large Branches&lt;/h1&gt;
&lt;p&gt;Consider the case of a large feature branch that is suffering from feature creep (trying to
cram too many changes into one branch.) For example, in the process of implementing a feature,
you may also implement significant fixups, refactoring of functions, and code cleanup that is
in the same file but not entirely related. While writing tests for the new feature, you may also
refactor tests to be cleaner, or to use context manager foobar, or etc.&lt;/p&gt;
&lt;p&gt;To illustrate: suppose you are on a branch called &lt;code&gt;feature&lt;/code&gt; (created off of &lt;code&gt;master&lt;/code&gt;) that consists of
three sets of changes, DEF:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A - B - C (master)
    \
     D1 - E1 - D2 - F1 - E2 - F2 - D3 - F3 - E3 (feature)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;D corresponds to implementing the new feature and writing tests for it&lt;/li&gt;
&lt;li&gt;E corresponds to fixups to the same file that was changed to implement the feature&lt;/li&gt;
&lt;li&gt;F corresponds to fixups to tests unrelated to the new feature&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, in reality, if things were really so clean, if you had a time machine or the patience to
to rebase commits one at a time and split them into atomic changes only to the features in their
scope (which would be super easy because of course your git logs are filled with helpful, concise
commit messages) you could use &lt;code&gt;git cherry-pick&lt;/code&gt; to replay commits D1, D2, D3 onto a new D
branch, and so on. &lt;/p&gt;
&lt;p&gt;But in reality, commit F1 contains a little bit of E1, and D2, and vice versa, and so on.
It's much easier to navigate a diff and select pieces from it.  That's were &lt;code&gt;git add -e&lt;/code&gt;
(or &lt;code&gt;--edit&lt;/code&gt;) will help.&lt;/p&gt;
&lt;p&gt;We also have to turn a set of commits into a single set of unstaged changes (meaning, replay
the changes each commit made but not replay the commits themselves). There are a few ways
to do this, we'll cover two ways: squashing and rolling back a set of commits, and converting
a set of commits into a set of patch files.&lt;/p&gt;
&lt;p&gt;Once the commits have been rolled back and unstaged, particular changes can be staged for each
split commit using &lt;code&gt;git add -e&lt;/code&gt; and using the editor to select which changes to include or exclude
from the commit. As each commit is created, branches can be created that are linked to the group
of changes in each new commit.&lt;/p&gt;
&lt;h2 id="converting-a-set-of-commits-to-unstaged-changes"&gt;Converting a Set of Commits to Unstaged Changes&lt;/h2&gt;
&lt;p&gt;We are trying to untangle a set of unrelated changes into separate commits that group related
changes together. For the example, we want to convert this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A - B - C (master)
    \
     D1 - E1 - D2 - F1 - E2 - F2 - D3 - F3 - E3 (feature)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A - B - C (master)
    \
     D - E - F (feature)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so that the changes in commits D, E, and F are simpler, more limited in scope, and easier to review.&lt;/p&gt;
&lt;p&gt;We cover three strategies for turning a sequence of commits like &lt;code&gt;D1-E1-...-E3&lt;/code&gt; into a set of unstaged
changes. Then, particular changes can be selectively added to commits using &lt;code&gt;git add -e&lt;/code&gt; (&lt;code&gt;--edit&lt;/code&gt;) or
&lt;code&gt;git add -p&lt;/code&gt; (&lt;code&gt;--patch&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id="git-format-patch"&gt;git format-patch&lt;/h3&gt;
&lt;p&gt;To create a set of patches, one per commit, to edit them or apply them in various orders,
you can use &lt;code&gt;git format-patch&lt;/code&gt; with a commit range:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git format-patch D1..E3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create a series of patches like &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;patches/0001-the-D1-commit-message.patch
patches/0001-the-E1-commit-message.patch
patches/0001-the-D2-commit-message.patch
patches/0001-the-F1-commit-message.patch
patches/0001-the-E2-commit-message.patch
patches/0001-the-F2-commit-message.patch
patches/0001-the-D3-commit-message.patch
patches/0001-the-F3-commit-message.patch
patches/0001-the-E3-commit-message.patch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Patches can be further split or modified, and can be applied in the desired order (although
changes in line numbers happening out of order may confuse the program applying the patch).&lt;/p&gt;
&lt;p&gt;Start by creating a branch from the desired commit (commit &lt;code&gt;B&lt;/code&gt; in the diagram above):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(where &lt;code&gt;B&lt;/code&gt; should be either the commit hash for commit B, or a tag or branch that is associated
with commit B). Now create a branch that will start from that commit (we'll start with our branch
for feature D here):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout -b feature-d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now apply patches to the new branch, which will start from commit &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To apply a patch, use &lt;code&gt;patch -p1&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;patch -p1 &amp;lt; 0001-the-D1-commit-message.patch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;-p1&lt;/code&gt; strips the prefix by 1 directory level, which is necessary with patches created
by git. We use &lt;code&gt;patch&lt;/code&gt; rather than &lt;code&gt;git am&lt;/code&gt; to apply the patch, because we want to apply
the changes independent of git, and only stage the changes we want into our next commit.&lt;/p&gt;
&lt;p&gt;If you have a series of commits that you want to squash, that's also easy to do by applying
each patch for those commits, then staging all the changes from those patches into a new
commit.&lt;/p&gt;
&lt;p&gt;As patches are applied, particular changes can be staged and commits can be crafted. Use 
the &lt;code&gt;--edit&lt;/code&gt; or &lt;code&gt;--patch&lt;/code&gt; flags of &lt;code&gt;git add&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add --edit &amp;lt;filename&amp;gt;
git add --patch &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This allows selective filtering of particular edits into the next commit, so that one patch
(or any number of patches) can be applied, and selective changes can be staged into a commit.&lt;/p&gt;
&lt;p&gt;Once you are ready, just run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;without specifying the filename. (If you specify the filename, it will stage all changes,
and ignore the crafting you've done.)&lt;/p&gt;
&lt;p&gt;As you create a commit or a set of commits specific to changeset D, you can work on a D branch.
When you finish all commits related to D, you can start a new branch with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout feature-e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;that will start a new branch from where the d-branch left off. Chaining your
changes together into several small branches that build on each other will 
help keep pull requests simpler too.&lt;/p&gt;
&lt;p&gt;The advantages of this approach include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Commits can be split by applying the patch and staging particular edits&lt;/li&gt;
&lt;li&gt;The ability to split single commits into more commits, or combine/squash commits together, means
  this approach has a lot of flexibility&lt;/li&gt;
&lt;li&gt;Best for some situations where, e.g., a long series of commits with many small commits that should
  be squashed and some large commits that should be split &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The disadvantages of this approach include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Patches applied out of order can confuse the program applying the patches&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cherry-pick-and-unstage"&gt;cherry-pick and unstage&lt;/h3&gt;
&lt;p&gt;An alternative to the above workflow is to use &lt;code&gt;git cherry-pick&lt;/code&gt; to apply the changes from particular
commits, but to leave those changes unstaged using the &lt;code&gt;--no-commit&lt;/code&gt; or &lt;code&gt;-n&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git cherry-pick --no-commit &amp;lt;commit-hash&amp;gt;
git cherry-pick -n &amp;lt;commit-hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, a range of commits can be used instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git cherry-pick -n &amp;lt;commit-hash-start&amp;gt;..&amp;lt;commit-hash-end&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can help achieve a similar level of flexibility to the patch approach.&lt;/p&gt;
&lt;h3 id="soft-reset-and-commit"&gt;soft reset and commit&lt;/h3&gt;
&lt;p&gt;Suppose the commit history is simple enough that you can squash all of the commits together
into a single diff set, and pick the changes to split into commits D, E, and F.&lt;/p&gt;
&lt;p&gt;In that case, the easiest way might be to roll back all of the commits made, but preserve
the changes that each commit made. This is precisely what a &lt;em&gt;soft reset&lt;/em&gt; will do.&lt;/p&gt;
&lt;p&gt;For the git commit history&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A - B - C (master)
    \
     D1 - E1 - D2 - F1 - E2 - F2 - D3 - F3 - E3 (feature)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git reset --soft B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to move the HEAD pointer to commit B, while also &lt;em&gt;preserving&lt;/em&gt; all changes made from the
start of the feature branch &lt;code&gt;D1&lt;/code&gt; to the tip of the feature branch &lt;code&gt;E3&lt;/code&gt;, all added as
staged changes (as though they had been &lt;code&gt;git add&lt;/code&gt;-ed).&lt;/p&gt;
&lt;p&gt;The changes will be staged, but changes to files can be unstaged using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git restore --staged &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now add changes selectively using the &lt;code&gt;--edit&lt;/code&gt; or &lt;code&gt;--patch&lt;/code&gt; flags&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add --edit &amp;lt;filename&amp;gt;
git add --patch &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If desired, those changes can be unstaged, and then re-staged using &lt;code&gt;git add --edit&lt;/code&gt; or
&lt;code&gt;git add --patch&lt;/code&gt; to selectively add changes to particular commits.&lt;/p&gt;
&lt;p&gt;When done, run &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;with no arguments to commit the changes you made.&lt;/p&gt;
&lt;h1 id="refactoring-large-pull-requests"&gt;Refactoring Large Pull Requests&lt;/h1&gt;
&lt;p&gt;The approaches above can be useful for refactoring branches. The end result will look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A - B - C (master)
    \
     D (feature-d)
      \ 
       E (feature-e)
        \
         F (feature-f)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now 3 pull requests can be made, one for each feature. Thanks to the refactoring above, each branch
should be a more isolated set of changes that are all related, and therefore easier to review.&lt;/p&gt;
&lt;h2 id="chaining-pull-requests"&gt;Chaining Pull Requests&lt;/h2&gt;
&lt;p&gt;The three D E F branches should be merged in together, since they are all related. But their changes should
be kept separate to make reviewing each branch easier. To accomplish this, chain the pull requests together
like so:&lt;/p&gt;
&lt;p&gt;Pull Request 1: merge &lt;code&gt;feature-d&lt;/code&gt; into &lt;code&gt;master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pull Request 2: merge &lt;code&gt;feature-e&lt;/code&gt; into &lt;code&gt;feature-d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pull Request 3: merge &lt;code&gt;feature-f&lt;/code&gt; into &lt;code&gt;feature-e&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In this way, each pull request only shows the changes specific to that branch.&lt;/p&gt;
&lt;p&gt;(If each pull request were made against &lt;code&gt;master&lt;/code&gt;, then later branches (F) would also incorporate changes
from prior branches (D), resulting in messy and hard-to-review pull requests.)&lt;/p&gt;
&lt;p&gt;Pull requests are reviewed and discussed, and new commits will probably be added to fix things or incorporate
feedback:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A - B - C (master)
    \
     D - DA - DB (feature-d)
      \ 
       E - EA - EB (feature-e)
        \
         F - FA - FB (feature-f)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="preparing-to-merge-a-large-pull-request"&gt;Preparing to Merge a Large Pull Request&lt;/h2&gt;
&lt;p&gt;All of your pull requests are approved and ready to merge. Now what?&lt;/p&gt;
&lt;p&gt;Pull requests will need to be merged in reverse order (last PR is merged first - f into e, e into d, d into
master).  To test that things go smoothly with the first pull request (&lt;code&gt;feature-f&lt;/code&gt; into &lt;code&gt;feature-e&lt;/code&gt;), we should
create a local E-F integration branch.&lt;/p&gt;
&lt;p&gt;The local integration branch will have new commits if changes are needed to resolve merge conflicts or fix
broken tests. Any changes made can be added to the &lt;code&gt;feature-f&lt;/code&gt; branch and pushed to the remote, so that
they are part of the pull request, making the merge into &lt;code&gt;feature-e&lt;/code&gt; go smoothly.&lt;/p&gt;
&lt;p&gt;To create a throwaway E-F integration branch, we start by creating a test integration branch from the tip of the
&lt;code&gt;feature-f&lt;/code&gt; branch, and we will merge branch &lt;code&gt;feature-e&lt;/code&gt; into branch &lt;code&gt;feature-f&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout feature-f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we create a local E-F integration branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout -b integration-e-f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we merge &lt;code&gt;feature-e&lt;/code&gt; into &lt;code&gt;integration-e-f&lt;/code&gt;, which is the same as &lt;code&gt;feature-f&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git merge --no-ff feature-e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;--no-ff&lt;/code&gt; flag creates a separate merge commit, which is useful here to keep our commit history clean.&lt;/p&gt;
&lt;p&gt;If merge conflicts are encountered, those can be resolved in the usual manner, and the (conflict-free) new
versions of each file, reflecting changes from &lt;code&gt;feature-f&lt;/code&gt; and &lt;code&gt;feature-e&lt;/code&gt;, will all be present after the
merge commit.&lt;/p&gt;
&lt;p&gt;Further commits can also be made to make tests pass, with a resulting git diagram:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A - B - C (master)
    \
     D - DA - DB (feature-d)
      \ 
       E - EA - EB ----
        \              \
         F - FA - FB - EF1 - EF2 (integration-e-f)
                              ^
                             HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the &lt;code&gt;integration-e-f&lt;/code&gt; branch is polished and passing tests, we can re-label it as &lt;code&gt;feature-f&lt;/code&gt; and push
the new commits to the remote. To re-label &lt;code&gt;integration-e-f&lt;/code&gt; as &lt;code&gt;feature-f&lt;/code&gt;, assuming we're at the tip of
the &lt;code&gt;integration-e-f&lt;/code&gt; branch (where we left off above):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git branch -D feature-f
git checkout -b feature-f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and push the new commits to the remote's &lt;code&gt;feature-f&lt;/code&gt; branch, before you merge in the pull request (&lt;code&gt;feature-f&lt;/code&gt;
into &lt;code&gt;feature-e&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git push origin feature-f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you are ready to merge pull request 3 (F into E).&lt;/p&gt;
&lt;h2 id="rinse-and-repeat"&gt;Rinse and Repeat&lt;/h2&gt;
&lt;p&gt;Rinse and repeat for pull requests 2 and 1.&lt;/p&gt;
&lt;p&gt;For Pull Request 2, we start by creating a new &lt;code&gt;integration-d-e-f&lt;/code&gt; branch from the tip of the
&lt;code&gt;integration-e-f&lt;/code&gt; branch, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout integration-d-e
git checkout -b integration-d-e-f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and use the same approach of merging in the &lt;code&gt;feature-d&lt;/code&gt; branch with an explicit merge commit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git merge --no-ff feature-d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Work out any merge conflicts that result, and add any additional changes needed to get tests passing,
and you should now have a git commit history like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A - B - C (master)
    \
     D - DA - DB ----------------
      \                          \
       E - EA - EB ----           \
        \              \           \
         F - FA - FB - EF1 - EF2 - DEF1 - DEF2 (integration-d-e-f)
                                            ^
                                           HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now re-label the &lt;code&gt;integration-d-e-f&lt;/code&gt; branch as &lt;code&gt;feature-e&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git branch -D feature-e &amp;amp;&amp;amp; git checkout -b feature-e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, push all new commits to the remote, including the new merge
commit, which will make sure the pull request can be merged without
any conflicts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git push origin feature-e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now PR 2 (E into D) can be merged.&lt;/p&gt;
&lt;h2 id="final-merge-into-master"&gt;Final Merge into Master&lt;/h2&gt;
&lt;p&gt;The last and final PR, D into master, will merge all combined feature
branches into the master branch. We start with a &lt;code&gt;feature-d&lt;/code&gt; branch
that has several commits related to feature D, then several commits
from merging the &lt;code&gt;feature-e&lt;/code&gt; branch in (pull request 2, E into D),
and the &lt;code&gt;feature-e&lt;/code&gt; branch also had &lt;code&gt;feature-f&lt;/code&gt; merged into it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A - B - C (master)
     \
      D - D2 - DEF1 - DEF2 (feature-d)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we will create one more commit on the &lt;code&gt;feature-d&lt;/code&gt; branch that is
merging &lt;code&gt;master&lt;/code&gt; into &lt;code&gt;feature-d&lt;/code&gt;, which will help the merge happen
smoothly for pull request 1 (D into master).&lt;/p&gt;
&lt;p&gt;But first we switch to an integration branch, in case things don't go
smoothly and we want to throw away the merge commit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git branch integration-def-master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create an explicit merge commit to merge &lt;code&gt;master&lt;/code&gt; into &lt;code&gt;integration-def-master&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git merge --no-ff master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Work out any merge conflicts that result, and add any additional changes needed to get tests passing,
and you should now have a git commit history like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;A - B - C (master)
     \   \---------------------
      \                        \
       D - D2 - DEF1 - DEF2 - DEF3 (integration-def-master)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where commit &lt;code&gt;DEF3&lt;/code&gt; is the merge commit created with the &lt;code&gt;--no-ff&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;The merge commit will resolve any conflicts. When you're satisfied with the
merge commit, you can switch out the &lt;code&gt;integration-def-master&lt;/code&gt; branch with the
&lt;code&gt;feature-d&lt;/code&gt; branch like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git branch -D feature-d
git checkout -b feature-d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can push the merge commit to the remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git push origin feature-d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and you're now ready to merge your (conflict-free) pull request!&lt;/p&gt;</content><category term="Git"></category><category term="git"></category><category term="rebase"></category><category term="cherry-pick"></category><category term="branching"></category><category term="version control"></category></entry><entry><title>Git Workflows, Part 2: Crafting Commits</title><link href="https://charlesreid1.github.io/git-workflows-part-2-crafting-commits.html" rel="alternate"></link><published>2019-11-14T20:00:00-08:00</published><updated>2019-11-14T20:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-11-14:/git-workflows-part-2-crafting-commits.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-commit"&gt;What is a commit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#git-add"&gt;git add&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-commit"&gt;git commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-rebase"&gt;git rebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-fetch-and-git-pull"&gt;git fetch and git pull&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#rebase-merge-branch-pass"&gt;rebase, merge, branch, pass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-push"&gt;git push&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#force-pushing"&gt;force pushing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#commit-workflow"&gt;Commit Workflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#principles"&gt;Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#making-small-commits"&gt;Making Small Commits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#git-add-patch-mode"&gt;git add patch mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-add-editor-mode"&gt;git add editor mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#modifying-commits"&gt;Modifying Commits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#git-rebase_1"&gt;git rebase&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#rebasing-a-range-of-commits"&gt;rebasing a range of commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rebasing-onto-another-branch"&gt;rebasing onto another branch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#rearranging-commits"&gt;Rearranging Commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combining-commits"&gt;Combining Commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make your commits small and atomic, and recombine them into
  larger commits later; it's easier to combine smaller commits
  than to split large commits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make use of &lt;code&gt;git add -p&lt;/code&gt; and &lt;code&gt;git add -e&lt;/code&gt; to stage
  changes selectively and atomically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-commit"&gt;What is a commit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#git-add"&gt;git add&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-commit"&gt;git commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-rebase"&gt;git rebase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-fetch-and-git-pull"&gt;git fetch and git pull&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#rebase-merge-branch-pass"&gt;rebase, merge, branch, pass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-push"&gt;git push&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#force-pushing"&gt;force pushing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#commit-workflow"&gt;Commit Workflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#principles"&gt;Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#making-small-commits"&gt;Making Small Commits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#git-add-patch-mode"&gt;git add patch mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-add-editor-mode"&gt;git add editor mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#modifying-commits"&gt;Modifying Commits&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#git-rebase_1"&gt;git rebase&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#rebasing-a-range-of-commits"&gt;rebasing a range of commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rebasing-onto-another-branch"&gt;rebasing onto another branch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#rearranging-commits"&gt;Rearranging Commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combining-commits"&gt;Combining Commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make your commits small and atomic, and recombine them into
  larger commits later; it's easier to combine smaller commits
  than to split large commits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make use of &lt;code&gt;git add -p&lt;/code&gt; and &lt;code&gt;git add -e&lt;/code&gt; to stage
  changes selectively and atomically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make use of &lt;code&gt;git rebase&lt;/code&gt; and &lt;code&gt;git cherry-pick&lt;/code&gt; to edit your
  commits and assemble them in the order you want.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once commits have been combine and the history is satisfactory,
  push to a remote to share the work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Think about ordering your commits to "tell a story". (What that
  means will depend on the people you are collaborating with!)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="what-is-a-commit"&gt;What is a commit&lt;/h1&gt;
&lt;p&gt;Before we get into the good stuff, let's talk about the
anatomy of a git commit.&lt;/p&gt;
&lt;p&gt;When you add files to your git repository, it's a two-step
process: &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt;. The first step &lt;em&gt;stages&lt;/em&gt;
your changes, the second step memorializes those staged changes
into a commit that can now be shared with others by pushing it
to git remotes.&lt;/p&gt;
&lt;h2 id="git-add"&gt;git add&lt;/h2&gt;
&lt;p&gt;It is important to know that git does not keep track of changes at
the file level, it keeps track of changes at the character/line level.&lt;/p&gt;
&lt;p&gt;What that means is, when you modify a line in a file that is in your
git repository, and run &lt;code&gt;git add&lt;/code&gt; to stage your change, git has created
an object under the hood called a &lt;em&gt;blob&lt;/em&gt; to represent that one line change.&lt;/p&gt;
&lt;p&gt;If you change two lines in two different parts of a file, and stage those
changes using &lt;code&gt;git add&lt;/code&gt;, git will treat this as two separate changes, and
represent the changes with two different blobs.&lt;/p&gt;
&lt;h2 id="git-commit"&gt;git commit&lt;/h2&gt;
&lt;p&gt;As you use &lt;code&gt;git add&lt;/code&gt; to prepare your changes, the changes are added to
a &lt;em&gt;staging area&lt;/em&gt;. Think of this staging area as a draft commit. Each change
being added to the staging area changes how the commit will look. When the
changes are complete and the user runs &lt;code&gt;git commit&lt;/code&gt;, it turns the staging
area into a real commit, creates the metadata, and calculates hashes.&lt;/p&gt;
&lt;p&gt;When a commit is created, it receives a name, which is the hash of the
contents of the commit. The hash is computed from the contents of the
blobs, plus the metadata about the commit, plus the hash of the prior
commits. Changing a commit changes its hash, and will change the hashes
of all subsequent commits.&lt;/p&gt;
&lt;p&gt;Commits in your local repository can be easily rewritten and edited, and
their hashes changed. A common workflow is to make many small commits,
and recombine them later.&lt;/p&gt;
&lt;p&gt;Because the commit hash is how the commit is named, modifying commits
after you've shared them is bad practice and will create extra work for
your collaborators. For that reason, don't &lt;code&gt;git push&lt;/code&gt; until you're ready
to share your work.&lt;/p&gt;
&lt;h2 id="git-rebase"&gt;git rebase&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;git rebase&lt;/code&gt; command allows you to edit your commit history. We will
cover some usage patterns in the sections below.&lt;/p&gt;
&lt;h2 id="git-fetch-and-git-pull"&gt;git fetch and git pull&lt;/h2&gt;
&lt;p&gt;Before pushing changes to the remote, first check if there have been any
commits since you began your branch.&lt;/p&gt;
&lt;h3 id="rebase-merge-branch-pass"&gt;rebase, merge, branch, pass&lt;/h3&gt;
&lt;p&gt;If a feature branch is created off of the master branch, and some time passes,
the feature branch base commit may grow far out of sync with the master branch.
(Note that &lt;code&gt;master&lt;/code&gt; indicates the primary branch.)&lt;/p&gt;
&lt;p&gt;This leaves the developer of the feature branch (which is out of sync with master) with a few choices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;rebase&lt;/strong&gt; - continue to rebase all commits on the feature branch from the
  (old) original feature branch base commit onto the (new) head commit of the master 
  branch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pros: clean history, easy for one-branch-one-developer workflow&lt;/li&gt;
&lt;li&gt;Cons: requires continual force-pushes, requires coordination between developers
  to prevent squashing others' work, not scalable, some people hate this method&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;merge&lt;/strong&gt; - occasionally merge work from the master branch into the feature branch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pros: simple to understand, simple to carry out, low cognitive load&lt;/li&gt;
&lt;li&gt;Cons: any changes added to the branch via the merge commit will show up in the PR
  as new code, cluttering PR reviews by mixing features with merged changes; can also
  make the commit history messy and harder to understand.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;branch&lt;/strong&gt; - by making heavy use of throwaway branches and integration branches,
  it is easier to test out how the integration of a feature branch based on an old
  commit on &lt;code&gt;master&lt;/code&gt; will do when merging it in with a newer version of &lt;code&gt;master&lt;/code&gt;.
  Use throwaway integration branches to test out merging the two branches together,
  testing its functionality, etc. You can also rebase or cherry pick commits onto
  the throwaway integration branch, and figure out how to arrange the commits on a
  branch to "rebuild" it into a working, mergeable branch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pros: easy to do, encourages local use of throwaway branches&lt;/li&gt;
&lt;li&gt;Cons: clutters branches, integration process has to be repeated (can be mitigated
  with &lt;code&gt;git rerere&lt;/code&gt;), merge commits must wait until PR is approved&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pass&lt;/strong&gt; - best combined with the branch approach mentioned above, the pass approach
  is to leave the branch history clean, avoid force-pushes, and rely on throwaway
  branches to test out merge strategies once the inevitable PR merge needs to happen.
  It can also be useful to wait for code reviews to finish, then create a merge commit
  to make the merge happen smoothly.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pros: easy to do&lt;/li&gt;
&lt;li&gt;Cons: merge commits must wait until PR is approved&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="git-push"&gt;git push&lt;/h2&gt;
&lt;p&gt;Once you run &lt;code&gt;git push&lt;/code&gt;, all of the commits on the branch that you pushed
will end up on the remote, where others can access them. The purpose
of a &lt;code&gt;git push&lt;/code&gt; is to share commits, so generally you don't push branches
until they are ready to share. This also allows more flexibility in crafting,
rewriting, and combining commits.&lt;/p&gt;
&lt;h2 id="force-pushing"&gt;force pushing&lt;/h2&gt;
&lt;p&gt;If you pushed a branch (which is a collection of commits) to a remote,
and then you have edited those commits, you will run into a problem when
you try and &lt;code&gt;git push&lt;/code&gt; the new, edited versions of the commits to the same
remote. The remote will detect that there are conflicting versions of
the branch and will reject the changes.&lt;/p&gt;
&lt;p&gt;That's where &lt;code&gt;git push --force&lt;/code&gt; comes in. The &lt;code&gt;--force&lt;/code&gt; flag tells the
remote to discard its version of the branch and use the version of the
branch that you are pushing.&lt;/p&gt;
&lt;p&gt;We will cover more about force pushing - when to do it, when not to, and
why some people hate it - in a later post. For now, we will only say
that you should not force push often, since you can risk deleting others' work
and creating additional confusion and work for all of your collaborators.&lt;/p&gt;
&lt;h1 id="commit-workflow"&gt;Commit Workflow&lt;/h1&gt;
&lt;h2 id="principles"&gt;Principles&lt;/h2&gt;
&lt;p&gt;Here are some principles for your &lt;code&gt;git commit&lt;/code&gt; workflow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Commit small changes often.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't sweat the commit messages - they can be fixed up later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Related - nobody will see your commits until you push your branch,
  so think of your branch as a scratch space. You have the ultimate
  freedom to use it however you want.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Branches are easy to create, so make liberal use of branches!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be wary of force pushing, and of rewriting history.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="making-small-commits"&gt;Making Small Commits&lt;/h2&gt;
&lt;p&gt;Two essential git commands to help with making small commits are
git add (patch mode) and git add (interactive mode).&lt;/p&gt;
&lt;h3 id="git-add-patch-mode"&gt;git add patch mode&lt;/h3&gt;
&lt;p&gt;How to use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add -p &amp;lt;name-of-file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;git add -p&lt;/code&gt; command allows the user to interactively stage
individual changes made (in what is called patch mode). This means
users can stage certain changes for one commit, then stage other
changes for a different commit.&lt;/p&gt;
&lt;p&gt;This solves the problem of making a long sequence of changes
to a single file that should be logically separated into
different steps. (For example, changing the &lt;code&gt;import&lt;/code&gt; statements
versus changing the name of a variable throughout a file).&lt;/p&gt;
&lt;p&gt;For example, suppose we have the following changes to a file named &lt;code&gt;doit.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git diff doit.sh
diff --git a/doit.sh b/doit.sh
index 3b938a1..6c1aec8 100644
--- a/doit.sh
+++ b/doit.sh
@@ -1,6 +1,6 @@
 #!/bin/bash
 #
-# This script lists the 40 largest files in the git repo history
+# This script lists the 50 largest files in the git repo history

 $ git rev-list --all --objects | \
      sed -n $(git rev-list --objects --all | \
@@ -9,9 +9,9 @@ $ git rev-list --all --objects | \
      grep blob | \
      sort -n -k 3 | \
      \
-     tail -n40 | \
+     tail -n50 | \
      \
      while read hash type size; do
           echo -n &amp;quot;-e s/$hash/$size/p &amp;quot;;
      done) | \
-     sort -n -r -k1
+     sort -nru -k1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are two related changes and one unrelated change, respectively:
the two related changes are the change to the comment and the change
to the &lt;code&gt;tail&lt;/code&gt; command; the unrelated change is adding the &lt;code&gt;-u&lt;/code&gt; flag
to the &lt;code&gt;sort&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;We can split these changes into two commits using &lt;code&gt;git add -p doit.sh&lt;/code&gt;,
which will walk through each change in the file and ask if we want to
stage it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git add -p doit.sh
diff --git a/doit.sh b/doit.sh
index 3b938a1..6c1aec8 100644
--- a/doit.sh
+++ b/doit.sh
@@ -1,6 +1,6 @@
 #!/bin/bash
 #
-# This script lists the 40 largest files in the git repo history
+# This script lists the 50 largest files in the git repo history

 $ git rev-list --all --objects | \
      sed -n $(git rev-list --objects --all | \
Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? y

@@ -9,9 +9,9 @@ $ git rev-list --all --objects | \
      grep blob | \
      sort -n -k 3 | \
      \
-     tail -n40 | \
+     tail -n50 | \
      \
      while read hash type size; do
Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? y

@@ -14,14 +14,14 @@        echo -n &amp;quot;-e s/$hash/$size/p &amp;quot;;
      done) | \
-     sort -n -r -k1
+     sort -nru -k1
Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the two related changes are staged, and the unrelated change is not staged.
This is reflected in &lt;code&gt;git status&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git status
On branch master
Your branch is ahead of &amp;#39;gh/master&amp;#39; by 2 commits.
  (use &amp;quot;git push&amp;quot; to publish your local commits)

Changes to be committed:
  (use &amp;quot;git restore --staged &amp;lt;file&amp;gt;...&amp;quot; to unstage)
    modified:   doit.sh

Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git restore &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
    modified:   doit.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now &lt;code&gt;git commit&lt;/code&gt; will commit only the staged portions.&lt;/p&gt;
&lt;p&gt;Do not provide any filenames to &lt;code&gt;git commit&lt;/code&gt;, so that git will only commit the staged changes.&lt;/p&gt;
&lt;p&gt;To use this in your workflow, think about how you can group different changes together into
different commits. If you get a portion of a feature working, you can commit the changes in
groups so that related changes get committed together.&lt;/p&gt;
&lt;p&gt;Also remember that if your commit history ends up being excessively long or overly detailed,
you can always examine what changes different commits made with &lt;code&gt;git diff&lt;/code&gt;, and reorder them
with &lt;code&gt;git cherry-pick&lt;/code&gt; or modify/combine them with &lt;code&gt;git rebase&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="git-add-editor-mode"&gt;git add editor mode&lt;/h3&gt;
&lt;p&gt;How to use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add -e &amp;lt;name-of-file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Like the interactive patch mode, &lt;code&gt;git add -e&lt;/code&gt; allows you to selectively
stage certain changes in a file. But it's much better for keyboard jockeys
and those that love their text editor, because you can choose which changes
to stage or not using the text editor.&lt;/p&gt;
&lt;p&gt;A sidebar:&lt;/p&gt;
&lt;p&gt;If you have not yet set the text editor that git uses, you should
do that now. Modify your git configuration with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git config --global core.editor vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, put the following in your &lt;code&gt;~/.gitconfig&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[core]
    editor = vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Or, you know, whatever your text editor of choice is.)&lt;/p&gt;
&lt;p&gt;End of sidebar.&lt;/p&gt;
&lt;p&gt;When you pass the &lt;code&gt;-e&lt;/code&gt; flag to git add, it will open a new editor window with the full diff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;diff --git a/doit.sh b/doit.sh
index 326273c..14e4059 100644
--- a/doit.sh
+++ b/doit.sh
@@ -1,17 +1,17 @@
 #!/bin/bash
 #
-# This script lists the 50 largest files in the git repo history
+# This script lists the 10 largest files in the git repo history

 $ git rev-list --all --objects | \
      sed -n $(git rev-list --objects --all | \
      cut -f1 -d&amp;#39; &amp;#39; | \
      git cat-file --batch-check | \
      grep blob | \
      sort -n -k 3 | \
      \
-     tail -n50 | \
+     tail -n10 | \
      \
      while read hash type size; do
           echo -n &amp;quot;-e s/$hash/$size/p &amp;quot;;
      done) | \
-     sort -nru -k1
+     sort -nr -k1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Editing this file requires some care!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fortunately there is a section in the documentation for
&lt;a href="https://git-scm.com/docs/git-add"&gt;git add&lt;/a&gt; called
&lt;a href="https://git-scm.com/docs/git-add#_editing_patches"&gt;Editing Patches&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Two things to remember:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lines starting with &lt;code&gt;+&lt;/code&gt; indicate new, added content. To prevent this
  content from being added, delete the line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lines starting with &lt;code&gt;-&lt;/code&gt; indicate removed content. To keep this content,
  replace &lt;code&gt;-&lt;/code&gt; with a space (&lt;code&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you are finished, make sure you review the changes that are staged,
particularly if this is the first time seeing patch files or the diff
syntax.&lt;/p&gt;
&lt;h2 id="modifying-commits"&gt;Modifying Commits&lt;/h2&gt;
&lt;p&gt;There is always some reason or another to modify the commit history of a repository -
perhaps someone's work was lost, or the wrong issue or pull request number was referenced,
or a username was misspelled.&lt;/p&gt;
&lt;p&gt;You can always modify a commit, but it will also modify every commit that came after it.
Think of it like replaying the changes recorded in each commit onto the new branch. The
contents of each commit changes slightly, so the hash (the name) of every commit changes.&lt;/p&gt;
&lt;h3 id="git-rebase_1"&gt;git rebase&lt;/h3&gt;
&lt;p&gt;To do a git rebase, an interactive rebase (the &lt;code&gt;-i&lt;/code&gt; flag) is recommended.&lt;/p&gt;
&lt;p&gt;The rebase action takes two commits, and will replay the commits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; The first commit given (the start commit) is &lt;em&gt;not&lt;/em&gt; included
in the rebase. To include it, add &lt;code&gt;~1&lt;/code&gt; to the start commit. (For example,
&lt;code&gt;0a1b2c3d~1&lt;/code&gt; refers to the commit before commit &lt;code&gt;0a1b2c3d&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="rebasing-a-range-of-commits"&gt;rebasing a range of commits&lt;/h4&gt;
&lt;p&gt;To rebase from the start commit hash to the end commit hash, and include the start commit
in the rebase, the rebase command is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git rebase -i START_COMMIT_HASH~1 END_COMMIT_HASH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This does not indicate a destination branch. The default behavior is for the branch to move
and the new pile of commits to retain the same branch name.&lt;/p&gt;
&lt;h4 id="rebasing-onto-another-branch"&gt;rebasing onto another branch&lt;/h4&gt;
&lt;p&gt;To rebase a range of commits onto a different branch (for example, onto a &lt;code&gt;master&lt;/code&gt; branch
that has the latest changes from the remote), use the &lt;code&gt;--onto&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git rebase -i START_COMMIT_HASH END_COMMIT_HASH --onto TARGET_BRANCH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; The above rebase commands will leave your repo in a headless state - unlike
the behavior of the prior command, the branch label will not move with you to the new pile
of commits.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;git checkout -b &amp;lt;branchname&amp;gt;&lt;/code&gt; to give your new rebased branch a meaningful name.
This creates a branch wherever HEAD is, which is pointing to the top of the pile of rebased
commits.&lt;/p&gt;
&lt;p&gt;If you want the old branch label to move to the new pile of commits, it requires a bit of branch
housekeeping - you have to delete the old branch, then create a new branch from where
HEAD is (the end of the rebase), then check out that branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git branch -D &amp;lt;branchname&amp;gt; &amp;amp;&amp;amp; git checkout -b &amp;lt;branchname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="rearranging-commits"&gt;Rearranging Commits&lt;/h2&gt;
&lt;p&gt;Where rebasing allows for editing commits en masse, cherry picking allows the changes made in
individual commits to be applied anywhere - including other branches. This makes the atomic
commit principle from the beginning of this post much easier - groups of related commits that
happened out of order can be rearranged by cherry picking them onto a new branch, and the new
branch is a better "story".&lt;/p&gt;
&lt;h2 id="combining-commits"&gt;Combining Commits&lt;/h2&gt;
&lt;p&gt;The cherry pick operation can also be combined with a rebase - once multiple small commits are
arranged together chronologically, a git rebase operation enables squashing those tiny commits
into a small number of larger commits, all carrying related changes.&lt;/p&gt;</content><category term="Git"></category><category term="git"></category><category term="rebase"></category><category term="cherry-pick"></category><category term="branching"></category><category term="version control"></category></entry><entry><title>Git Workflows, Part 1: Supercharging your Git Config</title><link href="https://charlesreid1.github.io/git-workflows-part-1-supercharging-your-git-config.html" rel="alternate"></link><published>2019-10-07T20:00:00-07:00</published><updated>2019-10-07T20:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-10-07:/git-workflows-part-1-supercharging-your-git-config.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#source"&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#user-section"&gt;User Section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bash-aliases"&gt;Bash Aliases&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-best-one-letter-alias-ever"&gt;The Best One Letter Alias Ever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ending-bad-habits"&gt;Ending Bad Habits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#alias-section"&gt;Alias section&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#log-utils"&gt;Log Utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#status-utils"&gt;Status Utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetching"&gt;Fetching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#branch-utils"&gt;Branch Utils&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#branch-and-checkout"&gt;Branch and Checkout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#remote-utils"&gt;Remote Utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commit-utils"&gt;Commit Utils&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#committing-all-changes"&gt;Committing All Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixing-commits"&gt;Fixing Commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#miscellaneous-utils"&gt;Miscellaneous Utils&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#rebasing-shortcuts"&gt;Rebasing shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#diff-shortcuts"&gt;Diff shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pull-shortcuts"&gt;Pull shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clone-shortcuts"&gt;Clone shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributor-shortcuts"&gt;Contributor shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#core-section"&gt;Core section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#color-section"&gt;Color section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#url-section"&gt;Url section&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="source"&gt;Source&lt;/h1&gt;
&lt;p&gt;Most of the good stuff is from
&lt;a href="https://github.com/mathiasbynens/dotfiles"&gt;https://github.com/mathiasbynens/dotfiles&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="user-section"&gt;User Section&lt;/h1&gt;
&lt;p&gt;Start off easy - here's how you set your email and name for commits:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[user]
    email = foo@bar.com
    name = Foo Bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="bash-aliases"&gt;Bash Aliases&lt;/h1&gt;
&lt;h2 id="the-best-one-letter-alias-ever"&gt;The Best One Letter Alias Ever â€¦&lt;/h2&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#source"&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#user-section"&gt;User Section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bash-aliases"&gt;Bash Aliases&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-best-one-letter-alias-ever"&gt;The Best One Letter Alias Ever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ending-bad-habits"&gt;Ending Bad Habits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#alias-section"&gt;Alias section&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#log-utils"&gt;Log Utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#status-utils"&gt;Status Utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetching"&gt;Fetching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#branch-utils"&gt;Branch Utils&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#branch-and-checkout"&gt;Branch and Checkout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#remote-utils"&gt;Remote Utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commit-utils"&gt;Commit Utils&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#committing-all-changes"&gt;Committing All Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixing-commits"&gt;Fixing Commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#miscellaneous-utils"&gt;Miscellaneous Utils&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#rebasing-shortcuts"&gt;Rebasing shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#diff-shortcuts"&gt;Diff shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pull-shortcuts"&gt;Pull shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clone-shortcuts"&gt;Clone shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributor-shortcuts"&gt;Contributor shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#core-section"&gt;Core section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#color-section"&gt;Color section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#url-section"&gt;Url section&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="source"&gt;Source&lt;/h1&gt;
&lt;p&gt;Most of the good stuff is from
&lt;a href="https://github.com/mathiasbynens/dotfiles"&gt;https://github.com/mathiasbynens/dotfiles&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="user-section"&gt;User Section&lt;/h1&gt;
&lt;p&gt;Start off easy - here's how you set your email and name for commits:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[user]
    email = foo@bar.com
    name = Foo Bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="bash-aliases"&gt;Bash Aliases&lt;/h1&gt;
&lt;h2 id="the-best-one-letter-alias-ever"&gt;The Best One Letter Alias Ever&lt;/h2&gt;
&lt;p&gt;Start supercharging how you use git by creating a one-letter alias.&lt;/p&gt;
&lt;p&gt;Add this to your &lt;code&gt;~/.bashrc&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;alias g=&amp;quot;git&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You're already saving yourself a bunch of keystrokes, and we're just getting started!&lt;/p&gt;
&lt;h2 id="ending-bad-habits"&gt;Ending Bad Habits&lt;/h2&gt;
&lt;p&gt;This is a nice trick for getting yourself out of bad habits.
My first time using a "sophisticated" branch worklow in git
(i.e., not just committing and pushing to master all the time),
I got in trouble for committing directly to master with a
&lt;code&gt;git push origin master&lt;/code&gt; (instead of making a feature branch
and opening a pull request).&lt;/p&gt;
&lt;p&gt;To get myself out of the habit of typing &lt;code&gt;git push origin master&lt;/code&gt;,
I wanted to map it to an alias that told me no. I did that by
defining &lt;code&gt;git&lt;/code&gt; to be a bash function (this works because functions
take precedence over a binary named &lt;code&gt;git&lt;/code&gt; on your path).&lt;/p&gt;
&lt;p&gt;The git function checks the arguments that are passed to it.
If the arguments are &lt;code&gt;push origin master&lt;/code&gt;, it means I'm typing
&lt;code&gt;git push origin master&lt;/code&gt;, and I get a slap on the wrist.&lt;/p&gt;
&lt;p&gt;Otherwise, it passes the arguments through to the &lt;code&gt;git&lt;/code&gt; binary.&lt;/p&gt;
&lt;p&gt;You can also put this in &lt;code&gt;~/.bashrc&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;push origin master&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nope&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;command&lt;/span&gt; git &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="alias-section"&gt;Alias section&lt;/h1&gt;
&lt;p&gt;In the &lt;code&gt;~/.gitconfig&lt;/code&gt; file, aliases specific to git can be
defined in a section beginning with alias.&lt;/p&gt;
&lt;h2 id="log-utils"&gt;Log Utils&lt;/h2&gt;
&lt;p&gt;Let's start with some utilities for viewing git logs.&lt;/p&gt;
&lt;p&gt;(You can never have too many ways to look at a git log.)&lt;/p&gt;
&lt;p&gt;Note that we'll assume the alias bit in the following git config excerpts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[alias]
    # courtesy of https://stackoverflow.com/a/34467298
    lg = !&amp;quot;git lg1&amp;quot;
    lg1 = !&amp;quot;git lg1-specific --all&amp;quot;
    lg2 = !&amp;quot;git lg2-specific --all&amp;quot;
    lg3 = !&amp;quot;git lg3-specific --all&amp;quot;

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:&amp;#39;%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)&amp;#39;
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:&amp;#39;%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n&amp;#39;&amp;#39;          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)&amp;#39;
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:&amp;#39;%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n&amp;#39;&amp;#39;          %C(white)%s%C(reset)%n&amp;#39;&amp;#39;          %C(dim white)- %an &amp;lt;%ae&amp;gt; %C(reset) %C(dim white)(committer: %cn &amp;lt;%ce&amp;gt;)%C(reset)&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;git lgX&lt;/code&gt; shortcuts give similar views of the log, but with increasing vertical spacing.
&lt;code&gt;git lg1&lt;/code&gt; is the most compact, while &lt;code&gt;git lg3&lt;/code&gt; is the most comfortable to read, as far as vertical whitespace.
Same with the &lt;code&gt;-specific&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;This is one more nice short log command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember to use this with the &lt;code&gt;g&lt;/code&gt; alias for super short log:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ g l
* 4357b28 (HEAD -&amp;gt; source) update mocking aws post
* 063ad78 (gh/source, gh/HEAD) add mocking post
* a5f1adc add init keras cnn post
* fb911ec add keras cnn draft
* 3549d35 add rosalind (euler paths) part 7 draft

$ g lg1
* 4357b28 - (67 minutes ago) update mocking aws post - Charles Reid (HEAD -&amp;gt; source)
* 063ad78 - (2 weeks ago) add mocking post - Charles Reid (gh/source, gh/HEAD)
* a5f1adc - (4 months ago) add init keras cnn post - C Reid
* fb911ec - (5 months ago) add keras cnn draft - C Reid
* 3549d35 - (5 months ago) add rosalind (euler paths) part 7 draft - C Reid
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="status-utils"&gt;Status Utils&lt;/h2&gt;
&lt;p&gt;The git status command is one of my most frequently used commands, so I made a few shortcuts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # View the current working tree status using the short format
    s = status -s
    ss = status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This makes checking the short or long status of a git repo easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ g s
AM pelican/content/git-workflows-1-config.md
AM pelican/content/git-workflows-2-teams.md

$ g ss
On branch source
Your branch is ahead of &amp;#39;gh/source&amp;#39; by 1 commit.
  (use &amp;quot;git push&amp;quot; to publish your local commits)

Changes to be committed:
  (use &amp;quot;git restore --staged &amp;lt;file&amp;gt;...&amp;quot; to unstage)
    new file:   pelican/content/git-workflows-1-config.md
    new file:   pelican/content/git-workflows-2-teams.md

Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git restore &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
    modified:   pelican/content/git-workflows-1-config.md
    modified:   pelican/content/git-workflows-2-teams.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="fetching"&gt;Fetching&lt;/h2&gt;
&lt;p&gt;Fetching is handy to do, since it just fetches changes from a remote and doesn't actually
change anything or try to merge anything (unlike a &lt;code&gt;git pull&lt;/code&gt; command).&lt;/p&gt;
&lt;p&gt;The most useful fetch command (&lt;code&gt;git fetch --all&lt;/code&gt;) is aliased to &lt;code&gt;g f&lt;/code&gt; with the following
bit in the aliases section of the &lt;code&gt;~/.gitconfig&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    f = fetch --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="branch-utils"&gt;Branch Utils&lt;/h2&gt;
&lt;p&gt;The only command I might use more than the status command are branch commands,
so here are several branch aliases:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    b = branch -v
    bv = branch -v
    bb = branch -v

    ba = branch -a
    bb = branch -v -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In a similar way, you can get a summary view using &lt;code&gt;g b&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ g b
  master 4c828cd [behind 84] update with awsome day notes
* source b18adfd add two git workflow posts

$ g b
  master 940ee98 update mocking post
* source b18adfd add two git workflow posts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and a little bit more information with &lt;code&gt;g bb&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ g bb
  master            940ee98 update mocking post
* source            b18adfd add two git workflow posts
  remotes/gh/HEAD   -&amp;gt; gh/source
  remotes/gh/master 940ee98 update mocking post
  remotes/gh/source b18adfd add two git workflow posts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="branch-and-checkout"&gt;Branch and Checkout&lt;/h3&gt;
&lt;p&gt;Sometimes if you are creaing a branch with a long branch name, it can be
inconvenient to have to first create the branch with &lt;code&gt;git branch &amp;lt;branch-name&amp;gt;&lt;/code&gt;
and then check it out with &lt;code&gt;git checkout &amp;lt;branch-name&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To resolve this you can define a &lt;code&gt;git go&lt;/code&gt; alias that creates the branch and
then switches to that branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # Switch to a branch, creating it
    # from the current branch if necessary
    go = &amp;quot;!f() { git checkout -b \&amp;quot;$1\&amp;quot; 2&amp;gt; /dev/null || git checkout \&amp;quot;$1\&amp;quot;; }; f&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Careful you don't mistype the branch name.&lt;/p&gt;
&lt;h2 id="remote-utils"&gt;Remote Utils&lt;/h2&gt;
&lt;p&gt;Another useful git command is the remote command, so here are a few
remote aliases:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    r = remote -v
    rv = remote -v
    ra = remote -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="commit-utils"&gt;Commit Utils&lt;/h2&gt;
&lt;p&gt;Sometimes you have changes that you've staged using &lt;code&gt;git add&lt;/code&gt;, but you
want to see the changes that you've staged, before you commit them.&lt;/p&gt;
&lt;p&gt;Normally you'd have to use the inconvenient &lt;code&gt;git diff --cached &amp;lt;files&amp;gt;&lt;/code&gt;,
but this can be aliased to &lt;code&gt;cdiff&lt;/code&gt;, so that you can use &lt;code&gt;git diff&lt;/code&gt; to see
unstaged changes and &lt;code&gt;git cdiff&lt;/code&gt; to see staged changes.&lt;/p&gt;
&lt;p&gt;Even better, you can define the alias &lt;code&gt;g cd&lt;/code&gt; to run &lt;code&gt;git cdiff&lt;/code&gt;...!&lt;/p&gt;
&lt;p&gt;Here's the relevant bit in the aliases section:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    cdiff = diff --cached
    cd = diff --cached
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="committing-all-changes"&gt;Committing All Changes&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # Commit all changes
    ca = !git add -A &amp;amp;&amp;amp; git commit -av
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="fixing-commits"&gt;Fixing Commits&lt;/h3&gt;
&lt;p&gt;Some common operations for repairing commit history before pushing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Oops
    fix = commit --amend --reuse-message=HEAD --edit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="miscellaneous-utils"&gt;Miscellaneous Utils&lt;/h2&gt;
&lt;p&gt;There are a few other actions that are useful to add to the aliases section
of the &lt;code&gt;~/.gitconfig&lt;/code&gt;:&lt;/p&gt;
&lt;h3 id="rebasing-shortcuts"&gt;Rebasing shortcuts&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # Interactive rebase with the given number of latest commits
    reb = &amp;quot;!r() { git rebase -i HEAD~$1; }; r&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="diff-shortcuts"&gt;Diff shortcuts&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # Show the diff between the latest commit and the current state
    d = !&amp;quot;git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat&amp;quot;

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !&amp;quot;d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="pull-shortcuts"&gt;Pull shortcuts&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    p = &amp;quot;!f() { git pull $1 $2; }; f&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="clone-shortcuts"&gt;Clone shortcuts&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # Clone a repository including all submodules
    c = clone --recursive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="contributor-shortcuts"&gt;Contributor shortcuts&lt;/h3&gt;
&lt;p&gt;This last one is convenient for getting a summary of contributors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # List contributors with number of commits
    contributors = shortlog --summary --numbered
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An example for &lt;a href="https://github.com/aws/chalice"&gt;https://github.com/aws/chalice&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cd chalice/
$ g contributors
  1053  James Saryerwinnie
   120  John Carlyle
    94  stealthycoin
    42  kyleknap
    35  jcarlyl
    19  Kyle Knapp
    12  Atharva Chauthaiwale
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="core-section"&gt;Core section&lt;/h1&gt;
&lt;p&gt;Because it's the best text editor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[core]
    editor = vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have some other stuff I've collected, many of them from
&lt;a href="https://github.com/mathiasbynens/dotfiles"&gt;https://github.com/mathiasbynens/dotfiles&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS
    # More info: &amp;lt;http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/&amp;gt;
    ###trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="color-section"&gt;Color section&lt;/h1&gt;
&lt;p&gt;Make some nice beautiful colors that are easy to understand:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[color]

    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
    ui = auto

[color &amp;quot;branch&amp;quot;]

    current = yellow reverse
    local = yellow
    remote = green

[color &amp;quot;diff&amp;quot;]

    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color &amp;quot;status&amp;quot;]

    added = yellow
    changed = green
    untracked = cyan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="url-section"&gt;Url section&lt;/h1&gt;
&lt;p&gt;This makes some Github-related URLs easier and shorter to type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[url &amp;quot;git@github.com:&amp;quot;]

    insteadOf = &amp;quot;gh:&amp;quot;
    pushInsteadOf = &amp;quot;github:&amp;quot;
    pushInsteadOf = &amp;quot;git://github.com/&amp;quot;

[url &amp;quot;git@gist.github.com:&amp;quot;]

    insteadOf = &amp;quot;gst:&amp;quot;
    pushInsteadOf = &amp;quot;gist:&amp;quot;
    pushInsteadOf = &amp;quot;git://gist.github.com/&amp;quot;

[url &amp;quot;git://gist.github.com/&amp;quot;]

    insteadOf = &amp;quot;gist:&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, instead of&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git clone git@github.com:org-name/repo-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;you can do the much simpler&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ g c gh://org-name/repo-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Voila! Start integrating these alises into your daily workflow,
and you'll find yourself using a lot fewer keystrokes!&lt;/p&gt;</content><category term="Git"></category><category term="git"></category><category term="rebase"></category><category term="cherry-pick"></category><category term="branching"></category><category term="version control"></category></entry><entry><title>Mocking AWS in Unit Tests</title><link href="https://charlesreid1.github.io/mocking-aws-in-unit-tests.html" rel="alternate"></link><published>2019-09-23T09:00:00-07:00</published><updated>2019-09-23T09:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-09-23:/mocking-aws-in-unit-tests.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-simple-example-mocking-api-responses"&gt;A Simple Example: Mocking API Responses&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-genuine-aws-call"&gt;The Genuine AWS Call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-mocked-aws-call"&gt;The Mocked AWS Call&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;This post covers a technique for mocking AWS in unit tests so that you can test functionality that normally
requires API calls and handling responses, by mocking those responses instead of making actual API calls.&lt;/p&gt;
&lt;h2 id="a-simple-example-mocking-api-responses"&gt;A Simple Example: Mocking API Responses&lt;/h2&gt;
&lt;h3 id="the-genuine-aws-call"&gt;The Genuine AWS Call&lt;/h3&gt;
&lt;p&gt;Let's start with an example of an AWS API call. Here's how our program will be structured:
start with a driver &lt;code&gt;lister.py&lt;/code&gt; that creates an AWS secrets manager client and defines a 
function to list â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-simple-example-mocking-api-responses"&gt;A Simple Example: Mocking API Responses&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-genuine-aws-call"&gt;The Genuine AWS Call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-mocked-aws-call"&gt;The Mocked AWS Call&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;This post covers a technique for mocking AWS in unit tests so that you can test functionality that normally
requires API calls and handling responses, by mocking those responses instead of making actual API calls.&lt;/p&gt;
&lt;h2 id="a-simple-example-mocking-api-responses"&gt;A Simple Example: Mocking API Responses&lt;/h2&gt;
&lt;h3 id="the-genuine-aws-call"&gt;The Genuine AWS Call&lt;/h3&gt;
&lt;p&gt;Let's start with an example of an AWS API call. Here's how our program will be structured:
start with a driver &lt;code&gt;lister.py&lt;/code&gt; that creates an AWS secrets manager client and defines a 
function to list secrets using the secrets manager client, then a test for it in &lt;code&gt;test_lister.py&lt;/code&gt;
that mocks the AWS call.&lt;/p&gt;
&lt;p&gt;This example is simple and uses just one function, &lt;code&gt;list_secrets()&lt;/code&gt;,
which returns a JSON response that looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{
  &amp;quot;SecretList&amp;quot;: [
    {
      &amp;quot;ARN&amp;quot;: &amp;quot;arn:aws:secretsmanager:us-east-1:000000000000:secret:prefix/secret1-abc123&amp;quot;,
      &amp;quot;Name&amp;quot;: &amp;quot;prefix/es_source_ip&amp;quot;,
      &amp;quot;LastChangedDate&amp;quot;: &amp;quot;2019-09-23 17:29:16.267000-07:00&amp;quot;,
      &amp;quot;LastAccessedDate&amp;quot;: &amp;quot;2019-09-23 17:00:00-07:00&amp;quot;,
      &amp;quot;SecretVersionsToStages&amp;quot;: {
        &amp;quot;658c3b41-0806-48b9-b05d-ea7dc2dbf237&amp;quot;: [
          &amp;quot;AWSCURRENT&amp;quot;
        ],
        &amp;quot;f37ccfe2-16e0-4305-a250-ef89d2c47ece&amp;quot;: [
          &amp;quot;AWSPREVIOUS&amp;quot;
        ]
      }
    },
    {
      &amp;quot;ARN&amp;quot;: &amp;quot;arn:aws:secretsmanager:us-east-1:000000000000:secret:prefix/secret2-def789&amp;quot;,
      &amp;quot;Name&amp;quot;: &amp;quot;prefix/secret2&amp;quot;,
      &amp;quot;LastChangedDate&amp;quot;: &amp;quot;2019-09-22 17:05:01.431000-07:00&amp;quot;,
      &amp;quot;LastAccessedDate&amp;quot;: &amp;quot;2019-09-22 17:00:00-07:00&amp;quot;,
      &amp;quot;SecretVersionsToStages&amp;quot;: {
        &amp;quot;95AE5F8B-34E7-4EDF-A672-9E3AF1A4732E&amp;quot;: [
          &amp;quot;AWSCURRENT&amp;quot;
        ],
        &amp;quot;F29E224A-BC03-4780-B64E-EA666B99D952&amp;quot;: [
          &amp;quot;AWSPREVIOUS&amp;quot;
        ]
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using the secrets manager API:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;lister.py&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;

&lt;span class="n"&gt;sm_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secretsmanager&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_secret_names&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sm_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_secrets&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SecretList&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;LastAccessedDate&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Secret Name: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (last accessed: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LastAccessedDate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print_secret_names&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we run this file, we'll see a list of secrets in the real secrets manager -
that is, the secrets manager that is linked to the boto credentials in &lt;code&gt;~/.aws&lt;/code&gt;,
so the secrets we see are the actual secrets in the secret manager:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python lister.py
Secret Name: prefix/secret1 (last accessed: 2019-09-23 17:00:00-07:00)
Secret Name: prefix/secret2 (last accessed: 2019-09-23 17:00:00-07:00)
Secret Name: prefix/secret3 (last accessed: 2019-09-23 17:00:00-07:00)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="the-mocked-aws-call"&gt;The Mocked AWS Call&lt;/h3&gt;
&lt;p&gt;It is important to only mock the functionality we need.
We should mock the returned JSON, but only the &lt;code&gt;Name&lt;/code&gt;
and &lt;code&gt;LastAccessedDate&lt;/code&gt; fields.&lt;/p&gt;
&lt;p&gt;To mock the call to &lt;code&gt;list_secrets()&lt;/code&gt;, we start by importing
&lt;code&gt;mock&lt;/code&gt; from &lt;code&gt;unittest&lt;/code&gt;. Then we import the file that has the
function we want to test. We also import any other modules
we need.&lt;/p&gt;
&lt;p&gt;Next, we are mocking a call to a method of an object,
which we can do by creating a context via &lt;code&gt;with mock.patch()&lt;/code&gt;
(and passing it a string with the name of the object we want
to mock, or patch).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lister&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestMo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mo.sm_client&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
            &lt;span class="n"&gt;sm_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_secrets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Any calls made to &lt;code&gt;sm_client&lt;/code&gt; in the &lt;code&gt;mo&lt;/code&gt; module will be mocked
using the &lt;code&gt;mock.MagicMock&lt;/code&gt; object that we define in the context,
so we craft the response we want before we call the method we 
want to test (which in turn will call &lt;code&gt;sm_client.list_secrets()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The full version of the test looks like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;test_lister.py&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lister&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestLister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lister.sm_client&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;return_json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;SecretList&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="s2"&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fakesecret1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s2"&gt;&amp;quot;LastAccessedDate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="s2"&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fakesecret2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s2"&gt;&amp;quot;LastAccessedDate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_secrets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;lister&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_secret_names&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the test file is run via Python, we see the fake secrets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python test_lister.py
Secret Name: fakesecret1 (last accessed: 2019-09-23 20:31:49.186874)
Secret Name: fakesecret2 (last accessed: 2019-09-23 20:31:49.186880)
.
----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Python"></category><category term="python"></category><category term="pytest"></category><category term="tests"></category><category term="aws"></category><category term="mock"></category><category term="mocking"></category></entry><entry><title>Deconvoluting Convolutional Neural Networks</title><link href="https://charlesreid1.github.io/deconvoluting-convolutional-neural-networks.html" rel="alternate"></link><published>2019-05-29T14:00:00-07:00</published><updated>2019-05-29T14:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-05-29:/deconvoluting-convolutional-neural-networks.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction-a-simple-cnn-example"&gt;Introduction: A Simple CNN Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exploring-the-data"&gt;Exploring the Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-cnn"&gt;Create CNN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#analyzing-network-architecture-and-tensor-shapes"&gt;Analyzing Network Architecture and Tensor Shapes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#input-image-layer"&gt;Input Image Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#first-convolution-layer"&gt;First Convolution Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#first-activation-layer"&gt;First Activation Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#first-maxpooling-layer"&gt;First MaxPooling Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#second-convolution-layer"&gt;Second Convolution Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#second-activation-layer"&gt;Second Activation Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#second-maxpooling-layer"&gt;Second MaxPooling Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#third-convolution-layer"&gt;Third Convolution Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#third-activation-layer"&gt;Third Activation Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#third-maxpooling-layer"&gt;Third MaxPooling Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flatten-and-dense-layers"&gt;Flatten and Dense Layers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#categorical-output"&gt;Categorical Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#image-transformer"&gt;Image Transformer&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="introduction-a-simple-cnn-example"&gt;Introduction: A Simple CNN Example&lt;/h1&gt;
&lt;p&gt;As part of our weekly Deep Learning for Genomics reading group
here in the &lt;a href="http://ivory.idyll.org/lab/"&gt;Lab for Data Intensive Biology (DIB Lab)&lt;/a&gt;,
we are applying convolutional neural networks (deep learning) 
to various problems in genomics and biology â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction-a-simple-cnn-example"&gt;Introduction: A Simple CNN Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exploring-the-data"&gt;Exploring the Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-cnn"&gt;Create CNN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#analyzing-network-architecture-and-tensor-shapes"&gt;Analyzing Network Architecture and Tensor Shapes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#input-image-layer"&gt;Input Image Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#first-convolution-layer"&gt;First Convolution Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#first-activation-layer"&gt;First Activation Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#first-maxpooling-layer"&gt;First MaxPooling Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#second-convolution-layer"&gt;Second Convolution Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#second-activation-layer"&gt;Second Activation Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#second-maxpooling-layer"&gt;Second MaxPooling Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#third-convolution-layer"&gt;Third Convolution Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#third-activation-layer"&gt;Third Activation Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#third-maxpooling-layer"&gt;Third MaxPooling Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flatten-and-dense-layers"&gt;Flatten and Dense Layers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#categorical-output"&gt;Categorical Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#image-transformer"&gt;Image Transformer&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="introduction-a-simple-cnn-example"&gt;Introduction: A Simple CNN Example&lt;/h1&gt;
&lt;p&gt;As part of our weekly Deep Learning for Genomics reading group
here in the &lt;a href="http://ivory.idyll.org/lab/"&gt;Lab for Data Intensive Biology (DIB Lab)&lt;/a&gt;,
we are applying convolutional neural networks (deep learning) 
to various problems in genomics and biology.&lt;/p&gt;
&lt;p&gt;For the most recent meeting, we prepared some notes on how convolutional
neural networks work. The notes are in the form of a Jupyter notebook.
This blog post summarizes some of the important conclusions from the
notebook and links to relevant sections in the notebook.&lt;/p&gt;
&lt;p&gt;In the notebook covered in this blog post, we set up a 
simple convolutional neural network from an example on the
&lt;a href="https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html"&gt;keras blog&lt;/a&gt;.
This example is used to classify input images as being either
a cat or a dog.&lt;/p&gt;
&lt;p&gt;All materials covered in this blog post are in the 
&lt;a href="https://github.com/charlesreid1/deconvoluting-convolutions"&gt;charlesreid1/deconvoluting-convolutions&lt;/a&gt;
repository on Github.&lt;/p&gt;
&lt;h1 id="exploring-the-data"&gt;Exploring the Data&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When developing a deep learning model for a problem,
it is important to start by exploring the data and understanding
it thoroughly. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Image-Data"&gt;Link to "Image Data" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="create-cnn"&gt;Create CNN&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Our convolutional neural network consists of the following architecture:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convolutional Stage #1&lt;ul&gt;
&lt;li&gt;Convolution (3 x 3 kernel, 32 filters)&lt;/li&gt;
&lt;li&gt;Activation (ReLU)&lt;/li&gt;
&lt;li&gt;Max Pooling (2x2)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convolutional Stage #2&lt;ul&gt;
&lt;li&gt;Convolution (3 x 3 kernel, 32 filters)&lt;/li&gt;
&lt;li&gt;Activation (ReLU)&lt;/li&gt;
&lt;li&gt;Max Pooling (2x2)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convolutional Stage #3&lt;ul&gt;
&lt;li&gt;Convolution (3 x 3 kernel, 64 filters)&lt;/li&gt;
&lt;li&gt;Activation (ReLU)&lt;/li&gt;
&lt;li&gt;Max Pooling (2x2)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flatten&lt;/li&gt;
&lt;li&gt;Dense (64 nodes)&lt;/li&gt;
&lt;li&gt;Activation (ReLU)&lt;/li&gt;
&lt;li&gt;Dropout (0.5)&lt;/li&gt;
&lt;li&gt;Dense (1 node)&lt;/li&gt;
&lt;li&gt;Activation (ReLU)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Create-Convolutional-Neural-Network"&gt;Link to "Create Convolutional Neural Network" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="analyzing-network-architecture-and-tensor-shapes"&gt;Analyzing Network Architecture and Tensor Shapes&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Each step of the neural network transforms
an input tensor of a given shape into an output tensor
of a (potentially different) shape.&lt;/p&gt;
&lt;p&gt;In this section of the notebook, we step through each
of the neural network's layers to explain how the size
of each layer's inputs and outputs are determined.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Network-Architecture/Shapes"&gt;Link to "Network Architecture/Shapes" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="input-image-layer"&gt;Input Image Layer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The size of the cat and dog images is 150 x 150 pixels.
Each image is a color image, so it consists of 3 channels. Therefore,
the input to the very first layer has a shape of&lt;/p&gt;
&lt;div class="math"&gt;$$
(\mbox{None}, w_0, h_0, c_0) = (\mbox{None}, 150, 150, 3)
$$&lt;/div&gt;
&lt;p&gt;(where "None" indicates a variable-size dimension that is equal to
the number of total input images, or alternatively, the number of 
images per batch, if we are using batch learning).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Input-Image-Layer"&gt;Link to "Input Image Layer" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="first-convolution-layer"&gt;First Convolution Layer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; A convolutional layer with a kernel size of &lt;span class="math"&gt;\(k_1 \times k_1\)&lt;/span&gt;
and a number of filters &lt;span class="math"&gt;\(c_1\)&lt;/span&gt; will transform the shape of the input image to:&lt;/p&gt;
&lt;div class="math"&gt;$$
(\mbox{None}, w_1, h_1, c_1) = 
(\mbox{None}, 148, 148, 32)
$$&lt;/div&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;div class="math"&gt;$$
w_1 = w_0 - k_1 + 1 \\
h_1 = h_0 - k_1 + 1
$$&lt;/div&gt;
&lt;p&gt;Importantly, each of the three input channels are added together to determine
their contribution to the final convolution filters - the number of input channels
does not affect the number of output channels. &lt;/p&gt;
&lt;p&gt;The total number of output channels is equal to the number of filters
in the convolution layer. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#First-Convolution-Layer"&gt;Link to "First Convolutional Layer" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="first-activation-layer"&gt;First Activation Layer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The activation layer is a straightforward one-to-one mapping -
each individual value from the output of the convolution layer is fed through
the rectified linear unit (ReLU) function and the resulting output value becomes
the input to the next layer. The ReLU function is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
\mbox{ReLU}(x) = \max(0,x)
$$&lt;/div&gt;
&lt;p&gt;The activation layer does not change the shape of the input tensor.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#First-Activation-Layer"&gt;Link to "First Activation Layer" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="first-maxpooling-layer"&gt;First MaxPooling Layer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The max pooling layer is a way of making the final convolutional
filters (the "feature-detectors" of the convolutional neural network) less 
sensitive to the exact placement of features. The pooling layer only affects
the size of the filter, not the number of channels.&lt;/p&gt;
&lt;p&gt;If we use a max pooling window of &lt;span class="math"&gt;\(p_1 \times p_1\)&lt;/span&gt;, we will reduce the image
size by &lt;span class="math"&gt;\(\mbox{ceil}(w_1/p_1)\)&lt;/span&gt; and &lt;span class="math"&gt;\(\mbox{ceil}(h_1/p_1)\)&lt;/span&gt;. This reduces the input tensor shape
to:&lt;/p&gt;
&lt;div class="math"&gt;$$
(\mbox{None}, \mbox{ceil}(w_1/p_1), \mbox{ceil}(h_1/p_1), c_1) = 
(\mbox{None}, 74, 74, 32)
$$&lt;/div&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#First-Max-Pooling-Layer"&gt;Link to "First Max Pooling Layer" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="second-convolution-layer"&gt;Second Convolution Layer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The second convolutional layer has a kernel size 
of &lt;span class="math"&gt;\(k_2 \times k_2\)&lt;/span&gt; and a number of filters &lt;span class="math"&gt;\(c_2\)&lt;/span&gt;, which will
transform the shape of the input image in the same way as 
described for the first convolutional layer.&lt;/p&gt;
&lt;p&gt;Note that just as the number of channels (3) in each 
input to the first convolutional layer did not affect
the final number of channels in the output of the convolutional
layer (number of channels was fixed by specifying number of
output filters for the convolutional layer), so the number of
input channels to the second convolutional layer does not affect 
the number of output channels from the second convolutional
layer.&lt;/p&gt;
&lt;p&gt;The final shape coming out of the second convolutional layer is:&lt;/p&gt;
&lt;div class="math"&gt;$$
(\mbox{None}, w_2, h_2, c_2) = 
(\mbox{None}, 72, 72, 32)
$$&lt;/div&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;div class="math"&gt;$$
w_2 = w_1 - k_2 + 1 \\
h_2 = h_1 - k_2 + 1 \\
$$&lt;/div&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Second-Convolution-Layer"&gt;Link to "Second Convolutional Layer" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="second-activation-layer"&gt;Second Activation Layer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The activation layer again uses a function to
map input values to output values in a one-to-one mapping,
so the activation layer does not change the shape of the 
input tensor.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Second-Activation-Layer"&gt;Link to "Second Activation Layer" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="second-maxpooling-layer"&gt;Second MaxPooling Layer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The second max pooling layer uses a pooling
window of size &lt;span class="math"&gt;\(p_2 \times p_2\)&lt;/span&gt;. This will reduce the input
size to &lt;span class="math"&gt;\(\mbox{ceil}(w_2/p_2) \times \mbox{ceil}(h_2/p_2)\)&lt;/span&gt;. This reduces 
the input tensor shape to:&lt;/p&gt;
&lt;div class="math"&gt;$$
(\mbox{None}, \mbox{ceil}(w_2/p), \mbox{ceil}(h_2/p), c_2) = 
(\mbox{None}, 36, 36, 32)
$$&lt;/div&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Second-Max-Pooling-Layer"&gt;Link to "Second Max Pooling Layer" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="third-convolution-layer"&gt;Third Convolution Layer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The third convolution layer with a kernel size 
of &lt;span class="math"&gt;\(k_3 \times k_3\)&lt;/span&gt; and &lt;span class="math"&gt;\(c_3\)&lt;/span&gt; output filters will transform
the input tensor shape in the following way (note that the
third convolutional layer has 64 filters, not 32):&lt;/p&gt;
&lt;div class="math"&gt;$$
(\mbox{None}, w_3, h_3, c_3) =
(\mbox{None}, 34, 34, 64)
$$&lt;/div&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;div class="math"&gt;$$
w_3 = w_2 - k_3 + 1 \\
h_3 = h_2 - k_3 + 1
$$&lt;/div&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Third-Convolution-Layer"&gt;Link to "Third Convolutional Layer" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="third-activation-layer"&gt;Third Activation Layer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The activation layer again uses a function to
map input values to output values in a one-to-one mapping,
so the activation layer does not change the shape of the 
input tensor.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Third-Activation-Layer"&gt;Link to "Third Activation Layer" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="third-maxpooling-layer"&gt;Third MaxPooling Layer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The thid max pooling layer uses a pooling
window of size &lt;span class="math"&gt;\(p_3 \times p_3\)&lt;/span&gt;. This will reduce the input
size to &lt;span class="math"&gt;\(\mbox{ceil}(w_3/p_3) \times \mbox{ceil}(h_3/p_3)\)&lt;/span&gt;. This reduces 
the input tensor shape to:&lt;/p&gt;
&lt;div class="math"&gt;$$
(\mbox{None}, \mbox{ceil}(w_3/p_3), \mbox{ceil}(h_3/p_3), c_2) = 
(\mbox{None}, 17, 17, 64)
$$&lt;/div&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Third-Max-Pooling-Layer"&gt;Link to "Third Max Pooling Layer" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="flatten-and-dense-layers"&gt;Flatten and Dense Layers&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The flatten layer converts a tensor of dimension &lt;span class="math"&gt;\((\mbox{None}, 17, 17, 64)\)&lt;/span&gt;
into a 1D vector of &lt;span class="math"&gt;\(17 \times 17 \times 64 = 18,496\)&lt;/span&gt; neural network nodes. This does not
change any of the values, it simply reshapes the input tensor.&lt;/p&gt;
&lt;p&gt;The first dense layer reduces the flattened &lt;span class="math"&gt;\(18,496\)&lt;/span&gt; nodes to &lt;span class="math"&gt;\(64\)&lt;/span&gt; nodes, using a fully connected
layer of nodes. These values are then passed through an activation function (as with the above
activation layers, this is a one-to-one mapping and does not change the shape of the input tensor).
The dense layer is followed by a dropout layer to help prevent overfitting; this pattern is common
in convolutional neural networks.&lt;/p&gt;
&lt;p&gt;The second dense layer further reduces the &lt;span class="math"&gt;\(64\)&lt;/span&gt; nodes to a single node, whose output will determine
whether the input image is a cat or a dog.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Flatten-Layer"&gt;Link to "Flatten Layer" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Dense-(64)"&gt;Link to "Dense (64) Layers" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Dense-(1)"&gt;Link to "Dense (1) Layers" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="categorical-output"&gt;Categorical Output&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Normally when classifying cats and dogs, we would have two output neurons, one to
output a binary yes/no to answer "is this a cat?" and another output a binary yes/no to answer 
"is this a dog?". However, in this example, we assume that &lt;em&gt;all&lt;/em&gt; inputs contain either only cats
or only dogs, so the single-output binary classifier is determining whether an image is a dog (0)
or a cat (1).&lt;/p&gt;
&lt;h1 id="image-transformer"&gt;Image Transformer&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The &lt;code&gt;ImageDataGenerator&lt;/code&gt; class is a class provided by keras
for loading image data from a directory and (optionally) applying various
transformations to the images in order to generate additional training data
from a set of images. For example, the following code block from the 
notebook creates an &lt;code&gt;ImageDataGenerator&lt;/code&gt; class that will load images from a
folder on disk, and applies various transformations (shearing, zooming, 
and horizontally flipping) to each image during the training process.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;train_datagen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImageDataGenerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;rescale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;shear_range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;zoom_range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;horizontal_flip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can then be used to generate test image data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;train_generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_datagen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flow_from_directory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;train&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;target_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img_height&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;class_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;binary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will look for images in the relative path &lt;code&gt;train/data/&lt;/code&gt;
(note the implicit &lt;code&gt;data/&lt;/code&gt; directory tacked on the end).
Note that this image data generator allows us to use images
that do not have size &lt;span class="math"&gt;\(150 \times 150\)&lt;/span&gt;, as they will be re-sized
to &lt;code&gt;target_size&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/deconvoluting-convolutions#Image-Transformer"&gt;Link to "Image Transformer" section of notebook&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Now that we have walked through a sample convolutional neural network
and covered how each layer transforms the size of the input tensor, 
we are ready to start applying convolutional neural networks to real
problems.&lt;/p&gt;
&lt;p&gt;Our next blog post will cover the materials in the
&lt;a href="https://github.com/charlesreid1/deep-learning-genomics"&gt;charlesreid1/deep-learning-genomics&lt;/a&gt;
repository on Github, which applies the convolutional neural 
network concept in a 1D context (applying convolutions to 1D sequences, 
instead of 2D images) to learn about (and predict) DNA transcription factor 
binding sites.  &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Machine Learning"></category><category term="deep learning"></category><category term="machine learning"></category><category term="neural networks"></category><category term="python"></category><category term="keras"></category><category term="convolutional neural networks"></category><category term="cnn"></category></entry><entry><title>Graphs for Bioinformatics, Part 2: Finding Eulerian Paths</title><link href="https://charlesreid1.github.io/graphs-for-bioinformatics-part-2-finding-eulerian-paths.html" rel="alternate"></link><published>2019-05-07T16:00:00-07:00</published><updated>2019-05-07T16:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-05-07:/graphs-for-bioinformatics-part-2-finding-eulerian-paths.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-context-de-bruijn-graphs"&gt;The Context: de Bruijn Graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assembling-the-de-bruijn-graph"&gt;Assembling the de Bruijn Graph&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#directed-graph-representation-adjacency-list"&gt;Directed Graph Representation: Adjacency List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-quick-example"&gt;A Quick Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-vs-go"&gt;Python vs Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#directed-graph-class-python-implementation"&gt;Directed Graph Class: Python Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#checking-for-eulerian-paths-and-cycles"&gt;Checking for Eulerian Paths and Cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#algorithm-building-blocks"&gt;Algorithm Building Blocks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#depth-first-search"&gt;Depth First Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#kosarajus-algorithm-connected-components"&gt;Kosaraju's Algorithm: Connected Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#to-be-continued"&gt;To Be Continued...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="the-context-de-bruijn-graphs"&gt;The Context: de Bruijn Graphs&lt;/h1&gt;
&lt;p&gt;In &lt;a href="https://charlesreid1.github.io/graphs-for-bioinformatics-part-1-de-bruijn-graphs-hamiltonian-paths-and-eulerian-paths.html"&gt;Part 1 of this post&lt;/a&gt;
we discussed a data structure called a de Bruijn graph and covered its application
to genome assembly. To summarize, a de Bruijn graph is a type of graph that represents
a set of k-mers as a set of directed edges on â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-context-de-bruijn-graphs"&gt;The Context: de Bruijn Graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assembling-the-de-bruijn-graph"&gt;Assembling the de Bruijn Graph&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#directed-graph-representation-adjacency-list"&gt;Directed Graph Representation: Adjacency List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-quick-example"&gt;A Quick Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-vs-go"&gt;Python vs Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#directed-graph-class-python-implementation"&gt;Directed Graph Class: Python Implementation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#checking-for-eulerian-paths-and-cycles"&gt;Checking for Eulerian Paths and Cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#algorithm-building-blocks"&gt;Algorithm Building Blocks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#depth-first-search"&gt;Depth First Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#kosarajus-algorithm-connected-components"&gt;Kosaraju's Algorithm: Connected Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#to-be-continued"&gt;To Be Continued...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="the-context-de-bruijn-graphs"&gt;The Context: de Bruijn Graphs&lt;/h1&gt;
&lt;p&gt;In &lt;a href="https://charlesreid1.github.io/graphs-for-bioinformatics-part-1-de-bruijn-graphs-hamiltonian-paths-and-eulerian-paths.html"&gt;Part 1 of this post&lt;/a&gt;
we discussed a data structure called a de Bruijn graph and covered its application
to genome assembly. To summarize, a de Bruijn graph is a type of graph that represents
a set of k-mers as a set of directed edges on a graph, connecting the k-mer's (k-1)-mer prefix
(the source vertex) to the k-mer's (k-1)-mer suffix (the destination vertex).&lt;/p&gt;
&lt;p&gt;As an example, if &lt;span class="math"&gt;\(k = 5\)&lt;/span&gt;, we can represent the k-mer "AAGCT" as an edge connecting the vertex
&lt;code&gt;AAGC&lt;/code&gt; to the vertex &lt;code&gt;AGCT&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The de Bruijn graph is used to solve a set of problems on &lt;a href="https://rosalind.info"&gt;Rosalind.info&lt;/a&gt;,
a website with bioinformatics programming challenges, as part of working through the
textbook &lt;a href="http://bioinformaticsalgorithms.com/"&gt;Bioinformatics Algorithms: An Active Learning Approach&lt;/a&gt;
and its associated website (&lt;a href="https://rosalind.info"&gt;Rosalind.info&lt;/a&gt;).&lt;/p&gt;
&lt;h1 id="assembling-the-de-bruijn-graph"&gt;Assembling the de Bruijn Graph&lt;/h1&gt;
&lt;p&gt;The problems from Rosalind.info that require the use of a de Bruijn graph come from
Chapter 3. These problems generally give the user either a list of k-mers (to assemble
into a de Bruijn graph, as in problem &lt;a href="http://rosalind.info/problems/ba3e/"&gt;BA3E&lt;/a&gt;) 
or a long sequence of DNA (which can be turned into a list of
k-mers and assembled into a de Bruijn graph, as in problem &lt;a href="http://rosalind.info/problems/ba3d/"&gt;BA3D&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If we are starting with a long string of DNA, we can run through the entire string
and extract k-mers using a sliding window. For a string of DNA of length &lt;span class="math"&gt;\(d\)&lt;/span&gt;, this procedure
will create &lt;span class="math"&gt;\(d - k + 1\)&lt;/span&gt; k-mers.&lt;/p&gt;
&lt;h2 id="directed-graph-representation-adjacency-list"&gt;Directed Graph Representation: Adjacency List&lt;/h2&gt;
&lt;p&gt;The de Bruijn graph is a directed graph. To represent this
graph in memory, we utilize an adjacency list data structure.
An adjacency list is a key-value lookup table (implemented using
a hash map) wherein each &lt;em&gt;source vertex&lt;/em&gt; in the graph is a key 
in the lookup table, and the corresponding value is a list of
all &lt;em&gt;destination vertices&lt;/em&gt; (all vertices that have a directed
edge starting from the source vertex and ending at that vertex).&lt;/p&gt;
&lt;p&gt;A Python dictionary can be used to implement the adjacency list
hash table. The dictionary keys are the source vertices (or rather,
their string labels), and the dictionary values are a list of 
destination vertices (a list of their string labels).&lt;/p&gt;
&lt;p&gt;Thus, the graph &lt;code&gt;AA -&amp;gt; BB -&amp;gt; CC -&amp;gt; DD&lt;/code&gt; would be represented with
the hash table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;adjacency_list[&amp;#39;AA&amp;#39;] = [&amp;#39;BB&amp;#39;]
adjacency_list[&amp;#39;BB&amp;#39;] = [&amp;#39;CC&amp;#39;]
adjacency_list[&amp;#39;CC&amp;#39;] = [&amp;#39;DD&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Notice from this example that the keys of the adjacency list
gives a list of &lt;em&gt;source vertices only&lt;/em&gt;, to get all vertices we
need to look at the values of the adjacency list too.)&lt;/p&gt;
&lt;h2 id="a-quick-example"&gt;A Quick Example&lt;/h2&gt;
&lt;p&gt;As a simple example, consider the de Bruijn graph formed from
the DNA string &lt;code&gt;AAGATTCTCTAC&lt;/code&gt; and &lt;span class="math"&gt;\(k = 4\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This is first turned into a bag of &lt;span class="math"&gt;\(d - k + 1 = 9\)&lt;/span&gt; 
4-mers (our edges):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Sequence:   AAGATTCTCTAC
4-mers:     AAGA
             AGAT
              GATT
               ATTC
                TTCT
                 TCTC
                  CTCT
                   TCTA
                    CTAC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we also create a bag of &lt;span class="math"&gt;\(d - k + 1 = 10\)&lt;/span&gt; 
3-mers (vertices):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Sequence:   AAGATTCTCTAC
3-mers:     AAG
             AGA
              GAT
               ATT
                TTC
                 TCT
                  CTC
                   TCT
                    CTA
                     TAC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can iterate over every 4-mer edge, find its
prefix 3-mer and suffix 3-mer, and create a corresponding
entry in the adjacency list hash table.&lt;/p&gt;
&lt;p&gt;The list of edges looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;AAG -&amp;gt; AGA
AGA -&amp;gt; GAT
ATT -&amp;gt; TTC
CTA -&amp;gt; TAC
CTC -&amp;gt; TCT
GAT -&amp;gt; ATT
TCT -&amp;gt; CTA,CTC
TTC -&amp;gt; TCT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The corresponding dictionary should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;adjacency_list[&amp;#39;AAG&amp;#39;] = [&amp;#39;AGA&amp;#39;]
adjacency_list[&amp;#39;AGA&amp;#39;] = [&amp;#39;GAT&amp;#39;]
adjacency_list[&amp;#39;ATT&amp;#39;] = [&amp;#39;TTC&amp;#39;]
adjacency_list[&amp;#39;CTA&amp;#39;] = [&amp;#39;TAC&amp;#39;]
adjacency_list[&amp;#39;CTC&amp;#39;] = [&amp;#39;TCT&amp;#39;]
adjacency_list[&amp;#39;GAT&amp;#39;] = [&amp;#39;ATT&amp;#39;]
adjacency_list[&amp;#39;TCT&amp;#39;] = [&amp;#39;CTA&amp;#39;,&amp;#39;CTC&amp;#39;]
adjacency_list[&amp;#39;TTC&amp;#39;] = [&amp;#39;TCT&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="python-vs-go"&gt;Python vs Go&lt;/h2&gt;
&lt;p&gt;Now that we're ready to implement a directed graph object
and populate it using the data given in the problem, we 
have to make the difficult choice of what language we
want to use to implement the directed graph.&lt;/p&gt;
&lt;p&gt;We have covered our use of the Go programming language 
for Rosalind.info problems before (we have previously 
covered recursion for Chapter 2 problems in 
&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html"&gt;Part 1&lt;/a&gt;,
&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html"&gt;Part 2&lt;/a&gt;,
and &lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html"&gt;Part 3&lt;/a&gt;
of another post, and we also wrote &lt;a href="https://charlesreid1.github.io/learning-bioinformatics-with-go-and-rosalind.html"&gt;this post&lt;/a&gt;
on our impression of Go and its usefulness in
bioinformatics.&lt;/p&gt;
&lt;p&gt;We are also implementing all of the solutions to the
Rosalind.info problems in our Go libarary, &lt;a href="https://github.com/charlesreid1/go-rosalind"&gt;go-rosalind&lt;/a&gt;
(see &lt;a href="https://godoc.org/github.com/charlesreid1/go-rosalind/rosalind"&gt;corresponding documentation on godoc.org&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However,&lt;/strong&gt; we have learned the hard way that Go requires
a lot of boilerplate code (boilerplate code that is necessary,
mind you, because all of that boilerplate will eventually
morph into something problem-specific).&lt;/p&gt;
&lt;p&gt;This all means that Go is a very cumbersome language to use
to get an algorithm prototype up and running.&lt;/p&gt;
&lt;p&gt;Python, on the other hand, is a very easy language for
prototyping and has plenty of handy built-in functions
and modules that make prototyping an algorithm far 
easier and faster than doing it in Go.&lt;/p&gt;
&lt;p&gt;Our strategy, therefore, is to prototype our algorithm
and corresponding graph object in Python, get the
algorithm working and tested, then convert the code 
to Go when we are finished.&lt;/p&gt;
&lt;h2 id="directed-graph-class-python-implementation"&gt;Directed Graph Class: Python Implementation&lt;/h2&gt;
&lt;p&gt;Note that while we could simply use the dictionary object
itself as the graph data structure, this is somewhat
inelegant, and we would like instead to define a class
to bundle related behavior and data together.&lt;/p&gt;
&lt;p&gt;We implement the directed graph by defining an &lt;code&gt;AdjacencyGraph&lt;/code&gt;
class. This is just a glorified wrapper around the ajacency
list dictionary, with some extra methods.&lt;/p&gt;
&lt;p&gt;We start by defining the class (it inherits from &lt;code&gt;object&lt;/code&gt; so
it has no parent type):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;class AdjacencyGraph(object):
    &amp;quot;&amp;quot;&amp;quot;Directed graph stored using an adjacency list&amp;quot;&amp;quot;&amp;quot;
    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot;Constructor&amp;quot;&amp;quot;&amp;quot;
        self.adj = {}
        self.dfs_started = False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The constructor just initializes an empty adjacency list dictionary.&lt;/p&gt;
&lt;p&gt;We also define two built-in methods for convenience:
&lt;code&gt;__str__&lt;/code&gt; for the string representation of the graph 
(so we can pass the graph object to &lt;code&gt;print()&lt;/code&gt;), and
&lt;code&gt;__len__&lt;/code&gt; for getting the number of (source) vertices 
on the graph.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    def __str__(self):
        &amp;quot;&amp;quot;&amp;quot;String representation&amp;quot;&amp;quot;&amp;quot;
        s = []
        for source in self.adj.keys():
            sinks = self.adj[source]
            for sink in sinks:
                m = &amp;quot;%s -&amp;gt; %s\n&amp;quot;%(source,sink)
                s.append(m)
        return &amp;quot;&amp;quot;.join(s)

    def __len__(self):
        &amp;quot;&amp;quot;&amp;quot;Number of vertices on graph&amp;quot;&amp;quot;&amp;quot;
        s = set()
        for source in self.adj.keys():
            s.add(source)
            for sink in self.adj[k]:
                s.add(sink)
        return len(s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we define some basic functionality useful for all graphs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Getting the in-degree and out-degree of a vertex&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    def in_degree(self,u):
        n = 0
        for v in self.adj.keys():
            sinks = self.adj[v]
            if u in sinks:
                n += 1
        return n

    def out_degree(self,u):
        if u in self.adj.keys():
            return len(self.adj[u])
        else:
            return 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We also define a generator for creating vertices:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    def vertices(self):
        vertices = set()
        for k in self.adj.keys():
            vertices.add(k)
            for m in self.adj[k]:
                vertices.add(m)
        for v in vertices:
            yield v

    def n_vertices(self):
        return len(self)

    def n_edges(self):
        n = 0
        for source in self.adj.keys():
            try:
                n += len(self.adj[source])
            except:
                # in case value is None
                pass
        return n

    def get_neighbors(self,u):
        &amp;quot;&amp;quot;&amp;quot;Get all neighbors of node u&amp;quot;&amp;quot;&amp;quot;
        # Note: neighbors are stored in
        # sorted order
        if u in self.adj.keys():
            return self.adj[u]
        else:
            return []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, we add a method &lt;code&gt;add_edge()&lt;/code&gt; that allows us
to create an edge from vertex u to vertex v (and add
the vertices to the graph if either do not yet exist
on the graph).&lt;/p&gt;
&lt;p&gt;For convenience, we maintain the adjacency list values
(the list of destination vertices) in lexicographic
order.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    def add_edge(self, u, v):
        &amp;quot;&amp;quot;&amp;quot;Add an edge from u to v&amp;quot;&amp;quot;&amp;quot;
        # For each source vertex:
        if u in self.adj.keys():

            # Get existing sink list
            t = self.adj[u]

            # Append to it
            t.append(v)

            # Keep list of sinks sorted
            # (lexicographic string sorting)
            t.sort()

            # Create the new edge 
            # from source to sink
            self.adj[u] = t

        else:
            # Initialize the list of sinks (v)
            # for the given source (u)
            self.adj[u] = [v]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, to assemble the de Bruijn graph, we can iterate
over every k-mer edge, form the prefix and suffix vertices,
and call the &lt;code&gt;add_edge()&lt;/code&gt; function on the graph.&lt;/p&gt;
&lt;h1 id="checking-for-eulerian-paths-and-cycles"&gt;Checking for Eulerian Paths and Cycles&lt;/h1&gt;
&lt;p&gt;To recap Eulerian paths versus Eulerian cycles (discussed in
&lt;a href="https://charlesreid1.github.io/graphs-for-bioinformatics-part-1-de-bruijn-graphs-hamiltonian-paths-and-eulerian-paths.html"&gt;Part 1 of this post&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An Eulerian path is a path that visits every edge of a given graph exactly once.&lt;/li&gt;
&lt;li&gt;An Eulerian cycle is an Eulerian path that begins and ends at the ''same vertex''.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;According to Steven Skienna's &lt;u&gt;Algorithm Design Handbook&lt;/u&gt;,
there are two conditions that must be met for an Eulerian path or
cycle to exist. These conditions are different for undirected graphs
versus directed graphs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Undirected graphs:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An undirected graph contains an Euler &lt;strong&gt;cycle&lt;/strong&gt; iff
  (1) it is connected, and (2) each vertex is of even
  degree.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An undirected graph contains an Euler &lt;strong&gt;path&lt;/strong&gt; iff (1)
  it is connected, and all but two vertices are of even
  degree. These two vertices will be the start and end
  vertices for the Eulerian path.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Directed graphs:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A directed graph contains an Euler cycle iff (1) it is
  strongly-connected, and (2) each vertex has the same
  in-degree as out-degree&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A directed graph contains an Euler path iff (1) it is
  connected, and (2) all vertices except two (x,y) have
  the same in-degree as out-degree, and (x,y) are
  vertices with in-degree one less than and one more
  than out-degree&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="algorithm-building-blocks"&gt;Algorithm Building Blocks&lt;/h1&gt;
&lt;p&gt;Algorithm to find Eulerian paths/cycles consists of several steps using several algorithms.&lt;/p&gt;
&lt;p&gt;Undirected graphs are the simpler case; directed graphs are more complicated.&lt;/p&gt;
&lt;h2 id="depth-first-search"&gt;Depth First Search&lt;/h2&gt;
&lt;p&gt;To perform a DFS on a directed graph, implement two functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Write a DFS function that takes a graph as an input argument and that visits each node of the
   graph in a depth-first search.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write a visitation function that takes a node as an input argument and that performs some action
   on the node. This visitation function is called by the DFS function on each node that it visits.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="kosarajus-algorithm-connected-components"&gt;Kosaraju's Algorithm: Connected Components&lt;/h2&gt;
&lt;p&gt;On an undirected graph, can use Fleury's Algorithm
to follow edges (classify edges as bridge or non-bridge,
then leave bridges for last).&lt;/p&gt;
&lt;p&gt;On a directed graph, we have twice the amount of work:
we are not just checking that all vertices are reachable
from a given vertex, we are also checking that all vertices
can also reach that vertex.&lt;/p&gt;
&lt;h1 id="to-be-continued"&gt;To Be Continued...&lt;/h1&gt;
&lt;p&gt;In the next part of this post, we will start with the slightly simpler case of finding an Euler cycle
(which has no start or end vertices). Then we will show how finding the Euler path is actually a special
case of finding the Euler cycle.&lt;/p&gt;
&lt;p&gt;First, we will use &lt;a href="https://charlesreid1.com/wiki/Graphs/Euler_Circuit#Directed_Graphs:_Hierholzer.27s_Algorithm"&gt;Hierholzer's
Algorithm&lt;/a&gt;
to find Euler cycles (this is the simpler case). Order does not matter because it is a cycle;
Hierholzer's algorithm is used to find the Euler cycle.&lt;/p&gt;
&lt;p&gt;Next, we will modify the above algorithm to find Euler paths. This requires keeping track of
the start and end candidate nodes. We verify only one each; we complete the cycle by adding an edge.
Once we find the cycle, we remove the edge. Finally, we rearrange the cycle to have the correct
start and end nodes.&lt;/p&gt;
&lt;p&gt;Stay tuned for Part 3...&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computational Biology"></category><category term="go"></category><category term="golang"></category><category term="rosalind"></category><category term="computational biology"></category><category term="bioinformatics"></category><category term="euler"></category><category term="recursion"></category><category term="backtracking"></category><category term="graphs"></category><category term="algorithms"></category><category term="hamiltonian"></category><category term="eulerian"></category></entry><entry><title>Graphs for Bioinformatics, Part 1: de Bruijn Graphs, Hamiltonian Paths, and Eulerian Paths</title><link href="https://charlesreid1.github.io/graphs-for-bioinformatics-part-1-de-bruijn-graphs-hamiltonian-paths-and-eulerian-paths.html" rel="alternate"></link><published>2019-05-02T19:00:00-07:00</published><updated>2019-05-02T19:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-05-02:/graphs-for-bioinformatics-part-1-de-bruijn-graphs-hamiltonian-paths-and-eulerian-paths.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-context-rosalindinfo"&gt;The Context: Rosalind.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#graphs-for-bioinformatics"&gt;Graphs for Bioinformatics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#building-a-k-mer-graph-the-wrong-graph"&gt;Building a K-mer Graph (The Wrong Graph)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#building-a-de-bruijn-graph-the-right-graph"&gt;Building a De Bruijn Graph (The Right Graph)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#transform-the-problem-hamiltonian-paths-to-eulerian-paths"&gt;Transform the Problem: Hamiltonian Paths to Eulerian Paths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#an-example"&gt;An Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#back-to-dna"&gt;Back to DNA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="the-context-rosalindinfo"&gt;The Context: Rosalind.info&lt;/h1&gt;
&lt;p&gt;To provide a bit of context for a discussion of Euler paths and Euler cycles:
starting around December, a group of us in the &lt;a href="http://ivory.idyll.org/lab/"&gt;Lab for Data Intensive Biology (DIB Lab)&lt;/a&gt;
started working through the textbook &lt;a href="http://bioinformaticsalgorithms.com/"&gt;Bioinformatics Algorithms: An Active Learning Approach&lt;/a&gt;
and the associated website, &lt;a href="https://rosalind.info"&gt;Rosalind.info&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rosalind.info is a site that is similar in style â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-context-rosalindinfo"&gt;The Context: Rosalind.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#graphs-for-bioinformatics"&gt;Graphs for Bioinformatics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#building-a-k-mer-graph-the-wrong-graph"&gt;Building a K-mer Graph (The Wrong Graph)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#building-a-de-bruijn-graph-the-right-graph"&gt;Building a De Bruijn Graph (The Right Graph)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#transform-the-problem-hamiltonian-paths-to-eulerian-paths"&gt;Transform the Problem: Hamiltonian Paths to Eulerian Paths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#an-example"&gt;An Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#back-to-dna"&gt;Back to DNA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="the-context-rosalindinfo"&gt;The Context: Rosalind.info&lt;/h1&gt;
&lt;p&gt;To provide a bit of context for a discussion of Euler paths and Euler cycles:
starting around December, a group of us in the &lt;a href="http://ivory.idyll.org/lab/"&gt;Lab for Data Intensive Biology (DIB Lab)&lt;/a&gt;
started working through the textbook &lt;a href="http://bioinformaticsalgorithms.com/"&gt;Bioinformatics Algorithms: An Active Learning Approach&lt;/a&gt;
and the associated website, &lt;a href="https://rosalind.info"&gt;Rosalind.info&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rosalind.info is a site that is similar in style to &lt;a href="https://projecteuler.net/"&gt;Project Euler&lt;/a&gt;,
a &lt;a href="https://charlesreid1.github.io/tag/project-euler.html"&gt;familiar topic on this blog&lt;/a&gt;.
Project Euler poses computationally challenging problems in the domain of mathematics.&lt;/p&gt;
&lt;p&gt;Like Project Euler, the visitor is given one small example input and the corresponding 
correct output, and one large example input and corresponding output. Also like Project
Euler, the problems vary in how much computer science versus domain expertise is needed,
but they are largely focused on writing algorithms rather than on the science behind the
computations.&lt;/p&gt;
&lt;p&gt;Unlike Project Euler, however, Rosalind.info does give plenty of hints (via the textbook,
if you have a copy), and sometimes even gives pseudocode for the algorithm. &lt;strong&gt;The book is
required to get enough context to answer some of the Rosalind.info problems.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="graphs-for-bioinformatics"&gt;Graphs for Bioinformatics&lt;/h1&gt;
&lt;p&gt;The textbook focuses on different problems in each chapter. For example, Chapter 1 uses
the example of a string of DNA that marks where replication begins to introduce some
basic bioinformatics concepts and algorithms. Chapter 2 uses the concept of molecular
clocks to introduce motifs and motif-finding, the focus of most of the problems in
Chapter 2.&lt;/p&gt;
&lt;p&gt;Chapter 3 focuses on the problem of genome assembly - how we assemble an entire genome
from short segments alone. In particular, the chapter focuses on de Bruijn graphs, 
which are graphs that, given a sequence of symbols drawn from an alphabet, are composed 
of edges (one for each &lt;strong&gt;k-mer&lt;/strong&gt;, that is, a chunk of the sequence of length k),
and vertices (one for each k-mer prefix and k-mer suffix, connected by a directed edge
of the k-mer). We will cover more of the details of these graphs shortly.&lt;/p&gt;
&lt;h2 id="building-a-k-mer-graph-the-wrong-graph"&gt;Building a K-mer Graph (The Wrong Graph)&lt;/h2&gt;
&lt;p&gt;The Bioinformatics Algorithm book starts with a general discussion of how to 
represent a sequence of DNA nucleotides using a graph. The idea they discuss 
initially (which is an obvious, but not necessarily good, one) is splitting
the sequence into k-mer chunks, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;      Sequence:   TAATGCCATGGGATGTT
      Pieces:     TAA 
                   AAT
                    ATG 
                     TGC
                      GCC 
                       CCA
                        CAT 
                         ATG
                          TGG 
                           GGG
                            GGA 
                             GAT
                              ATG 
                               TGT
                                GTT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and letting one k-mer be represented by one vertex. Then the sequence
above could be turned into the graph:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;TAA -&amp;gt; AAT -&amp;gt; ATG -&amp;gt; TGC -&amp;gt; GCC -&amp;gt; CCA -&amp;gt; CAT -&amp;gt; ATG -&amp;gt; TGG -&amp;gt; GGG -&amp;gt; GGA -&amp;gt; GAT -&amp;gt; ATG -&amp;gt; TGT -&amp;gt; GTT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On this graph, every edge has the property that the first (k-1)
nucleotides of the destination match the last (k-1) nucleotides
of the source. &lt;/p&gt;
&lt;p&gt;If we did not know this sequence in advance, we could draw &lt;em&gt;every&lt;/em&gt;
edge with that property - every time the last (k-1) characters of
a k-mer match the first (k-1) characters of another k-mer, an edge
is drawn between those two vertices. &lt;/p&gt;
&lt;p&gt;That graph would result in &lt;em&gt;many&lt;/em&gt; more edges than the graph shown above.&lt;/p&gt;
&lt;p&gt;Furthermore, in theory, if each read sequence came from a single genome
and we had the entire genome covered by read sequences, a path through
the graph that visits every vertex (every k-mer) would yield the full
genome.&lt;/p&gt;
&lt;p&gt;A path through a graph that visits every vertex once is called a 
&lt;strong&gt;Hamiltonian path&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Why is this hard? Because the problem of proving a Hamiltonian
path exists, let alone finding it, becomes very difficult for
large graphs.&lt;/p&gt;
&lt;h2 id="building-a-de-bruijn-graph-the-right-graph"&gt;Building a De Bruijn Graph (The Right Graph)&lt;/h2&gt;
&lt;p&gt;Nicolaas de Bruijn introduced (in 1946, in a paper entitled simply
&lt;a href="https://pure.tue.nl/ws/files/4442708/597473.pdf"&gt;"A combinatorial problem"&lt;/a&gt;)
a new way of representing a sequence with a graph. He split a given
sequence into k-mers, as before, but instead of representing
each k-mer as a &lt;em&gt;vertex&lt;/em&gt; on the graph, he represented each 
k-mer as an &lt;em&gt;edge&lt;/em&gt; on the graph.&lt;/p&gt;
&lt;p&gt;This type of graph is called a &lt;strong&gt;de Bruijn graph&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Specifically, for a DNA sequence, each k-mer from the sequence is
represented by an edge, where the source vertex
is that k-mer's (k-1)-nucleotide suffix and the destination vertex
is that k-mer's (k-1)-nucleotide prefix.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;      Sequence:   TAATGCCATGGGATGTT
      Pieces:     TA  
                   AA
                    AT 
                     TG
                      GC 
                       CC
                        CA 
                         AT
                          TG 
                           GG
                            GG 
                             GA 
                              AT  
                               TG 
                                GT 
                                 TT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now this sequence is written as the graph:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;TA -&amp;gt; AA -&amp;gt; AT -&amp;gt; TG -&amp;gt; GC -&amp;gt; CC -&amp;gt; CA -&amp;gt; AT -&amp;gt; TG -&amp;gt; GG -&amp;gt; GG -&amp;gt; GA -&amp;gt; AT -&amp;gt; TG -&amp;gt; GT -&amp;gt; TT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so that the original breakup of the sequence into k-mers is still
represented, but now as edges rather than as vertices. That is, the 
k-mer &lt;code&gt;TAA&lt;/code&gt; is represented by the edge &lt;code&gt;TA -&amp;gt; AA&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="transform-the-problem-hamiltonian-paths-to-eulerian-paths"&gt;Transform the Problem: Hamiltonian Paths to Eulerian Paths&lt;/h2&gt;
&lt;p&gt;The change in the problem representation (k-mers as vertices to k-mers
as edges) changes the problem of finding the &lt;strong&gt;Hamiltonian path&lt;/strong&gt; 
(a path through the graph that visits every &lt;em&gt;vertex&lt;/em&gt; exactly once) 
into the problem of finding the &lt;strong&gt;Eulerian path&lt;/strong&gt;
(a path through the graph that visits every &lt;em&gt;edge&lt;/em&gt; exactly once).&lt;/p&gt;
&lt;h1 id="an-example"&gt;An Example&lt;/h1&gt;
&lt;p&gt;Let's look at a slightly simpler example - the one de Bruijn was
originally considering - so we can see de Bruijn graphs in action
in a slightly simpler case.&lt;/p&gt;
&lt;p&gt;In his 1946 paper &lt;a href="https://pure.tue.nl/ws/files/4442708/597473.pdf"&gt;"A combinatorial problem"&lt;/a&gt;,
de Bruijn describes the problem thus:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some years ago Ir. K. Posthumus stated an interesting conjecture
concerning certain cycles of digits 0 or 1, which we shall call
&lt;span class="math"&gt;\(P_n\)&lt;/span&gt; cycles. For &lt;span class="math"&gt;\(n = 1, 2, 3, \dots\)&lt;/span&gt;, a &lt;span class="math"&gt;\(P_n\)&lt;/span&gt; cycle be an ordered
cycle of &lt;span class="math"&gt;\(2^n\)&lt;/span&gt; digits 0 or 1, such that the &lt;span class="math"&gt;\(2^n\)&lt;/span&gt; possible ordered
sets of &lt;span class="math"&gt;\(n\)&lt;/span&gt; consecutive digits of that cycle are all different.
As a consequence, any ordered set of &lt;span class="math"&gt;\(n\)&lt;/span&gt; digits 0 or 1 occurs exactly
once in that cycle.&lt;/p&gt;
&lt;p&gt;For example, a &lt;span class="math"&gt;\(P_3\)&lt;/span&gt; cycle is &lt;span class="math"&gt;\(00010111\)&lt;/span&gt;, respectively showing the
triples 000, 001, 010, 011, 111, 100, 100, which are all the possible
triples indeed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case, de Bruijn is discussing &lt;em&gt;complete&lt;/em&gt; de Bruijn graphs - he
constructs a de Bruijn graph of all possible 3-mers (our k-mers, &lt;span class="math"&gt;\(k = 3\)&lt;/span&gt;),
and constructs a path through the graph that visits every edge of the
graph. Here is the sequence broken down as above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;      Sequence:   00010111
      Pieces:     00  
                   00
                    01
                     10
                      01
                       11
                        11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The alphabet here is binary: 0 and 1. &lt;/p&gt;
&lt;p&gt;This (seemingly simple) example is a bit confusing, but here's
what's going on: we have four vertices on the de Bruijn graph,
consisting of the 2-mers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;00
01
10
11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, if we draw an edge for every possible 3-mer, we would 
start with the 3-mer &lt;code&gt;000&lt;/code&gt;, which is actually represented
by a self-edge from vertex &lt;code&gt;00&lt;/code&gt; to vertex &lt;code&gt;00&lt;/code&gt;, because the
prefix matches the suffix.&lt;/p&gt;
&lt;p&gt;Similarly, the 3-mer &lt;code&gt;111&lt;/code&gt; is represented by a self-edge
from vertex &lt;code&gt;11&lt;/code&gt; to vertex &lt;code&gt;11&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The other 3-mers are represented by their corresponding edges:
&lt;code&gt;001&lt;/code&gt; is represented by the edge &lt;code&gt;00 -&amp;gt; 01&lt;/code&gt;, &lt;code&gt;010&lt;/code&gt; by the edge
&lt;code&gt;01 -&amp;gt; 10&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;By drawing &lt;strong&gt;every possible edge&lt;/strong&gt; (to represent every possible
3-mer), we assemble the &lt;strong&gt;complete de Bruijn graph&lt;/strong&gt; (that is,
the de Bruijn graph containing vertices for all possible
2-mers connected by edges representing every possible 3-mer
in the given alphabet).&lt;/p&gt;
&lt;p&gt;The sequence de Bruijn gives in his paper is an Euler path
through the &lt;em&gt;complete&lt;/em&gt; (de Bruijn) graph (that is, a path 
through the de Bruijn graph that visits every edge exactly 
once):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Sequence: 00010111

00 -&amp;gt; 00 -&amp;gt; 01 -&amp;gt; 10 -&amp;gt; 01 -&amp;gt; 11 -&amp;gt; 11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="back-to-dna"&gt;Back to DNA&lt;/h1&gt;
&lt;p&gt;Now the utility of the de Bruijn methodology is more clear:
if we can come up with fast, efficient algorithms to find
Euler paths on large graphs, we can transform the assembly 
problem (given fragments of a long sequence, reconstruct
the sequence) into the problem of finding an Eulerian path,
which is tractable even for large graphs.&lt;/p&gt;
&lt;p&gt;Compare this with string matching algorithms utilizing
dynamic programming, which can cost &lt;span class="math"&gt;\(O(N^2)\)&lt;/span&gt; and make
genome assembly computationally infeasible.&lt;/p&gt;
&lt;p&gt;Part 1 (this post) has covered the basic idea behind 
assembling DNA sequences using de Bruijn graphs. In
Part 2 of this post, we will move on to a discussion
of the "real world" problem, warts and all, and how 
we can relax some of the strict assumptions (like assuming
perfect coverage of the original sequence and assuming
that all reads are perfect).&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computational Biology"></category><category term="go"></category><category term="golang"></category><category term="rosalind"></category><category term="computational biology"></category><category term="bioinformatics"></category><category term="euler"></category><category term="recursion"></category><category term="backtracking"></category><category term="graphs"></category><category term="algorithms"></category><category term="hamiltonian"></category><category term="eulerian"></category></entry><entry><title>The Git-Commit-Ectomy</title><link href="https://charlesreid1.github.io/the-git-commit-ectomy.html" rel="alternate"></link><published>2019-04-17T12:00:00-07:00</published><updated>2019-04-17T12:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-04-17:/the-git-commit-ectomy.html</id><summary type="html">&lt;p&gt;TLDR: Visit the git-commit-ectomy guide: &lt;a href="http://pages.charlesreid1.com/git-commit-ectomy"&gt;http://pages.charlesreid1.com/git-commit-ectomy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Consider the following &lt;em&gt;completely hypothetical&lt;/em&gt;
scenario.&lt;/p&gt;
&lt;p&gt;Suppose you've been working for a while on your latest
invention, a brand-new whiz-bang command line
tool that's fast and solves an important problem
and you're chugging your way to the finish line.&lt;/p&gt;
&lt;p&gt;As part of preparing to release your software tool,
you add some tests, because that's what you do.&lt;/p&gt;
&lt;p&gt;Those tests require some data, so you add a few test
data sets, a few hundred kilobytes each, nothing fancy.&lt;/p&gt;
&lt;p&gt;Then one day, &lt;strong&gt;the intern&lt;/strong&gt; (who is just trying to be 
helpful by â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;TLDR: Visit the git-commit-ectomy guide: &lt;a href="http://pages.charlesreid1.com/git-commit-ectomy"&gt;http://pages.charlesreid1.com/git-commit-ectomy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Consider the following &lt;em&gt;completely hypothetical&lt;/em&gt;
scenario.&lt;/p&gt;
&lt;p&gt;Suppose you've been working for a while on your latest
invention, a brand-new whiz-bang command line
tool that's fast and solves an important problem
and you're chugging your way to the finish line.&lt;/p&gt;
&lt;p&gt;As part of preparing to release your software tool,
you add some tests, because that's what you do.&lt;/p&gt;
&lt;p&gt;Those tests require some data, so you add a few test
data sets, a few hundred kilobytes each, nothing fancy.&lt;/p&gt;
&lt;p&gt;Then one day, &lt;strong&gt;the intern&lt;/strong&gt; (who is just trying to be 
helpful by adding a new test) slips in a 70 MB test
data set, and slips it in with a string of commits
that somehow get incorporated into the master branch.&lt;/p&gt;
&lt;p&gt;(Side note: you turned on branch protection to prevent
this whole mess, didn't you? &lt;em&gt;Didn't you??&lt;/em&gt; 
'Course you did. This is all
just a hypothetical scenario.)&lt;/p&gt;
&lt;p&gt;Now, the situation is complicated: there are several
open pull requests and active branches, and a non-trivial
amount of history that's been added since the time the
large test data set was accidentally added.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The intern&lt;/strong&gt; apologizes profusely and promises to 
bring in donuts every day next week. But the damage 
is done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The intern&lt;/strong&gt;, a git novice, pulls out a laptop
and runs a &lt;code&gt;git rm&lt;/code&gt; on the files, pushing to the
remote and happily, ignorantly believing the problem
has been solved.&lt;/p&gt;
&lt;p&gt;But &lt;strong&gt;the intern&lt;/strong&gt; does not understand how git works.
It has a perfect memory, and remembers every file in
every commit. Since the problematic first commit that
added the large files, git has remembered and will always
remember that large file. It's in git's blood. 
It's what git was designed to do.&lt;/p&gt;
&lt;p&gt;Once the intern has been, ahem, moved along,
and branch protection has been turned on,
it's time to find a git surgeon to perform a 
git-commit-ectomy to remove the problematic
large files from the repository entirely.&lt;/p&gt;
&lt;h2 id="dr-reids-patented-git-commit-ectomy"&gt;Dr. Reid's Patented Git-Commit-Ectomy&lt;/h2&gt;
&lt;p&gt;If it's a git-commit-ectomy you need,
try Dr. Reid's Patented Git-Commit-Ectomy
to ease your git commit pains.&lt;/p&gt;
&lt;p&gt;Whether you want to keep thing simple
and remove a git commit from a single branch,
or if you've got multiple branches, Dr. Reid's
Patented Git-Commit-Ectomy will get you back
on your feet.&lt;/p&gt;
&lt;p&gt;Dr. Reid's Patented Git-Commit-Ectomy can handle
even the most messy, confused, and tangled git 
commit history - with a bit of work and a gifted
surgeon the git-commit-ectomy can smooth things 
out and get you feeling right as rain.&lt;/p&gt;
&lt;p&gt;Visit the git-commit-ectomy guide: &lt;a href="http://pages.charlesreid1.com/git-commit-ectomy"&gt;http://pages.charlesreid1.com/git-commit-ectomy&lt;/a&gt;&lt;/p&gt;</content><category term="Git"></category><category term="git"></category><category term="rebase"></category><category term="cherry-pick"></category><category term="branching"></category><category term="version control"></category></entry><entry><title>The Josephus Problem: Part 3: Solving the Double Step Case</title><link href="https://charlesreid1.github.io/the-josephus-problem-part-3-solving-the-double-step-case.html" rel="alternate"></link><published>2019-03-22T14:00:00-07:00</published><updated>2019-03-22T14:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-03-22:/the-josephus-problem-part-3-solving-the-double-step-case.html</id><summary type="html">&lt;p&gt;This is Part 3 of an N-part series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-1-the-problem.html"&gt;The Josephus Problem: Part 1: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-2-two-examples.html"&gt;The Josephus Problem: Part 2: Two Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-3-solving-the-double-step-case.html"&gt;The Josephus Problem: Part 3: Solving the Double Step Case&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#solving-the-double-step-case"&gt;Solving the Double Step Case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#algorithm-d-using-doubling-permutation"&gt;Algorithm D: Using Doubling Permutation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-algorithm"&gt;The Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#write-the-doubling-permutation"&gt;Write the Doubling Permutation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#table-method"&gt;Table Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reverse-the-doubling-permutation"&gt;Reverse the Doubling Permutation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#trim-the-reversed-doubling-permutation"&gt;Trim the Reversed Doubling Permutation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-does-algorithm-d-work"&gt;Why Does Algorithm D Work?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#an-important-observation"&gt;An Important Observation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#three-facts"&gt;Three Facts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#power-of-two-example"&gt;Power of Two Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#not-a-power-of-two-example"&gt;Not a Power of Two Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-power-of-two-shortcut"&gt;The Power of Two Shortcut&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#algorithm-d-summary"&gt;Algorithm D Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="solving-the-double-step-case"&gt;Solving the Double Step Case&lt;/h2&gt;
&lt;p&gt;The Josephus Problem for a â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is Part 3 of an N-part series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-1-the-problem.html"&gt;The Josephus Problem: Part 1: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-2-two-examples.html"&gt;The Josephus Problem: Part 2: Two Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-3-solving-the-double-step-case.html"&gt;The Josephus Problem: Part 3: Solving the Double Step Case&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#solving-the-double-step-case"&gt;Solving the Double Step Case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#algorithm-d-using-doubling-permutation"&gt;Algorithm D: Using Doubling Permutation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-algorithm"&gt;The Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#write-the-doubling-permutation"&gt;Write the Doubling Permutation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#table-method"&gt;Table Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reverse-the-doubling-permutation"&gt;Reverse the Doubling Permutation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#trim-the-reversed-doubling-permutation"&gt;Trim the Reversed Doubling Permutation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-does-algorithm-d-work"&gt;Why Does Algorithm D Work?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#an-important-observation"&gt;An Important Observation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#three-facts"&gt;Three Facts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#power-of-two-example"&gt;Power of Two Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#not-a-power-of-two-example"&gt;Not a Power of Two Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-power-of-two-shortcut"&gt;The Power of Two Shortcut&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#algorithm-d-summary"&gt;Algorithm D Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="solving-the-double-step-case"&gt;Solving the Double Step Case&lt;/h2&gt;
&lt;p&gt;The Josephus Problem for a step size of &lt;span class="math"&gt;\(m = 2\)&lt;/span&gt;
can be solved two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Algorithm D: Doubling Permutation Algorithm&lt;/li&gt;
&lt;li&gt;Algorithm S: Label Skipped Nodes Algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this blog post we cover Algorithm D, which makes 
use of a doubling permutation. &lt;/p&gt;
&lt;p&gt;In the first section (&lt;a href="#algorithm-d-using-doubling-permutation"&gt;Algorithm D: Using Doubling Permutation&lt;/a&gt;)
we start by showing the recipe as applied 
to the case of &lt;span class="math"&gt;\(n = 11, m = 2\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;The recipe is straightforward to apply, but it is not
at all clear how it works. We start by introducing the
algorithm, then carrying it out for the case of &lt;span class="math"&gt;\(n = 11, m = 2\)&lt;/span&gt;
(this is a familiar case that we have covered in 
prior posts).&lt;/p&gt;
&lt;p&gt;We make observations about the procedure by comparing
the case of &lt;span class="math"&gt;\(n = 8, m = 2\)&lt;/span&gt; (a special
case where the circle size is a power of two) before
returning to the example of &lt;span class="math"&gt;\(n = 11, m = 2\)&lt;/span&gt; to make
generalizations and give a shortcut method for
the general double-step case.&lt;/p&gt;
&lt;h2 id="algorithm-d-using-doubling-permutation"&gt;Algorithm D: Using Doubling Permutation&lt;/h2&gt;
&lt;p&gt;In Exercise 29, Knuth asks a question that lays out
a solution procedure for the special case of &lt;span class="math"&gt;\(m = 2\)&lt;/span&gt;,
and asks the reader to prove it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Prove: the cycle form of the Josephus permutation
when &lt;span class="math"&gt;\(m = 2\)&lt;/span&gt; can be obtained by expressing 
the "doubling permutation" of &lt;span class="math"&gt;\(\{1, 2, \dots, 2n\}\)&lt;/span&gt;,
which takes &lt;span class="math"&gt;\(j\)&lt;/span&gt; into &lt;span class="math"&gt;\((2j) \mod (2n+1)\)&lt;/span&gt; into
cycle form, then &lt;strong&gt;reversing&lt;/strong&gt; L and R, 
and erasing all numbers larger than &lt;span class="math"&gt;\(n\)&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fortunately, we don't have to work out the solution
procedure for ourselves; unfortunately, it is not 
at all obvious why the solution procedure works, so
once we have seen how to apply it, we have to do a
bit more work before we can understand it.&lt;/p&gt;
&lt;h3 id="the-algorithm"&gt;The Algorithm&lt;/h3&gt;
&lt;p&gt;Given an input size &lt;span class="math"&gt;\(n\)&lt;/span&gt;, the algorithm steps are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Write the doubling permutation (in table form)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Factor the doubling permutation into cycles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reverse each cycle and remove values larger than n&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The result will be the Josephus permutation cycles.&lt;/p&gt;
&lt;h3 id="write-the-doubling-permutation"&gt;Write the Doubling Permutation&lt;/h3&gt;
&lt;p&gt;As mentioned above, we will start with the concrete example of
&lt;span class="math"&gt;\(n = 11, m = 2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We start by writing the doubling permutation for
the integers &lt;span class="math"&gt;\(1 \dots 2n\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1 \, 2 \, 4 \, 8 \, 16 \, 32 \, \dots \right)
$$&lt;/div&gt;
&lt;p&gt;When a number is greater than &lt;span class="math"&gt;\(2n+1\)&lt;/span&gt;, it is
reduced &lt;span class="math"&gt;\(\mod (2n+1)\)&lt;/span&gt;, so the next few terms of the
doubling permutation written out and reduced modulo
&lt;span class="math"&gt;\(2n+1\)&lt;/span&gt; are:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1 \, 2 \, 4 \, 8 \, 16 \, 32 \, 64 \, 128 \, 256 \, 512 \, 1024 \right)
$$&lt;/div&gt;
&lt;p&gt;which reduces modulo &lt;span class="math"&gt;\(2n+1\)&lt;/span&gt; to:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1 \, 2 \, 4 \, 8 \, 16 \, 9  \, 18 \,  13 \,   3 \, 6\, 12 \right)
$$&lt;/div&gt;
&lt;p&gt;After 12, we reach 1 again, the starting value, so further 
doublings will result in repetition of the elements we have
so far. &lt;/p&gt;
&lt;p&gt;Next, continue the process with the remaining elements.
Start with the smallest element not included in the 
cycle found above, which is 5, and continue the operation
of doubling and reducing modulo &lt;span class="math"&gt;\(2n+1\)&lt;/span&gt;. Doing this results in
the terms:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 5 \, 10 \, 20 \, 40 \, 80 \, \dots \right)
$$&lt;/div&gt;
&lt;p&gt;which reduces modulo &lt;span class="math"&gt;\(2n+1\)&lt;/span&gt; to:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 5 \, 10 \, 20 \, 17 \, 11 \, \dots \right)
$$&lt;/div&gt;
&lt;p&gt;Repeating this until the first element repeats
yields all of the remaining elements:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 5 \, 10 \, 20 \, 17 \, 11 \, 22 \, 21 \, 19 \, 15 \, 7 \, 14 \right)
$$&lt;/div&gt;
&lt;p&gt;Now the final doubling permutation can be written as the 
product of the two cycles:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1 \, 2 \, 4 \, 8 \, 16 \, 9  \, 18 \,  13 \,   3 \, 6\, 12 \right)
\left( 5 \, 10 \, 20 \, 17 \, 11 \, 22 \, 21 \, 19 \, 15 \, 7 \, 14 \right)
$$&lt;/div&gt;
&lt;p&gt;We now have the cycles of the doubling permutation! Step 2 finished.&lt;/p&gt;
&lt;h3 id="table-method"&gt;Table Method&lt;/h3&gt;
&lt;p&gt;Slightly more convenient than writing out the cycles the way we did above
is to create a table, with a column for &lt;span class="math"&gt;\(j = 1 \dots 2n\)&lt;/span&gt;, a column for
&lt;span class="math"&gt;\(2j\)&lt;/span&gt;, and a column for &lt;span class="math"&gt;\((2j) \mod (2n+1)\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; j   |  2j  |  2j mod 2n+1
-----|------|---------------
  1  |   2  |        2
  2  |   4  |        4
  3  |   6  |        6
  4  |   8  |        8
  5  |  10  |       10
  6  |  12  |       12
  7  |  14  |       14
  8  |  16  |       16
  9  |  18  |       18
 10  |  20  |       20
 11  |  22  |       22
 12  |  24  |        1
 13  |  26  |        3
 14  |  28  |        5
 15  |  30  |        7
 16  |  32  |        9
 17  |  34  |       11
 18  |  36  |       13
 19  |  38  |       15
 20  |  40  |       17
 21  |  42  |       19
 22  |  44  |       21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the cycles can be constructed by starting with the &lt;span class="math"&gt;\(j\)&lt;/span&gt; column of the 
first row in the table (1), reading off the corresponding entry (2) in the 
&lt;span class="math"&gt;\((2j) \mod (2n+1)\)&lt;/span&gt; column, adding the pair &lt;span class="math"&gt;\(1 \rightarrow 2\)&lt;/span&gt; to the cycle,
and moving to the row of the table with that corresponding &lt;span class="math"&gt;\(j\)&lt;/span&gt; value.&lt;/p&gt;
&lt;p&gt;The next step takes us to row 2 of the table, where we read off the value 4
from the right column, add the pair &lt;span class="math"&gt;\(2 \rightarrow 4\)&lt;/span&gt; to the cycle, and keep
moving.&lt;/p&gt;
&lt;p&gt;Eventually, the procedure will complete the first cycle and take us back to 1.
Since there are still rows in the table left, repeat the procedure, starting
with the first available row of the table (5), and keep going until all entries
of the table are gone. This will yield the same cycles as the process described 
above, but the bookkeeping is slightly easier:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1 \, 2 \, 4 \, 8 \, 16 \, 9  \, 18 \,  13 \,   3 \, 6\, 12 \right)
\left( 5 \, 10 \, 20 \, 17 \, 11 \, 22 \, 21 \, 19 \, 15 \, 7 \, 14 \right)
$$&lt;/div&gt;
&lt;h3 id="reverse-the-doubling-permutation"&gt;Reverse the Doubling Permutation&lt;/h3&gt;
&lt;p&gt;The next step is to reverse the permutation from left to right,
which means we step through all cycles from left to right,
and step through each cycle from left to right.&lt;/p&gt;
&lt;p&gt;Starting with the doubling permutation:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1 \, 2 \, 4 \, 8 \, 16 \, 9  \, 18 \,  13 \,   3 \, 6\, 12 \right)
\left( 5 \, 10 \, 20 \, 17 \, 11 \, 22 \, 21 \, 19 \, 15 \, 7 \, 14 \right)
$$&lt;/div&gt;
&lt;p&gt;We obtain the reverse:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 14 \, 7 \, 15 \, 19 \, 21 \, 22 \, 11 \, 17 \, 20 \, 10 \, 5 \right)
\left( 12 \, 6 \, 3 \, 13 \, 18 \, 9 \, 16 \, 8 \, 4 \, 2 \, 1 \right)
$$&lt;/div&gt;
&lt;h3 id="trim-the-reversed-doubling-permutation"&gt;Trim the Reversed Doubling Permutation&lt;/h3&gt;
&lt;p&gt;Now we eliminate any numbers from the reversed doubling permutation
that are larger than &lt;span class="math"&gt;\(n = 11\)&lt;/span&gt;, to get the trimmed permutation:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 7 \, 11 \, 10 \, 5 \right)
\left( 6 \, 3 \, 9 \, 8 \, 4 \, 2 \, 1 \right)
$$&lt;/div&gt;
&lt;p&gt;This is the final Josephus permutation. The one remaining step is to
rewrite the cycles in standard "sorted" order:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1 \, 6 \, 3 \, 9 \, 8 \, 4 \, 2 \right)
\left( 5 \, 7 \, 11 \, 10 \right)
$$&lt;/div&gt;
&lt;p&gt;Congratulations! You just solved the problem.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2 id="why-does-algorithm-d-work"&gt;Why Does Algorithm D Work?&lt;/h2&gt;
&lt;p&gt;If at this point you are scratching your head in wonder
at the seeming black magic involved in this algorithm,
then welcome to &lt;u&gt;The Art of Computer Programming&lt;/u&gt;!
(Seriously, the exercises are chock full of questions
like this one.)&lt;/p&gt;
&lt;p&gt;To understand why Algorithm D works, it is instructive
to consider a case where &lt;span class="math"&gt;\(n\)&lt;/span&gt; is a power of two, and make
some observations and generalizations to uncover the pattern
at work in Algorithm D. &lt;/p&gt;
&lt;h3 id="an-important-observation"&gt;An Important Observation&lt;/h3&gt;
&lt;p&gt;Start with an important observation: each time we complete one 
circuit of the circle, we have reduced the number of items 
in the circle by &lt;/p&gt;
&lt;div class="math"&gt;$$
\left\lfloor{ \frac{n}{2} }\right\rfloor
$$&lt;/div&gt;
&lt;p&gt;If our circle size is even, that means we cut our circle
size in half each time through the circle.&lt;/p&gt;
&lt;p&gt;The halving operation means the Josephus problem is
intimately linked with powers of 2 (or, base 2 logs),
so that's where the powers of 2 will come from.&lt;/p&gt;
&lt;h3 id="three-facts"&gt;Three Facts&lt;/h3&gt;
&lt;p&gt;Now we use this observation about halving to
state 3 facts about the case:&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact 1: If we are considering an item at an odd-numbered
location in the circle, we have already been
through the circle at least once.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(Explanation: The first time through the circle, 
all of the items in the circle at even-numbered 
locations will be removed, so only items at 
odd-numbered locations around the circle are left
after the first pass.)&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact 2: When the circle size is a power of 2,
the first item in the circle is the last item removed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(Explanation: If we have a circle the size of a power of 2,
we will always remove the last item in the circle when we
complete a circuit (because we will always reach it using 
two-steps), which means we always skip item 1 if the circle
size is a power of 2.)&lt;/p&gt;
&lt;p&gt;(Addendum: If a circle size starts as a power of 2,
going through the circle once and removing elements will
exactly halve the circle size, and preserve the property
that the circle size is a power of 2.)&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact 3: When the circle size is not a power of 2, the
size will eventually be reduced to a power of 2. Then
the item at the starting position in that round will be
the last item removed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(Explanation: Combining Fact 1 and Fact 2, we can see
that eventually we will always reach the special case
of the circle size being a power of 2, since with each
step, we reduce the circle size by 1. For example,
for a circle size of 22, we must carry out 6 removal
operations to reach a circle size of 16, at which point
the item at the starting position will be the last item
to be removed from the circle.)&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Now we will use these 3 facts to understand Algorithm D.&lt;/p&gt;
&lt;h3 id="power-of-two-example"&gt;Power of Two Example&lt;/h3&gt;
&lt;p&gt;Let's run through a Josephus solution for an example
where &lt;span class="math"&gt;\(n\)&lt;/span&gt; is a power of two, specifically, &lt;span class="math"&gt;\(n = 8, m = 2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We start by creating the doubling permutation table,
with columns for &lt;span class="math"&gt;\(j\)&lt;/span&gt;, &lt;span class="math"&gt;\(2j\)&lt;/span&gt;, and &lt;span class="math"&gt;\((2j) \mod (2n+1)\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; j   |  2j  |  2j mod 2n+1
-----|------|---------------
  1  |   2  |        2
  2  |   4  |        4
  3  |   6  |        6
  4  |   8  |        8
  5  |  10  |       10
  6  |  12  |       12
  7  |  14  |       14
  8  |  16  |       16
  9  |  18  |        1
 10  |  20  |        3
 11  |  22  |        5
 12  |  24  |        7
 13  |  26  |        9
 14  |  28  |       11
 15  |  30  |       13
 16  |  32  |       15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The variable &lt;span class="math"&gt;\(j\)&lt;/span&gt; takes on &lt;span class="math"&gt;\(2n\)&lt;/span&gt; values, 
&lt;span class="math"&gt;\(j = 1 \dots 2n\)&lt;/span&gt;, each of which
are doubled and reduced modulo &lt;span class="math"&gt;\(2n+1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;From column 3 we can see why the doubling permutation
requires us to consider &lt;span class="math"&gt;\(2n\)&lt;/span&gt; items instead of &lt;span class="math"&gt;\(n\)&lt;/span&gt;
items: because the first &lt;span class="math"&gt;\(n\)&lt;/span&gt; items are always even
(cuz, uh, we're doubling),
and what we want is coverage of odds &lt;em&gt;and&lt;/em&gt; evens in
the range &lt;span class="math"&gt;\(1 \dots n\)&lt;/span&gt;. This is also why we reduce
&lt;span class="math"&gt;\(\mod (2n + 1)\)&lt;/span&gt;, which is guaranteed to be odd - 
if we reduced &lt;span class="math"&gt;\(\mod 2n\)&lt;/span&gt; we would run into the same
problem of wrapping back garound to the even integers.&lt;/p&gt;
&lt;p&gt;If we step through the doubling permutation to factor it
into its cycles, we start at 1 and connect it to 2. 
This states that item 2 is removed 1st, so we write
&lt;code&gt;1 -&amp;gt; 2&lt;/code&gt; for the doubling permutation cycle, and keep
in mind that it will be reversed to &lt;code&gt;2 -&amp;gt; 1&lt;/code&gt; when we
write the final Josephus permutation cycle.&lt;/p&gt;
&lt;p&gt;The next step is to move to 2, and connect it to 4,
so &lt;code&gt;2 -&amp;gt; 4&lt;/code&gt; (also recognizing that this means the
opposite connection &lt;code&gt;4 -&amp;gt; 2&lt;/code&gt;, that item 4 is removed
second, in the final Josephus permutation.)&lt;/p&gt;
&lt;p&gt;Now we would expect to see &lt;code&gt;3 -&amp;gt; 6&lt;/code&gt;, since we know that
item 6 is removed 3rd with the same certainty that we know
item 4 is removed 2nd. But the problem is that it doesn't
fit into the existing cycle, so it may belong later in the
cycle or in another cycle altogether. We can't be certain.&lt;/p&gt;
&lt;p&gt;This is why we multiply our step size by 2 each time (2, 4, 8, 16),
instead of incrementing it by 2 each time (2, 4, 6, 8, 10).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fact 1&lt;/strong&gt; stated that any items at even-numbered 
positions are eliminated on the first pass - we can
see that manifest as we write the doubling cycle.
Once we reach 16 (double the size of the circle), 
the integers begin to loop back around through the 
odd numbers (also thanks to the choice of the odd
modulus &lt;span class="math"&gt;\(2n+1\)&lt;/span&gt;):&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1 \, 2 \, 4 \, 8 \ 16 \, 15 \, 13 \, 9 \right)
$$&lt;/div&gt;
&lt;p&gt;Consider the &lt;span class="math"&gt;\(16 \rightarrow 15\)&lt;/span&gt; connection. Stepping through
the (doubled) circle the first time through, we end
on 16. The next doubling takes us 16 more steps forward,
but that's 1 less than the size of the circle (again due 
to the choice of an odd modulus &lt;span class="math"&gt;\(2n+1\)&lt;/span&gt;), so we end up
at &lt;span class="math"&gt;\(2n - 1\)&lt;/span&gt;. 15 is larger than the size of the circle, 
so it will be excluded in the final Josephus cycle.&lt;/p&gt;
&lt;p&gt;Continuing to follow this through, we reach 9, which will
also be excluded from the Josephus cycle, and 9 returns 
back to 1 and completes the cycle.&lt;/p&gt;
&lt;p&gt;Now we continue the process with the remaining items in
the table, starting with the smallest, which is 3.
Doubling 3, we see the &lt;code&gt;3 -&amp;gt; 6&lt;/code&gt; connection we mentioned
earlier, which we expected to see since it indicates the
known fact that item 6 will be removed 3rd. &lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 3 \, 6 \, 12 \, 17 \, 14 \, 11 \, 5 \, 10 \right)
$$&lt;/div&gt;
&lt;p&gt;Finally, reversing and trimming the values larger than 8:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 5 \, 7 \, 6 \, 3 \right)
\left( 8 \, 4 \, 2 \, 1 \right)
$$&lt;/div&gt;
&lt;p&gt;and writing in sorted order:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1 \, 8 \, 4 \, 2 \right)
\left( 3 \, 5 \, 7 \, 6 \right)
$$&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Fact 2&lt;/strong&gt; tells us that the item in position 1 is the
last to be removed, since the size of the circle &lt;span class="math"&gt;\(n = 8 = 2^3\)&lt;/span&gt;.&lt;br&gt;
We confirm the cycle does contain &lt;span class="math"&gt;\(1 \rightarrow 8\)&lt;/span&gt; 
(meaning, the item in position 1 will be removed 
eighth).&lt;/p&gt;
&lt;h3 id="not-a-power-of-two-example"&gt;Not a Power of Two Example&lt;/h3&gt;
&lt;p&gt;Now that we've looked at an example where the size of
the circle is a power of 2, let's return to the original
example that we presented in &lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-2-two-examples.html"&gt;Part 2&lt;/a&gt;
and the beginning of this blog post,
namely, &lt;span class="math"&gt;\(n = 11, m = 2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Here is the doubling permutation table again: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; j   |  2j  |  2j mod 2n+1
-----|------|---------------
  1  |   2  |        2
  2  |   4  |        4
  3  |   6  |        6
  4  |   8  |        8
  5  |  10  |       10
  6  |  12  |       12
  7  |  14  |       14
  8  |  16  |       16
  9  |  18  |       18
 10  |  20  |       20
 11  |  22  |       22
 12  |  24  |        1
 13  |  26  |        3
 14  |  28  |        5
 15  |  30  |        7
 16  |  32  |        9
 17  |  34  |       11
 18  |  36  |       13
 19  |  38  |       15
 20  |  40  |       17
 21  |  42  |       19
 22  |  44  |       21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As before, the last column splits into odd and even,
with all the evens coming first, so we consider
&lt;span class="math"&gt;\(2n\)&lt;/span&gt; elements to cover all &lt;span class="math"&gt;\(n\)&lt;/span&gt; odd and even items,
and use an odd modulus to ensure we don't wrap back
around to the even numbers the second time through.&lt;/p&gt;
&lt;p&gt;We follow the entries of the table to factor this 
permutation into cycles, as above, yielding the two
cycles:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1 \, 2 \, 4 \, 8 \, 16 \, 9 \, 18 \, 13 \, 3 \, 6 \, 12 \right)
$$&lt;/div&gt;
&lt;p&gt;and &lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 5 \, 10 \, 20 \, 17 \, 11 \, 22 \, 21 \, 19 \, 15 \, 7 \, 14 \right)
$$&lt;/div&gt;
&lt;p&gt;Finally, we reverse these and eliminate the numbers larger
than &lt;span class="math"&gt;\(n\)&lt;/span&gt;, giving the Josephus permutation cycle:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 6 \, 3 \, 9 \, 8 \, 4 \, 2 \, 1 \right)
\left( 7 \, 11 \, 10 \, 5 \right)
$$&lt;/div&gt;
&lt;p&gt;or, rearranging into sorted order:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1\, 6 \, 3 \, 9 \, 8 \, 4 \, 2 \right)
\left( 5 \, 7 \, 11 \, 10 \right)
$$&lt;/div&gt;
&lt;p&gt;However, there is a faster way to figure out the last
item in the circle that will be removed that only
requires us to carry out 3 steps.&lt;/p&gt;
&lt;h3 id="the-power-of-two-shortcut"&gt;The Power of Two Shortcut&lt;/h3&gt;
&lt;p&gt;Unlike the circle whose size was a power of two,
we don't know ahead of time who goes last. 
However, &lt;strong&gt;Fact 3&lt;/strong&gt; tells us that eventually
our circle will reach the size of a power of two.
For this case it only takes 3 steps (11 - 8).
At that point, the circle item at the starting point
for the next step will be the last item removed.&lt;/p&gt;
&lt;p&gt;Here is the diagram for the third removal operation
(left labels show removal indices, right labels show
circle position indices):&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;img alt="step 3 of josephus circle n = 11 m = 2 labeled by removal order" 
src="images/josephus_11_2_step3R.png" height="350px" width="350px" /&gt;
&lt;/td&gt;

&lt;td&gt;
&lt;img alt="josephus circle n = 11 m = 2 labeled by circle location" 
src="images/josephus_11_2_labonly.png" height="350px" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Fact 3&lt;/strong&gt; is in effect here, because after the third item 
is removed, our starting "cursor" is on item 7 in the circle,
and the circle is of size &lt;span class="math"&gt;\(2^3\)&lt;/span&gt;, so from &lt;strong&gt;Fact 2&lt;/strong&gt; we know
that 7 will be the last item removed from the circle. &lt;/p&gt;
&lt;p&gt;We can see from the final permutation that &lt;span class="math"&gt;\(7 \rightarrow 11\)&lt;/span&gt;,
so indeed, this holds true.&lt;/p&gt;
&lt;p&gt;To translate this into mathematical terms, we are 
carrying out &lt;span class="math"&gt;\(r\)&lt;/span&gt; operations, where&lt;/p&gt;
&lt;div class="math"&gt;$$
r = n - 2^{ \left\lfloor{ \lg{n} }\right\rfloor }
$$&lt;/div&gt;
&lt;p&gt;and at the conclusion of those &lt;span class="math"&gt;\(r\)&lt;/span&gt; operations, we mark the
starting item for the next round. That item will be the 
last item to be removed.&lt;/p&gt;
&lt;h2 id="algorithm-d-summary"&gt;Algorithm D Summary&lt;/h2&gt;
&lt;p&gt;To summarize what we covered in this blog post:&lt;/p&gt;
&lt;p&gt;This post covers a method for solving the Josephus
problem for the special case of a step size of two,
&lt;span class="math"&gt;\(m = 2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We started by covering the recipe for Algorithm D,
which uses a doubling permutation to obtain the
Josephus permutation in cycle form. We illustrated
the three steps of the recipe (populate the table,
write the doubling permutation cycles, then 
filter and reverse) using an example case.&lt;/p&gt;
&lt;p&gt;Then we got into the question of &lt;em&gt;why&lt;/em&gt; Algorithm D 
works, by making an observation and building upon
it. We deduced several facts that allowed us to 
come up with a shortcut for the &lt;span class="math"&gt;\(m = 2\)&lt;/span&gt; case.&lt;/p&gt;
&lt;p&gt;Our final solution technique (making use of the 
above-mentioned shortcut) is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Carry out as many removal operations as needed
   to make the circle the size of a power of 2
   (see formula for &lt;span class="math"&gt;\(r\)&lt;/span&gt; above)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The starting item for the next round (where our
   "removal cursor" will start counting) will be
   the last item removed from the circle.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So if you find yourself being rounded up in some
sort of weird mass execution scheme that happens
to be a Josephus problem with a step size of 2,
the key to surviving is to remember your powers
of 2, to carry out &lt;span class="math"&gt;\(r = n - 2^{ \left\lfloor{ \lg{n} }\right\rfloor }\)&lt;/span&gt;
removal operations, and to
grab the next open spot in the circle.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="graphs"></category><category term="puzzles"></category><category term="algorithms"></category><category term="josephus"></category><category term="latex"></category></entry><entry><title>The Josephus Problem: Part 2: Two Examples</title><link href="https://charlesreid1.github.io/the-josephus-problem-part-2-two-examples.html" rel="alternate"></link><published>2019-03-20T14:00:00-07:00</published><updated>2019-03-20T14:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-03-20:/the-josephus-problem-part-2-two-examples.html</id><summary type="html">&lt;p&gt;This is Part 2 of an N-part series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-1-the-problem.html"&gt;The Josephus Problem: Part 1: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-2-two-examples.html"&gt;The Josephus Problem: Part 2: Two Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-3-solving-the-double-step-case.html"&gt;The Josephus Problem: Part 3: Solving the Double Step Case&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#two-examples"&gt;Two Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#n-8-m-4"&gt;n = 8, m = 4&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-by-step-removal-for-n-8"&gt;Step by Step Removal for n = 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-the-solution-permutation-two-row-notation"&gt;Writing the Solution Permutation: Two Row Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-the-solution-permutation-cycle-notation"&gt;Writing the Solution Permutation: Cycle Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#visual-representation-of-solution-permutation"&gt;Visual Representation of Solution Permutation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#n-11-m-2"&gt;n = 11, m = 2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-by-step-removal-for-n-11"&gt;Step by Step Removal for n = 11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#two-row-notation"&gt;Two Row Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cycle-notation"&gt;Cycle Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#circle-permutation-diagram"&gt;Circle Permutation Diagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps-solve"&gt;Next Steps: Solve!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="two-examples"&gt;Two Examples&lt;/h2&gt;
&lt;p&gt;In this blog post we'll walk through two examples
of â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is Part 2 of an N-part series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-1-the-problem.html"&gt;The Josephus Problem: Part 1: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-2-two-examples.html"&gt;The Josephus Problem: Part 2: Two Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-3-solving-the-double-step-case.html"&gt;The Josephus Problem: Part 3: Solving the Double Step Case&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#two-examples"&gt;Two Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#n-8-m-4"&gt;n = 8, m = 4&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-by-step-removal-for-n-8"&gt;Step by Step Removal for n = 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-the-solution-permutation-two-row-notation"&gt;Writing the Solution Permutation: Two Row Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-the-solution-permutation-cycle-notation"&gt;Writing the Solution Permutation: Cycle Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#visual-representation-of-solution-permutation"&gt;Visual Representation of Solution Permutation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#n-11-m-2"&gt;n = 11, m = 2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-by-step-removal-for-n-11"&gt;Step by Step Removal for n = 11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#two-row-notation"&gt;Two Row Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cycle-notation"&gt;Cycle Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#circle-permutation-diagram"&gt;Circle Permutation Diagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps-solve"&gt;Next Steps: Solve!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="two-examples"&gt;Two Examples&lt;/h2&gt;
&lt;p&gt;In this blog post we'll walk through two examples
of a Josephus problem:&lt;/p&gt;
&lt;div class="math"&gt;$$
n = 8, m = 4
$$&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="math"&gt;$$
n = 11, m = 2
$$&lt;/div&gt;
&lt;p&gt;We will simulate the Josephus process and
show how the solution is expressed using both 
permutation notation and cycle notation.&lt;/p&gt;
&lt;h2 id="n-8-m-4"&gt;n = 8, m = 4&lt;/h2&gt;
&lt;p&gt;We begin with the example that Knuth gives in his
problem statement, &lt;span class="math"&gt;\(n = 8, m = 4\)&lt;/span&gt;, along with its
solution, &lt;span class="math"&gt;\(54613872\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Here is the Josephus circle for this case, and the
corresponding removal index on the right (the red dot
indicates the starting point for the process):&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;b&gt;Circle index:&lt;/b&gt;&lt;br /&gt;
&lt;img alt="indexed by circle location order" 
src="images/josephus_8_4_circleix.png" width="350px" /&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;b&gt;Removal index:&lt;/b&gt;&lt;br /&gt;
&lt;img alt="indexed by removal order" 
src="images/josephus_8_4_removalix.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id="step-by-step-removal-for-n-8"&gt;Step by Step Removal for n = 8&lt;/h3&gt;
&lt;p&gt;Starting at the red dot, we proceed &lt;span class="math"&gt;\(m-1\)&lt;/span&gt; points forward
through the circle (&lt;span class="math"&gt;\(m\)&lt;/span&gt; if we include the starting
point), skipping items that have already been removed,
and remove an item from the circle.&lt;/p&gt;
&lt;p&gt;We indicate the starting point with a red dot in Step 0,
then indicate the removal index with a red dot and the
corresponding removal index.&lt;/p&gt;
&lt;table&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 0: Starting Point
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="indexed by removal order" 
src="images/josephus_8_4_step0R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 1:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="indexed by removal order" 
src="images/josephus_8_4_step1R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 2:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="indexed by removal order" 
src="images/josephus_8_4_step2R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 3:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="indexed by removal order" 
src="images/josephus_8_4_step3R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 4:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="indexed by removal order" 
src="images/josephus_8_4_step4R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 5:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="indexed by removal order" 
src="images/josephus_8_4_step5R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 6:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="indexed by removal order" 
src="images/josephus_8_4_step6R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 7:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="indexed by removal order" 
src="images/josephus_8_4_step7R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 8:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="indexed by removal order" 
src="images/josephus_8_4_step8R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;

&lt;h3 id="writing-the-solution-permutation-two-row-notation"&gt;Writing the Solution Permutation: Two Row Notation&lt;/h3&gt;
&lt;p&gt;As mentioned in Part 1, we can think about the final removal order
of sushi plates (or mice, or soldiers) as a special permutation, 
the Josephus permutation. If we want to write the Josephus permutation
using the standard two-row notation for permutations, we would write
the circle order (the index of items around the circle) on the top row,
and the removal order (the index of items as they are removed) on the 
bottom row. This gives:&lt;/p&gt;
&lt;div class="math"&gt;$$
\bigl(\begin{smallmatrix}
    1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 &amp;amp; 5 &amp;amp; 6 &amp;amp; 7 &amp;amp; 8 \\
    5 &amp;amp; 4 &amp;amp; 6 &amp;amp; 1 &amp;amp; 3 &amp;amp; 8 &amp;amp; 7 &amp;amp; 2
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;p&gt;While this notation is more intuitive (makes it easier to answer
a variety of questions), it is also inconvenient notation, since
there are many equivalent ways of writing a single permutation.&lt;/p&gt;
&lt;h3 id="writing-the-solution-permutation-cycle-notation"&gt;Writing the Solution Permutation: Cycle Notation&lt;/h3&gt;
&lt;p&gt;In Part 1 we also introduced cycles and cycle notation. Writing a
permutation as a cycle is a unique representation of that permutation.
By tracing which elements are permuted with other elements, we can
turn the two-row representation into a cycle representation.&lt;/p&gt;
&lt;p&gt;Here is the Josephus permutation for &lt;span class="math"&gt;\(n = 8, m = 4\)&lt;/span&gt; 
in cycle notation:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1 \, 5 \, 3 \, 6 \, 8 \, 2 \, 4 \right) \left( 7 \right)
$$&lt;/div&gt;
&lt;h3 id="visual-representation-of-solution-permutation"&gt;Visual Representation of Solution Permutation&lt;/h3&gt;
&lt;p&gt;To represent the Josephus permutation graphically, we draw lines 
connecting the edges that permute and form cycles:&lt;/p&gt;
&lt;p&gt;&lt;img alt="circle with undirected permutation paths" 
src="images/josephus_8_4_circ.png" width="350px" /&gt;&lt;/p&gt;
&lt;p&gt;This is a visual representation of the Josephus permutation
for &lt;span class="math"&gt;\(n = 8, m = 4\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="n--11-m--2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="n-11-m-2"&gt;n = 11, m = 2&lt;/h2&gt;
&lt;p&gt;Next is an example with a step size of two, which
is a special case of the Josephus problem with a 
slightly easier solution procedure.&lt;/p&gt;
&lt;p&gt;Here is the final Josephus permutation on a circle,
which is what our procedure below will yield:&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;b&gt;Circle index:&lt;/b&gt;&lt;br /&gt;
&lt;img alt="indexed by circle location order" 
src="images/josephus_11_2_circleix.png" width="350px" /&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;b&gt;Removal index:&lt;/b&gt;&lt;br /&gt;
&lt;img alt="indexed by removal order" 
src="images/josephus_11_2_removalix.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id="step-by-step-removal-for-n-11"&gt;Step by Step Removal for n = 11&lt;/h3&gt;
&lt;p&gt;As before, we proceed from the red dot, moving
forward &lt;span class="math"&gt;\(m-1\)&lt;/span&gt; items and removing the &lt;span class="math"&gt;\(m^{th}\)&lt;/span&gt;
item.&lt;/p&gt;
&lt;p&gt;We indicate the starting point with a red dot in Step 0,
then indicate the removal index with a red dot and the
corresponding removal index.&lt;/p&gt;
&lt;table&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 0: Starting Point
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="josephus n = 11 m = 2 step 0"
src="images/josephus_11_2_step0R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 1:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="josephus n = 11 m = 2 step 1"
src="images/josephus_11_2_step1R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 2:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="josephus n = 11 m = 2 step 2"
src="images/josephus_11_2_step2R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 3:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="josephus n = 11 m = 2 step 3"
src="images/josephus_11_2_step3R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 4:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="josephus n = 11 m = 2 step 4"
src="images/josephus_11_2_step4R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 5:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="josephus n = 11 m = 2 step 5"
src="images/josephus_11_2_step5R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 6:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="josephus n = 11 m = 2 step 6"
src="images/josephus_11_2_step6R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 7:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="josephus n = 11 m = 2 step 7"
src="images/josephus_11_2_step7R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 8:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="josephus n = 11 m = 2 step 8"
src="images/josephus_11_2_step8R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 9:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="josephus n = 11 m = 2 step 9"
src="images/josephus_11_2_step9R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 10:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="josephus n = 11 m = 2 step 10"
src="images/josephus_11_2_step10R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Step 11:
&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td&gt;
&lt;img alt="josephus n = 11 m = 2 step 11"
src="images/josephus_11_2_step11R.png" width="350px" /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;

&lt;h3 id="two-row-notation"&gt;Two Row Notation&lt;/h3&gt;
&lt;p&gt;Here is the two-row representation:&lt;/p&gt;
&lt;div class="math"&gt;$$
\bigl(\begin{smallmatrix}
     1 &amp;amp;  2 &amp;amp;  3 &amp;amp;  4 &amp;amp;  5 &amp;amp;  6 &amp;amp;  7 &amp;amp;  8 &amp;amp;  9 &amp;amp; 10 &amp;amp; 11 \\
     6 &amp;amp;  1 &amp;amp;  9 &amp;amp;  2 &amp;amp;  7 &amp;amp;  3 &amp;amp; 11 &amp;amp;  4 &amp;amp;  8 &amp;amp;  5 &amp;amp; 10
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;h3 id="cycle-notation"&gt;Cycle Notation&lt;/h3&gt;
&lt;p&gt;When factored into a cycle, this gives:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1 \, 6 \, 3 \, 9 \, 8 \, 4 \, 2 \right)
\left( 5 \, 7 \, 11 \, 10 \right)
$$&lt;/div&gt;
&lt;h3 id="circle-permutation-diagram"&gt;Circle Permutation Diagram&lt;/h3&gt;
&lt;p&gt;To represent the Josephus permutation graphically, we draw lines 
connecting the edges that permute and form cycles:&lt;/p&gt;
&lt;p&gt;&lt;img alt="circle with undirected permutation paths" 
src="images/josephus_11_2_circ.png" width="350px" /&gt;&lt;/p&gt;
&lt;p&gt;This is a visual representation of the Josephus permutation
for &lt;span class="math"&gt;\(n = 11, m = 2\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id="next-steps-solve"&gt;Next Steps: Solve!&lt;/h2&gt;
&lt;p&gt;Our next steps are simple: solve it! &lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-3-solving-the-double-step-case.html"&gt;Part 3&lt;/a&gt;&lt;/strong&gt; we will show the solution of the
special case of &lt;span class="math"&gt;\(m = 2\)&lt;/span&gt; (the double-step case).&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;&lt;a href="#"&gt;Part 4&lt;/a&gt;&lt;/strong&gt; we will show several ways to solve
the general case, and walk through some examples
where we apply the solution procedure.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="graphs"></category><category term="puzzles"></category><category term="algorithms"></category><category term="josephus"></category><category term="latex"></category></entry><entry><title>The Josephus Problem: Part 1: The Problem</title><link href="https://charlesreid1.github.io/the-josephus-problem-part-1-the-problem.html" rel="alternate"></link><published>2019-03-16T14:00:00-07:00</published><updated>2019-03-16T14:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-03-16:/the-josephus-problem-part-1-the-problem.html</id><summary type="html">&lt;p&gt;This is Part 1 of an N-part series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-1-the-problem.html"&gt;The Josephus Problem: Part 1: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-2-two-examples.html"&gt;The Josephus Problem: Part 2: Two Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-3-solving-the-double-step-case.html"&gt;The Josephus Problem: Part 3: Solving the Double Step Case&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-josephus-problem-and-variations"&gt;The Josephus Problem and Variations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-sushi-boat-variation"&gt;The Sushi Boat Variation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-backstory"&gt;More Backstory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-tools"&gt;The Tools&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#permutations"&gt;Permutations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cycles"&gt;Cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#circular-linked-lists"&gt;Circular Linked Lists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tex-for-diagrams"&gt;TeX for Diagrams&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#empty-josephus-circle-diagram"&gt;Empty Josephus Circle Diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#josephus-circle-diagram-with-permutation-paths"&gt;Josephus Circle Diagram With Permutation Paths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps-examples-and-solutions"&gt;Next Steps: Examples and Solutions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="the-josephus-problem-and-variations"&gt;The Josephus Problem and Variations&lt;/h2&gt;
&lt;p&gt;The following problem, Cat and Mice, is Puzzle 88 
in Boris Kordemsky's The Moscow Puzzles.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Purrer has decided to take a nap. He dreams â€¦&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;This is Part 1 of an N-part series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-1-the-problem.html"&gt;The Josephus Problem: Part 1: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-2-two-examples.html"&gt;The Josephus Problem: Part 2: Two Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-3-solving-the-double-step-case.html"&gt;The Josephus Problem: Part 3: Solving the Double Step Case&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-josephus-problem-and-variations"&gt;The Josephus Problem and Variations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-sushi-boat-variation"&gt;The Sushi Boat Variation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-backstory"&gt;More Backstory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-tools"&gt;The Tools&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#permutations"&gt;Permutations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cycles"&gt;Cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#circular-linked-lists"&gt;Circular Linked Lists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tex-for-diagrams"&gt;TeX for Diagrams&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#empty-josephus-circle-diagram"&gt;Empty Josephus Circle Diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#josephus-circle-diagram-with-permutation-paths"&gt;Josephus Circle Diagram With Permutation Paths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps-examples-and-solutions"&gt;Next Steps: Examples and Solutions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="the-josephus-problem-and-variations"&gt;The Josephus Problem and Variations&lt;/h2&gt;
&lt;p&gt;The following problem, Cat and Mice, is Puzzle 88 
in Boris Kordemsky's The Moscow Puzzles.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Purrer has decided to take a nap. He dreams
he is encircled by &lt;span class="math"&gt;\(n\)&lt;/span&gt; mice: &lt;span class="math"&gt;\(n-1\)&lt;/span&gt; gray and 1 white.
He hears is owner saying, "Purrer, you are to
eat each &lt;span class="math"&gt;\(m\)&lt;/span&gt;-th mouse, keeping the same 
direction. The last mouse you eat must be
the white one.&lt;/p&gt;
&lt;p&gt;Which mouse should he start with?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This problem presents a scenario that is nearly identical to
a classic problem that has a more grisly backstory: the 
Josephus problem.&lt;/p&gt;
&lt;p&gt;Donald Knuth presents a more unsettling version of this problem,
so I'll just let his (rather gleeful) description of the original
problem suffice (except - what's this "we" stuff?)&lt;/p&gt;
&lt;p&gt;From Section 1.3.2 of &lt;u&gt;The Art of Computer Programming&lt;/u&gt; (Vol. 1),
Exercise 22 presents the Josephus Problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;22. (The Josephus Problem.)&lt;/strong&gt; There are &lt;span class="math"&gt;\(n\)&lt;/span&gt; men arranged in a circle. Beginning
with a particular position, we count around the circle and brutally execute
every &lt;span class="math"&gt;\(m^{th}\)&lt;/span&gt; man (the circle closing as men are decapitated). For example,
the execution order when &lt;span class="math"&gt;\(n = 8, m = 4\)&lt;/span&gt; is &lt;span class="math"&gt;\(54613872\)&lt;/span&gt;: the first man is fifth
to go, the second man is fourth, etc. Write a program which prints outs the
order of execution when &lt;span class="math"&gt;\(n = 24, m = 11\)&lt;/span&gt;.  Try to design a clever algorithm
that works at high speed when &lt;span class="math"&gt;\(n\)&lt;/span&gt; and &lt;span class="math"&gt;\(m\)&lt;/span&gt; are large.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="the-sushi-boat-variation"&gt;The Sushi Boat Variation&lt;/h3&gt;
&lt;p&gt;You are at the sushi boat restaurant, where plates of
sushi in tiny boats float by in front of you.&lt;/p&gt;
&lt;p&gt;There are &lt;span class="math"&gt;\(n\)&lt;/span&gt; plates of sushi, each on a sushi boat.  Each plate of sushi is
labeled &lt;span class="math"&gt;\(1 \dots n\)&lt;/span&gt; and arranged in order on the boats.&lt;/p&gt;
&lt;p&gt;Beginning at plate 1, you count &lt;span class="math"&gt;\(m\)&lt;/span&gt; plates of sushi,
stopping at the &lt;span class="math"&gt;\(m^{th}\)&lt;/span&gt; boat and taking the plate of
sushi off the boat to eat it.&lt;/p&gt;
&lt;p&gt;In what order will the sushi plates be stacked when you are done?&lt;/p&gt;
&lt;p&gt;Which plate of sushi will be eaten last?&lt;/p&gt;
&lt;h3 id="more-backstory"&gt;More Backstory&lt;/h3&gt;
&lt;p&gt;More background on the Josephus problem and its various solutions is given in a
letter to the editor from the Fibonacci Quarterly, Issue 1 of 1976 (&lt;a href="https://fq.math.ca/Scanned/14-1/letter2-a.pdf"&gt;Part
1&lt;/a&gt; and &lt;a href="https://fq.math.ca/Scanned/14-1/letter2-b.pdf"&gt;Part
2&lt;/a&gt;) written in response to an
article that gave a solution to the problem of "Idiot's Roulette" (identical to
the Josephus problem as presented above) without referencing the Josephus
problem.  Here is &lt;a href="https://fq.math.ca/Scanned/13-2/booth.pdf"&gt;the original article&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-tools"&gt;The Tools&lt;/h2&gt;
&lt;p&gt;To solve the Josephus problem, we need to use several 
conceptual and computational tools. Below we cover
some notation we will use and give links to pages on the
&lt;a href="https://charlesreid1.com/wiki/"&gt;charlesreid1.com wiki&lt;/a&gt;
that are useful.&lt;/p&gt;
&lt;h3 id="permutations"&gt;Permutations&lt;/h3&gt;
&lt;p&gt;We can think of the outcome of the Josephus problem as a
"Josephus permutation" - a permutation that reorders the
sushi plates in the circle (numbered by their positoin in the 
circle) into the order in which they are removed from the
circle.&lt;/p&gt;
&lt;p&gt;For example, in Knuth's problem statement, he gives
an example of &lt;span class="math"&gt;\(n = 8, m = 4\)&lt;/span&gt; (eating every 4th plate
of sushi, in a train of 8 sushi boats), which results
in the plates being removed in the following order:&lt;/p&gt;
&lt;div class="math"&gt;$$
5, 4, 6, 1, 3, 8, 7, 2
$$&lt;/div&gt;
&lt;p&gt;To write this permutation using mathematical notation,
we write two rows. The top row is the ordering 
of plates in the circle, the "natural" ordering, 
and the second row is the order of removal of plates,
which is the Josephus permutation:&lt;/p&gt;
&lt;div class="math"&gt;$$
\bigl(\begin{smallmatrix}
    1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 &amp;amp; 5 &amp;amp; 6 &amp;amp; 7 &amp;amp; 8 \\
    5 &amp;amp; 4 &amp;amp; 6 &amp;amp; 1 &amp;amp; 3 &amp;amp; 8 &amp;amp; 7 &amp;amp; 2
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;p&gt;As Knuth would point out, this Josephus permutation
can be written in 40,319 other equivalent ways (that's
8! total, minus the 1 way shown above) by reordering the
columns (as long as we reorder the columns in the top and
bottom rows in the same way).&lt;/p&gt;
&lt;p&gt;We can read this permutation from left to right as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first sushi plate (labeled 1) will be eaten fifth;&lt;/li&gt;
&lt;li&gt;The second sushi plate (labeled 2) will be eaten fourth;&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ordering the permutation as above (circle index on top,
removal index on bottom) makes it easy to answer the 
second question, "Which sushi plate will be eaten last?"&lt;/p&gt;
&lt;p&gt;We find 8 in the bottom row (the removal index), and read
the corresponding number in the top row (the plate 
number/circle position), plate 6.&lt;/p&gt;
&lt;p&gt;If we wish to answer the first question, "in what order will
the plates be removed," we have a bit more work to do.
We mentioned that the above permutation is 1 of a total of 
40,320 equivalent ways of writing the same permutation. 
Another way of writing it would be to maintain the pairing
between top and bottom but sort the bottom elements:&lt;/p&gt;
&lt;div class="math"&gt;$$
\bigl(\begin{smallmatrix}
    4 &amp;amp; 8 &amp;amp; 5 &amp;amp; 2 &amp;amp; 1 &amp;amp; 3 &amp;amp; 7 &amp;amp; 6 \\
    1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 &amp;amp; 5 &amp;amp; 6 &amp;amp; 7 &amp;amp; 8
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;p&gt;Now we can find the order of the plates by reading
the top row right-to-left. The last plate removed
is plate 6, so that will be on top of the stack of
plates (stacks are first in, last out).&lt;/p&gt;
&lt;p&gt;We cover permutations and permutation notation 
in the context of Rubiks Cubes on the 
&lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube/Permutations"&gt;Rubiks Cube/Permutations&lt;/a&gt;
page of the charlesreid1.com wiki.&lt;/p&gt;
&lt;h3 id="cycles"&gt;Cycles&lt;/h3&gt;
&lt;p&gt;While the above permutation notation is useful,
the variety of ways of expressing the same
permutation is inconvenient. This is where
cycles become useful - cycles are a way of
implicitly representing both rows of the 
permutation. &lt;/p&gt;
&lt;p&gt;To do this, we "thread" our way through the
permutation to create the cycle of which items
move to which positions.&lt;/p&gt;
&lt;p&gt;Starting with the left-most column of the
permutation,&lt;/p&gt;
&lt;div class="math"&gt;$$
\bigl(\begin{smallmatrix}
    1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 &amp;amp; 5 &amp;amp; 6 &amp;amp; 7 &amp;amp; 8 \\
    5 &amp;amp; 4 &amp;amp; 6 &amp;amp; 1 &amp;amp; 3 &amp;amp; 8 &amp;amp; 7 &amp;amp; 2
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;p&gt;we know that &lt;span class="math"&gt;\(1 \rightarrow 5\)&lt;/span&gt;. Now we find
the column that has 5 in the top: the fifth
column. We write &lt;span class="math"&gt;\(5 \rightarrow 3\)&lt;/span&gt;. Now we
find the column with 3 in the top: the third
column. We write &lt;span class="math"&gt;\(3 \rightarrow 6\)&lt;/span&gt;. Next, we
write &lt;span class="math"&gt;\(6 \rightarrow 8\)&lt;/span&gt;, then &lt;span class="math"&gt;\(8 \rightarrow 2\)&lt;/span&gt;,
then &lt;span class="math"&gt;\(2 \rightarrow 4\)&lt;/span&gt;. Once we see that the 
last step of the cycle is &lt;span class="math"&gt;\(4 \rightarrow 1\)&lt;/span&gt;,
which brings us back to the beginning, we
write that closed cycle in parentheses.
If we have elements left, we repeat the
procedure starting with any of the remaining
elements. Sometimes there is a single cycle,
and sometimes there are multiple cycles.
In this case we have two cycles:&lt;/p&gt;
&lt;div class="math"&gt;$$
\left( 1 \, 5 \, 3 \, 6 \, 8 \, 2 \, 4 \right) \left( 7 \right)
$$&lt;/div&gt;
&lt;p&gt;This indicates that 7 does not change
position, i.e., the 7th plate of sushi
is eaten 7th.&lt;/p&gt;
&lt;p&gt;This notation is very convenient for
finding solutions, and it turns out that
Knuth gives a general solution procedure
for the Josephus problem that involves a
rather complicated application of the cycle
notation, so a solid understanding of
cycle notation is important.&lt;/p&gt;
&lt;p&gt;We cover cycle notation in the context of Rubiks Cubes
on the &lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube/Permutations"&gt;Rubiks Cube/Permutations&lt;/a&gt;
page of the charlesreid1.com wiki (in particular,
the sections on &lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube/Permutations#Permutation_Algebra"&gt;Permutation Algebra&lt;/a&gt;
that cover intercalation products).&lt;/p&gt;
&lt;h3 id="circular-linked-lists"&gt;Circular Linked Lists&lt;/h3&gt;
&lt;p&gt;Among the many ways of solving the Josephus problem,
the easiest method is to just carry out the procedure 
by hand to find the final Josephus permutation, then 
use it to answer the original question. This technique
is referred to as the &lt;em&gt;simulation&lt;/em&gt; technique.&lt;/p&gt;
&lt;p&gt;This technique would become infeasible if we were to 
ask more difficult versions of the Josephus problem,
such as posing a scenario where there are 5 million
plates of sushi, and we wish to know which position
(which plate of sushi) will be eaten 2,999,998th,
and we also wish to have the answer instantaneously.&lt;/p&gt;
&lt;p&gt;If we're dealing with smaller values of n and m,
though, we can simulate a solution to the Josephus 
problem using a circular linked list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linked Lists&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Briefly, a linked list is a type of list whose
elements consist of &lt;em&gt;nodes&lt;/em&gt;, small bundles containing
a piece of data (the list item's value) and 
pointers to other nodes (the next and/or previous
elements in the list).&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.com/wiki/Linked_Lists"&gt;Linked Lists&lt;/a&gt;
for notes on linked lists and some answers to
textbook exercises.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.com/wiki/Lists_Study_Guide"&gt;Lists Study Guide&lt;/a&gt;
for a summary of important information about
and properties of lists.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Circular Linked Lists:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A circular linked list is just what it sounds like:
each of the elements points to the next element,
and the last element in the list points to the
first element in the list. We can use the list
by maintaining a pointer to a particular item
(the first item in the list).&lt;/p&gt;
&lt;p&gt;We can insert items into the list by creating a new
node, and inserting it between two nodes (e.g., the
front and back of the list) by updating the pointers of
the front and back nodes to point to the new list item.&lt;/p&gt;
&lt;p&gt;Usefully, we can also remove items from the list
with some pointer manipulation. To remove a node,
we modify the next/previous pointers of the nodes 
before/after the doomed node so that they point
to each other instead of to the doomed node.&lt;/p&gt;
&lt;p&gt;This allows us to explicitly model the sushi boat
(a.k.a. the "kill ring") in the Josephus problem.&lt;/p&gt;
&lt;p&gt;Circular linked lists are covered on the 
charlesreid1.com wiki on the &lt;a href="https://charlesreid1.com/wiki/Linked_Lists/Java/Circular"&gt;Linked Lists/Java/Circular&lt;/a&gt;
page, and are implemented in Java in the 
&lt;a href="https://git.charlesreid1.com/cs/java"&gt;cs/java&lt;/a&gt;
repo: &lt;a href="https://git.charlesreid1.com/cs/java/src/branch/master/lists/linked-lists"&gt;https://git.charlesreid1.com/cs/java/src/branch/master/lists/linked-lists&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A Python implementation used to solve the Josephus
problem is available in the cs/josephus repo:
repo: &lt;a href="https://git.charlesreid1.com/cs/josephus"&gt;https://git.charlesreid1.com/cs/josephus&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="tex-for-diagrams"&gt;TeX for Diagrams&lt;/h2&gt;
&lt;p&gt;In addition to writing The Art of Computer Programming,
which has remained a gold standard algorithm textbook
for over 40 years, Knuth also invented the TeX 
typesetting system, which is also the gold standard
for typesetting mathematical equations.&lt;/p&gt;
&lt;p&gt;We use the &lt;a href="https://sourceforge.net/projects/pgf/"&gt;PGF/TikZ&lt;/a&gt;
package to draw polygons that are useful in
illustrating the circles of the Josephus problem
and in visualizing various permutations.&lt;/p&gt;
&lt;p&gt;A few examples and links to Github Gists with TeX 
code follow.&lt;/p&gt;
&lt;h3 id="empty-josephus-circle-diagram"&gt;Empty Josephus Circle Diagram&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/charlesreid1/a5f1cf398fb9c56e7ed5c2f55d01e10f"&gt;Link to gist with TeX code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="empty josephus circle diagram" 
src="images/poly_circ_empty.png" width="350px" /&gt;&lt;/p&gt;
&lt;p&gt;Here is the TeX code to generate this diagram:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="na"&gt;[border=2mm]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;standalone&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikz&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;xintexpr&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usetikzlibrary&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;shapes.geometric&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikzpicture&lt;span class="nb"&gt;}&lt;/span&gt;[scale=3]

&lt;span class="c"&gt;% make a node with variable name pol (with the list of features given) at the location (0,0), and don&amp;#39;t label it&lt;/span&gt;
&lt;span class="k"&gt;\node&lt;/span&gt; (pol) [draw=none, thick, black!90!black,rotate=0,minimum size=6cm,regular polygon, regular polygon sides=11] at (0,0) &lt;span class="nb"&gt;{}&lt;/span&gt;;


&lt;span class="c"&gt;% anchor is &amp;quot;corner 1&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;% label is 1/2/3/4/etc&lt;/span&gt;
&lt;span class="c"&gt;% placement is placement w.r.t. coordinate location&lt;/span&gt;
&lt;span class="k"&gt;\foreach&lt;/span&gt; &lt;span class="k"&gt;\anchor&lt;/span&gt;/&lt;span class="k"&gt;\label&lt;/span&gt;/&lt;span class="k"&gt;\placement&lt;/span&gt; in
    &lt;span class="nb"&gt;{&lt;/span&gt;corner 1/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/above,
     corner 2/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/above left,
     corner 3/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/left,
     corner 4/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/left,
     corner 5/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/below left,
     corner 6/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/below,
     corner 7/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/below,
     corner 8/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/below right,
     corner 9/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/right,
     corner 10/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/right,
     corner 11/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/above right&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\draw&lt;/span&gt;&lt;span class="na"&gt;[shift=(pol.\anchor)]&lt;/span&gt; plot coordinates&lt;span class="nb"&gt;{&lt;/span&gt;(0,0)&lt;span class="nb"&gt;}&lt;/span&gt; node[font=&lt;span class="k"&gt;\scriptsize&lt;/span&gt;,&lt;span class="k"&gt;\placement&lt;/span&gt;] &lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\label&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;;


&lt;span class="c"&gt;% draw a circle connecting all points&lt;/span&gt;
&lt;span class="k"&gt;\draw&lt;/span&gt; circle[radius=1.01cm];


&lt;span class="c"&gt;% Draw a red dot at the starting point&lt;/span&gt;
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[red]&lt;/span&gt; (pol.corner 1) circle[radius=0.8pt];

&lt;span class="c"&gt;% optional: black dots at each circle location&lt;/span&gt;
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 2) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 3) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 4) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 5) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 6) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 7) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 8) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 9) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 10) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 11) circle[radius=0.4pt];

&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikzpicture&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="josephus-circle-diagram-with-permutation-paths"&gt;Josephus Circle Diagram With Permutation Paths&lt;/h3&gt;
&lt;p&gt;Next, we can illustrate cycles in the permutation
by drawing paths between connected nodes.&lt;/p&gt;
&lt;p&gt;The edges are directed (&lt;code&gt;1 -&amp;gt; 4&lt;/code&gt; is not the
same as &lt;code&gt;4 -&amp;gt; 1&lt;/code&gt;). We draw both directed and
undirected versions.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/charlesreid1/c279eeb798776ae92b8d1cb4666d2ef4"&gt;Link to gist with TeX code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="josephus circle diagram with undirected edges" 
src="images/poly_undirected_circ.png" width="350px" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="josephus circle diagram with directed edges" 
src="images/poly_directed_circ.png" width="350px" /&gt;&lt;/p&gt;
&lt;p&gt;The code to generate these diagrams is below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Undirected Paths:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="na"&gt;[border=2mm]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;standalone&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikz&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;xintexpr&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usetikzlibrary&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;shapes.geometric&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikzpicture&lt;span class="nb"&gt;}&lt;/span&gt;[scale=3]

&lt;span class="c"&gt;% make a node with variable name pol (with the list of features given) at the location (0,0), and don&amp;#39;t label it&lt;/span&gt;
&lt;span class="k"&gt;\node&lt;/span&gt; (pol) [draw=none, thick, black!90!black,rotate=0,minimum size=6cm,regular polygon, regular polygon sides=11] at (0,0) &lt;span class="nb"&gt;{}&lt;/span&gt;; 


&lt;span class="c"&gt;% anchor is &amp;quot;corner 1&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;% label is 1/2/3/4/etc&lt;/span&gt;
&lt;span class="c"&gt;% placement is placement w.r.t. coordinate location&lt;/span&gt;
&lt;span class="k"&gt;\foreach&lt;/span&gt; &lt;span class="k"&gt;\anchor&lt;/span&gt;/&lt;span class="k"&gt;\label&lt;/span&gt;/&lt;span class="k"&gt;\placement&lt;/span&gt; in
    &lt;span class="nb"&gt;{&lt;/span&gt;corner 1/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/above, 
     corner 2/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/above left, 
     corner 3/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/left, 
     corner 4/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/left,
     corner 5/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/below left,   
     corner 6/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/below,
     corner 7/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/below,
     corner 8/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/below right,
     corner 9/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/right,
     corner 10/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/right,
     corner 11/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/above right&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\draw&lt;/span&gt;&lt;span class="na"&gt;[shift=(pol.\anchor)]&lt;/span&gt; plot coordinates&lt;span class="nb"&gt;{&lt;/span&gt;(0,0)&lt;span class="nb"&gt;}&lt;/span&gt; node[font=&lt;span class="k"&gt;\scriptsize&lt;/span&gt;,&lt;span class="k"&gt;\placement&lt;/span&gt;] &lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\label&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;;

&lt;span class="c"&gt;% solution for n = 11, m = 4:&lt;/span&gt;
&lt;span class="c"&gt;% ( 1 3 7 6 4 ) ( 2 8 ) ( 5 9 11 ) ( 10 )&lt;/span&gt;

&lt;span class="c"&gt;% internal paths&lt;/span&gt;

&lt;span class="c"&gt;% cycle (1 3 7 6 4)&lt;/span&gt;
&lt;span class="k"&gt;\path&lt;/span&gt; [-] (pol.corner 1) edge (pol.corner 3);
&lt;span class="k"&gt;\path&lt;/span&gt; [-] (pol.corner 3) edge (pol.corner 7);
&lt;span class="k"&gt;\path&lt;/span&gt; [-] (pol.corner 7) edge (pol.corner 6);
&lt;span class="k"&gt;\path&lt;/span&gt; [-] (pol.corner 6) edge (pol.corner 4);
&lt;span class="k"&gt;\path&lt;/span&gt; [-] (pol.corner 4) edge (pol.corner 1);

&lt;span class="c"&gt;% cycle 2 (2 8)&lt;/span&gt;
&lt;span class="k"&gt;\path&lt;/span&gt; [-] (pol.corner 2) edge (pol.corner 8);
&lt;span class="k"&gt;\path&lt;/span&gt; [-] (pol.corner 8) edge (pol.corner 2);

&lt;span class="c"&gt;% cycle 3 (5 9 11 )&lt;/span&gt;
&lt;span class="k"&gt;\path&lt;/span&gt; [-] (pol.corner 5) edge (pol.corner 9);
&lt;span class="k"&gt;\path&lt;/span&gt; [-] (pol.corner 9) edge (pol.corner 11);
&lt;span class="k"&gt;\path&lt;/span&gt; [-] (pol.corner 11) edge (pol.corner 5);


&lt;span class="c"&gt;% draw a circle connecting all points&lt;/span&gt;
&lt;span class="k"&gt;\draw&lt;/span&gt; circle[radius=1.01cm];


&lt;span class="c"&gt;% Draw a red dot at the starting point &lt;/span&gt;
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[red]&lt;/span&gt; (pol.corner 1) circle[radius=0.8pt];

&lt;span class="c"&gt;% optional: black dots at each circle location&lt;/span&gt;
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 2) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 3) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 4) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 5) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 6) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 7) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 8) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 9) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 10) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 11) circle[radius=0.4pt];

&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikzpicture&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Directed Paths:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="na"&gt;[border=2mm]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;standalone&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikz&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;xintexpr&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usetikzlibrary&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;shapes.geometric&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikzpicture&lt;span class="nb"&gt;}&lt;/span&gt;[scale=3]

&lt;span class="c"&gt;% make a node with variable name pol (with the list of features given) at the location (0,0), and don&amp;#39;t label it&lt;/span&gt;
&lt;span class="k"&gt;\node&lt;/span&gt; (pol) [draw=none, thick, black!90!black,rotate=0,minimum size=6cm,regular polygon, regular polygon sides=11] at (0,0) &lt;span class="nb"&gt;{}&lt;/span&gt;; 


&lt;span class="c"&gt;% anchor is &amp;quot;corner 1&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;% label is 1/2/3/4/etc&lt;/span&gt;
&lt;span class="c"&gt;% placement is placement w.r.t. coordinate location&lt;/span&gt;
&lt;span class="k"&gt;\foreach&lt;/span&gt; &lt;span class="k"&gt;\anchor&lt;/span&gt;/&lt;span class="k"&gt;\label&lt;/span&gt;/&lt;span class="k"&gt;\placement&lt;/span&gt; in
    &lt;span class="nb"&gt;{&lt;/span&gt;corner 1/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/above, 
     corner 2/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/above left, 
     corner 3/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/left, 
     corner 4/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/left,
     corner 5/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/below left,   
     corner 6/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/below,
     corner 7/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/below,
     corner 8/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/below right,
     corner 9/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/right,
     corner 10/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/right,
     corner 11/&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;/above right&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\draw&lt;/span&gt;&lt;span class="na"&gt;[shift=(pol.\anchor)]&lt;/span&gt; plot coordinates&lt;span class="nb"&gt;{&lt;/span&gt;(0,0)&lt;span class="nb"&gt;}&lt;/span&gt; node[font=&lt;span class="k"&gt;\scriptsize&lt;/span&gt;,&lt;span class="k"&gt;\placement&lt;/span&gt;] &lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\label&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;;

&lt;span class="c"&gt;% solution for n = 11, m = 4:&lt;/span&gt;
&lt;span class="c"&gt;% ( 1 3 7 6 4 ) ( 2 8 ) ( 5 9 11 ) ( 10 )&lt;/span&gt;

&lt;span class="c"&gt;% internal paths&lt;/span&gt;

&lt;span class="c"&gt;% cycle (1 3 7 6 4)&lt;/span&gt;
&lt;span class="k"&gt;\path&lt;/span&gt; [-&amp;gt;, shorten &amp;gt; = 3 pt, blue, shorten &amp;lt; = 4 pt, &amp;gt; = stealth] (pol.corner 1) edge (pol.corner 3);
&lt;span class="k"&gt;\path&lt;/span&gt; [-&amp;gt;, shorten &amp;gt; = 3 pt, blue, shorten &amp;lt; = 4 pt, &amp;gt; = stealth] (pol.corner 3) edge (pol.corner 7);
&lt;span class="k"&gt;\path&lt;/span&gt; [-&amp;gt;, shorten &amp;gt; = 3 pt, blue, shorten &amp;lt; = 4 pt, &amp;gt; = stealth] (pol.corner 7) edge (pol.corner 6);
&lt;span class="k"&gt;\path&lt;/span&gt; [-&amp;gt;, shorten &amp;gt; = 3 pt, blue, shorten &amp;lt; = 4 pt, &amp;gt; = stealth] (pol.corner 6) edge (pol.corner 4);
&lt;span class="k"&gt;\path&lt;/span&gt; [-&amp;gt;, shorten &amp;gt; = 3 pt, blue, shorten &amp;lt; = 4 pt, &amp;gt; = stealth] (pol.corner 4) edge (pol.corner 1);

&lt;span class="c"&gt;% cycle 2 (2 8)&lt;/span&gt;
&lt;span class="k"&gt;\path&lt;/span&gt; [-&amp;gt;, shorten &amp;gt; = 3 pt, green, shorten &amp;lt; = 4 pt, &amp;gt; = stealth] (pol.corner 2) edge (pol.corner 8);
&lt;span class="k"&gt;\path&lt;/span&gt; [-&amp;gt;, shorten &amp;gt; = 3 pt, green, shorten &amp;lt; = 4 pt, &amp;gt; = stealth] (pol.corner 8) edge (pol.corner 2);

&lt;span class="c"&gt;% cycle 3 (5 9 11 )&lt;/span&gt;
&lt;span class="k"&gt;\path&lt;/span&gt; [-&amp;gt;, shorten &amp;gt; = 3 pt, red, shorten &amp;lt; = 4 pt, &amp;gt; = stealth] (pol.corner 5) edge (pol.corner 9);
&lt;span class="k"&gt;\path&lt;/span&gt; [-&amp;gt;, shorten &amp;gt; = 3 pt, red, shorten &amp;lt; = 4 pt, &amp;gt; = stealth] (pol.corner 9) edge (pol.corner 11);
&lt;span class="k"&gt;\path&lt;/span&gt; [-&amp;gt;, shorten &amp;gt; = 3 pt, red, shorten &amp;lt; = 4 pt, &amp;gt; = stealth] (pol.corner 11) edge (pol.corner 5);


&lt;span class="c"&gt;% draw a circle connecting all points&lt;/span&gt;
&lt;span class="k"&gt;\draw&lt;/span&gt; circle[radius=1.01cm];


&lt;span class="c"&gt;% draw a red dot at the starting point &lt;/span&gt;
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[red]&lt;/span&gt; (pol.corner 1) circle[radius=0.8pt];

&lt;span class="c"&gt;% optional: black dots at each circle location&lt;/span&gt;
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 2) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 3) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 4) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 5) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 6) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 7) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 8) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 9) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 10) circle[radius=0.4pt];
&lt;span class="k"&gt;\filldraw&lt;/span&gt;&lt;span class="na"&gt;[black]&lt;/span&gt; (pol.corner 11) circle[radius=0.4pt];

&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tikzpicture&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="next-steps-examples-and-solutions"&gt;Next Steps: Examples and Solutions&lt;/h2&gt;
&lt;p&gt;So far in &lt;strong&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-1-the-problem.html"&gt;Part 1&lt;/a&gt;&lt;/strong&gt; we have covered some common
forms of the Josephus problem.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-2-two-examples.html"&gt;Part 2&lt;/a&gt;&lt;/strong&gt; we'll cover some examples 
of different &lt;span class="math"&gt;\(n, m\)&lt;/span&gt; values (&lt;span class="math"&gt;\(n\)&lt;/span&gt; is circle size,
&lt;span class="math"&gt;\(m\)&lt;/span&gt; is skip length) and show how the
process plays out.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-3-solving-the-double-step-case.html"&gt;Part 3&lt;/a&gt;&lt;/strong&gt; we will show the solution of the
special case of &lt;span class="math"&gt;\(m = 2\)&lt;/span&gt; (the double-step case).&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;&lt;a href="#"&gt;Part 4&lt;/a&gt;&lt;/strong&gt; we will show several ways to solve
the general case, and walk through some examples
where we apply the solution procedure.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="graphs"></category><category term="puzzles"></category><category term="algorithms"></category><category term="josephus"></category><category term="latex"></category></entry><entry><title>Approximating Pi (Happy Pi Day)</title><link href="https://charlesreid1.github.io/approximating-pi-happy-pi-day.html" rel="alternate"></link><published>2019-03-14T16:20:00-07:00</published><updated>2019-03-14T16:20:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-03-14:/approximating-pi-happy-pi-day.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#favorite-pi-approximations"&gt;Favorite Pi Approximations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#continued-fractions-and-convergents"&gt;Continued Fractions and Convergents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#simple-continued-fractions-to-approximate-pi"&gt;Simple Continued Fractions to Approximate Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#general-continued-fractions-to-approximate-pi"&gt;General Continued Fractions to Approximate Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#odd-squares-and-twos"&gt;Odd Squares and Twos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#odd-squares-threes-and-sixes"&gt;Odd Squares, Threes, and Sixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when-to-use-simple-vs-general-continued-fractions"&gt;When to Use Simple Vs. General Continued Fractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-note-on-the-program"&gt;A Note on the Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="favorite-pi-approximations"&gt;Favorite Pi Approximations&lt;/h2&gt;
&lt;p&gt;What's your favorite &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; approximation?&lt;/p&gt;
&lt;p&gt;Some of my favorite approximations of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; come from
&lt;a href="https://en.wikipedia.org/wiki/Ramanujan%E2%80%93Sato_series"&gt;Ramanujan-Sato series&lt;/a&gt;.
These are mathematical series that generalize from 
a remarkable formula for &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; given by &lt;a href="https://en.wikipedia.org/wiki/Srinivasa_Ramanujan"&gt;Srinivasa Ramanujan&lt;/a&gt;,
an Indian mathematician:&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi^{-1} = \dfrac{\sqrt{8}}{99^2} \sum_{k \geq 0} \dfrac{ (4k)! }{ \left( 4^k k! \right â€¦&lt;/div&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#favorite-pi-approximations"&gt;Favorite Pi Approximations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#continued-fractions-and-convergents"&gt;Continued Fractions and Convergents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#simple-continued-fractions-to-approximate-pi"&gt;Simple Continued Fractions to Approximate Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#general-continued-fractions-to-approximate-pi"&gt;General Continued Fractions to Approximate Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#odd-squares-and-twos"&gt;Odd Squares and Twos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#odd-squares-threes-and-sixes"&gt;Odd Squares, Threes, and Sixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when-to-use-simple-vs-general-continued-fractions"&gt;When to Use Simple Vs. General Continued Fractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-note-on-the-program"&gt;A Note on the Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="favorite-pi-approximations"&gt;Favorite Pi Approximations&lt;/h2&gt;
&lt;p&gt;What's your favorite &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; approximation?&lt;/p&gt;
&lt;p&gt;Some of my favorite approximations of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; come from
&lt;a href="https://en.wikipedia.org/wiki/Ramanujan%E2%80%93Sato_series"&gt;Ramanujan-Sato series&lt;/a&gt;.
These are mathematical series that generalize from 
a remarkable formula for &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; given by &lt;a href="https://en.wikipedia.org/wiki/Srinivasa_Ramanujan"&gt;Srinivasa Ramanujan&lt;/a&gt;,
an Indian mathematician:&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi^{-1} = \dfrac{\sqrt{8}}{99^2} \sum_{k \geq 0} \dfrac{ (4k)! }{ \left( 4^k k! \right)^4 } \dfrac{ 1103 + 26390k }{ 99^{4k} } 
$$&lt;/div&gt;
&lt;p&gt;This completely novel formula opened up new branches of mathematics
and provided a whole new class of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; approximations (the Ramanujan-Sato
series) and approximations that are extremely accurate, making them
very useful for computer applications. (Each term of the above sequence 
yields 8 additional decimal points of accuracy of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;.) These 
approximations have also enabled world record calculations of 
numbers of digits of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;But those are not the &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; approximations that this blog post is about. &lt;/p&gt;
&lt;p&gt;This blog post is about another set of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; approximations
that I like - these come from another field Ramanujan had mastery
over, continued fractions. &lt;/p&gt;
&lt;p&gt;Continued fractions provide a whole alternative way of representing
all the real numbers - rational and irrational.&lt;/p&gt;
&lt;h2 id="continued-fractions-and-convergents"&gt;Continued Fractions and Convergents&lt;/h2&gt;
&lt;p&gt;Back in &lt;a href="https://charlesreid1.github.io/computing-square-roots-part-2-using-continued-fractions.html"&gt;July of 2017&lt;/a&gt;, 
we wrote a blog post about how to find rational approximations
of square roots using continued fractions and convergents, and we
implemented a Java program to represent the irrational number 
&lt;span class="math"&gt;\(\sqrt{n}\)&lt;/span&gt; (where &lt;span class="math"&gt;\(n\)&lt;/span&gt; is not a perfect square).&lt;/p&gt;
&lt;p&gt;In short, continued fractions are a way of expressing numbers, 
rational and irrational, in terms of recursive fractions, which 
look something like this:&lt;/p&gt;
&lt;div class="math"&gt;$$
x = b_0 + \cfrac{1}{
        b_1 + \cfrac{1}{
            b_2 + \cfrac{1}{
                b_3 + \cfrac{1}{
                    b_4 + \cfrac{1}{
                        b_5 + \dots
                    }
                }
            }
        }
    }
$$&lt;/div&gt;
&lt;p&gt;denoted&lt;/p&gt;
&lt;div class="math"&gt;$$
[b_0; b_1, b_2, b_3, \dots]
$$&lt;/div&gt;
&lt;p&gt;and, when evaluated, results in a series of fractions
(rational approximations) called the convergents of 
the continued fraction.&lt;/p&gt;
&lt;p&gt;In the denominator of the above representation, we have
a 1 in each position, which makes the continued fraction
a &lt;em&gt;simple&lt;/em&gt; continued fraction. If the denominators are 
not 1, the continued fraction is a &lt;em&gt;general&lt;/em&gt; continued
fraction.&lt;/p&gt;
&lt;p&gt;The continued fraction expansion of any rational number
(or equivalently, the sequence of convergents) must 
terminate at some point (even if the number of terms
ends up being very large).&lt;/p&gt;
&lt;p&gt;The convergents always terminate if a number is rational.
Conversely, if you can prove a number's continued fraction
representation is a repeated sequence or continues forever,
you can prove a number is irrational (a strategy employed in
several proofs about properties of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;).&lt;/p&gt;
&lt;h2 id="simple-continued-fractions-to-approximate-pi"&gt;Simple Continued Fractions to Approximate Pi&lt;/h2&gt;
&lt;p&gt;For &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;, the convergents of the simple continued fraction
(there is a single unique simple continued fraction representation 
of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;) are unpredictable; the first few are:&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = [3; 7, 15, 1, 292, 1, 1, 1, 2, 1, 3, 1, 14, 2...]
$$&lt;/div&gt;
&lt;p&gt;Each additional term leads to increasingly precise
fractional approximations for &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;; they are:&lt;/p&gt;
&lt;div class="math"&gt;$$
[3;7] = \dfrac{22}{7} = 3.\overline{142857}
$$&lt;/div&gt;
&lt;div class="math"&gt;$$ 
[3;7,15] = \dfrac{333}{106} = 3.1415094...
$$&lt;/div&gt;
&lt;div class="math"&gt;$$ 
[3;7,15,1] = \dfrac{355}{113} = 3.1415929...
$$&lt;/div&gt;
&lt;div class="math"&gt;$$ 
[3;7,15,1,292] = \dfrac{103993}{33102} = 3.14159265...
$$&lt;/div&gt;
&lt;h2 id="general-continued-fractions-to-approximate-pi"&gt;General Continued Fractions to Approximate Pi&lt;/h2&gt;
&lt;p&gt;Every number has exactly one representation as a
simple continued fraction, if we restrict the
values of &lt;span class="math"&gt;\(b_i\)&lt;/span&gt; to be positive.&lt;/p&gt;
&lt;p&gt;However, if we generalize the simple continued
fraction to allow any integer in the numerator
of the continued fractions, we get a general
continued fraction:&lt;/p&gt;
&lt;div class="math"&gt;$$
x = b_0 + \cfrac{a_1}{
        b_1 + \cfrac{a_2}{
            b_2 + \cfrac{a_3}{
                b_3 + \cfrac{a_4}{
                    b_4 + \cfrac{a_5}{
                        b_5 + \dots
                    }
                }
            }
        }
    }
$$&lt;/div&gt;
&lt;p&gt;Unlike simple continued fractions, one number can
be expressed in many ways with many different
general continued fractions.&lt;/p&gt;
&lt;p&gt;We use two general continued fractions as well
as the simple continued fraction representation
of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; to generate some &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; approximations 
below.&lt;/p&gt;
&lt;h2 id="odd-squares-and-twos"&gt;Odd Squares and Twos&lt;/h2&gt;
&lt;p&gt;The following general continued fraction&lt;/p&gt;
&lt;div class="math"&gt;$$
\dfrac{4}{\pi} = 1 + \cfrac{1^2}{
                        2 + \cfrac{3^2}{
                            2 + \cfrac{5^2}{
                                2 + \cfrac{7^2}{
                                    2 + \cfrac{9^2}{
                                        2 + \dots
                                    }
                                }
                            }
                        }
                    }
$$&lt;/div&gt;
&lt;p&gt;can be turned into approximations for &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; by finding
the convergents of the above continued fraction, then
reversing the numerator and denominator and multilpying
the new numerator by 4.&lt;/p&gt;
&lt;p&gt;Implementing a recurrence to turn the above
into convergents and printing the first 24
terms and their approximate value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                                      Pi
Convergent                                                          Approx 
--------------------------------------------------------------------------------
8 / 3                                                               2.6666666666666665
52 / 15                                                             3.4666666666666668
304 / 105                                                           2.8952380952380952
3156 / 945                                                          3.3396825396825398
30936 / 10395                                                       2.9760461760461761
443748 / 135135                                                     3.2837384837384835
6115680 / 2027025                                                   3.0170718170718169
112074660 / 34459425                                                3.2523659347188758
1991580840 / 654729075                                              3.0418396189294024
44442113940 / 13749310575                                           3.2323158094055926
967171378320 / 316234143225                                         3.0584027659273318
25444221030900 / 7905853580625                                      3.2184027659273320
655370553511800 / 213458046676875                                   3.0702546177791836
19859578238549700 / 6190283353629375                                3.2081856522619421
590885791980523200 / 191898783962510625                             3.0791533941974261
20266826271207308100 / 6332659870762850625                          3.2003655154095472
684008280009204381000 / 221643095476699771875                       3.0860798011238333
26194878742247361184500 / 8200794532637891559375                    3.1941879092319412
988797092817095519958000 / 319830986772877770815625                 3.0916238066678385
41820004752592427401540500 / 13113070457687988603440625             3.1891847822775947
1745807922530722423852479000 / 563862029680583509947946875          3.0961615264636411
80816804632604843113153342500 / 25373791335626257947657609375       3.1850504153525301
3696894652389922594527576660000 / 1192568192774434123539907640625   3.0999440323738066
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(16 decimal points are printed for decimal approximations above.)&lt;/p&gt;
&lt;p&gt;This exhibits a pattern seen with general
continued fractions, which is that they tend
to jump above and below the value they approximate,
depending on whether there are an even or odd
number of terms in the continued fraction
being included.&lt;/p&gt;
&lt;h2 id="odd-squares-threes-and-sixes"&gt;Odd Squares, Threes, and Sixes&lt;/h2&gt;
&lt;p&gt;Another related continued fraction, this one for
&lt;span class="math"&gt;\(\pi\)&lt;/span&gt; and with a more predictable pattern,
is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = 3 + \cfrac{1^2}{
                6 + \cfrac{3^2}{
                    6 + \cfrac{5^2}{
                        6 + \cfrac{7^2}{
                            6 + \cfrac{9^2}{
                                6 + \dots
                            }
                        }
                    }
                }
            }
$$&lt;/div&gt;
&lt;p&gt;Implementing a computer program to evaluate
the convergents from the above patterns yields
even more &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; approximations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                                Even More Pi
Convergent                                                          Approx 
--------------------------------------------------------------------------------
19 / 6                                                              3.1666666666666665
141 / 45                                                            3.1333333333333333
1321 / 420                                                          3.1452380952380952
14835 / 4725                                                        3.1396825396825396
196011 / 62370                                                      3.1427128427128426
2971101 / 945945                                                    3.1408813408813407
50952465 / 16216200                                                 3.1420718170718169
974212515 / 310134825                                               3.1412548236077646
20570537475 / 6547290750                                            3.1418396189294020
475113942765 / 151242416325                                         3.1414067184965018
11922290683065 / 3794809718700                                      3.1417360992606653
322869019821075 / 102776096548125                                   3.1414796890042549
9388645795842075 / 2988412653476250                                 3.1416831892077552
291703390224616125 / 92854250304440625                              3.1415189855952756
9646071455650881825 / 3070380543400170000                           3.1416533941974261
338203386739761387075 / 107655217802968460625                       3.1415419859977827
12533792135642378629875 / 3989575718580595893750                    3.1416353566793886
489501901570061970946125 / 155815096120119939628125                 3.1415563302845726
20095772843114788169975625 / 6396619735457555416312500              3.1416238066678388
865107029346752986828909875 / 275374479611447760672253125           3.1415657346585473
38971636325356476834702484875 / 12404964652972837218854831250       3.1416160719181865
1833412715214285133654869268125 / 583597200719403932796125015625    3.1415721544829651
89918039850132576392201747480625 / 28621636626586418964957783375000 3.1416106990404735
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="when-to-use-simple-vs-general-continued-fractions"&gt;When to Use Simple Vs. General Continued Fractions&lt;/h2&gt;
&lt;p&gt;While general continued fractions are more flexible,
allowing a given rational or irrational number to be
expressed in a wider variety of ways, it is important
to point out how much faster the simple continued
fractions converge - with 15 terms, we arrive
at around 15 accurate decimal places, versus the 1-3
decimal places of accuracy from over 20 terms in the
above approximations.&lt;/p&gt;
&lt;p&gt;Using the simple continued fraction representation of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;,&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = 3 + \cfrac{1}{
                7 + \cfrac{1}{
                    15 + \cfrac{1}{
                        1 + \cfrac{1}{
                            292 + \cfrac{1}{
                                1 + \dots
                            }
                        }
                    }
                }
            }
$$&lt;/div&gt;
&lt;p&gt;and implementing it with a computer, we get the 
following table of convergents and their approximate 
values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                               Pi Simple
Convergent                                                          Approx 
--------------------------------------------------------------------------------
22 / 7                                                          3.1428571428571428
333 / 106                                                       3.1415094339622640
355 / 113                                                       3.1415929203539825
103993 / 33102                                                  3.1415926530119025
104348 / 33215                                                  3.1415926539214212
208341 / 66317                                                  3.1415926534674368
312689 / 99532                                                  3.1415926536189365
833719 / 265381                                                 3.1415926535810779
1146408 / 364913                                                3.1415926535914038
4272943 / 1360120                                               3.1415926535893890
5419351 / 1725033                                               3.1415926535898153
80143857 / 25510582                                             3.1415926535897927
165707065 / 52746197                                            3.1415926535897936
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="a-note-on-the-program"&gt;A Note on the Program&lt;/h2&gt;
&lt;p&gt;We implemented a program to convert terms in a continued fraction
representation (simple or general) into convergents (rational 
approximations).&lt;/p&gt;
&lt;p&gt;We covered how to do this with Java in a previous blog post,
but this time we re-implemented it in Python and used some
basic object-oriented Python techniques and class decorators
(class methods, memoized functions, etc.)&lt;/p&gt;
&lt;p&gt;You can find the code here: &lt;a href="https://git.charlesreid1.com/cs/python/src/branch/master/math/pi_continued_fraction_convergents.py"&gt;https://git.charlesreid1.com/cs/python/src/branch/master/math/pi_continued_fraction_convergents.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We will return to the topic of continued fractions and cover 
general continued fractions (and importantly, the recurrence
relation used to convert them into convergents in the above
program) in a future blog post.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Mathematics"></category><category term="pi"></category><category term="continued fractions"></category><category term="number theory"></category><category term="mathematics"></category><category term="python"></category><category term="irrational numbers"></category></entry><entry><title>Five Letter Words: Part 5: The Try Trie Tree</title><link href="https://charlesreid1.github.io/five-letter-words-part-5-the-try-trie-tree.html" rel="alternate"></link><published>2019-03-11T18:00:00-07:00</published><updated>2019-03-11T18:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-03-11:/five-letter-words-part-5-the-try-trie-tree.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#about-the-five-letter-words"&gt;About the Five-Letter Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#introduction-to-the-try-trie-tree-problem"&gt;Introduction to the Try Trie Tree Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-try-trie-tree"&gt;The Try Trie Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#constructing-the-try-trie-tree"&gt;Constructing the Try Trie Tree&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#checking-for-minimum-number-of-matching-words"&gt;Checking for Minimum Number of Matching Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assemble-method"&gt;Assemble Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#verifying-branches-and-bubbling-up-counts"&gt;Verifying Branches and Bubbling Up Counts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bubble-up-method"&gt;Bubble Up Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#try-trie-tree-code"&gt;Try Trie Tree Code&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#try-trie-trie-class"&gt;Try Trie Trie Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-for-assembling-the-tree"&gt;Code for Assembling the Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-for-bubbling-up-large-children-counts"&gt;Code for Bubbling Up Large Children Counts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrap-it-in-a-bow"&gt;Wrap it in a Bow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#output"&gt;Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="about-the-five-letter-words"&gt;About the Five-Letter Words&lt;/h2&gt;
&lt;p&gt;In Volume 4 Fascicle 0 of Donald Knuth's &lt;u&gt;Art of Computer Programming&lt;/u&gt;, 
Knuth introduces a tool for exploring concepts in graph theory: the five-letter
words. This is a collection â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#about-the-five-letter-words"&gt;About the Five-Letter Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#introduction-to-the-try-trie-tree-problem"&gt;Introduction to the Try Trie Tree Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-try-trie-tree"&gt;The Try Trie Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#constructing-the-try-trie-tree"&gt;Constructing the Try Trie Tree&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#checking-for-minimum-number-of-matching-words"&gt;Checking for Minimum Number of Matching Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assemble-method"&gt;Assemble Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#verifying-branches-and-bubbling-up-counts"&gt;Verifying Branches and Bubbling Up Counts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bubble-up-method"&gt;Bubble Up Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#try-trie-tree-code"&gt;Try Trie Tree Code&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#try-trie-trie-class"&gt;Try Trie Trie Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-for-assembling-the-tree"&gt;Code for Assembling the Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-for-bubbling-up-large-children-counts"&gt;Code for Bubbling Up Large Children Counts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrap-it-in-a-bow"&gt;Wrap it in a Bow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#output"&gt;Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="about-the-five-letter-words"&gt;About the Five-Letter Words&lt;/h2&gt;
&lt;p&gt;In Volume 4 Fascicle 0 of Donald Knuth's &lt;u&gt;Art of Computer Programming&lt;/u&gt;, 
Knuth introduces a tool for exploring concepts in graph theory: the five-letter
words. This is a collection of 5,757 five-letter words compiled by Knuth
and useful in exploring ways of constructing efficient algorithms.&lt;/p&gt;
&lt;p&gt;The word list is large enough that an &lt;span class="math"&gt;\(O(N^2)\)&lt;/span&gt; algorithm will take a solid
chunk of CPU time, so there's a definite incentive to think carefully about
implementation.&lt;/p&gt;
&lt;p&gt;Knuth introduces a list of five-letter words, as well as associated exercises
utilizing techniques from dynamic programming and graph theory, among other 
topics.&lt;/p&gt;
&lt;p&gt;We have covered this topic before in prior blog posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/five-letter-words-part-1-getting-familiar-with-the-list.html"&gt;Five Letter Words: Part 1: Getting Familiar With The List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/five-letter-words-part-2-more-five-word-algorithms.html"&gt;Five Letter Words: Part 2: More Five-Word Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/five-letter-words-part-3-letter-coverage-and-dynamic-programming.html"&gt;Five Letter Words: Part 3: Letter Coverage and Dynamic Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and a recent addendum to Part 1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/five-letter-words-part-4-revisiting-diff-by-one.html"&gt;Five Letter Words: Part 4: Revisiting Diff by One&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We continue our coverage in this blog post with a newer problem,
one that is rated by Knuth at 26, on his scale of 0 to 50:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;00  Immediate
10  Simple (1 minute)
20  Medium (quarter hour)
30  Moderately hard
40  Term project
50  Research problem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(from Volume 1, Notes on the Exercises.)&lt;/p&gt;
&lt;p&gt;Here's the &lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/sgb-words.txt"&gt;list of words&lt;/a&gt;
if you want to play along.&lt;/p&gt;
&lt;p&gt;Link to the &lt;a href="http://www3.cs.stonybrook.edu/~algorith/implement/graphbase/implement.shtml"&gt;Stanford Graph Base&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Visit &lt;a href="https://charlesreid1.com/wiki/Five_Letter_Words"&gt;Five Letter Words&lt;/a&gt;
on the charlesreid1.com wiki for details.&lt;/p&gt;
&lt;h2 id="introduction-to-the-try-trie-tree-problem"&gt;Introduction to the Try Trie Tree Problem&lt;/h2&gt;
&lt;p&gt;In this blog post, we'll cover Exercise 35 of Volume 4, Fascicle 
of Donald Knuth's &lt;u&gt;Art of Computer Programming&lt;/u&gt;.&lt;/p&gt;
&lt;p&gt;The problem is as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sixteen well-chosen elements of &lt;code&gt;WORDS(1000)&lt;/code&gt; lead to the 
branching pattern (figure), which is a complete binary 
trie of words that begin with the letter &lt;code&gt;s&lt;/code&gt;.
But there's no such pattern of words beginning with &lt;code&gt;a&lt;/code&gt;,
even if we consider the full collection &lt;code&gt;WORDS(5757)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What letters of the alphabet can be used as the starting
letter of sixteen words that form a complete binary trie
within &lt;code&gt;WORDS(n)&lt;/code&gt;, given n?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For the benefit of those without the book, here is an attempt
to represent the trie that Knuth includes in the exercise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                     s

            h                 t

        e       o         a       e

      e   l   r   w     l   r   a   e

      sheep             stalk
      sheet             stall

          shelf             stars
          shell             start

              shore             steal
              short             steam

                  shown             steel
                  shows             steep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To answer the question, of whether a complete binary
trie can be completed for a given letter, given a
set of n words, we construct a "try trie tree,"
which is a tree data structure that greedily builds
a trie with as many branches as possible.&lt;/p&gt;
&lt;p&gt;The full trie of &lt;span class="math"&gt;\(26^4+1 = 456,977\)&lt;/span&gt; nodes
would be expensive to assemble in full, for each
starting letter. Instead we use the word list 
to build up a tree of possible candidate branches
for the trie. Once we've constructed all possible
branches using the faster but less precise method,
we verify that each candidate branch we have
constructed either meets our criteria (can be
included as a branch in a complete binary trie),
or is pruned.&lt;/p&gt;
&lt;h2 id="the-try-trie-tree"&gt;The Try Trie Tree&lt;/h2&gt;
&lt;p&gt;To solve this problem, we define a TryTrieTree
class that holds the nodes and links that make
up our tree. We define some methods for it
to perform the assembly and verification operations
described below, then assemble one try trie tree
for each letter of the alphabet to come up with 
an answer to the exercise.&lt;/p&gt;
&lt;h2 id="constructing-the-try-trie-tree"&gt;Constructing the Try Trie Tree&lt;/h2&gt;
&lt;p&gt;The construction procedure for the try trie tree
proceeds in two steps:&lt;/p&gt;
&lt;p&gt;Step 1 is to assemble a tree, from the top down,
by searching the entire space of &lt;span class="math"&gt;\(456,977\)&lt;/span&gt; nodes
and marking particular nodes and paths on this tree
as candidates for the final perfect binary trie.&lt;/p&gt;
&lt;p&gt;Step 2 is to revisit the candidate branches,
proceeding from the bottom up, and determine
if the candidate branches do, in fact, have
enough sibling nodes and word matches to form
a complete branch in a perfect binary trie.&lt;/p&gt;
&lt;p&gt;We start Step 1 at the root node (the starting
letter) and proceed from the root down, going
level by level.&lt;/p&gt;
&lt;h3 id="checking-for-minimum-number-of-matching-words"&gt;Checking for Minimum Number of Matching Words&lt;/h3&gt;
&lt;p&gt;Step 1 proceeds from the top down and marks
branches that are candidates to end up in the
final perfect binary trie.&lt;/p&gt;
&lt;p&gt;At each level of the trie, we count
the number of words in the overall word set 
that have a prefix matching the prefix
corresponding to that node.&lt;/p&gt;
&lt;p&gt;For example, the trie node &lt;code&gt;b&lt;/code&gt; on the path
&lt;code&gt;s-a-b&lt;/code&gt; would yield four words:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;saber
sable
sabre
sabra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If enough words match, that branch of the trie
is a possible candidate to end up in the perfect
binary trie (but may be trimmed in Step 2).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; If we are assembling the complete
trie for &lt;code&gt;s&lt;/code&gt; given by the author in the exercise,
we can verify that there are at least 16 words that
begin with the letter &lt;code&gt;s&lt;/code&gt;. We would then verify that
there are at least 8 words that begin with &lt;code&gt;sa&lt;/code&gt;,
which there are. Then we would verify that there
are at least 4 words that begin with &lt;code&gt;saa&lt;/code&gt;, which
there are not, so we would move on to verifying
that there are at least 4 words that begin with
&lt;code&gt;sab&lt;/code&gt;, which there are. We would proceed in this
fashion until we had assembled a candidate trie
branch, &lt;code&gt;s-a-b-r&lt;/code&gt; (which contains two words,
&lt;code&gt;sabra&lt;/code&gt; and &lt;code&gt;sabre&lt;/code&gt;). For Step 1, we keep &lt;code&gt;s-a-b-r&lt;/code&gt;
as a candidate branch. (We will see in Step 2
that this branch will get trimmed.)&lt;/p&gt;
&lt;p&gt;At each level of the trie, we apply the procedure:
- At level 1, we require a minimum of &lt;span class="math"&gt;\(2^{5-1} = 16\)&lt;/span&gt; words.
- At level 2, we require a minimum of &lt;span class="math"&gt;\(2^{5-2} = 8\)&lt;/span&gt; words.
- At level 3, we require a minimum of &lt;span class="math"&gt;\(2^{5-3} = 4\)&lt;/span&gt; words.
- At level 4, we require a minimum of &lt;span class="math"&gt;\(2^{5-4} = 2\)&lt;/span&gt; words.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; We are not explicitly constructing the trie,
so we don't need to assemble the word leaves.&lt;/p&gt;
&lt;h3 id="assemble-method"&gt;Assemble Method&lt;/h3&gt;
&lt;p&gt;See the &lt;a href="#try-trie-tree-code"&gt;Try Trie Tree Code&lt;/a&gt; section 
for the code for the public and private assembly methods.&lt;/p&gt;
&lt;p&gt;To peform the assembly of all possible branches of the
try trie, we use the &lt;code&gt;assemble()&lt;/code&gt; method. This is a 
public method that starts a recursive call to a private
method &lt;code&gt;_assemble()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We are given a starting letter (in the example given
by the author, the starting letter is "s").
We explore every possible prefix that starts with the
root letter, "sa", "sb", "sc", "sd", and so on.&lt;/p&gt;
&lt;p&gt;For each of those possible prefixes, we explore every possible
third letter, "saa", "sab", and so on, and then once more
in a fourth step, "saaa", "saab", ..., for a total of 
&lt;span class="math"&gt;\(26^4 = 456,976\)&lt;/span&gt; iterations (checks for existence
of words starting with a given substring).&lt;/p&gt;
&lt;p&gt;A substantial number of these checks will do nothing - 
from the fact that&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\frac{5757}{456976} \sim 5e3/5e5 \sim 0.01\)&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;we know that the maximum number of loops that would actually
lead to a branch being added will be 1% of that &lt;span class="math"&gt;\(26^4\)&lt;/span&gt; total.&lt;/p&gt;
&lt;p&gt;We also know that any efforts to speed up this program
should focus on the way we are checking the number of
words that start with a given substring - since that's
where we'll spend most of our time.&lt;/p&gt;
&lt;p&gt;The recursive assembly method takes a prefix string input
(which maps to a location in the tree), and it explores
all 26 possible children of that prefix (location in the trie).&lt;/p&gt;
&lt;p&gt;When a leaf node is reached, at the fourth level, it represents
the longest prefix in our trie. This is the base case of the
recursive assembly function; the recursive function terminates
at a fixed depth of 4.&lt;/p&gt;
&lt;h3 id="verifying-branches-and-bubbling-up-counts"&gt;Verifying Branches and Bubbling Up Counts&lt;/h3&gt;
&lt;p&gt;However, as we noted, the counts we are using above in Step 1
are just approximations (checking there are a &lt;em&gt;minimum&lt;/em&gt; number of
words with a given prefix). There is no way to guarantee that a 
trie branch can be used in the final complete perfect binary trie
until all child leaf nodes have been visited.&lt;/p&gt;
&lt;p&gt;This is where Step 2 comes in. In Step 2 we perform a pre-order
depth-first traversal of the tree, visiting the leaf nodes first
and proceeding from the bottom up. The number of words matching
the prefix of each leaf node must be 2, to keep the leaf node.&lt;/p&gt;
&lt;p&gt;We then proceed up the tree, level by level, and at each level
we require that each node have at least 2 "large" children.
This is a recursive definition - for a child to be "large", it
must itself have 2 "large" children, or (if it is a leaf node)
it must have at least 2 words that match the 4-letter prefix.&lt;/p&gt;
&lt;p&gt;In our TryTrieTree, a complete binary trie is 
only possible if each node at each level has
&lt;em&gt;two or more&lt;/em&gt; children that are "large enough",
where "large enough" means that either (a) both child
nodes have &lt;em&gt;two or more&lt;/em&gt; children that are
"large enough", or (b) if we are at a leaf node
(representing 4 characters), and there are
&lt;em&gt;two or more&lt;/em&gt; words that begin with the 4 characters
corresponding to this trie node.&lt;/p&gt;
&lt;p&gt;Let's go through an example.&lt;/p&gt;
&lt;p&gt;Continuing with the example above for &lt;code&gt;s&lt;/code&gt;, we
assembled the branch &lt;code&gt;s-a-b-r&lt;/code&gt;, which contains
the minimum two words required. However, &lt;code&gt;s-a-b&lt;/code&gt;
is not a common enough prefix! The only child
of &lt;code&gt;s-a-b&lt;/code&gt; with two or more words matching
is &lt;code&gt;s-a-b-r&lt;/code&gt;, which means we can't form a complete
binary trie using this &lt;code&gt;s-a-b&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;We call this procedure a "bubble up" procedure,
since it is &lt;em&gt;bottom-up&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="bubble-up-method"&gt;Bubble Up Method&lt;/h3&gt;
&lt;p&gt;See the &lt;a href="#try-trie-tree-code"&gt;Try Trie Tree Code&lt;/a&gt; section 
for the code for the public and private bubble up methods.&lt;/p&gt;
&lt;p&gt;Similar to the assembly method, our bubble up method
is also a recursive method, performing a depth-first
pre-order traversal. This ensures we reach leaf nodes
before beginning our task, and that counts proceed
from bottom-up.&lt;/p&gt;
&lt;h2 id="try-trie-tree-code"&gt;Try Trie Tree Code&lt;/h2&gt;
&lt;p&gt;Below we go through some of the code
for the Try Trie Tree problem.&lt;/p&gt;
&lt;h3 id="try-trie-trie-class"&gt;Try Trie Trie Class&lt;/h3&gt;
&lt;p&gt;When dealing with trees, it's always a safe bet
that we'll need a Node class, so we start with
a utility class for tree nodes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The TryTrieTree class has a constructor that 
starts with an empty root. The tree
should also contain a pointer to the original
word set, so that we can reference it in later
methods where needed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TryTrieTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the final class we defined a &lt;code&gt;__str__()&lt;/code&gt;
method to create a string representation
of the TryTrieTree, but we will skip that
for now.&lt;/p&gt;
&lt;p&gt;Next we have a method to set the root to
a given Node:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;root_letter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Additionally, we have two utility methods that 
help us navigate between locations in the tree 
and the corresponding string prefixes. These two
methods convert between string prefixes (like
&lt;code&gt;s-a-b-r&lt;/code&gt;) and locations in the trie (like the
&lt;code&gt;r&lt;/code&gt; trie node at the end of the path &lt;code&gt;s-a-b-r&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;get_prefix_from_node()&lt;/code&gt; (utility method): given a
  Node in the trie, return the string prefix that would
  lead to that Node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;get_node_from_prefix()&lt;/code&gt; (utility method): given a
  string prefix, return the Node in the trie that 
  corresponds to the given string prefix.
  Return None if no such Node exists.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These methods are given below.&lt;/p&gt;
&lt;p&gt;First, to convert a particular node location to a string
prefix, we use the parent pointer of each node to traverse
up the tree and assemble the corresponding prefix string
from the path (so that traversing from &lt;code&gt;b&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt; to the 
root &lt;code&gt;s&lt;/code&gt; would yield &lt;code&gt;sab&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_prefix_from_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Given a node in the trie,&lt;/span&gt;
&lt;span class="sd"&gt;        return the string prefix that&lt;/span&gt;
&lt;span class="sd"&gt;        would lead to that node.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;
                &lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the reverse, to convert a string prefix
into a location in the trie:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_node_from_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Given a string prefix,&lt;/span&gt;
&lt;span class="sd"&gt;        return the node that represents&lt;/span&gt;
&lt;span class="sd"&gt;        the tail end of that sequence&lt;/span&gt;
&lt;span class="sd"&gt;        of letters in this trie. Return&lt;/span&gt;
&lt;span class="sd"&gt;        None if the path does not exist.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;

        &lt;span class="c1"&gt;# Base case&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;

        &lt;span class="c1"&gt;# Recursive case&lt;/span&gt;
        &lt;span class="n"&gt;parent_prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;suffix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_node_from_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent_prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;

        &lt;span class="c1"&gt;# We know this will end because we handle&lt;/span&gt;
        &lt;span class="c1"&gt;# the base case of prefix=&amp;quot;&amp;quot;, and prefix&lt;/span&gt;
        &lt;span class="c1"&gt;# is cut down by one letter each iteration.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="code-for-assembling-the-tree"&gt;Code for Assembling the Tree&lt;/h3&gt;
&lt;p&gt;We assemble the tree using a private recursive
method. Here is how that looks (again, these
methods are defined on the &lt;code&gt;TryTrieTree&lt;/code&gt;
class):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;assemble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Assemble the trie from the set of words&lt;/span&gt;
&lt;span class="sd"&gt;        passed to the constructor.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;

        &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;

        &lt;span class="c1"&gt;# start with an empty prefix&lt;/span&gt;
        &lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_assemble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the private recursive method, we assemble the branches
of the tree, only checking to make sure each branch has
the minimum number of words required.&lt;/p&gt;
&lt;p&gt;At the start of each assemble method, we whittle the set
of words down to only the words that start with the prefix
for the given node. This trick uses a little extra space
but the payoff is avoiding searching the entire word set
for each node to count the number of words matching a given
prefix. If a node's parent is &lt;code&gt;s-a-b&lt;/code&gt; and we have already done
the work of filtering all words starting with &lt;code&gt;sab&lt;/code&gt;, 
there is no need to repeat that work when finding 
and filtering all words that start with &lt;code&gt;sabr&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_assemble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Recursive private method called by assemble().&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;prefix_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;candidate_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefix_depth&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="n"&gt;ppc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;candidate&lt;/span&gt;
        &lt;span class="n"&gt;words_with_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;candidate_depth&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;ppc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next lines are the checks to ensure we have the minimum
number of words required to form a candidate branch in
the trie.&lt;/p&gt;
&lt;p&gt;If we do, we will create a new child node for that 
branch and recurse by calling assemble on it.&lt;/p&gt;
&lt;p&gt;Of course, we have to check for the base case, which in
this scenario checks when we have reached the fixed
trie depth of 4.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="n"&gt;min_branches_req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;candidate_depth&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;max_number_branches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words_with_candidate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# If we exceed the minimum number of &lt;/span&gt;
        &lt;span class="c1"&gt;# branches required, add candidate&lt;/span&gt;
        &lt;span class="c1"&gt;# as a new node on the trie.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;max_number_branches&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;min_branches_req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_node_from_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# If we are looking at the root node,&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# parent will be None.&lt;/span&gt;
                &lt;span class="c1"&gt;# In this case don&amp;#39;t worry about&lt;/span&gt;
                &lt;span class="c1"&gt;# creating new child or introducing&lt;/span&gt;
                &lt;span class="c1"&gt;# parent and child, b/c the &amp;quot;new child&amp;quot;&lt;/span&gt;
                &lt;span class="c1"&gt;# is the root (already exists).&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;

            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Otherwise, create the new child,&lt;/span&gt;
                &lt;span class="c1"&gt;# and introduce the parent &amp;amp; child.&lt;/span&gt;
                &lt;span class="n"&gt;new_child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;new_child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
                &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# Base case&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;candidate_depth&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;new_child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max_number_branches&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;

            &lt;span class="c1"&gt;# Recursive case&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;new_candidate&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;new_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;candidate&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_assemble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;new_candidate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;words_with_candidate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# otherwise, we don&amp;#39;t have enough&lt;/span&gt;
        &lt;span class="c1"&gt;# branches to continue downward,&lt;/span&gt;
        &lt;span class="c1"&gt;# so stop here and do nothing.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="code-for-bubbling-up-large-children-counts"&gt;Code for Bubbling Up Large Children Counts&lt;/h3&gt;
&lt;p&gt;These are a little shorter and simpler than the
assembly method above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bubble_up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Do a depth-first traversal of the&lt;/span&gt;
&lt;span class="sd"&gt;        entire trytrietree, pruning as we go.&lt;/span&gt;
&lt;span class="sd"&gt;        This is a pre-order traversal,&lt;/span&gt;
&lt;span class="sd"&gt;        meaning we traverse children first,&lt;/span&gt;
&lt;span class="sd"&gt;        then the parents, so we always &lt;/span&gt;
&lt;span class="sd"&gt;        know the counts of children&lt;/span&gt;
&lt;span class="sd"&gt;        (or we are on a leaf node).&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_bubble_up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_bubble_up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Pre-order depth-first traversal&lt;/span&gt;
&lt;span class="sd"&gt;        starting at the leaf nodes and proceeding&lt;/span&gt;
&lt;span class="sd"&gt;        upwards.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Base case&lt;/span&gt;
            &lt;span class="c1"&gt;# Leaf nodes already have counts          &lt;/span&gt;
            &lt;span class="c1"&gt;# Do nothing&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Recursive case&lt;/span&gt;
            &lt;span class="c1"&gt;# Pre-order traversal: visit/bubble up children first&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_bubble_up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# Now that we&amp;#39;ve completed leaf node counts, we can do interior node counts.&lt;/span&gt;
            &lt;span class="c1"&gt;# Interior node counts are equal to number of large (&amp;gt;=2) children.&lt;/span&gt;
            &lt;span class="n"&gt;large_children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;large_children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see how we converted the definition of
"large children" into a rule above - we use the
recursive case of the "large children" definition
in the recursive case, and we use the base case
of the "large children definition" (for leaf nodes)
when we are on the base case.&lt;/p&gt;
&lt;p&gt;Also note that each leaf node was initialized with
the number of words that start with the corresponding
4-letter prefix (that was done in the assembly method),
but we could just as easily do it in the base case,
as the leaf nodes are the base case.&lt;/p&gt;
&lt;h2 id="wrap-it-in-a-bow"&gt;Wrap it in a Bow&lt;/h2&gt;
&lt;p&gt;We can add some extra wrapping around our class,
and call each of the methods in order for the
various letters of the alphabet.&lt;/p&gt;
&lt;p&gt;Below, we process an input argument n (which is
the size of the wordlist, 5757, if the user does
not specify n). It then creates a TryTrieTree
for each letter, and determines if a complete
binary trie can be constructed. Finally, it prints
a summary of the results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;get_words&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_words&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;tries.py&lt;/span&gt;

&lt;span class="sd"&gt;Donald Knuth, Art of Computer Programming, Volume 4 Fascicle 0&lt;/span&gt;
&lt;span class="sd"&gt;Exercise #35&lt;/span&gt;

&lt;span class="sd"&gt;Problem:&lt;/span&gt;
&lt;span class="sd"&gt;What letters of the alphabet can be used&lt;/span&gt;
&lt;span class="sd"&gt;as the starting letter of sixteen words that&lt;/span&gt;
&lt;span class="sd"&gt;form a complete binary trie within&lt;/span&gt;
&lt;span class="sd"&gt;WORDS(n), given n?&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;ALPHABET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abcdefghijklmnopqrstuvwxyz&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;FIVE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TryTrieTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;trie_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_words&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;perfect_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;imperfect_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ALPHABET&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TryTrieTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assemble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bubble_up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;#print(tree)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The letter &lt;/span&gt;&lt;span class="si"&gt;{0:s}&lt;/span&gt;&lt;span class="s2"&gt; has a perfect binary trie in WORDS(&lt;/span&gt;&lt;span class="si"&gt;{1:d}&lt;/span&gt;&lt;span class="s2"&gt;).&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;perfect_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The letter &lt;/span&gt;&lt;span class="si"&gt;{0:s}&lt;/span&gt;&lt;span class="s2"&gt; has no perfect binary trie in WORDS(&lt;/span&gt;&lt;span class="si"&gt;{1:d}&lt;/span&gt;&lt;span class="s2"&gt;).&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;imperfect_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Perfect count: &lt;/span&gt;&lt;span class="si"&gt;{:d}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perfect_count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Imperfect count: &lt;/span&gt;&lt;span class="si"&gt;{:d}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imperfect_count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;perfect_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imperfect_count&lt;/span&gt;



&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;trie_table&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Compute and print a table of&lt;/span&gt;
&lt;span class="sd"&gt;    number of words n versus number of&lt;/span&gt;
&lt;span class="sd"&gt;    perfect tries formed.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%8s&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="si"&gt;%8s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;perfect tries&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5757&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trie_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%8d&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="si"&gt;%8d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5757&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trie_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%8d&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="si"&gt;%8d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5757&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5757&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5757&lt;/span&gt;

    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trie_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#trie_table()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="output"&gt;Output&lt;/h2&gt;
&lt;p&gt;When we run with n = 1000, we can see that &lt;code&gt;s&lt;/code&gt; is the only letter
that forms a perfect binary trie for that value of n:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python tries.py 1000
The letter a has no perfect binary trie in WORDS(1000).
The letter b has no perfect binary trie in WORDS(1000).
The letter c has no perfect binary trie in WORDS(1000).
The letter d has no perfect binary trie in WORDS(1000).
The letter e has no perfect binary trie in WORDS(1000).
The letter f has no perfect binary trie in WORDS(1000).
The letter g has no perfect binary trie in WORDS(1000).
The letter h has no perfect binary trie in WORDS(1000).
The letter i has no perfect binary trie in WORDS(1000).
The letter j has no perfect binary trie in WORDS(1000).
The letter k has no perfect binary trie in WORDS(1000).
The letter l has no perfect binary trie in WORDS(1000).
The letter m has no perfect binary trie in WORDS(1000).
The letter n has no perfect binary trie in WORDS(1000).
The letter o has no perfect binary trie in WORDS(1000).
The letter p has no perfect binary trie in WORDS(1000).
The letter q has no perfect binary trie in WORDS(1000).
The letter r has no perfect binary trie in WORDS(1000).
The letter s has a perfect binary trie in WORDS(1000).
The letter t has no perfect binary trie in WORDS(1000).
The letter u has no perfect binary trie in WORDS(1000).
The letter v has no perfect binary trie in WORDS(1000).
The letter w has no perfect binary trie in WORDS(1000).
The letter x has no perfect binary trie in WORDS(1000).
The letter y has no perfect binary trie in WORDS(1000).
The letter z has no perfect binary trie in WORDS(1000).

Perfect count: 1
Imperfect count: 25
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In fact, 978 is the smallest number of words to find any perfect tries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python tries.py 978
The letter a has no perfect binary trie in WORDS(978).
The letter b has no perfect binary trie in WORDS(978).
The letter c has no perfect binary trie in WORDS(978).
The letter d has no perfect binary trie in WORDS(978).
The letter e has no perfect binary trie in WORDS(978).
The letter f has no perfect binary trie in WORDS(978).
The letter g has no perfect binary trie in WORDS(978).
The letter h has no perfect binary trie in WORDS(978).
The letter i has no perfect binary trie in WORDS(978).
The letter j has no perfect binary trie in WORDS(978).
The letter k has no perfect binary trie in WORDS(978).
The letter l has no perfect binary trie in WORDS(978).
The letter m has no perfect binary trie in WORDS(978).
The letter n has no perfect binary trie in WORDS(978).
The letter o has no perfect binary trie in WORDS(978).
The letter p has no perfect binary trie in WORDS(978).
The letter q has no perfect binary trie in WORDS(978).
The letter r has no perfect binary trie in WORDS(978).
The letter s has a perfect binary trie in WORDS(978).
The letter t has no perfect binary trie in WORDS(978).
The letter u has no perfect binary trie in WORDS(978).
The letter v has no perfect binary trie in WORDS(978).
The letter w has no perfect binary trie in WORDS(978).
The letter x has no perfect binary trie in WORDS(978).
The letter y has no perfect binary trie in WORDS(978).
The letter z has no perfect binary trie in WORDS(978).

Perfect count: 1
Imperfect count: 25
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running with the full 5757 words leads to 11 more perfect tries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python tries.py 5757
The letter a has no perfect binary trie in WORDS(5757).
The letter b has a perfect binary trie in WORDS(5757).
The letter c has a perfect binary trie in WORDS(5757).
The letter d has a perfect binary trie in WORDS(5757).
The letter e has no perfect binary trie in WORDS(5757).
The letter f has a perfect binary trie in WORDS(5757).
The letter g has no perfect binary trie in WORDS(5757).
The letter h has a perfect binary trie in WORDS(5757).
The letter i has no perfect binary trie in WORDS(5757).
The letter j has no perfect binary trie in WORDS(5757).
The letter k has no perfect binary trie in WORDS(5757).
The letter l has a perfect binary trie in WORDS(5757).
The letter m has a perfect binary trie in WORDS(5757).
The letter n has no perfect binary trie in WORDS(5757).
The letter o has no perfect binary trie in WORDS(5757).
The letter p has a perfect binary trie in WORDS(5757).
The letter q has no perfect binary trie in WORDS(5757).
The letter r has a perfect binary trie in WORDS(5757).
The letter s has a perfect binary trie in WORDS(5757).
The letter t has a perfect binary trie in WORDS(5757).
The letter u has no perfect binary trie in WORDS(5757).
The letter v has no perfect binary trie in WORDS(5757).
The letter w has a perfect binary trie in WORDS(5757).
The letter x has no perfect binary trie in WORDS(5757).
The letter y has no perfect binary trie in WORDS(5757).
The letter z has no perfect binary trie in WORDS(5757).

Perfect count: 12
Imperfect count: 14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we assemble a table of number of five letter words n
versus number of perfect tries formed, nearly half show up
only after we include 4,500 words.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;       n    perfect tries
    1000           1
    1500           1
    2000           1
    2500           1
    3000           3
    3500           3
    4000           4
    4500           6
    5000          11
    5500          12
    5757          12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="python"></category><category term="computer science"></category><category term="graphs"></category><category term="algorithms"></category><category term="art of computer programming"></category><category term="knuth"></category><category term="five letter words"></category><category term="tries"></category><category term="trees"></category></entry><entry><title>Five Letter Words: Part 4: Revisiting Diff by One</title><link href="https://charlesreid1.github.io/five-letter-words-part-4-revisiting-diff-by-one.html" rel="alternate"></link><published>2019-03-10T10:00:00-07:00</published><updated>2019-03-10T10:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-03-10:/five-letter-words-part-4-revisiting-diff-by-one.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#about-the-five-letter-words"&gt;About the Five-Letter Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#different-by-1-revisited"&gt;Different by 1, Revisited&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#different-by-n-revisited"&gt;Different by N, Revisited&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="about-the-five-letter-words"&gt;About the Five-Letter Words&lt;/h2&gt;
&lt;p&gt;In Volume 4, Facsimile 0 of Donald Knuth's &lt;u&gt;Art of Computer Programming&lt;/u&gt;, 
in which Knuth covers graph theory, he introduces a list of five-letter words
as part of a data set useful in exploring graph theory and graph algorithms.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/sgb-words.txt"&gt;list of words&lt;/a&gt; 
is part of the &lt;a href="http://www3.cs.stonybrook.edu/~algorith/implement/graphbase/implement.shtml"&gt;Stanford Graph Base&lt;/a&gt;, 
a set of data sets that are useful for studying graph theory and networks.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.com/wiki/Five_Letter_Words"&gt;Five Letter Words&lt;/a&gt;
on the charlesreid1.com wiki for details.&lt;/p&gt;
&lt;h2 id="different-by-1-revisited"&gt;Different by 1, Revisited&lt;/h2&gt;
&lt;p&gt;This post â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#about-the-five-letter-words"&gt;About the Five-Letter Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#different-by-1-revisited"&gt;Different by 1, Revisited&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#different-by-n-revisited"&gt;Different by N, Revisited&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="about-the-five-letter-words"&gt;About the Five-Letter Words&lt;/h2&gt;
&lt;p&gt;In Volume 4, Facsimile 0 of Donald Knuth's &lt;u&gt;Art of Computer Programming&lt;/u&gt;, 
in which Knuth covers graph theory, he introduces a list of five-letter words
as part of a data set useful in exploring graph theory and graph algorithms.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/sgb-words.txt"&gt;list of words&lt;/a&gt; 
is part of the &lt;a href="http://www3.cs.stonybrook.edu/~algorith/implement/graphbase/implement.shtml"&gt;Stanford Graph Base&lt;/a&gt;, 
a set of data sets that are useful for studying graph theory and networks.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.com/wiki/Five_Letter_Words"&gt;Five Letter Words&lt;/a&gt;
on the charlesreid1.com wiki for details.&lt;/p&gt;
&lt;h2 id="different-by-1-revisited"&gt;Different by 1, Revisited&lt;/h2&gt;
&lt;p&gt;This post is revisiting an exercise from the above volume,
Exercise 28:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Find pairs of SGB word vectors that differ by
+/- 1 in each component.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In a prior blog post (&lt;a href="#"&gt;Part 1&lt;/a&gt;),
we had inerpreted the question as finding
word vectors whose Euclidean distance differed
by 1 total, which is the same as a Hamming
distance of 1.&lt;/p&gt;
&lt;p&gt;However, on revisiting the (more interesting)
question actually being posed by the author,
we find a different and more difficult problem.&lt;/p&gt;
&lt;p&gt;As an example of what Knuth is asking for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rover -&amp;gt; spuds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each letter of the words are within an edit
distance of 1, at each position.&lt;/p&gt;
&lt;p&gt;There are 38 such pairs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python diff_by_one_fixed.py
abaft babes
absit baths
adder beefs
ambit blahs
anger boffs
anode boned
bider chefs
bidet chefs
biffs cheer
ghost hints
hobos inapt
holds inker
honed inode
hoods inner
hoofs inner
hoots input
hoped inode
ingot johns
needs odder
needs offer
rider sheds
rifer sheds
rinds shoer
robed spade
robot snaps
robot spans
rover spuds
ruffs steer
runts stout
rusts strut
sheer tiffs
sheet tiffs
shout tints
sides theft
sneer toffs
splat tombs
spuds toter
stuns tutor
Found 38 pairs of words that differ by +/-1 in each component.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The approach we used was as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iterate over each word in the wordlist
  (use the first 1,000 words to keep it
  shorter for testing)&lt;/li&gt;
&lt;li&gt;For each word:&lt;/li&gt;
&lt;li&gt;Generate all variations that are within +/-1 
    using recursive backtracking (could also use
    algorithm to generate all 32 binary codes of 
    length 5, where 0 = -1, 1 = +1)&lt;/li&gt;
&lt;li&gt;For each of the 32 variations,&lt;ul&gt;
&lt;li&gt;Check if the word is in the wordset
  (O(1) cost if using a hash table/set)&lt;/li&gt;
&lt;li&gt;If so, add ordered pair (word1,word2)
  to a set of solutions (to avoid dupes)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="different-by-n-revisited"&gt;Different by N, Revisited&lt;/h2&gt;
&lt;p&gt;We went back and modified the code to take a
distance parameter d, but storage and compute
cost, as well as the sparsity of the graph of
shared bigrams and trigrams among these 5,000
words, means the number of pairs increases 
exponentially.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;| Distance  | Number of pairs   | Walltime       |
|-----------|-------------------|----------------|
| 1         | 38                |     0.26 s     |
| 2         | 525               |     5.26 s     |
| 3         | 4982              |    38.87 s     |
| 4         | ?? (10^5 est.)    |  10 min (est.) |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can find the &lt;code&gt;diff_by_n.py&lt;/code&gt; script here:
&lt;a href="https://git.charlesreid1.com/cs/five-letter-words/"&gt;https://git.charlesreid1.com/cs/five-letter-words/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python diff_by_n.py
abaft babes
absit baths
adder beefs
ambit blahs
anger boffs
anode boned
bider chefs
bidet chefs
biffs cheer
ghost hints
..
Found 38 pairs of words that differ by +/-1 in each component.
Time: 0.2673 s

aback babel
aback cabal
abaft babes
abash cacti
abide baked
abide caged
abide caked
abler bands
abler bangs
abode caned
...
Found 525 pairs of words that differ by +/-2 in each component.
Time: 5.2617 s

abaca ceded
abaci babel
abaci cabal
abaci decaf
abaci decal
aback babel
aback cabal
aback decal
abaft babes
abaft bedew
...
Found 4982 pairs of words that differ by +/-3 in each component.
Time: 38.8743 s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Computer Science"></category><category term="python"></category><category term="computer science"></category><category term="graphs"></category><category term="algorithms"></category><category term="art of computer programming"></category><category term="knuth"></category><category term="five letter words"></category></entry><entry><title>centillion: a document search engine</title><link href="https://charlesreid1.github.io/centillion-a-document-search-engine.html" rel="alternate"></link><published>2019-03-10T09:00:00-07:00</published><updated>2019-03-10T09:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-03-10:/centillion-a-document-search-engine.html</id><summary type="html">&lt;p&gt;We're excited to announce the public release of &lt;a href="https://github.com/dcppc/centillion"&gt;centillion&lt;/a&gt;,
a document search engine. &lt;/p&gt;
&lt;p&gt;centillion is a search tool that can be used by any individual or organization
to index Github repositories (including the content of markdown files),
Google Drive folders (including the content of .docx files), and Disqus
comment threads.&lt;/p&gt;
&lt;p&gt;centillion is &lt;a href="https://travis-ci.org/dcppc/centillion"&gt;tested using Travis CI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;centillion was originally written for the &lt;a href="https://public.nihdatacommons.us"&gt;NIH Data Commons&lt;/a&gt;
effort (which recently concluded).  centillion was built to facilitate information-finding
in a project with hundreds of people at dozens of institutions generating a sea of email threads,
Google Drive folders, markdown files, websites, and Github â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;We're excited to announce the public release of &lt;a href="https://github.com/dcppc/centillion"&gt;centillion&lt;/a&gt;,
a document search engine. &lt;/p&gt;
&lt;p&gt;centillion is a search tool that can be used by any individual or organization
to index Github repositories (including the content of markdown files),
Google Drive folders (including the content of .docx files), and Disqus
comment threads.&lt;/p&gt;
&lt;p&gt;centillion is &lt;a href="https://travis-ci.org/dcppc/centillion"&gt;tested using Travis CI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;centillion was originally written for the &lt;a href="https://public.nihdatacommons.us"&gt;NIH Data Commons&lt;/a&gt;
effort (which recently concluded).  centillion was built to facilitate information-finding
in a project with hundreds of people at dozens of institutions generating a sea of email threads,
Google Drive folders, markdown files, websites, and Github repositories.&lt;/p&gt;
&lt;p&gt;centillion provided a single comprehensive way of searching across All The Things 
and earned the author many thanks from members across the Data Commons. It is the
author's hope that centillion can prove equally useful for other organizations.&lt;/p&gt;
&lt;p&gt;Under the hood centillion uses &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; (a web server
microframework) and &lt;a href="https://whoosh.readthedocs.io/en/latest/"&gt;Whoosh&lt;/a&gt; (a Python-based
search engine tool).&lt;/p&gt;
&lt;p&gt;You can get a copy of the latest centillion release here: &lt;a href="https://github.com/dcppc/centillion"&gt;https://github.com/dcppc/centillion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can find the latest centillion documentation here: &lt;a href="http://nih-data-commons.us/centillion/"&gt;http://nih-data-commons.us/centillion/&lt;/a&gt;&lt;/p&gt;</content><category term="Centillion"></category><category term="python"></category><category term="centillion"></category><category term="search"></category><category term="search engine"></category><category term="google drive"></category><category term="github"></category><category term="flask"></category></entry><entry><title>Any Color You Like, As Long As It's 00ADD8</title><link href="https://charlesreid1.github.io/any-color-you-like-as-long-as-its-00add8.html" rel="alternate"></link><published>2019-02-23T10:00:00-08:00</published><updated>2019-02-23T10:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-02-23:/any-color-you-like-as-long-as-its-00add8.html</id><summary type="html">&lt;p&gt;A short post with some thoughts on how writing Go code has
helped me learn to stop worrying and love auto-formatting tools.&lt;/p&gt;
&lt;p&gt;Go code is terse. Not Python-terse, but terse. And unlike Java, 
you don't find yourself constantly resorting to the security
blanket of objects - something that Python (mercifully) can 
go either way on.&lt;/p&gt;
&lt;p&gt;I used Java when I taught computer science at South Seattle College,
and remember telling students once that one day, students taking
CSC 142/143 would be using Go instead of Java. These days, I'm not
as certain of that, but given that Go's strengths are â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;A short post with some thoughts on how writing Go code has
helped me learn to stop worrying and love auto-formatting tools.&lt;/p&gt;
&lt;p&gt;Go code is terse. Not Python-terse, but terse. And unlike Java, 
you don't find yourself constantly resorting to the security
blanket of objects - something that Python (mercifully) can 
go either way on.&lt;/p&gt;
&lt;p&gt;I used Java when I taught computer science at South Seattle College,
and remember telling students once that one day, students taking
CSC 142/143 would be using Go instead of Java. These days, I'm not
as certain of that, but given that Go's strengths are asynchronous
programming (critical for taking advantage of multicore hardware) 
and tasks suited for the web, it isn't hard to imagine a "Go 2.0"
that becomes a de-facto standard in school curricula.&lt;/p&gt;
&lt;p&gt;Something else I like about Go is the way there is a toolchain that
adheres to the Unix tooling philosophy: do one thing and do it well.
Take &lt;code&gt;gofmt&lt;/code&gt; as an example - this is a tool that autoformats
Go code to conform to the Go standard spec. &lt;code&gt;gofmt&lt;/code&gt; is a simple tool
that does just one thing. This tool can be connected to various text
editors with hooks, a la &lt;a href="https://github.com/fatih/vim-go"&gt;vimgo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gofmt&lt;/code&gt; has taught me the value, and convenience, of embracing 
the norms and standards set by a language's community. Go
recommends using tabs, for example, which early on I found
a bit repulsive. Before I had vimgo set up, I was stubbornly 
using spaces instead of tabs in my Go code.&lt;/p&gt;
&lt;p&gt;But then I set up vimgo so that, every time I saved a buffer containing
Go code, it would run &lt;code&gt;gofmt&lt;/code&gt; on the code, replacing all of the nitpicky
details (like how many spaces between parentheses and variables, or wether
&lt;code&gt;==&lt;/code&gt; should be surrounded be spaces) and it just makes an executive decision.&lt;/p&gt;
&lt;p&gt;Sure, it uses tabs instead of spaces, but once you start to work on
code and save it and you see all of these details just &lt;em&gt;handled&lt;/em&gt;, 
you quickly learn not to worry about it.&lt;/p&gt;
&lt;p&gt;And the surprising thing, to me, was just how much overhead I was spending
on those things. It adds up.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;gofmt&lt;/code&gt; executive decision strategy is similar to &lt;a href="https://github.com/ambv/black"&gt;black&lt;/a&gt;,
"The uncompromising Python code formatter," whose slogan
is "Any color you like, as long as it's black."&lt;/p&gt;
&lt;p&gt;While I really like black and would love to let it handle all of my Python
code the way &lt;code&gt;gofmt&lt;/code&gt; handles all of my Go code, the unfortunate reality is
that Python, unlike Go, does not have an official standard, and if you
automatically apply black formatting to all Python code, you can quickly
wreak havoc on version-controlled code. You have to tread more lightly
with black. I apply black more selectively by only applying it to &lt;code&gt;.py&lt;/code&gt; 
files that are in specific project subdirectories.)&lt;/p&gt;
&lt;p&gt;A slogan for &lt;code&gt;gofmt&lt;/code&gt; could be, "Any color you like, as long as it's &lt;code&gt;#00ADD8&lt;/code&gt;."&lt;/p&gt;
&lt;p&gt;Wait, what? Where did &lt;code&gt;#00ADD8&lt;/code&gt; come from?&lt;/p&gt;
&lt;p&gt;It's in the &lt;a href="https://storage.googleapis.com/golang-assets/Go-brand-book-v1.9.5.pdf"&gt;Go Brand Book&lt;/a&gt;.
Prior to discovering this (the link was dropped in an unrelated
discussion on the &lt;a href="https://golang.org/help/"&gt;gonuts mailing list&lt;/a&gt;),
I had no idea waht a brand book was. Turns out, this is very much
&lt;em&gt;a thing&lt;/em&gt; in marketing. Companies, projects, and organizations all
have brand books that lay out the details of their marketing designs,
branding, looks, everything down to the fonts and colors.&lt;/p&gt;
&lt;p&gt;The Go brand book is short, but it does specify an official color
for Golang: &lt;code&gt;#00ADD8&lt;/code&gt;. It also covers critical details about how to
depict the Go gopher, including the physics of gopher belly folds:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Extremely important details" src="images/bellyfold.png"&gt;&lt;/p&gt;
&lt;p&gt;There are some other branding books - the 
&lt;a href="https://www.flipsnack.com/cardesigns/brandbook-cocacola.html"&gt;Coca Cola brand book&lt;/a&gt;.
is simultaneously fascinating and terrible,
in a late stage capitalism kind of way.&lt;/p&gt;
&lt;p&gt;At any rate, at least the Go brand book is about something useful,
and contains silly things like gophers.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gopher specs" src="images/gopherpage.png"&gt;&lt;/p&gt;</content><category term="Go"></category><category term="go"></category><category term="golang"></category><category term="rosalind"></category><category term="bioinformatics"></category><category term="black"></category><category term="python"></category><category term="gofmt"></category></entry><entry><title>A Few of My Favorite PEPs</title><link href="https://charlesreid1.github.io/a-few-of-my-favorite-peps.html" rel="alternate"></link><published>2019-02-11T12:00:00-08:00</published><updated>2019-02-11T12:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-02-11:/a-few-of-my-favorite-peps.html</id><summary type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#fav"&gt;What's your favorite PEP?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#p0"&gt;PEP 0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#p8"&gt;PEP 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#p20"&gt;PEP 20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#p3099"&gt;PEP 3099&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2to3"&gt;Addendum: 2 to 3 Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#p202"&gt;PEP 202&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gh"&gt;All the PEPs on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="fav"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="whats-your-favorite-pep"&gt;What's your favorite PEP?&lt;/h2&gt;
&lt;p&gt;PEPs, or &lt;strong&gt;Python Enhancement Proposals&lt;/strong&gt;, are documents in which
features, additions, or general ideas are proposed as additions
to the core Python language.&lt;/p&gt;
&lt;p&gt;As a Python user, we believe it's important to ask questions like this.&lt;/p&gt;
&lt;p&gt;Picking a "favorite PEP" is not just about having a ready and clever
answer to a question you might expect in a technical interview;
the PEP documents really &lt;em&gt;are&lt;/em&gt; important, and really &lt;em&gt;do â€¦&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#fav"&gt;What's your favorite PEP?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#p0"&gt;PEP 0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#p8"&gt;PEP 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#p20"&gt;PEP 20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#p3099"&gt;PEP 3099&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2to3"&gt;Addendum: 2 to 3 Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#p202"&gt;PEP 202&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gh"&gt;All the PEPs on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="fav"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="whats-your-favorite-pep"&gt;What's your favorite PEP?&lt;/h2&gt;
&lt;p&gt;PEPs, or &lt;strong&gt;Python Enhancement Proposals&lt;/strong&gt;, are documents in which
features, additions, or general ideas are proposed as additions
to the core Python language.&lt;/p&gt;
&lt;p&gt;As a Python user, we believe it's important to ask questions like this.&lt;/p&gt;
&lt;p&gt;Picking a "favorite PEP" is not just about having a ready and clever
answer to a question you might expect in a technical interview;
the PEP documents really &lt;em&gt;are&lt;/em&gt; important, and really &lt;em&gt;do&lt;/em&gt; shape 
where Python is today and where it will be in the future.&lt;/p&gt;
&lt;p&gt;So let's look at a few of our favorite PEPs.&lt;/p&gt;
&lt;p&gt;&lt;a name="p0"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pep-0-the-pep-index"&gt;PEP 0: The PEP Index&lt;/h2&gt;
&lt;p&gt;PEP0 - the easiest answer to the question, "what's your favorite PEP?"&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/"&gt;PEP 0 - Index of Python Enhancement Proposals (PEPs)&lt;/a&gt;
lists all PEPs, including PEPs about PEPs, accepted PEPs, open PEPs,
finished PEPs, informational PEPs, and abandoned PEPs.&lt;/p&gt;
&lt;p&gt;This is also a good place to search for a keyword or browse PEPs.&lt;/p&gt;
&lt;p&gt;This PEP is the favorite of people who love enumerations, library card catalogs,
biblical genealogies, and litanies.&lt;/p&gt;
&lt;p&gt;&lt;a name="p8"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pep-8-the-python-style-guide"&gt;PEP 8: The Python Style Guide&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;
covers the recommended Python style.
It is a surprisingly quick read.&lt;/p&gt;
&lt;p&gt;This PEP dishes "official" opinions about 
controversial topics such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tabs or spaces (spoiler: &lt;strong&gt;&lt;em&gt;spaces&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;line width&lt;/li&gt;
&lt;li&gt;whitespace&lt;/li&gt;
&lt;li&gt;naming conventions for variables, classes, and modules&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This PEP is the chosen favorite of those programmers who keep their
crayons organized in the correct color order.&lt;/p&gt;
&lt;p&gt;&lt;a name="p20"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pep-20-the-zen-of-python"&gt;PEP 20: The Zen of Python&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;PEP 20&lt;/a&gt; contains
20 aphorisms that compose the Zen of Python - only 19 of which
are contained in the PEP...&lt;/p&gt;
&lt;p&gt;Also available from Python via:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import this
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Many of the aphorisms in PEP 20 come in pairs.&lt;/p&gt;
&lt;p&gt;The first seven alone compose an excellent philosophy of programming.
Six symmetric rules:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Beautiful is better than ugly.

Explicit is better than implicit.

Simple is better than complex.

Complex is better than complicated.

Flat is better than nested.

Sparse is better than dense.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The seventh, one of the principal ideas behind Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Readability counts.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next pair of aphorisms is important to our own style of programming:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Special cases aren&amp;#39;t special enough to break the rules.

Although practicality beats purity.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The latter aphorism is an acknowledgement that, ultimately, programming
is a means to an end, and Python (or whatever programming language you use)
should not &lt;em&gt;get in the way&lt;/em&gt; of reaching that end - especially not for the
sake of some abstract principle or theory. &lt;/p&gt;
&lt;p&gt;PEP 20 weighs in on errors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Errors should never pass silently.

Unless explicitly silenced.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Slightly perplexing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In the face of ambiguity, refuse the temptation to guess.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More pairs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;There should be one-- and preferably only one -- obvious way to do it.

Although that way may not be obvious at first unless you&amp;#39;re Dutch.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From the &lt;a href="https://en.wikipedia.org/wiki/Guido_van_Rossum"&gt;Wikipedia page on Guido van Rossum&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Guido van Rossum is a Dutch programmer...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Now is better than never.

Although never is often better than *right* now.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That last one sounds like an excuse for procrastination.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;If the implementation is hard to explain, it&amp;#39;s a bad idea.

If the implementation is easy to explain, it may be a good idea.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, the last aphorism covers the reason you never see 
&lt;code&gt;from module import *&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Namespaces are one honking great idea - let&amp;#39;s do more of those!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Namespaces, in this case, come from importing everything in 
a Python package into a particular variable name - like 
&lt;code&gt;import itertools&lt;/code&gt; or &lt;code&gt;import numpy as np&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It turns out that, yes, in fact, namespaces are a great idea!&lt;/p&gt;
&lt;p&gt;&lt;a name="p3099"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pep-3099-things-that-will-not-change-in-python-3000"&gt;PEP 3099: Things That Will Not Change in Python 3000&lt;/h2&gt;
&lt;p&gt;We can't really decide what we enjoy most about &lt;a href="https://www.python.org/dev/peps/pep-3099/"&gt;PEP 3099&lt;/a&gt;.
Maybe it's the fact that it does the opposite of what most 
proclamations of a new major version do, which is, to say
what new features it will &lt;em&gt;not&lt;/em&gt; have.
Maybe it's the way the language's creators demonstrate how well
they have learned from the mistakes of others who adopt
the "Burn it to the ground and rewrite from scratch"
philosophy. Or maybe it's the delightful nostalgia of 
"Python 3000".&lt;/p&gt;
&lt;p&gt;In any case, PEP 3099 is an instructive read, because any feature
that will explicitly be kept during a major version bump is clearly
either (a) useful, (b) important, or (c) both. Additionally, it 
gives some insight into the design decisions made when Python
was implemented ("Why does Python do X this way, instead of 
some other easier way?").&lt;/p&gt;
&lt;p&gt;Not only that, you also get to walk through a graveyard of
abandoned (but still interesting) ideas, and the links given
in the PEP to the Python mailing list can provide additional
useful information.&lt;/p&gt;
&lt;p&gt;&lt;a name="2to3"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="addendum-peps-affecting-2-to-3-changes"&gt;Addendum: PEPs Affecting 2 to 3 Changes&lt;/h2&gt;
&lt;p&gt;In contrast to PEP 3099, which contains a list of all the things
that &lt;em&gt;did not&lt;/em&gt; change in Python 3, there were a large number of
PEPs that &lt;em&gt;did&lt;/em&gt; cause Python 3 to behave differently from Python 2.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0237"&gt;PEP 237&lt;/a&gt;: Unified long integers and integers&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0238"&gt;PEP 238&lt;/a&gt;: Changed the division operator&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0412"&gt;PEP 412&lt;/a&gt;: Key-sharing dictionary&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0428"&gt;PEP 428&lt;/a&gt;: Object-oriented filesystem paths&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0435"&gt;PEP 435&lt;/a&gt;: Adding enum type&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0448"&gt;PEP 448&lt;/a&gt;: Unpacking&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0450"&gt;PEP 450&lt;/a&gt;: Adding stats to standard library&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0498"&gt;PEP 498&lt;/a&gt;: Literal string interpolation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0515"&gt;PEP 515&lt;/a&gt;: Underscores in numeric literals&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-3101"&gt;PEP 3101&lt;/a&gt;: Advanced string formatting&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-3102"&gt;PEP 3102&lt;/a&gt;: Keyword-only arguments&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-3105"&gt;PEP 3105&lt;/a&gt;: Make print a function&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-3111"&gt;PEP 3111&lt;/a&gt;: User input in Python 3000&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-3114"&gt;PEP 3114&lt;/a&gt;: Renaming &lt;code&gt;next()&lt;/code&gt; to &lt;code&gt;__next__()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-3135"&gt;PEP 3135&lt;/a&gt;: Super behavior&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="p202"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pep-202-list-comprehensions"&gt;PEP 202: List Comprehensions&lt;/h2&gt;
&lt;p&gt;Of course, picking your favorite PEP can also be an opportunity
to make a statement about your favorite language feature of Python,
since many of Python's most useful language features got their start 
as PEPs.&lt;/p&gt;
&lt;p&gt;For us, list comprehensions (covered in &lt;a href="https://www.python.org/dev/peps/pep-0202/"&gt;PEP 202&lt;/a&gt;)
area clear winner in any competition of most useful language features. 
List comprehensions are a way of shortening for loop syntax, making it
much easier to perform map and filtering operations. Some examples
from PEP 202:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print([i for i in range(20) if i%2 == 0])
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]

&amp;gt;&amp;gt;&amp;gt; nums = [1, 2, 3, 4]

&amp;gt;&amp;gt;&amp;gt; fruit = [&amp;quot;Apples&amp;quot;, &amp;quot;Peaches&amp;quot;, &amp;quot;Pears&amp;quot;, &amp;quot;Bananas&amp;quot;]

&amp;gt;&amp;gt;&amp;gt; print [(i, f) for i in nums for f in fruit]
[(1, &amp;#39;Apples&amp;#39;), (1, &amp;#39;Peaches&amp;#39;), (1, &amp;#39;Pears&amp;#39;), (1, &amp;#39;Bananas&amp;#39;),
 (2, &amp;#39;Apples&amp;#39;), (2, &amp;#39;Peaches&amp;#39;), (2, &amp;#39;Pears&amp;#39;), (2, &amp;#39;Bananas&amp;#39;),
 (3, &amp;#39;Apples&amp;#39;), (3, &amp;#39;Peaches&amp;#39;), (3, &amp;#39;Pears&amp;#39;), (3, &amp;#39;Bananas&amp;#39;),
 (4, &amp;#39;Apples&amp;#39;), (4, &amp;#39;Peaches&amp;#39;), (4, &amp;#39;Pears&amp;#39;), (4, &amp;#39;Bananas&amp;#39;)]

&amp;gt;&amp;gt;&amp;gt; print([(i, f) for i in nums for f in fruit if f[0] == &amp;quot;P&amp;quot;])
[(1, &amp;#39;Peaches&amp;#39;), (1, &amp;#39;Pears&amp;#39;),
 (2, &amp;#39;Peaches&amp;#39;), (2, &amp;#39;Pears&amp;#39;),
 (3, &amp;#39;Peaches&amp;#39;), (3, &amp;#39;Pears&amp;#39;),
 (4, &amp;#39;Peaches&amp;#39;), (4, &amp;#39;Pears&amp;#39;)]

&amp;gt;&amp;gt;&amp;gt; print([(i, f) for i in nums for f in fruit if f[0] == &amp;quot;P&amp;quot; if i%2 == 1])
[(1, &amp;#39;Peaches&amp;#39;), (1, &amp;#39;Pears&amp;#39;), (3, &amp;#39;Peaches&amp;#39;), (3, &amp;#39;Pears&amp;#39;)]

&amp;gt;&amp;gt;&amp;gt; print([i for i in zip(nums, fruit) if i[0]%2==0])
[(2, &amp;#39;Peaches&amp;#39;), (4, &amp;#39;Bananas&amp;#39;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;List comprehensions enable code to be short but expressive, 
brief but elegant. Brevity is the soul of wit, after all.&lt;/p&gt;
&lt;p&gt;&lt;a name="gh"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="all-the-peps-on-github"&gt;All the PEPs on Github&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/python/peps"&gt;All the PEPs are available on Github.&lt;/a&gt;&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="pep"></category><category term="computer science"></category><category term="programming"></category></entry><entry><title>Context Managers in Python</title><link href="https://charlesreid1.github.io/context-managers-in-python.html" rel="alternate"></link><published>2019-02-02T10:00:00-08:00</published><updated>2019-02-02T10:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-02-02:/context-managers-in-python.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-predicament"&gt;A Predicament&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-context-manager"&gt;What is a context manager?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-graphviz-dot"&gt;What is Graphviz dot?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#capturing-stdout"&gt;Capturing stdout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#replacing-stdout"&gt;Replacing stdout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-a-context-manager"&gt;Creating a context manager&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#constructor"&gt;Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enter-method"&gt;Enter method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exit-method"&gt;Exit method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#in-action"&gt;In action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-new-dag-flags"&gt;Using the new dag flags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other-context-manager-applications"&gt;Other context manager applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="a-predicament"&gt;A Predicament&lt;/h2&gt;
&lt;p&gt;Recently we spent some time contributing to
&lt;a href="https://github.com/dib-lab/eelpond"&gt;dib-lab/eelpond (renamed to elvers)&lt;/a&gt;,
an executable &lt;a href="https://snakemake.readthedocs.io/en/stable/"&gt;Snakemake&lt;/a&gt;
workflow for running the 
&lt;a href="https://khmer-protocols.readthedocs.io/en/latest/mrnaseq/index.html"&gt;eelpond mRNAseq workflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the process of tracking down a confusing
bug in the Snakemake workflow, we used Snakemake's
ability to print a directed acyclic graph (hereafter
referred to as a &lt;strong&gt;dag&lt;/strong&gt;) representing
its task graph. Snakemake prints the dot â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-predicament"&gt;A Predicament&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-a-context-manager"&gt;What is a context manager?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-graphviz-dot"&gt;What is Graphviz dot?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#capturing-stdout"&gt;Capturing stdout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#replacing-stdout"&gt;Replacing stdout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-a-context-manager"&gt;Creating a context manager&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#constructor"&gt;Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enter-method"&gt;Enter method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exit-method"&gt;Exit method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#in-action"&gt;In action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-new-dag-flags"&gt;Using the new dag flags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other-context-manager-applications"&gt;Other context manager applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="a-predicament"&gt;A Predicament&lt;/h2&gt;
&lt;p&gt;Recently we spent some time contributing to
&lt;a href="https://github.com/dib-lab/eelpond"&gt;dib-lab/eelpond (renamed to elvers)&lt;/a&gt;,
an executable &lt;a href="https://snakemake.readthedocs.io/en/stable/"&gt;Snakemake&lt;/a&gt;
workflow for running the 
&lt;a href="https://khmer-protocols.readthedocs.io/en/latest/mrnaseq/index.html"&gt;eelpond mRNAseq workflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the process of tracking down a confusing
bug in the Snakemake workflow, we used Snakemake's
ability to print a directed acyclic graph (hereafter
referred to as a &lt;strong&gt;dag&lt;/strong&gt;) representing
its task graph. Snakemake prints the dot notation
to stdout.&lt;/p&gt;
&lt;p&gt;(The graph representation ended up identifying the problem,
which was two task graphs that were independent, but 
which were not supposed to be independent.)&lt;/p&gt;
&lt;p&gt;When creating the Graphviz dot notation,
Snakemake is kind enough to direct all of its output
messages to stderr, and direct the dot graph output 
to stdout, which makes it easy to redirect stdout
to a &lt;code&gt;.dot&lt;/code&gt; file and process it with Graphviz.&lt;/p&gt;
&lt;p&gt;Github user &lt;a href="https://github.com/bluegenes"&gt;@bluegenes&lt;/a&gt;
(the principal author of elvers) &lt;a href="https://github.com/dib-lab/eelpond/pull/69"&gt;added a &lt;code&gt;--dag&lt;/code&gt; file to the &lt;code&gt;run_eelpond&lt;/code&gt; script&lt;/a&gt;,
which asks Snakemake to print the dag when it calls
the Snakemake API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./run_eelpond --dag ... &amp;gt; eelpond_dag.dot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This .dot file can then be rendered into a .png file
with another command from the command line,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dot eelpond_dag.dot -Tpng -o eelpond_dag.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Simple, right?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But here's the problem:&lt;/strong&gt;
While this is a simple and easy way to generate the dag,
it introduces some extra steps for the user, and it
also prevents us from being able to print &lt;em&gt;anything&lt;/em&gt; to
stdout before or after the dag is generated, since
anything printed out by the program to stdout will
be redirected to the final dot file along with all
the Graphviz dot output.&lt;/p&gt;
&lt;p&gt;So how to avoid the extra steps on the command line,
while also improving the flexibility in printing to
stdout (i.e., only capturing Snakemake's output to
a file)?&lt;/p&gt;
&lt;p&gt;Can we add two flags like &lt;code&gt;--dagfile&lt;/code&gt; and &lt;code&gt;--dagpng&lt;/code&gt;
that would, respectively, save the task graph 
directly into a .dot file, or render the dot output
from Snakemake directly into a png using dot?&lt;/p&gt;
&lt;p&gt;We &lt;a href="https://github.com/dib-lab/eelpond/pull/73"&gt;implemented precisely this functionality&lt;/a&gt;
in dib-lab/eelpond PR #73. To do this,
we utilized a context manager to capture output
from Snakemake. In this post we'll cover how
this context manager works, and mention a few
other possibilities with context managers.&lt;/p&gt;
&lt;h2 id="what-is-a-context-manager"&gt;What is a context manager?&lt;/h2&gt;
&lt;p&gt;If you have done even a little Python programming,
you have probably seen and used &lt;a href="https://docs.python.org/3/reference/datamodel.html#context-managers"&gt;context managers&lt;/a&gt;
before - they are blocks of code that are
opened using a &lt;code&gt;with&lt;/code&gt; keyword in Python. For example,
the classic Pythonic way to write to a file uses
a context manager:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;with open(&amp;#39;file.txt&amp;#39;, &amp;#39;w&amp;#39;) as f:
    f.write(&amp;quot;\n&amp;quot;.join(range(10)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The context manager defines a runtime context for
all the code in the block - and that can be a different
context than the rest of the program. When a context
is opened (when the &lt;code&gt;with&lt;/code&gt; block is encountered), 
a context manager object is created and its &lt;code&gt;__enter__()&lt;/code&gt;
method is run. This method will modify the runtime
context in whatever way it needs,
and the rest of the code in the block will be run.
When the context is done, where the block ends,
the context manager's &lt;code&gt;__exit__()&lt;/code&gt; method is run.
This restores the runtime context to its
normal state for the rest of the program.&lt;/p&gt;
&lt;p&gt;It's a general concept with a &lt;em&gt;lot&lt;/em&gt; of different 
applications. We cover how to use it to capture
output to &lt;code&gt;sys.stdout&lt;/code&gt; below.&lt;/p&gt;
&lt;h2 id="what-is-graphviz-dot"&gt;What is Graphviz dot?&lt;/h2&gt;
&lt;p&gt;We mentioned that Snakemake can output visualizations of
workflows in Graphviz dot format. For the purposes
of clarity we explain what that format is here.&lt;/p&gt;
&lt;p&gt;Without getting too sidetracked, &lt;a href="https://graphviz.org/"&gt;Graphviz dot&lt;/a&gt;
defines a notation for drawing graphs, and provides software
for laying out the graphs in rendered images.&lt;/p&gt;
&lt;p&gt;The user specifies the nodes and labels and edges, as well as
formatting and layout details, and dot takes care of laying
out the graph.&lt;/p&gt;
&lt;p&gt;Here's an example of a simple graph in dot notation:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;plot.dot&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;digraph G {
    Boston
    &amp;quot;New York&amp;quot;
    Houston
    &amp;quot;Los Angeles&amp;quot;
    Seattle

    Boston -&amp;gt; &amp;quot;New York&amp;quot;
    Boston -&amp;gt; Houston
    Houston -&amp;gt; Boston
    Houston -&amp;gt; &amp;quot;Los Angeles&amp;quot;
    &amp;quot;New York&amp;quot; -&amp;gt; Seattle
    Seattle -&amp;gt; &amp;quot;New York&amp;quot;
    &amp;quot;New York&amp;quot; -&amp;gt; &amp;quot;Los Angeles&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To render this as a .png image,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dot cities.dot -Tpng -o cities.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which becomes:&lt;/p&gt;
&lt;p&gt;&lt;img alt="dot graph of cities" src="/images/dot_cities.png"&gt;&lt;/p&gt;
&lt;p&gt;This tool makes visualizing workflows a breeze,
as the flow of tasks is much easier to understand
and troubleshoot than the convoluted logic of
Snakefile rules. Here is an example from elvers:&lt;/p&gt;
&lt;p&gt;&lt;img alt="elvers dag" src="/images/elvers_dag.png"&gt;&lt;/p&gt;
&lt;h2 id="capturing-stdout"&gt;Capturing stdout&lt;/h2&gt;
&lt;p&gt;In elvers, the &lt;code&gt;run_eelpond&lt;/code&gt; command line wrapper that kicks
off the workflow is a Python script that calls the Snakemake
API (we covered this approach in a prior blog post,
&lt;a href="https://charlesreid1.github.io/building-snakemake-command-line-wrappers-for-workflows.html"&gt;Building Snakemake Command Line Wrappers for Workflows&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This Python script has a call to the Snakemake API; here
is the relevant snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        # ...set up...

        if not building_dag:
            print(&amp;#39;--------&amp;#39;)
            print(&amp;#39;details!&amp;#39;)
            print(&amp;#39;\tsnakefile: {}&amp;#39;.format(snakefile))
            print(&amp;#39;\tconfig: {}&amp;#39;.format(configfile))
            print(&amp;#39;\tparams: {}&amp;#39;.format(paramsfile))
            print(&amp;#39;\ttargets: {}&amp;#39;.format(repr(targs)))
            print(&amp;#39;\treport: {}&amp;#39;.format(repr(reportfile)))
            print(&amp;#39;--------&amp;#39;)

        # Begin snakemake API call

        status = snakemake.snakemake(snakefile, configfile=paramsfile, use_conda=True, 
                                 targets=[&amp;#39;eelpond&amp;#39;], printshellcmds=True, 
                                 cores=args.threads, cleanup_conda= args.cleanup_conda,
                                 dryrun=args.dry_run, lock=not args.nolock,
                                 unlock=args.unlock,
                                 verbose=args.verbose, debug_dag=args.debug, 
                                 conda_prefix=args.conda_prefix, 
                                 create_envs_only=args.create_envs_only,
                                 restart_times=args.restart_times,
                                 printdag=building_dag, keepgoing=args.keep_going,
                                 forcetargets=args.forcetargets,forceall=args.forceall)

        # End snakemake API call

        # ...clean up...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most of the code that comes before this API call is processing
the flags provided by the user. We want to have the flexibility
to print to stdout while processing flags, before we get to the
Snakemake API call; and we want those messages to be kept separate
from the dag output.&lt;/p&gt;
&lt;p&gt;In other words, we only want to capture output to stdout between
"Begin snakemake API call" and "End snakemake API call". Everywhere
else, stdout can go to stdout like normal.&lt;/p&gt;
&lt;p&gt;We can do this by recognizing that any Python program printing to
stdout uses &lt;code&gt;sys.stdout&lt;/code&gt; under the hood to send output to stdout -
so if we can somehow tell Python to swap out stdout with a string
buffer that has the same methods (print, printf, etc.), run Snakemake,
then replace stdout again, we can isolate and capture all stdout from
the Snakemake API call.&lt;/p&gt;
&lt;h2 id="replacing-stdout"&gt;Replacing stdout&lt;/h2&gt;
&lt;p&gt;The strategy for our context manager and the entry and exit
methods, then, is clear:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If the user has specified the &lt;code&gt;--dag&lt;/code&gt; flag, 
  the &lt;code&gt;__entry__()&lt;/code&gt; method should replace stdout
  with a StringIO buffer within our new runtime 
  context; otherwise, leave stdout alone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the user has specified the &lt;code&gt;--dag&lt;/code&gt; flag,
  the &lt;code&gt;__exit__()&lt;/code&gt; method should clean up by
  restoring &lt;code&gt;sys.stdout&lt;/code&gt;; otherwise, do nothing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we are ready to make our context manager object.&lt;/p&gt;
&lt;p&gt;But wait! What kind of object are we using? Do we need
some kind of special context manager class?
Nope! This is one of the features of context
managers that makes them magical: &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Any&lt;/strong&gt; object can be a context manager.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;All we need to do is add &lt;code&gt;__enter__()&lt;/code&gt; and &lt;code&gt;__exit__()&lt;/code&gt;
methods to an object, and it can become a context
manager.&lt;/p&gt;
&lt;h2 id="creating-a-context-manager"&gt;Creating a context manager&lt;/h2&gt;
&lt;p&gt;In our case, we are capturing stdout from Snakemake
so that we can potentially process it, and then dump 
it to a file. We don't know how many lines Snakemake
will output, so we will replace &lt;code&gt;sys.stdout&lt;/code&gt; with a string
buffer. But once the context closes, we want all those
strings in something more convenient, like a list.&lt;/p&gt;
&lt;p&gt;So, we can define a new class that derives from the 
list class, and just adds &lt;code&gt;__enter__()&lt;/code&gt; and &lt;code&gt;__exit__()&lt;/code&gt;
methods, to enable this list to be a context manager:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;class CaptureStdout(list):
    &amp;quot;&amp;quot;&amp;quot;
    A utility object that uses a context manager
    to capture stdout from Snakemake. Useful when
    creating the directed acyclic graph.
    &amp;quot;&amp;quot;&amp;quot;
    def __init__(self,*args,**kwargs):
        pass

    def __enter__(self,*args,**kwargs):
        pass

    def __exit__(self,*args,**kwargs):

    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Note that we include the constructor, since we
need the context manager to have a state so that
we can restore the original runtime context to
the way it was when we're done.)&lt;/p&gt;
&lt;h3 id="constructor"&gt;Constructor&lt;/h3&gt;
&lt;p&gt;The constructor is where we process any input
arguments passed in when the context is created.&lt;/p&gt;
&lt;p&gt;Given that we want our context manager to handle
the case of a directed acyclic graph by capturing
stdout, and do nothing otherwise, we should have
a flag in the constructor indicating whether
we want to pass stdout through, or whether we
want to capture it.&lt;/p&gt;
&lt;p&gt;Additionally, we don't need to call the parent
(super) class constructor, i.e., the list constructor,
because we always start with an empty list.
No need to call &lt;code&gt;super().__init__()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the constructor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CaptureStdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A utility object that uses a context manager&lt;/span&gt;
&lt;span class="sd"&gt;    to capture stdout from Snakemake. Useful when&lt;/span&gt;
&lt;span class="sd"&gt;    creating the directed acyclic graph.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;passthru&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Boolean: should we pass everything through to stdout?&lt;/span&gt;
        &lt;span class="c1"&gt;# (this object is only functional if passthru is False)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passthru&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;passthru&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="enter-method"&gt;Enter method&lt;/h3&gt;
&lt;p&gt;When we open the context, we want to swap out
&lt;code&gt;sys.stdout&lt;/code&gt; with a string buffer. But we also
want to save the original &lt;code&gt;sys.stdout&lt;/code&gt; object
reference, so that we can restore the original
runtime context and let the program continue
printing to stdout after Snakemake is done.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CaptureStdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Open a new context with this CaptureStdout&lt;/span&gt;
&lt;span class="sd"&gt;        object. This happens when we say&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;with CaptureStdout() as output:&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# If we are just passing input on to output, pass thru&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passthru&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

        &lt;span class="c1"&gt;# Otherwise, we want to swap out sys.stdout with&lt;/span&gt;
        &lt;span class="c1"&gt;# a StringIO object that will save stdout.&lt;/span&gt;
        &lt;span class="c1"&gt;# &lt;/span&gt;
        &lt;span class="c1"&gt;# Save the existing stdout object so we can&lt;/span&gt;
        &lt;span class="c1"&gt;# restore it when we&amp;#39;re done&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;
        &lt;span class="c1"&gt;# Now swap out stdout &lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stringio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="exit-method"&gt;Exit method&lt;/h3&gt;
&lt;p&gt;To clean up, we will need to restore &lt;code&gt;sys.stdout&lt;/code&gt;
using the pointer we saved in &lt;code&gt;__enter__&lt;/code&gt;, then
process the string buffer.&lt;/p&gt;
&lt;p&gt;We can also use the &lt;code&gt;del&lt;/code&gt; operator to clean up
the space used by the buffer object once we've
transferred its contents.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CaptureStdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Close the context and clean up.&lt;/span&gt;
&lt;span class="sd"&gt;        The *args are needed in case there is an&lt;/span&gt;
&lt;span class="sd"&gt;        exception (we don&amp;#39;t deal with those here).&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# If we are just passing input on to output, pass thru&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passthru&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

        &lt;span class="c1"&gt;# This entire class extends the list class,&lt;/span&gt;
        &lt;span class="c1"&gt;# so we call self.extend() to add a list to &lt;/span&gt;
        &lt;span class="c1"&gt;# the end of self (in this case, all the new&lt;/span&gt;
        &lt;span class="c1"&gt;# lines from our StringIO object).&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stringio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="c1"&gt;# Clean up (if this is missing, the garbage collector&lt;/span&gt;
        &lt;span class="c1"&gt;# will eventually take care of this...)&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stringio&lt;/span&gt;

        &lt;span class="c1"&gt;# Clean up by setting sys.stdout back to what&lt;/span&gt;
        &lt;span class="c1"&gt;# it was before we opened up this context.&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_stdout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="in-action"&gt;In action&lt;/h3&gt;
&lt;p&gt;To see the context manager in action, let's go back to
the snippet of code where we call the Snakemake API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="c1"&gt;# Set up a context manager to capture stdout if we&amp;#39;re building&lt;/span&gt;
        &lt;span class="c1"&gt;# a directed acyclic graph (which prints the graph in dot format&lt;/span&gt;
        &lt;span class="c1"&gt;# to stdout instead of to a file).&lt;/span&gt;
        &lt;span class="c1"&gt;# If we are not bulding a dag, pass all output straight to stdout&lt;/span&gt;
        &lt;span class="c1"&gt;# without capturing any of it.&lt;/span&gt;
        &lt;span class="n"&gt;passthru&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;building_dag&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;CaptureStdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;passthru&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;passthru&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# run!!&lt;/span&gt;
            &lt;span class="c1"&gt;# params file becomes snakemake configfile&lt;/span&gt;
            &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snakemake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;snakemake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snakefile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;configfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;paramsfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_conda&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                     &lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eelpond&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;printshellcmds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                     &lt;span class="n"&gt;cores&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cleanup_conda&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleanup_conda&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;dryrun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dry_run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nolock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;unlock&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug_dag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                     &lt;span class="n"&gt;conda_prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conda_prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                     &lt;span class="n"&gt;create_envs_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_envs_only&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;restart_times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;restart_times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;printdag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;building_dag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keepgoing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keep_going&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;forcetargets&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forcetargets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;forceall&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forceall&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once we have closed the runtime context, our variable
&lt;code&gt;output&lt;/code&gt; is a list with all the output from Snakemake
(assuming we're creating a dag; if not, everything is
passed through to stdout like normal).&lt;/p&gt;
&lt;p&gt;The last bit here is to handle the three different
dag flags: &lt;code&gt;--dag&lt;/code&gt;, &lt;code&gt;--dagfile&lt;/code&gt;, and &lt;code&gt;--dagpng&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--dag&lt;/code&gt; prints the dot graph straight to stdout,
  like Snakemake's default dag behavior;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--dagfile=&amp;lt;dotfile&amp;gt;&lt;/code&gt; dumps the dot graph to a 
  dot file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--dagpng=&amp;lt;pngfile&amp;gt;&lt;/code&gt; uses dot (installed in the
  elvers conda environment) to render the dot output
  from Snakemake directly into a png image&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We handle these three cases like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        if building_dag:

            # These three --build args are mutually exclusive,
            # and are checked in order of precedence (hi to low):
            # --dag         to stdout
            # --dagfile     to .dot
            # --dagpng      to .png

            if args.dag:
                # straight to stdout
                print(&amp;quot;\n&amp;quot;.join(output))

            elif args.dagfile:
                with open(args.dagfile,&amp;#39;w&amp;#39;) as f:
                    f.write(&amp;quot;\n&amp;quot;.join(output))
                print(f&amp;quot;\tPrinted workflow dag to dot file {args.dagfile}\n\n &amp;quot;)

            elif args.dagpng:
                # dump dot output to temporary dot file
                with open(&amp;#39;.temp.dot&amp;#39;,&amp;#39;w&amp;#39;) as f:
                    f.write(&amp;quot;\n&amp;quot;.join(output))
                subprocess.call([&amp;#39;dot&amp;#39;,&amp;#39;-Tpng&amp;#39;,&amp;#39;.temp.dot&amp;#39;,&amp;#39;-o&amp;#39;,args.dagpng])
                subprocess.call([&amp;#39;rm&amp;#39;,&amp;#39;-f&amp;#39;,&amp;#39;.temp.dot&amp;#39;])
                print(f&amp;quot;\tPrinted workflow dag to png file {args.dagpng}\n\n &amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that before the Snakemake API call, we also check
whether &lt;code&gt;dot&lt;/code&gt; exists:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        # if user specified --dagpng,
        # graphviz dot must be present
        if args.dagpng:
            if shutil.which(&amp;#39;dot&amp;#39;) is None:
                sys.stderr.write(f&amp;quot;\n\tError: Cannot find &amp;#39;dot&amp;#39; utility, but --dotpng flag was specified. Fix this by installing graphviz dot.\n\n&amp;quot;)
                sys.exit(-1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The final code is implemented in the &lt;a href="https://github.com/dib-lab/eelpond/tree/cmr_better_dag_handling"&gt;&lt;code&gt;cmr_better_dag_handling&lt;/code&gt; branch of eelpond/elvers&lt;/a&gt;
and &lt;a href="https://github.com/dib-lab/eelpond/pull/73"&gt;pull request #73 in eelpond/elvers&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="using-the-new-dag-flags"&gt;Using the new dag flags&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git clone https://github.com/dib-lab/eelpond.git
$ cd eelpond
$ conda env create --file environment.yml -n eelpond
$ conda activate eelpond
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we're ready to run the workflow.
We can use the &lt;code&gt;-w&lt;/code&gt; flag to list all workflows,
then use the &lt;code&gt;-n&lt;/code&gt; flag to do a dry run.&lt;/p&gt;
&lt;p&gt;We'll use the &lt;code&gt;kmer_trim&lt;/code&gt; workflow target:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./run_eelpond examples/nema.yaml kmer_trim -n

...lots of output...

Job counts:
    count   jobs
    1   eelpond
    10  http_get_fq1
    10  http_get_fq2
    10  khmer_pe_diginorm
    10  khmer_split_paired
    10  trimmomatic_pe
    51
This was a dry-run (flag -n). The order of jobs does not
reflect the order of execution.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can create a dag for this workflow target:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./run_eelpond examples/nema.yaml kmer_trim --dagfile=dag_kmertrimming.dot
    Added default parameters from rule-specific params files.
    Writing full params to examples/.ep_nema.yaml
Building DAG of jobs...
    Printed workflow dag to dot file dag_kmertrimming.dot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, we can use the &lt;code&gt;--dagpng&lt;/code&gt; flag for instant
gratification:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./run_eelpond examples/nema.yaml kmer_trim --dagpng=dag_kmertrimming.png
    Added default parameters from rule-specific params files.
    Writing full params to examples/.ep_nema.yaml
Building DAG of jobs...
    Printed workflow dag to png file dag_kmertrimming.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that you can add a line &lt;code&gt;rankdir=LR;&lt;/code&gt; to your dot
file to change the orientation of the graph (left-to-right
order makes highly-parallel workflows vertically stretched,
so they are eaiser to view).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;digraph mydigraph {

    rankdir=LR;

    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and here is the result:&lt;/p&gt;
&lt;p&gt;&lt;img alt="elvers dag" src="/images/elvers_dag.png"&gt;&lt;/p&gt;
&lt;h2 id="other-context-manager-applications"&gt;Other context manager applications&lt;/h2&gt;
&lt;p&gt;Actions requiring temporary contexts, which are a bit like self-contained
workspaces, are good candidates for context managers. Following are a
few examples and references.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SSH connections:&lt;/strong&gt; the context manager's &lt;code&gt;__enter__&lt;/code&gt; function creates/loads
connection details, creates a connection object, and opens the connection.
The &lt;code&gt;__exit__&lt;/code&gt; function cleans up by closing the connection. This way,
you can say something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;SSHConnectionManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;echo hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enountered an error running remote command&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Blog post: &lt;a href="https://packetpushers.net/using-python-context-managers/"&gt;Using Python Context Managers for SSH connections&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Note: this blog post uses a context manager that is a generator
decorated with a context manager utility function; this is a 
different approach than our class-based approach but is still
valid.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iPython notebook and matplotlib figure management:&lt;/strong&gt; Camille Scott has
&lt;a href="http://www.camillescott.org/2014/05/05/context-management/"&gt;a blog post&lt;/a&gt; 
covering a way of managing large Jupyter notebooks with
lots of figures using context managers. In this case, the context
that is being set up and torn down is a matplotlib plot context,
and it is creating each plot, saving it to a file, then closing
the plot. This makes the notebook a lot faster than trying to render
every single plot, and makes it a lot cleaner than littering the code
with manual figure and axis management.&lt;/p&gt;
&lt;p&gt;Here is the example usage Camille gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;FigManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;genes_per_sample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tall_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;genes_support_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;barh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;labels_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Represented Genes per Sample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;FileLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;genes_per_sample.svg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(The &lt;code&gt;FileLink&lt;/code&gt; function opens/processes the resulting image.)&lt;/p&gt;
&lt;p&gt;Nice!&lt;/p&gt;
&lt;p&gt;Blog post: &lt;a href="http://www.camillescott.org/2014/05/05/context-management/"&gt;Context Managers and IPython Notebook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Database Connection:&lt;/strong&gt; this example comes from Django's test suite.
In it, a context manager is defined that creates new MySQL database
connections when the context is opened, and closes them when the
context is done.&lt;/p&gt;
&lt;p&gt;Here is the context manager, which again uses the decorator + generator
approach rather than the class approach:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;django/tests/backends/mysql/tests.py&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_connection&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;new_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;new_connection&lt;/span&gt;
    &lt;span class="n"&gt;new_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(&lt;a href="https://github.com/django/django/blob/master/tests/backends/mysql/tests.py"&gt;Link to file on Github&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The first two lines of this function are equivalent to an &lt;code&gt;__enter__&lt;/code&gt; method,
while the last line is equivalent to an &lt;code&gt;__exit__&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;This context manager is then used like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;get_connection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;new_connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;new_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;isolation_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;other_isolation_level&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_isolation_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_connection&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isolation_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;other_isolation_level&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The context manager is a convenient way of creating a copy
of an existing MySQL connection, then closing it when the
requesting method is finished using it.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/dib-lab/eelpond"&gt;elvers (dib-lab/eelpond on Github)&lt;/a&gt;,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Author: &lt;a href="https://github.com/bluegenes"&gt;@bluegenes on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dib-lab/eelpond/pull/69"&gt;PR adding &lt;code&gt;--dag&lt;/code&gt; flag&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dib-lab/eelpond/pull/73"&gt;PR adding &lt;code&gt;--dagfile&lt;/code&gt; and &lt;code&gt;--dagpng&lt;/code&gt; flags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://khmer-protocols.readthedocs.io/en/latest/mrnaseq/index.html"&gt;eelpond mRNAseq workflow&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this mRNAseq data processing protocol
  served as the original inspiration for
  elvers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/reference/datamodel.html#context-managers"&gt;Context managers (Python documentation)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;PEP 343 - the "with" statement&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://snakemake.readthedocs.io/en/stable/"&gt;Snakemake&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://graphviz.org/"&gt;Graphviz dot&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.github.io/building-snakemake-command-line-wrappers-for-workflows.html"&gt;Building Snakemake Command Line Wrappers for Workflows (charlesreid1 blog)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="context managers"></category><category term="testing"></category><category term="python"></category><category term="programming"></category></entry><entry><title>Building Snakemake Command Line Wrappers for Kubernetes Workflows</title><link href="https://charlesreid1.github.io/building-snakemake-command-line-wrappers-for-kubernetes-workflows.html" rel="alternate"></link><published>2019-01-28T20:00:00-08:00</published><updated>2019-01-28T20:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-01-28:/building-snakemake-command-line-wrappers-for-kubernetes-workflows.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; These ideas are implemented in the repository
&lt;a href="https://github.com/charlesreid/2019-snakemake-byok8s"&gt;charlesreid1/2019-snakemake-byok8s&lt;/a&gt;.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#recap-workflows-as-executables"&gt;Recap: Workflows as Executables&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2018-snakemake-cli"&gt;2018-snakemake-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2019-snakemake-cli"&gt;2019-snakemake-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2019-snakemake-byok8s"&gt;2019-snakemake-byok8s&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#overview-of-2019-snakemake-byok8s"&gt;Overview of 2019-snakemake-byok8s&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#cloud-scale-kubernetes-k8s"&gt;Cloud + Scale = Kubernetes (k8s)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#snakemake-k8s-support"&gt;Snakemake k8s Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#modifying-the-cli"&gt;Modifying the CLI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#namespaces"&gt;Namespaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-flags"&gt;Adding flags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#local-kubernetes-clusters-with-minikube"&gt;Local Kubernetes Clusters with Minikube&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-minikube"&gt;What is minikube?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aws"&gt;AWS&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#installing-python-prerequisites"&gt;Installing Python Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-byok8s"&gt;Installing byok8s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#starting-a-k8s-cluster-with-minikube"&gt;Starting a k8s cluster with minikube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixing-dns-issues-with-aws"&gt;Fixing DNS issues with AWS&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-problem"&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-fix"&gt;The Fix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#aws-byok8s-workflow"&gt;AWS + byok8s Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#travis"&gt;Travis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#travisyml"&gt;.travis.yml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#end-product-byok8s"&gt;End Product: byok8s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="recap-workflows-as-executables"&gt;Recap: Workflows as Executables&lt;/h1&gt;
&lt;p&gt;In our previous blog post, &lt;a href="https://charlesreid1.github.io/building-snakemake-command-line-wrappers.html"&gt;Building Snakemake Command Line Wrappers&lt;/a&gt;,
we covered some approaches to making Snakemake
workflows into â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; These ideas are implemented in the repository
&lt;a href="https://github.com/charlesreid/2019-snakemake-byok8s"&gt;charlesreid1/2019-snakemake-byok8s&lt;/a&gt;.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#recap-workflows-as-executables"&gt;Recap: Workflows as Executables&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2018-snakemake-cli"&gt;2018-snakemake-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2019-snakemake-cli"&gt;2019-snakemake-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2019-snakemake-byok8s"&gt;2019-snakemake-byok8s&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#overview-of-2019-snakemake-byok8s"&gt;Overview of 2019-snakemake-byok8s&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#cloud-scale-kubernetes-k8s"&gt;Cloud + Scale = Kubernetes (k8s)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#snakemake-k8s-support"&gt;Snakemake k8s Support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#modifying-the-cli"&gt;Modifying the CLI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#namespaces"&gt;Namespaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-flags"&gt;Adding flags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#local-kubernetes-clusters-with-minikube"&gt;Local Kubernetes Clusters with Minikube&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-minikube"&gt;What is minikube?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aws"&gt;AWS&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#installing-python-prerequisites"&gt;Installing Python Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-byok8s"&gt;Installing byok8s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#starting-a-k8s-cluster-with-minikube"&gt;Starting a k8s cluster with minikube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#fixing-dns-issues-with-aws"&gt;Fixing DNS issues with AWS&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-problem"&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-fix"&gt;The Fix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#aws-byok8s-workflow"&gt;AWS + byok8s Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#travis"&gt;Travis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#travisyml"&gt;.travis.yml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#end-product-byok8s"&gt;End Product: byok8s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="recap-workflows-as-executables"&gt;Recap: Workflows as Executables&lt;/h1&gt;
&lt;p&gt;In our previous blog post, &lt;a href="https://charlesreid1.github.io/building-snakemake-command-line-wrappers.html"&gt;Building Snakemake Command Line Wrappers&lt;/a&gt;,
we covered some approaches to making Snakemake
workflows into executables that can be run as
command line utilities.&lt;/p&gt;
&lt;p&gt;In this post, we extend those ideas to Snakemake workflows
that run on Kubernetes clusters.&lt;/p&gt;
&lt;h2 id="2018-snakemake-cli"&gt;2018-snakemake-cli&lt;/h2&gt;
&lt;p&gt;To recap, back in March 2018 Titus Brown wrote a blog post titled
&lt;a href="http://ivory.idyll.org/blog/2018-workflows-applications.html"&gt;Pydoit, snakemake, and workflows-as-applications&lt;/a&gt;
in which he implemented a proof-of-concept command
line utility wrapping the Snakemake API to create
an executable Snakemake workflow.&lt;/p&gt;
&lt;p&gt;The end result was a command line utility that could
be run like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./run &amp;lt;workflow-config&amp;gt; &amp;lt;workflow-params&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Relevant code is in &lt;a href="https://github.com/ctb/2018-snakemake-cli"&gt;ctb/2018-snakemake-cli&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="2019"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="2019-snakemake-cli"&gt;2019-snakemake-cli&lt;/h2&gt;
&lt;p&gt;In our previous blog post, &lt;a href="https://charlesreid1.github.io/building-snakemake-command-line-wrappers.html"&gt;Building Snakemake Command Line Wrappers&lt;/a&gt;,
we extended this idea to create a bundled executable
command line utility that could be installed with
&lt;code&gt;setup.py&lt;/code&gt; and run from a working directory. We also
demonstrated a method of writing tests for the 
Snakemake workflow and running those tests with
Travis CI.&lt;/p&gt;
&lt;p&gt;We packaged the Snakefile with the command line utility,
but the approach is flexible and can be modified to
use a user-provided Snakemake workflow or Snakefile.&lt;/p&gt;
&lt;p&gt;The end result was a command line utility called
&lt;code&gt;bananas&lt;/code&gt; that could be installed and run like
the &lt;code&gt;run&lt;/code&gt; wrapper above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bananas &amp;lt;workflow-config&amp;gt; &amp;lt;workflow-params&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Relevant code is in &lt;a href="https://github.com/charlesreid1/2019-snakemake-cli"&gt;charlesreid1/2019-snakemake-cli&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="byok8s"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="2019-snakemake-byok8s"&gt;2019-snakemake-byok8s&lt;/h2&gt;
&lt;p&gt;The next logical step in bundling workflows was to take
advantage of Snakemake's ability to run workflows across
distributed systems.&lt;/p&gt;
&lt;p&gt;Specifically, we wanted to modify the command line utility
above to run the workflow on a user-provided Kubernetes
cluster, instead of running the workflow locally.&lt;/p&gt;
&lt;p&gt;The result is &lt;a href="https://github.com/charlesreid1/2019-snakemake-byok8s"&gt;2019-snakemake-byok8s&lt;/a&gt;,
a command line utility that can be installed with
a &lt;code&gt;setup.py&lt;/code&gt; and that launches a Snakemake workflow 
on a user-provided Kubernetes cluster. Furthermore,
we demonstrate how to use minikube to run a local
Kubernetes cluster to test Snakemake workflows on
Kubernetes clusters.&lt;/p&gt;
&lt;p&gt;Here's what it looks like in practice:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Get byok8s
git clone https://github.com/charlesreid1/2019-snakemake-byok8s.git
cd ~/2019-snakemake-byok8s

# Create a virtual environment
virtualenv vp
vp/bin/actiavte

# Install byok8s
pip install -r requirements.txt
python setup.py build install

# Create virtual k8s cluster
minikube start

# Run the workflow on the k8s cluster
cd /path/to/workflow/
byok8s my-workflowfile my-paramsfile --s3-bucket=my-bucket

# Clean up the virtual k8s cluster
minikube stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We cover the details below.&lt;/p&gt;
&lt;h1 id="overview-of-2019-snakemake-byok8s"&gt;Overview of 2019-snakemake-byok8s&lt;/h1&gt;
&lt;h2 id="cloud-scale-kubernetes-k8s"&gt;Cloud + Scale = Kubernetes (k8s)&lt;/h2&gt;
&lt;p&gt;First, why kubernetes (k8s)?&lt;/p&gt;
&lt;p&gt;To scale Snakemake workflows to multiple compute nodes,
it is not enough to just give Snakemake a pile of
compute nodes and a way to remotely connect to each.
Snakemake requires the compute nodes to have a 
controller and a job submission system.&lt;/p&gt;
&lt;p&gt;When using cloud computing platforms like GCP (Google 
Cloud Platform) or AWS (Amazon Web Services),
k8s is a simple and popular way to orchestrate
multiple compute nodes (support for Docker images
is also baked directly into k8s).&lt;/p&gt;
&lt;h2 id="snakemake-k8s-support"&gt;Snakemake k8s Support&lt;/h2&gt;
&lt;p&gt;Snakemake has built-in support for k8s, making
the combination a logical choice for running 
Snakemake workflows at scale in the cloud. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;minikube&lt;/code&gt; tool, which we will cover later
in this blog post, makes it easy to run a local
virtual k8s cluster for testing purposes, and
even makes it possible to run k8s tests using
Travis CI.&lt;/p&gt;
&lt;p&gt;Snakemake only requires the &lt;code&gt;--kubernetes&lt;/code&gt; flag,
and an optional namespace, to connect to
the k8s cluster. (Under the hood, Snakemake
uses the Kubernetes Python API to connect
to the cluster and launch jobs.)&lt;/p&gt;
&lt;p&gt;If you can run &lt;code&gt;kubectl&lt;/code&gt; from a computer
to control the Kubernetes cluster, you can
run a Snakemake workflow on that cluster.&lt;/p&gt;
&lt;p&gt;Let's get into the changes required in the Python code.&lt;/p&gt;
&lt;h1 id="modifying-the-cli"&gt;Modifying the CLI&lt;/h1&gt;
&lt;p&gt;In our &lt;a href="https://charlesreid1.github.io/building-snakemake-command-line-wrappers.html"&gt;prior post&lt;/a&gt;
covering &lt;a href="https://github.com/charlesreid1/2019-snakemake-cli"&gt;charlesreid1/2019-snakemake-cli&lt;/a&gt;,
we showed how to create a command line utility
using the &lt;code&gt;cli/&lt;/code&gt; directory for the command line
interface package, and specifying it is a cli
entrypoint in &lt;code&gt;setup.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cli/
â”œâ”€â”€ Snakefile
â”œâ”€â”€ __init__.py
â””â”€â”€ command.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the relevant bit from &lt;code&gt;setup.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bananas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;[console_scripts]&lt;/span&gt;
&lt;span class="si"&gt;{program}&lt;/span&gt;&lt;span class="s2"&gt; = cli.command:main&lt;/span&gt;
&lt;span class="s2"&gt;      &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_program&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We want our new command line utility, &lt;code&gt;byok8s&lt;/code&gt;, to work
the same way, so we can do a &lt;code&gt;s/byok8s/bananas/g&lt;/code&gt;
across the package.&lt;/p&gt;
&lt;p&gt;The only change required happens in the file
&lt;code&gt;command.py&lt;/code&gt;, where the Snakemake API call 
happens.&lt;/p&gt;
&lt;h2 id="namespaces"&gt;Namespaces&lt;/h2&gt;
&lt;p&gt;Checking the &lt;a href="https://snakemake.readthedocs.io/en/stable/api_reference/snakemake.html"&gt;Snakemake API documentation&lt;/a&gt;,
we can see that the API has a &lt;code&gt;kubernetes&lt;/code&gt; option:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;kubernetes&lt;/strong&gt; &lt;em&gt;(str)&lt;/em&gt; â€“ submit jobs to kubernetes,
using the given namespace.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;so &lt;code&gt;command.py&lt;/code&gt; should modify the Snakmake API call
accordingly, adding a kubernetes namespace.
This is a parameter the user usually won't need
to provide (&lt;code&gt;default&lt;/code&gt; is the typical namespace
we want to use) but we added a &lt;code&gt;-k&lt;/code&gt; argument
to the ArgParser to allow the user to specify
the Kubernetes namespace name. By default
the Kubernetes namespace used is &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="adding-flags"&gt;Adding flags&lt;/h2&gt;
&lt;p&gt;We add and modify some flags to make the workflow
more flexible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The user now provides the Snakefile, which is
  called &lt;code&gt;Snakefile&lt;/code&gt; in the current working directory
  by default but can be specified with the &lt;code&gt;--snakefile&lt;/code&gt;
  or &lt;code&gt;-s&lt;/code&gt; flag&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user provides the k8s namespace using the
  &lt;code&gt;--k8s-namespace&lt;/code&gt; or &lt;code&gt;-k&lt;/code&gt; flag&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user provides the name of an S3 bucket for
  Snakemake worker nodes to use for I/O using the
  &lt;code&gt;--s3-bucket&lt;/code&gt; flag&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, the user is also required to provide their
AWS credentials to access the S3 bucket, via two
environment variables that Snakemake passes through
to the Kubernetes worker nodes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For Travis CI testing, these environment variables
can be set in the repository settings on the Travis
website once Travis CI has been enabled.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.github.io/2019-snakemake-byok8s/travis_tests/"&gt;https://charlesreid1.github.io/2019-snakemake-byok8s/travis_tests/&lt;/a&gt;
for details.&lt;/p&gt;
&lt;h1 id="local-kubernetes-clusters-with-minikube"&gt;Local Kubernetes Clusters with Minikube&lt;/h1&gt;
&lt;h2 id="what-is-minikube"&gt;What is minikube?&lt;/h2&gt;
&lt;p&gt;Minikube is a Go program that allows users to simulate
a single-node kubernetes cluster using a virtual machine.
This is useful for local testing of Kubernetes workflows,
as it does not require setting up or tearing down cloud
infrastructure, or long waits for remote resources to
become ready.&lt;/p&gt;
&lt;p&gt;We cover two ways to use it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Installing and running a minikube virtual kubernetes cluster on
   AWS (for development and testing of Snakemake + kubernetes
   workflows)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Running a minikube cluster on a Travis CI worker node
   to enable us to &lt;em&gt;test&lt;/em&gt; Snakemake + kubernetes workflows.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="aws"&gt;AWS&lt;/h2&gt;
&lt;p&gt;Using Minikube from an AWS EC2 compute node comes 
with two hangups.&lt;/p&gt;
&lt;p&gt;The first is that AWS nodes are virtual machines,
and you can't run virtual machines within virtual
machines, so it is not possible to use minikube's
normal VirtualBox mode, which creates a kubernetes
cluster using a virutal machine.&lt;/p&gt;
&lt;p&gt;Instead, we must use minikube's native driver, meaning
minikube uses docker directly. This is tricky for several
reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we can't bind-mount a local directory into the
  kubernetes cluster&lt;/li&gt;
&lt;li&gt;the minikube cluster must be run with sudo
  privileges, which means permissions can be
  a problem&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second hangup with minikube on AWS nodes is that the
DNS settings of AWS nodes are copied into the Kubernetes
containers, including the kubernetes system's DNS service
container. Unfortunately, the AWS node's DNS settings are
not valid in the kubernetes cluster, so the DNS container
crashes, and no container in the kubernetes cluster can
reach the outside world.  This must be fixed with a
custom config file (provided with byok8s; details below).&lt;/p&gt;
&lt;h3 id="installing-python-prerequisites"&gt;Installing Python Prerequisites&lt;/h3&gt;
&lt;p&gt;To use byok8s from a fresh Ubuntu AWS node
(tested with Ubuntu 16.04 (xenial) and 18.04
(bionic)), you will want to install a version
of conda; we recommend using pyenv and miniconda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl https://pyenv.run | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Restart your shell and install miniconda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv update
pyenv install miniconda3-4.3.30
pyenv global miniconda3-4.3.30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will also need the virtualenv package to
set up a virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="installing-byok8s"&gt;Installing byok8s&lt;/h3&gt;
&lt;p&gt;Start by cloning the repo and installing byok8s:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cd 
git clone https://github.com/charlesreid1/2019-snakemake-byok8s.git
cd ~/2019-snakemake-byok8s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, you'll create a virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;virtualenv vp
source vp/bin/activate

pip install -r requirements.txt
python setup.py build install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you should be ready to rock:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;which byok8s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="starting-a-k8s-cluster-with-minikube"&gt;Starting a k8s cluster with minikube&lt;/h3&gt;
&lt;p&gt;Install minikube:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
  &amp;amp;&amp;amp; sudo install minikube-linux-amd64 /usr/local/bin/minikube
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you're ready to start a minikube k8s
cluster on your AWS node! Start a k8s cluster
as root with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo minikube start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;minikube start&lt;/code&gt; command will print
some commands for you to run to fix permissions -
it is importat you run them!&lt;/p&gt;
&lt;p&gt;Tear down the cluster with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo minikube stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While the k8s cluster is running, you can control
it and interact with it like a normal k8s cluster
using &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, as-is, the cluster's DNS settings are broken!
We need to fix them before running.&lt;/p&gt;
&lt;h2 id="fixing-dns-issues-with-aws"&gt;Fixing DNS issues with AWS&lt;/h2&gt;
&lt;p&gt;We mentioned a second hangup with AWS was with the
DNS settings. &lt;/p&gt;
&lt;p&gt;The problem is with &lt;code&gt;/etc/resolv.conf&lt;/code&gt; on the
AWS host node. It is set up for AWS's internal 
cloud network routing, but this is copied
into the CoreDNS container, which is the
kube-system container that manages DNS requests
from all k8s containers. The settings from the
AWS host confuse the DNS container, and it cannot
route any DNS requests.&lt;/p&gt;
&lt;h3 id="the-problem"&gt;The Problem&lt;/h3&gt;
&lt;p&gt;If you're having the problem, you will see
something like this with &lt;code&gt;kubectl&lt;/code&gt;, where the
coredns containers are in a &lt;code&gt;CrashLoopBackOff&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ kubectl get pods --namespace=kube-system

NAME                               READY   STATUS             RESTARTS   AGE
coredns-86c58d9df4-lvq8b           0/1     CrashLoopBackOff   5          5m17s
coredns-86c58d9df4-pr52t           0/1     CrashLoopBackOff   5          5m17s
etcd-minikube                      1/1     Running            15         4h43m
kube-addon-manager-minikube        1/1     Running            16         4h43m
kube-apiserver-minikube            1/1     Running            15         4h43m
kube-controller-manager-minikube   1/1     Running            15         4h43m
kube-proxy-sq77h                   1/1     Running            3          4h44m
kube-scheduler-minikube            1/1     Running            15         4h43m
storage-provisioner                1/1     Running            6          4h44m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will cause all Snakemake jobs to fail with a name
resolution failure when it tries to write its output
files to the AWS S3 bucket:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ kubectl logs snakejob-c71fba38-f64b-5803-915d-933ae273d7a4

Building DAG of jobs...
Using shell: /bin/bash
Provided cores: 4
Rules claiming more threads will be scaled down.
Job counts:
    count   jobs
    1   target1
    1

[Thu Jan 24 00:06:03 2019]
rule target1:
    output: cmr-smk-0123/alpha.txt
    jobid: 0

echo alpha blue &amp;gt; cmr-smk-0123/alpha.txt
Traceback (most recent call last):
  File &amp;quot;/opt/conda/lib/python3.7/site-packages/urllib3/connection.py&amp;quot;, line 171, in _new_conn
    (self._dns_host, self.port), self.timeout, **extra_kw)
  File &amp;quot;/opt/conda/lib/python3.7/site-packages/urllib3/util/connection.py&amp;quot;, line 56, in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
  File &amp;quot;/opt/conda/lib/python3.7/socket.py&amp;quot;, line 748, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno -3] Temporary failure in name resolution
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the kubernetes log for the CoreDNS container&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ kubectl logs --namespace=kube-system coredns-86c58d9df4-lvq8b

.:53
2019/01/25 14:54:48 [INFO] CoreDNS-1.2.2
2019/01/25 14:54:48 [INFO] linux/amd64, go1.11, fc62f9c
CoreDNS-1.2.2
linux/amd64, go1.11, eb51e8b
2019/01/25 14:54:48 [INFO] plugin/reload: Running configuration MD5 = 486384b491cef6cb69c1f57a02087373
2019/01/25 14:54:48 [FATAL] plugin/loop: Seen &amp;quot;HINFO IN 9273194449250285441.798654804648663468.&amp;quot; more than twice, loop detected
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Basically, the AWS node's DNS name server settings cause 
an infinite DNS loop to be set up.&lt;/p&gt;
&lt;h3 id="the-fix"&gt;The Fix&lt;/h3&gt;
&lt;p&gt;Fixing this problem requires manually setting the DNS 
name servers inside the CoreDNS container to Google's
public DNS servers, &lt;code&gt;8.8.8.8&lt;/code&gt; and &lt;code&gt;8.8.4.4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To apply this fix, we use a YAML configuration file to patch the
CoreDNS container image.&lt;/p&gt;
&lt;p&gt;Hat tip to &lt;a href="https://github.com/kubernetes/minikube/issues/2027"&gt;this long Github issue&lt;/a&gt;
in the minikube Github repo, and specifically 
&lt;a href="https://github.com/kubernetes/minikube/issues/2027#issuecomment-381574807"&gt;this comment&lt;/a&gt;
by Github user &lt;a href="https://github.com/jgoclawski"&gt;jgoclawski&lt;/a&gt;.
and also &lt;a href="https://github.com/kubernetes/minikube/issues/2027#issuecomment-419733791"&gt;this comment&lt;/a&gt;
by Github user &lt;a href="https://github.com/bw2"&gt;bw2&lt;/a&gt;.
(Note that neither of these quite solve the problem -
jgoclawski's solution is for kube-dns, not CoreDNS,
and bw2's YAML is not valid, but both got me most
of the way to a solution.)&lt;/p&gt;
&lt;p&gt;Here is the YAML file (also in the 2019-snakemake-byok8s
repo here: &lt;a href="https://github.com/charlesreid1/2019-snakemake-byok8s/blob/master/test/fixcoredns.yml"&gt;https://github.com/charlesreid1/2019-snakemake-byok8s/blob/master/test/fixcoredns.yml&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;fixcoredns.yml&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ConfigMap&lt;/span&gt;
&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;Corefile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
    &lt;span class="no"&gt;.:53 {&lt;/span&gt;
        &lt;span class="no"&gt;errors&lt;/span&gt;
        &lt;span class="no"&gt;health&lt;/span&gt;
        &lt;span class="no"&gt;kubernetes cluster.local in-addr.arpa ip6.arpa {&lt;/span&gt;
           &lt;span class="no"&gt;upstream 8.8.8.8 8.8.4.4&lt;/span&gt;
           &lt;span class="no"&gt;pods insecure&lt;/span&gt;
           &lt;span class="no"&gt;fallthrough in-addr.arpa ip6.arpa&lt;/span&gt;
        &lt;span class="no"&gt;}&lt;/span&gt;
        &lt;span class="no"&gt;proxy .  8.8.8.8 8.8.4.4&lt;/span&gt;
        &lt;span class="no"&gt;cache 30&lt;/span&gt;
        &lt;span class="no"&gt;reload&lt;/span&gt;
    &lt;span class="no"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;creationTimestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2019-01-25T22:55:15Z&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;coredns&lt;/span&gt;
  &lt;span class="nt"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;kube-system&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(&lt;strong&gt;NOTE:&lt;/strong&gt; There is also a &lt;code&gt;fixkubedns.yml&lt;/code&gt; if you are using
an older Kubernetes version that uses kube-dns instead of
CoreDNS.)&lt;/p&gt;
&lt;p&gt;To tell the k8s cluster to use this image
when it creates a CoreDNS container, run
this kubectl command &lt;em&gt;while the cluster is
running&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl apply -f fixcoredns.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Last but not least, delete all &lt;code&gt;kube-system&lt;/code&gt; containers
and let Kubernetes regenerate them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl delete --all pods --namespace kube-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The pods will regenerate quickly, and you can
check to confirm that the CoreDNS container
is no longer in the &lt;code&gt;CrashLoopBackOff&lt;/code&gt; state
and is &lt;code&gt;Running&lt;/code&gt; nicely:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl get pods --namespace=kube-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is all documented in &lt;a href="https://github.com/kubernetes/minikube/issues/2027#issuecomment-457808462"&gt;this comment&lt;/a&gt;
in the same Github issue in the minikube repo
that was linked to above, &lt;a href="https://github.com/kubernetes/minikube/issues/2027"&gt;kubernetes/minikube
issue #2027: dnsmasq pod CrashLoopBackOff&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="aws-byok8s-workflow"&gt;AWS + byok8s Workflow&lt;/h2&gt;
&lt;p&gt;Now that the k8s cluster is running successfully,
run the example byok8s workflow in the &lt;code&gt;test/&lt;/code&gt; 
directory of the byok8s repository (assuming
you cloned the repo to &lt;code&gt;~/byok8s&lt;/code&gt;, and are in
the same virtual environment as before):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Return to our virtual environment
cd ~/2019-snakemake-byok8s/test/
source vp/bin/activate

# Verify k8s is running
minikube status

# Export AWS keys for Snakemake
export AWS_ACCESS_KEY_ID=&amp;quot;XXXXX&amp;quot;
export AWS_SECRET_ACCESS_KEY=&amp;quot;XXXXX&amp;quot;

# Run byok8s
byok8s workflow-alpha params-blue --s3-bucket=mah-bukkit 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The bucket you specify must be created in advance
and be writable by the account whose credentials
you are passing in via environment variables.&lt;/p&gt;
&lt;p&gt;When you do all of this, you should see the job
running, then exiting successfully:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ byok8s --s3-bucket=cmr-0123 -f workflow-alpha params-blue
--------
details!
    snakefile: /home/ubuntu/2019-snakemake-byok8s/test/Snakefile
    config: /home/ubuntu/2019-snakemake-byok8s/test/workflow-alpha.json
    params: /home/ubuntu/2019-snakemake-byok8s/test/params-blue.json
    target: target1
    k8s namespace: default
--------
Building DAG of jobs...
Using shell: /bin/bash
Provided cores: 1
Rules claiming more threads will be scaled down.
Job counts:
    count   jobs
    1   target1
    1
Resources before job selection: {&amp;#39;_cores&amp;#39;: 1, &amp;#39;_nodes&amp;#39;: 9223372036854775807}
Ready jobs (1):
    target1
Selected jobs (1):
    target1
Resources after job selection: {&amp;#39;_cores&amp;#39;: 0, &amp;#39;_nodes&amp;#39;: 9223372036854775806}

[Mon Jan 28 18:06:08 2019]
rule target1:
    output: cmr-0123/alpha.txt
    jobid: 0

echo alpha blue &amp;gt; cmr-0123/alpha.txt
Get status with:
kubectl describe pod snakejob-e585b53f-f9d5-5142-ac50-af5a0d532e85
kubectl logs snakejob-e585b53f-f9d5-5142-ac50-af5a0d532e85
Checking status for pod snakejob-e585b53f-f9d5-5142-ac50-af5a0d532e85
[Mon Jan 28 18:06:18 2019]
Finished job 0.
1 of 1 steps (100%) done
Complete log: /home/ubuntu/2019-snakemake-byok8s/test/.snakemake/log/2019-01-28T180607.988313.snakemake.log
unlocking
removing lock
removing lock
removed all locks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Woo hoo! You've successfully run a Snakemake workflow 
on a virtual Kubernetes cluster!&lt;/p&gt;
&lt;h2 id="travis"&gt;Travis&lt;/h2&gt;
&lt;p&gt;Like running minikube on an AWS node, running minikube on Travis workers
also suffers from DNS issues. Fortunately, Github user 
&lt;a href="https://github.com/LiliC"&gt;LiliC&lt;/a&gt; worked out how to run
minikube on Travis, and importantly, &lt;em&gt;did so for multiple versions&lt;/em&gt;
of minikube and kubernetes.&lt;/p&gt;
&lt;p&gt;The relevant &lt;code&gt;.travis.yml&lt;/code&gt; file is available in the 
&lt;a href="https://github.com/LiliC/travis-minikube"&gt;LiliC/travis-minikube&lt;/a&gt;
repo on Github.&lt;/p&gt;
&lt;p&gt;We ended up using the &lt;a href="https://github.com/LiliC/travis-minikube/tree/minikube-30-kube-1.12"&gt;&lt;code&gt;minikube-30-kube-1.12&lt;/code&gt;&lt;/a&gt;
branch of LiliC/travis-minikube, which used the most up-to-date
version of minikube and kubernetes available in that repo. The &lt;code&gt;.travis.yml&lt;/code&gt; file
provided by LiliC on that branch is 
&lt;a href="https://github.com/LiliC/travis-minikube/blob/minikube-30-kube-1.12/.travis.yml"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The example script by LiliC provided 90% of the legwork (thanks!!!),
and we only needed to modify a few lines of LiliC's Travis file
(which launches a redis container using kubectl)
to use Snakemake (launched via byok8s) instead.&lt;/p&gt;
&lt;h2 id="travisyml"&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Here is the final &lt;code&gt;.travis.yml&lt;/code&gt; file, which has explanatory comments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Modified from original:&lt;/span&gt;
&lt;span class="c1"&gt;# https://raw.githubusercontent.com/LiliC/travis-minikube/minikube-30-kube-1.12/.travis.yml&lt;/span&gt;

&lt;span class="c1"&gt;# byok8s and Snakemake both require Python,&lt;/span&gt;
&lt;span class="c1"&gt;# so we make this Travis CI test Python-based.&lt;/span&gt;
&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3.6&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Running minikube via travis requires sudo&lt;/span&gt;
&lt;span class="nt"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;

&lt;span class="c1"&gt;# We need the systemd for the kubeadm and it&amp;#39;s default from 16.04+&lt;/span&gt;
&lt;span class="nt"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;xenial&lt;/span&gt;

&lt;span class="c1"&gt;# This moves Kubernetes specific config files.&lt;/span&gt;
&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;CHANGE_MINIKUBE_NONE_USER=true&lt;/span&gt;

&lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="c1"&gt;# Install byok8s requirements (snakemake, python-kubernetes)&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;
&lt;span class="c1"&gt;# Install byok8s cli tool&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python setup.py build install&lt;/span&gt;

&lt;span class="nt"&gt;before_script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="c1"&gt;# Do everything from test/&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cd test&lt;/span&gt;
&lt;span class="c1"&gt;# Make root mounted as rshared to fix kube-dns issues.&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo mount --make-rshared /&lt;/span&gt;
&lt;span class="c1"&gt;# Download kubectl, which is a requirement for using minikube.&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.12.0/bin/linux/amd64/kubectl &amp;amp;&amp;amp; chmod +x kubectl &amp;amp;&amp;amp; sudo mv kubectl /usr/local/bin/&lt;/span&gt;
&lt;span class="c1"&gt;# Download minikube.&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.30.0/minikube-linux-amd64 &amp;amp;&amp;amp; chmod +x minikube &amp;amp;&amp;amp; sudo mv minikube /usr/local/bin/&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo minikube start --vm-driver=none --bootstrapper=kubeadm --kubernetes-version=v1.12.0&lt;/span&gt;
&lt;span class="c1"&gt;# Fix the kubectl context, as it&amp;#39;s often stale.&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;minikube update-context&lt;/span&gt;
&lt;span class="c1"&gt;# Wait for Kubernetes to be up and ready.&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;JSONPATH=&amp;#39;{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}&amp;#39;; until kubectl get nodes -o jsonpath=&amp;quot;$JSONPATH&amp;quot; 2&amp;gt;&amp;amp;1 | grep -q &amp;quot;Ready=True&amp;quot;; do sleep 1; done&lt;/span&gt;

&lt;span class="c1"&gt;################&lt;/span&gt;
&lt;span class="c1"&gt;## easy test&lt;/span&gt;
&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;kubectl cluster-info&lt;/span&gt;
&lt;span class="c1"&gt;# Verify kube-addon-manager.&lt;/span&gt;
&lt;span class="c1"&gt;# kube-addon-manager is responsible for managing other kubernetes components, such as kube-dns, dashboard, storage-provisioner..&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;JSONPATH=&amp;#39;{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}&amp;#39;; until kubectl -n kube-system get pods -lcomponent=kube-addon-manager -o jsonpath=&amp;quot;$JSONPATH&amp;quot; 2&amp;gt;&amp;amp;1 | grep -q &amp;quot;Ready=True&amp;quot;; do sleep 1;echo &amp;quot;waiting for kube-addon-manager to be available&amp;quot;; kubectl get pods --all-namespaces; done&lt;/span&gt;
&lt;span class="c1"&gt;# Wait for kube-dns to be ready.&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;JSONPATH=&amp;#39;{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}&amp;#39;; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath=&amp;quot;$JSONPATH&amp;quot; 2&amp;gt;&amp;amp;1 | grep -q &amp;quot;Ready=True&amp;quot;; do sleep 1;echo &amp;quot;waiting for kube-dns to be available&amp;quot;; kubectl get pods --all-namespaces; done&lt;/span&gt;

&lt;span class="c1"&gt;################ &lt;/span&gt;
&lt;span class="c1"&gt;## hard test&lt;/span&gt;
&lt;span class="c1"&gt;# run byok8s workflow on the k8s cluster&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;byok8s --s3-bucket=cmr-0123 -f workflow-alpha params-blue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="end-product-byok8s"&gt;End Product: byok8s&lt;/h1&gt;
&lt;p&gt;The final byok8s package can be found in the
&lt;a href="https://github.com/charlesreid1/2019-snakemake-byok8s"&gt;charlesreid1/2019-snakemake-byok8s&lt;/a&gt;
repository on Github.&lt;/p&gt;
&lt;p&gt;You can find documentation for 2019-snakemake-byok8s 
here: &lt;a href="https://charlesreid1.github.io/2019-snakemake-byok8s/"&gt;https://charlesreid1.github.io/2019-snakemake-byok8s/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To return to our quick start, here is what running
byok8s end-to-end on a minikube kubernetes cluster 
on an AWS node looks like (slightly modified from
the intro of our post):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Install minikube
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
  &amp;amp;&amp;amp; sudo install minikube-linux-amd64 /usr/local/bin/minikube

# Get byok8s
git clone https://github.com/charlesreid1/2019-snakemake-byok8s.git
cd ~/2019-snakemake-byok8s

# Create a virtual environment
virtualenv vp
vp/bin/actiavte

# Install byok8s
pip install -r requirements.txt
python setup.py build install

# Create virtual k8s cluster
sudo minikube start

# Fix CoreDNS
kubectl apply -f fixcoredns.yml
kubectl delete --all pods --namespace kube-system

# Wait for kube-system to respawn
kubectl get pods --namespace=kube-system

# Run the workflow on the k8s cluster
cd test/
byok8s workflow-alpha params-blue --s3-bucket=mah-bukkit 

# Clean up the virtual k8s cluster
sudo minikube stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="documentation"&gt;Documentation&lt;/h1&gt;
&lt;p&gt;You can find documentation for 2019-snakemake-byok8s 
here: &lt;a href="https://charlesreid1.github.io/2019-snakemake-byok8s/"&gt;https://charlesreid1.github.io/2019-snakemake-byok8s/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The documentation covers a quick start on AWS nodes, 
similar to what is covered above, as well as more information
about running byok8s on other types of Kubernetes clusters
(e.g., AWS, Google Cloud, and Digital Ocean).&lt;/p&gt;
&lt;h1 id="next-steps"&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;Last year we were working on implementing metagenomic pipelines for
shotgun sequencing data as part of the &lt;a href="https://github.com/dahak-metagenomics"&gt;dahak-metagenomics&lt;/a&gt;
project. We implemented several Snakemake workflows
in the &lt;a href="https://github.com/dahak-metagenomics/dahak"&gt;dahak&lt;/a&gt;
repo, and began (but never completed) work on a command line utility
to run these workflows called &lt;a href="https://github.com/dahak-metagenomics/dahak-taco"&gt;dahak-taco&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our next major goal is to reboot dahak-taco and redesign it to run metagenomic
workflows from dahak on Kubernetes clusters, similar to the way byok8s works.&lt;/p&gt;
&lt;p&gt;Stay tuned for more!&lt;/p&gt;</content><category term="Snakemake"></category><category term="python"></category><category term="bioinformatics"></category><category term="workflows"></category><category term="pipelines"></category><category term="snakemake"></category><category term="travis"></category><category term="kubernetes"></category><category term="minikube"></category></entry><entry><title>Building Snakemake Command Line Wrappers for Workflows</title><link href="https://charlesreid1.github.io/building-snakemake-command-line-wrappers-for-workflows.html" rel="alternate"></link><published>2019-01-21T22:00:00-08:00</published><updated>2019-01-21T22:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-01-21:/building-snakemake-command-line-wrappers-for-workflows.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; These ideas are implemented in the repository
&lt;a href="https://github.com/charlesreid/2019-snakemake-cli"&gt;charlesreid1/2019-snakemake-cli&lt;/a&gt;.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#basic-idea-wrapping-snakemake-api-calls"&gt;Basic Idea: Wrapping Snakemake API Calls&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2018-snakemake-cli"&gt;2018-snakemake-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2019-snakemake-cli"&gt;2019-snakemake-cli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#turning-executables-into-packages"&gt;Turning Executables into Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#end-result-using-bananas"&gt;End Result: Using bananas&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#quick-start-installing"&gt;Quick Start: Installing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quick-start-running-tests"&gt;Quick Start: Running Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quick-start-running-examples"&gt;Quick Start: Running Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-travis-ci-tests"&gt;Adding Travis CI Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-repository"&gt;Final Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="basic-idea-wrapping-snakemake-api-calls"&gt;Basic Idea: Wrapping Snakemake API Calls&lt;/h1&gt;
&lt;h2 id="2018-snakemake-cli"&gt;2018-snakemake-cli&lt;/h2&gt;
&lt;p&gt;This blog post covers the implementation of an idea
that was originally explored in a blog post from 
Titus Brown, &lt;a href="http://ivory.idyll.org/blog/2018-workflows-applications.html"&gt;Pydoit, snakemake, and workflows-as-applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That blog post implemented a basic command line
wrapper around the Snakemake API to demonstrate
how a Snakemake workflow could be â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; These ideas are implemented in the repository
&lt;a href="https://github.com/charlesreid/2019-snakemake-cli"&gt;charlesreid1/2019-snakemake-cli&lt;/a&gt;.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#basic-idea-wrapping-snakemake-api-calls"&gt;Basic Idea: Wrapping Snakemake API Calls&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2018-snakemake-cli"&gt;2018-snakemake-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2019-snakemake-cli"&gt;2019-snakemake-cli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#turning-executables-into-packages"&gt;Turning Executables into Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#end-result-using-bananas"&gt;End Result: Using bananas&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#quick-start-installing"&gt;Quick Start: Installing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quick-start-running-tests"&gt;Quick Start: Running Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quick-start-running-examples"&gt;Quick Start: Running Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-travis-ci-tests"&gt;Adding Travis CI Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-repository"&gt;Final Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="basic-idea-wrapping-snakemake-api-calls"&gt;Basic Idea: Wrapping Snakemake API Calls&lt;/h1&gt;
&lt;h2 id="2018-snakemake-cli"&gt;2018-snakemake-cli&lt;/h2&gt;
&lt;p&gt;This blog post covers the implementation of an idea
that was originally explored in a blog post from 
Titus Brown, &lt;a href="http://ivory.idyll.org/blog/2018-workflows-applications.html"&gt;Pydoit, snakemake, and workflows-as-applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That blog post implemented a basic command line
wrapper around the Snakemake API to demonstrate
how a Snakemake workflow could be turned into
an executable.&lt;/p&gt;
&lt;p&gt;Relevant code is in &lt;a href="https://github.com/ctb/2018-snakemake-cli"&gt;ctb/2018-snakemake-cli&lt;/a&gt;,
but the basic idea is to implement a command line
utility that takes two orthogonal sets of inputs:
a workflow configuration file, and a parameter set.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./run &amp;lt;workflow-config&amp;gt; &amp;lt;workflow-params&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://github.com/ctb/2018-snakemake-cli/blob/master/run"&gt;run script&lt;/a&gt;
is a Python executable file that parses arguments
from the user.&lt;/p&gt;
&lt;p&gt;Here is the main entrypoint of &lt;code&gt;run&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#! /usr/bin/env python&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Execution script for snakemake workflows.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;snakemake&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;thisdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# &lt;/span&gt;
    &lt;span class="c1"&gt;# ...see below...&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;run snakemake workflows&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;run &amp;lt;workflow&amp;gt; &amp;lt;parameters&amp;gt; [&amp;lt;target&amp;gt;]&lt;/span&gt;
&lt;span class="s1"&gt;Run snakemake workflows, using the given workflow name &amp;amp; parameters file.&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;workflowfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;paramsfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--dry-run&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;main()&lt;/code&gt; method uses the &lt;code&gt;os&lt;/code&gt; module to look for
the Snakefile, the config file, and the params file,
then makes a call to the Snakemake API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# ...find the snakefile...&lt;/span&gt;
    &lt;span class="c1"&gt;# ...find the config file...&lt;/span&gt;
    &lt;span class="c1"&gt;# ...find the params file...&lt;/span&gt;
    &lt;span class="c1"&gt;# &lt;/span&gt;

    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;workflow_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;workflow_target&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--------&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;details!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;snakefile: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snakefile&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;config: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workflowfile&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;params: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramsfile&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;target: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--------&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# run!!&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snakemake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;snakemake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snakefile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                 &lt;span class="n"&gt;configfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;paramsfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
                                 &lt;span class="n"&gt;printshellcmds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;dryrun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dry_run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                 &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# translate &amp;quot;success&amp;quot; into shell exit code of 0&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This call uses the provided parameters file to set
the Snakemake configuration dictionary, but this can
be overridden with the &lt;code&gt;config&lt;/code&gt; dictionary.
Additional argparser flags can be added, and the
&lt;code&gt;config&lt;/code&gt; dictionary contents modified based on
the flags.&lt;/p&gt;
&lt;h2 id="2019-snakemake-cli"&gt;2019-snakemake-cli&lt;/h2&gt;
&lt;p&gt;We wanted to take this demo a step further, and add
a few things to it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bundle the Snakefile and command line utility as an
  installable Python package with a &lt;code&gt;setup.py&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement Travis CI tests of the Snakemake workflow.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We implemented a bundled Snakemake workflow as a 
command line tool called &lt;code&gt;bananas&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="turning-executables-into-packages"&gt;Turning Executables into Packages&lt;/h1&gt;
&lt;p&gt;We began with an executable script &lt;code&gt;run&lt;/code&gt; and wished
to turn it into an installable command line utility
called &lt;code&gt;bananas&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To do this, we moved the contents of &lt;code&gt;run&lt;/code&gt; into 
a new file &lt;code&gt;command.py&lt;/code&gt; in a new Python module 
called &lt;code&gt;cli&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cli/
â”œâ”€â”€ Snakefile
â”œâ”€â”€ __init__.py
â””â”€â”€ command.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;Snakefile&lt;/code&gt; will contain the workflow. Here is the
very simple workflow from &lt;a href="https://github.com/ctb/2018-snakemake-cli"&gt;ctb/2018-snakemake-cli&lt;/a&gt;.
The named rules are specified by the workflow configuration
file, while the parameters in &lt;code&gt;{}&lt;/code&gt; are provided through
the parameters file (or via command line flags).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cli/Snakefile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;name = config[&amp;#39;name&amp;#39;]

rule rulename1:
     input:
        &amp;quot;hello.txt&amp;quot;

rule target1:
     output:
        &amp;quot;hello.txt&amp;quot;
     shell:
        &amp;quot;echo hello {name} &amp;gt; {output}&amp;quot;

rule target2:
     output:
        &amp;quot;goodbye.txt&amp;quot;
     shell:
        &amp;quot;echo goodbye {name} &amp;gt; {output}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In this case we are bundling the Snakefile
with the command line wrapper, and writing the command
line wrapper to expect the Snakefile to be in the package.
But we can modify the command line wrapper function
(below) to look for the Snakefile in a local directory,
allowing the user to provide Snakefiles and workflows
to the command line wrapper.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;__init__.py&lt;/code&gt; file sets two important parameters:
the name of the command line utility, and the version
number:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cli/__init__.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;_program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bananas&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The contents of &lt;code&gt;command.py&lt;/code&gt; are similar to &lt;code&gt;run&lt;/code&gt; and
basically control how the command line utility runs:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cli/command.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Command line interface driver for snakemake workflows&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;snakemake&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;_program&lt;/span&gt;


&lt;span class="n"&gt;thisdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;parentdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thisdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sysargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]):&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bananas: run snakemake workflows&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;bananas &amp;lt;workflow&amp;gt; &amp;lt;parameters&amp;gt; [&amp;lt;target&amp;gt;]&lt;/span&gt;

&lt;span class="s1"&gt;bananas: run snakemake workflows, using the given workflow name &amp;amp; parameters file.&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;workflowfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;paramsfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--dry-run&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--force&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sysargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# ...find the Snakefile...&lt;/span&gt;
    &lt;span class="c1"&gt;# ...find the config file...&lt;/span&gt;
    &lt;span class="c1"&gt;# ...find the params file...&lt;/span&gt;

    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;workflow_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;workflow_target&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--------&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;details!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;snakefile: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snakefile&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;config: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;workflowfile&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;params: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramsfile&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;target: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--------&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# run bananas!!&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snakemake&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;snakemake&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snakefile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;configfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;paramsfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;printshellcmds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;dryrun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dry_run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forceall&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# translate &amp;quot;success&amp;quot; into shell exit code of 0&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last component here is to make the function
in &lt;code&gt;cli/command.py&lt;/code&gt; the entrypoint of a command line
utility called &lt;code&gt;bananas&lt;/code&gt;, which can be done via
&lt;code&gt;setup.py&lt;/code&gt;. This will put the executable &lt;code&gt;bananas&lt;/code&gt;
in the Python binaries folder when the package is
installed.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setup.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;requirements.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="c1"&gt;# Note: the _program variable is set in __init__.py.&lt;/span&gt;
&lt;span class="c1"&gt;# it determines the name of the package/final command line tool.&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cli&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;__version__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_program&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bananas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cli&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="n"&gt;test_suite&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pytest.collector&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;tests_require&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pytest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bananas command line interface&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://charlesreid1.github.io/2019-snakemake-cli&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;@charlesreid1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cmreid@ucdavis.edu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MIT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;      [console_scripts]&lt;/span&gt;
&lt;span class="s2"&gt;      &lt;/span&gt;&lt;span class="si"&gt;{program}&lt;/span&gt;&lt;span class="s2"&gt; = cli.command:main&lt;/span&gt;
&lt;span class="s2"&gt;      &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_program&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;include_package_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
      &lt;span class="n"&gt;zip_safe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, we grab the variables from &lt;code&gt;__init__.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cli&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;__version__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_program&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next we specify where our package lives, the &lt;code&gt;cli&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bananas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cli&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and finally, we specify that we want to build a command line 
interface, with the entrypoint being the &lt;code&gt;main()&lt;/code&gt; method of the
&lt;code&gt;cli/command.py&lt;/code&gt; file using &lt;code&gt;entry_points&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bananas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;[console_scripts]&lt;/span&gt;
&lt;span class="si"&gt;{program}&lt;/span&gt;&lt;span class="s2"&gt; = cli.command:main&lt;/span&gt;
&lt;span class="s2"&gt;      &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_program&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="end-result-using-bananas"&gt;End Result: Using bananas&lt;/h1&gt;
&lt;p&gt;The end result is a command line utility that bundles a
Snakemake workflow. The repository contains some tests,
so let's run through the quick start installation and
run the tests.&lt;/p&gt;
&lt;h2 id="quick-start-installing"&gt;Quick Start: Installing&lt;/h2&gt;
&lt;p&gt;Start by setting up a virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;virtualenv vp
&lt;span class="nb"&gt;source&lt;/span&gt; vp/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install required components, then install the package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install -r requirements.txt
python setup.py build install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you should see &lt;code&gt;bananas&lt;/code&gt; on your path:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;which bananas
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="quick-start-running-tests"&gt;Quick Start: Running Tests&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pytest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="quick-start-running-examples"&gt;Quick Start: Running Examples&lt;/h2&gt;
&lt;p&gt;Change to the &lt;code&gt;test/&lt;/code&gt; directory and run tests with
the example config and param files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cd test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run the hello workflow with Amy params:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rm -f hello.txt
bananas workflow-hello params-amy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run the hello workflow with Beth params:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rm -f hello.txt
bananas workflow-hello params-beth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run the goodbye workflow with Beth params:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rm -f goodbye.txt
bananas workflow-goodbye params-beth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="adding-travis-ci-tests"&gt;Adding Travis CI Tests&lt;/h1&gt;
&lt;p&gt;To test or workflow, we break down the necessary tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a Python environment&lt;/li&gt;
&lt;li&gt;Install our requirements (snakemake)&lt;/li&gt;
&lt;li&gt;Install bananas with setup.py&lt;/li&gt;
&lt;li&gt;Run pytest&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is an easy Travis file to write, following the
&lt;a href="https://docs.travis-ci.com/user/languages/python/"&gt;Travis docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3.5&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3.6&amp;quot;&lt;/span&gt;
  &lt;span class="c1"&gt;#- &amp;quot;3.7-dev&amp;quot; # fails due to datrie build failure (snakemake dependency)&lt;/span&gt;

&lt;span class="c1"&gt;# command to install dependencies&lt;/span&gt;
&lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python setup.py build install&lt;/span&gt;

&lt;span class="c1"&gt;# command to run tests&lt;/span&gt;
&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pytest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="final-repository"&gt;Final Repository&lt;/h1&gt;
&lt;p&gt;All of the code for this repository is in
&lt;a href="https://github.com/charlesreid1/2019-snakemake-cli"&gt;charlesreid1/2019-snakemake-cli&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://github.com/charlesreid1/2019-snakemake-cli/releases/tag/v2.0"&gt;v2.0 tag&lt;/a&gt;
in case there are changes to the code that are not reflected in
this blog post.&lt;/p&gt;
&lt;h1 id="next-steps"&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;This demo provides a starting point for creating executable Snakemake
workflows that are installable.&lt;/p&gt;
&lt;p&gt;A few open question and directions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bundling the Snakefile vs. user-provided Snakefles&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is obviously more utility and flexibility in letting the user provide Snakefiles.&lt;/li&gt;
&lt;li&gt;User-provided Snakefiles provide more ways for workflows to go wrong.&lt;/li&gt;
&lt;li&gt;Testing is either more difficult, or shifted to the workflow author.&lt;/li&gt;
&lt;li&gt;Bundled Snakefiles take the burden of writing the workflow off of the user,
  so they can focus on param/config files.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can we make the command line wrapper work with a Kubernetes cluster?&lt;/li&gt;
&lt;li&gt;See &lt;a href="https://github.com/charlesreid1/2019-snakemake-byok8s"&gt;charlesreid1/2019-snakemake-byok8s&lt;/a&gt;
  for proof of concept.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Applications&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How can we apply this concept?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/spacegraphcats/spacegraphcats"&gt;spacegraphcats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dib-lab/eelpond"&gt;eelpond&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dahak-metagenomics/dahak"&gt;dahak&lt;/a&gt; and 
  &lt;a href="https://github.com/dahak-metagenomics/dahak-taco"&gt;dahak-taco&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Snakemake"></category><category term="python"></category><category term="bioinformatics"></category><category term="workflows"></category><category term="pipelines"></category><category term="snakemake"></category><category term="travis"></category></entry><entry><title>Recursive Backtracking in Go for Bioinformatics Applications: 3. Go Implementation of Backtracking</title><link href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html" rel="alternate"></link><published>2019-01-03T10:30:00-08:00</published><updated>2019-01-03T10:30:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2019-01-03:/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This is the third in a series of three blog posts describing our
solution to a bioinformatics problem from Rosalind.info,
&lt;a href="http://rosalind.info/problems/ba1i/"&gt;Problem BA1(i) (Find most frequent words with mismatches
in a string)&lt;/a&gt;.
To solve this problem and generate variations of a DNA string
as required, we implemented a recursive backtracking method
in the Go programming language.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html"&gt;Part 1: Counting Variations&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html"&gt;Part 2: Generating Variations&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html"&gt;Part 3: Go Implementation of Recursive Backtracking&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem-description"&gt;Problem Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recursive-backtracking-pseudocode"&gt;Recursive Backtracking Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recursive-backtracking-go-implementation"&gt;Recursive Backtracking: Go Implementation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#visit-hamming-neighbors-function"&gt;Visit Hamming Neighbors Function&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#public-non-recursive-function"&gt;Public, Non-Recursive Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#private-recursive-function"&gt;Private, Recursive Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#assemble-visit-variation-function"&gt;Assemble Visit Variation Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tests"&gt;Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-code"&gt;Final â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is the third in a series of three blog posts describing our
solution to a bioinformatics problem from Rosalind.info,
&lt;a href="http://rosalind.info/problems/ba1i/"&gt;Problem BA1(i) (Find most frequent words with mismatches
in a string)&lt;/a&gt;.
To solve this problem and generate variations of a DNA string
as required, we implemented a recursive backtracking method
in the Go programming language.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html"&gt;Part 1: Counting Variations&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html"&gt;Part 2: Generating Variations&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html"&gt;Part 3: Go Implementation of Recursive Backtracking&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem-description"&gt;Problem Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recursive-backtracking-pseudocode"&gt;Recursive Backtracking Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recursive-backtracking-go-implementation"&gt;Recursive Backtracking: Go Implementation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#visit-hamming-neighbors-function"&gt;Visit Hamming Neighbors Function&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#public-non-recursive-function"&gt;Public, Non-Recursive Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#private-recursive-function"&gt;Private, Recursive Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#assemble-visit-variation-function"&gt;Assemble Visit Variation Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tests"&gt;Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-code"&gt;Final Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#go-forth-and-be-fruitful"&gt;Go Forth and Be Fruitful&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="problem-description"&gt;Problem Description&lt;/h2&gt;
&lt;p&gt;The task at hand is to take a given input strand of DNA,
and generate variations from it that have up to &lt;span class="math"&gt;\(d\)&lt;/span&gt; differences
(a Hamming distance of &lt;span class="math"&gt;\(d\)&lt;/span&gt;) in the codons (base pairs).&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html"&gt;part 1 of this series&lt;/a&gt;, we walk through the
construction of an analytical formula to count the number
of variations of a given DNA string that can be generated,
given the constraints of the problem.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html"&gt;part 2 of this series&lt;/a&gt;, we cover several techniques to
generate variations on a DNA string, and present pseudocode
for the recursive backtracking method that we use here.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html"&gt;part 3 of this series&lt;/a&gt;, we will cover our implementation
of the recursive backtracking method in the Go programming
language.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="backtracking"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="recursive-backtracking-pseudocode"&gt;Recursive Backtracking Pseudocode&lt;/h2&gt;
&lt;p&gt;To review from the prior post, our pseudocode
for recursive backtracking to explore variations
or combinations looks like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;explore method:
    base case:
        visit this solution
    recursive case:
        for each available choice:
            make a choice
            explore outcomes
            unmake the choice
            move on to the next choice
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key elements there are the base and recursive
cases, and the mechanism of iterating over each
possible choice and making/exploring/unmaking
the choice.&lt;/p&gt;
&lt;p&gt;&lt;a name="go-implementation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="recursive-backtracking-go-implementation"&gt;Recursive Backtracking: Go Implementation&lt;/h2&gt;
&lt;p&gt;In total, we have three different methods to
accomplish this task:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;VisitHammingNeighbors(input,d)&lt;/code&gt;: this is the public method
  that the user calls to generate a string array of all
  strings that are a Hamming distance of up to &lt;code&gt;d&lt;/code&gt; from
  the input string &lt;code&gt;input&lt;/code&gt;. This public method performs
  parameter and error checking, initializes space for
  data, and collects results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;visitHammingNeighbors_recursive(base_kmer, depth, choices, results_map)&lt;/code&gt;:
  this method is the private recursive method available
  only to the package. This method performs the actual
  recursive work. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the function name starts with a lower case letter,
so it is not exported by the package - i.e., it is not available
to the user when they import this package.&lt;/p&gt;
&lt;p&gt;The base case of the &lt;code&gt;visitHammingNeighbors_recursive()&lt;/code&gt;
function will pass the final set of choices to the final
step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assemble_variations(base_kmer, choices, results_map)&lt;/code&gt;: 
  this method (private to the package) is a recursive
  method that uses the chosen indices and &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="visit-hamming"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="visit-hamming-neighbors-function"&gt;Visit Hamming Neighbors Function&lt;/h3&gt;
&lt;p&gt;The function call to visit all Hamming neighbors and add them to the &lt;code&gt;results&lt;/code&gt; set
is split into two parts: a non-recursive public function, which provides a public wrapper
that is user-friendly and performs error-checking on the parameters provided, and a
recursive private function that is used internally but not intended to be called by
users directly.&lt;/p&gt;
&lt;h4 id="public-non-recursive-function"&gt;Public, Non-Recursive Function&lt;/h4&gt;
&lt;p&gt;Here is the entry point function that the user calls
when they wish to generate all variations on a given
string of DNA, and have the variations returned as a
string slice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Given an input string of DNA, generate variations&lt;/span&gt;
&lt;span class="c1"&gt;// of said string that are a Hamming distance of&lt;/span&gt;
&lt;span class="c1"&gt;// less than or equal to d.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;VisitHammingNeighbors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// a.k.a. visit_kmer_neighbors&lt;/span&gt;

    &lt;span class="c1"&gt;// number of codons&lt;/span&gt;
    &lt;span class="nx"&gt;n_codons&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="c1"&gt;// Use combinatorics to calculate the total&lt;/span&gt;
    &lt;span class="c1"&gt;// number of variation.&lt;/span&gt;
    &lt;span class="nx"&gt;buffsize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;CountHammingNeighbors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n_codons&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The call to &lt;code&gt;CountHammingNeighbors()&lt;/code&gt; uses the counting
formula from &lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html"&gt;Part 1&lt;/a&gt;
to predict the number of variations. If the user has selected
an astronomical problem size, the program warns the user.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;// This blows up quickly, so warn the user&lt;/span&gt;
    &lt;span class="c1"&gt;// if their problem is too big&lt;/span&gt;
    &lt;span class="nx"&gt;MAX&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1e6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;buffsize&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;MAX&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error: you are generating over MAX = %d permutations, you probably don&amp;#39;t want to do this.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the actual recursive backtracking algorithm begins.
The code loops over every possible value of Hamming distance
&lt;span class="math"&gt;\(d\)&lt;/span&gt; and calls the recursive method at each value of &lt;span class="math"&gt;\(d\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;// Store the final results in a set (string-&amp;gt;bool map)&lt;/span&gt;
    &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Begin backtracking algorithm&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// The choices array will change with each recursive call.&lt;/span&gt;
        &lt;span class="c1"&gt;// Go passes all arguments by copy, which is good for us.&lt;/span&gt;
        &lt;span class="nx"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

        &lt;span class="c1"&gt;// Populate list of neighbors&lt;/span&gt;
        &lt;span class="nx"&gt;visitHammingNeighbors_recursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We don't assign any results from the call to &lt;code&gt;visitHammingNeighbors_recursive()&lt;/code&gt;
because we pass in a data structure (actually a pointer to a
data structure), &lt;code&gt;results&lt;/code&gt;, that is modified in-place.&lt;/p&gt;
&lt;p&gt;Thus, when we complete a call to &lt;code&gt;visitHammingNeighbors_recursive()&lt;/code&gt;,
results will contain all variations already.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;// Check if we have the right number of results&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;buffsize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WARNING: number of results (%d) did not match expected value (%d)\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;buffsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="private-recursive-function"&gt;Private, Recursive Function&lt;/h4&gt;
&lt;p&gt;In the above function, the call to the recursive
function to visit all Hamming neighbors happens
here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="c1"&gt;// Populate list of neighbors&lt;/span&gt;
        &lt;span class="nx"&gt;visitHammingNeighbors_recursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The user passes the original kmer &lt;code&gt;input&lt;/code&gt;, along with the
Hamming distance parameter &lt;code&gt;dd&lt;/code&gt;, the list of choices
of indices that have already been selected &lt;code&gt;choices&lt;/code&gt;,
and the data structure storing all resulting strings
&lt;code&gt;results&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As with the pseudocode, we have a base case and 
a recursive case. The recursive function is being
called repeatedly until it reaches a depth of 0,
with the depth parameter being decremented each call.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Recursive function: given an input string of DNA,&lt;/span&gt;
&lt;span class="c1"&gt;// generate Hamming neighbors that are a Hamming&lt;/span&gt;
&lt;span class="c1"&gt;// distance of exactly d. Populate the neighbors&lt;/span&gt;
&lt;span class="c1"&gt;// array with the resulting neighbors.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;visitHammingNeighbors_recursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base_kmer&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;depth&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;depth&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// Base case&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// Recursive case&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The base case occurs when we reach a depth of 0 and have
no further choices to make. We reach this base case for
each binary number with &lt;span class="math"&gt;\(d\)&lt;/span&gt; digits set to 1; once the base
case is reached, we call the &lt;code&gt;assemble_variations()&lt;/code&gt; function
to substitute all possible codons at the selected indices.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;visitHammingNeighbors_recursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base_kmer&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;depth&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;depth&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// Base case&lt;/span&gt;
        &lt;span class="nx"&gt;assemble_variations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base_kmer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The recursive case is slightly more complicated, but it follows
the same backtracking pseudocode covered previously: from a set
of possible choices, try each choice, recursively call this 
function, then unmake the choice and move on to the next choice.&lt;/p&gt;
&lt;p&gt;Here, the choice is which index &lt;code&gt;c&lt;/code&gt; in the kmer to modify. Each
kmer can only be modified once, so we have a for loop to
check if the index &lt;code&gt;c&lt;/code&gt; is in the list of choices already made.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// Recursive case&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base_kmer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;indexAlreadyTaken&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;choice&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;indexAlreadyTaken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As before, the recursive call to this function will
not return any values that need to be stored, since 
&lt;code&gt;results&lt;/code&gt; points to a data structure (map) that is 
modified in-place.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;indexAlreadyTaken&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="c1"&gt;// This will make a new copy of choices&lt;/span&gt;
                &lt;span class="c1"&gt;// for each recursive function call&lt;/span&gt;
                &lt;span class="nx"&gt;choices2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;visitHammingNeighbors_recursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base_kmer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;choices2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="assemble-visit"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="assemble-visit-variation-function"&gt;Assemble Visit Variation Function&lt;/h3&gt;
&lt;p&gt;Once we've generated each list of indices to modify,
we call a second recursive function to substitute each
codon into each index.&lt;/p&gt;
&lt;p&gt;In the recursive method above, each recursive function
call added a new choice to &lt;code&gt;choices&lt;/code&gt;; in this recursive
function, each recursive funcction call pops a choice 
from &lt;code&gt;choices&lt;/code&gt;. Thus, the base case is when &lt;code&gt;choices&lt;/code&gt;
is empty.&lt;/p&gt;
&lt;p&gt;Here are the base and recursive cases:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Given a base kmer and a choice of indices where&lt;/span&gt;
&lt;span class="c1"&gt;// the kmer should be changed, generate all possible&lt;/span&gt;
&lt;span class="c1"&gt;// variations on this base_kmer.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;assemble_variations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base_kmer&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// Recursive case&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// Base case&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The recursive case pops a choice from &lt;code&gt;choices&lt;/code&gt;, 
finds which nucleotide (AGCT) is at that location,
and assembles the list of possible choices (the
other 3 nucleotide values). It then performs
the recursive backtracking algorithm, choosing 
from each of the three possible nucleotide values,
exploring the choice by making a recursive call,
then un-making the choice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;assemble_variations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base_kmer&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// Recursive case&lt;/span&gt;

        &lt;span class="nx"&gt;all_codons&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;G&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Pop the next choice&lt;/span&gt;
        &lt;span class="c1"&gt;// https://github.com/golang/go/wiki/SliceTricks&lt;/span&gt;
        &lt;span class="nx"&gt;ch_ix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

        &lt;span class="c1"&gt;// Get the value of the codon at that location&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;ch_ix&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base_kmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// slice of string is bytes,&lt;/span&gt;
            &lt;span class="c1"&gt;// so convert back to string&lt;/span&gt;
            &lt;span class="nx"&gt;this_codon&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base_kmer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ch_ix&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;codon&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;all_codons&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;codon&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;this_codon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// Swap out the old codon with the new codon&lt;/span&gt;
                    &lt;span class="nx"&gt;new_kmer&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;base_kmer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;ch_ix&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;codon&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;base_kmer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ch_ix&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
                    &lt;span class="nx"&gt;assemble_variations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;new_kmer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// Base case&lt;/span&gt;
        &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;base_kmer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="tests"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="tests"&gt;Tests&lt;/h2&gt;
&lt;p&gt;The last step after some debugging was to write tests for the
function to generate all variations of a DNA string, to ensure
the recursive backtracking functions work correctly.&lt;/p&gt;
&lt;p&gt;The pattern we use is to create a struct containing test parameters,
then create a test matrix by initializing instances of the
parameter struct with the parameters we want to test.&lt;/p&gt;
&lt;p&gt;Here is how we set up the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;TestMatrixVisitHammingNeighbors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tests&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
        &lt;span class="nx"&gt;d&lt;/span&gt;     &lt;span class="kt"&gt;int&lt;/span&gt;
        &lt;span class="nx"&gt;gold&lt;/span&gt;  &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;}{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AAA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AAC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AAT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AAG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AAA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CAA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GAA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TAA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ATA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ACA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AGA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;tests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each test case should generate all Hamming neighbors, and compare to the list of
Hamming neighbors provided. This requires two tricks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sort before comparing, to ensure a proper comparison&lt;/li&gt;
&lt;li&gt;use a custom &lt;code&gt;EqualStringSlices()&lt;/code&gt; function that will iterate through
  two string slices element-wise to check if they are equal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;EqualStringSlices()&lt;/code&gt; function is required because Go does not have 
built-in equality checks for slices.&lt;/p&gt;
&lt;p&gt;Here is what the tests look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;tests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// Money shot&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;VisitHammingNeighbors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// Check if there was error&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error: %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Sort before comparing&lt;/span&gt;
        &lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Strings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Strings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;EqualStringSlices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error testing VisitHammingNeighbors():\ncomputed = %v\ngold     = %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="final"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="final-code"&gt;Final Code&lt;/h2&gt;
&lt;p&gt;The final version of the recursive function to visit all Hamming neighbors
and return them in a string array can be found in the &lt;code&gt;go-rosalind&lt;/code&gt; library
on Github.&lt;/p&gt;
&lt;p&gt;Specifically, in the file &lt;a href="https://github.com/charlesreid1/go-rosalind/blob/master/rosalind/rosalind_ba1.go"&gt;&lt;code&gt;rosalind_ba1.go&lt;/code&gt;&lt;/a&gt;,
there is a &lt;a href="https://github.com/charlesreid1/go-rosalind/blob/master/rosalind/rosalind_ba1.go#L711"&gt;&lt;code&gt;VisitHammingNeighbors()&lt;/code&gt;&lt;/a&gt;
function that is the public function that calls the private recursive
function &lt;a href="https://github.com/charlesreid1/go-rosalind/blob/master/rosalind/rosalind_ba1.go#L778"&gt;&lt;code&gt;visitHammingNeighbors_recursive()&lt;/code&gt;&lt;/a&gt;,
and the recursive function to swap out codons is
in the &lt;a href="https://github.com/charlesreid1/go-rosalind/blob/master/rosalind/rosalind_ba1.go#L819"&gt;&lt;code&gt;visit()&lt;/code&gt;&lt;/a&gt;
funciont.&lt;/p&gt;
&lt;p&gt;&lt;a name="fruitful"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="go-forth-and-be-fruitful"&gt;Go Forth and Be Fruitful&lt;/h2&gt;
&lt;p&gt;Now that you have the basic tools to imlement a recursive
backtracking algorithm in Go to generate string variations,
you have one of the key ingredients to solve Rosalind.info
problem &lt;a href="http://rosalind.info/problems/ba1i/"&gt;BA1i, "Find Most Frequent Words with Mismatches by
String"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This problem is tricky principally because it requires generating
every DNA string variation, so now you should have the key
ingredient to solve BA1i (and several problems that follow).&lt;/p&gt;
&lt;p&gt;You can use the final version of the methods we covered by importing
the &lt;code&gt;go-rosalind&lt;/code&gt; library in your Go code
(&lt;a href="https://godoc.org/github.com/charlesreid1/go-rosalind/rosalind"&gt;link to go-rosalind documentation on godoc.org&lt;/a&gt;)
or you can implement your own version of these algorithms. 
The Go code we covered in this post is also on Github in the
&lt;a href="https://github.com/charlesreid1/go-rosalind"&gt;charlesreid1/go-rosalind&lt;/a&gt; repository.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computational Biology"></category><category term="go"></category><category term="golang"></category><category term="rosalind"></category><category term="computational biology"></category><category term="bioinformatics"></category><category term="recursion"></category><category term="backtracking"></category><category term="strings"></category><category term="combinatorics"></category></entry><entry><title>Recursive Backtracking in Go for Bioinformatics Applications: 2. Generating Variations</title><link href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html" rel="alternate"></link><published>2018-12-28T14:00:00-08:00</published><updated>2018-12-28T14:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-12-28:/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This is the second in a series of three blog posts describing our
solution to a bioinformatics problem from Rosalind.info,
&lt;a href="http://rosalind.info/problems/ba1i/"&gt;Problem BA1(i) (Find most frequent words with mismatches
in a string)&lt;/a&gt;.
To solve this problem and generate variations of a DNA string
as required, we implemented a recursive backtracking method
in the Go programming language.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html"&gt;Part 1: Counting Variations&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Part 2: Generating Variations (you are here)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html"&gt;Part 3: Go Implementation of Recursive Backtracking&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="toc"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem-descr"&gt;Problem Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#perms-combs-vars"&gt;Permutations vs Combinations vs Variations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recursion"&gt;Recursion&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#backtracking"&gt;Recursive Backtracking Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#dna"&gt;Appying to DNA Variations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#generating-visits"&gt;Generating Visits with Binary Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assembling"&gt;Assembling the â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is the second in a series of three blog posts describing our
solution to a bioinformatics problem from Rosalind.info,
&lt;a href="http://rosalind.info/problems/ba1i/"&gt;Problem BA1(i) (Find most frequent words with mismatches
in a string)&lt;/a&gt;.
To solve this problem and generate variations of a DNA string
as required, we implemented a recursive backtracking method
in the Go programming language.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html"&gt;Part 1: Counting Variations&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Part 2: Generating Variations (you are here)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html"&gt;Part 3: Go Implementation of Recursive Backtracking&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="toc"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem-descr"&gt;Problem Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#perms-combs-vars"&gt;Permutations vs Combinations vs Variations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recursion"&gt;Recursion&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#backtracking"&gt;Recursive Backtracking Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#dna"&gt;Appying to DNA Variations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#generating-visits"&gt;Generating Visits with Binary Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assembling"&gt;Assembling the Variation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="problem-descr"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="problem-description"&gt;Problem Description&lt;/h2&gt;
&lt;p&gt;The task at hand is to take a given input strand of DNA,
and generate variations from it that have up to &lt;span class="math"&gt;\(d\)&lt;/span&gt; differences
(a Hamming distance of &lt;span class="math"&gt;\(d\)&lt;/span&gt;) in the codons (base pairs).&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html"&gt;part 1 of this series&lt;/a&gt;, we walk through the
construction of an analytical formula to count the number
of variations of a given DNA string that can be generated,
given the constraints of the problem.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html"&gt;part 2 of this series&lt;/a&gt;, we cover several techniques to
generate variations on a DNA string, and present pseudocode
for the recursive backtracking method that we use here.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html"&gt;part 3 of this series&lt;/a&gt;, we will cover our implementation
of the recursive backtracking method in the Go programming
language.&lt;/p&gt;
&lt;p&gt;&lt;a name="perms-combs-vars"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="permutations-vs-combinations-vs-variations"&gt;Permutations vs Combinations vs Variations&lt;/h2&gt;
&lt;p&gt;Before covering generation of variations of a DNA string,
we should cover some terminology for clarification.&lt;/p&gt;
&lt;p&gt;If we were to use the term &lt;em&gt;permutations&lt;/em&gt;, as in, we are
counting (or generating) &lt;em&gt;permutations&lt;/em&gt; of the input DNA string, 
that would imply that we were doing some kind of
rearrangement of the elements of the input DNA string
(for example, swapping two codons). This is not the
problem that we are solving, and requires different
formulas. (See &lt;a href="http://mathworld.wolfram.com/Permutation.html"&gt;Permutations&lt;/a&gt;
entry on Wolfram MathWorld.)&lt;/p&gt;
&lt;p&gt;The variations that we are referring to are not
exactly &lt;em&gt;combinations&lt;/em&gt;, either, though. If we were
to use the term &lt;em&gt;combinations&lt;/em&gt;, it would imply that
we were choosing a set of &lt;span class="math"&gt;\(k\)&lt;/span&gt; integers from a set
of &lt;span class="math"&gt;\(d\)&lt;/span&gt; integers &lt;span class="math"&gt;\({1, 2, \dots, d}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The variations that we are counting are similar to
combinations, but with the additional act of swapping
out each codon at the position (integer) selected
with three other possible codons, so there are
more variations than combinations (and many
more permutations than variations).&lt;/p&gt;
&lt;p&gt;&lt;a name="transform"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="transforming-the-problem-space"&gt;Transforming the Problem Space&lt;/h2&gt;
&lt;p&gt;A surprisingly large variety of problems in combinatorics 
can be transformed into an equivalent problem involving 
binary numbers, which are usually easier to think about.&lt;/p&gt;
&lt;p&gt;To generate variations, we can break up the process of
producing a variation into two steps, or choices, and
then convert these choices (and the process of making them)
into an equivalent problem in terms of binary numbers.&lt;/p&gt;
&lt;p&gt;We can decompose the cration of a DNA string variation into
the first step of choosing which codons (indices) to edit, 
and the second step of cycling through every possible codon 
(ATGC) at the selected indices.&lt;/p&gt;
&lt;p&gt;To translate this into an equivalent binary number problem,
consider the input string of DNA "AAAAA" and let the Hamming
distance that we are considering be &lt;span class="math"&gt;\(d = 1\)&lt;/span&gt;. Then we can code
each index with a 0 (not chosen) or a 1 (chosen) and turn the
problem into cycling throgh all binary numbers with 1 bit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;00001
00010
00100
01000
10000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second step is to cycle through each alternate codon at
the given position, so that &lt;code&gt;00001&lt;/code&gt; would generate the 
variations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;AAAAC
AAAAG
AAAAT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and so on.&lt;/p&gt;
&lt;p&gt;We saw this two-part technique already when counting the total number of
variations that could be created in &lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html"&gt;Part 1: Counting Variations&lt;/a&gt;.
It resulted in a counting formula with two terms, a binomial term
for step 1 and an exponential term for step 2.&lt;/p&gt;
&lt;p&gt;We can think of the problem as forming a tree with several
decision nodes that need to be explored; this type of problem
structure is ideal for a recursive backtracking algorithm.&lt;/p&gt;
&lt;p&gt;We will cover the use of recursive backtracking to actually
explore the entire tree of possible outcomes (not just count
it), starting with some review and background on recursive 
backtracking and how it works.&lt;/p&gt;
&lt;p&gt;&lt;a name="recursion"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="recursion"&gt;Recursion&lt;/h2&gt;
&lt;p&gt;Recursion is a common pattern to use for problems that require
exploring a large problem space that requires us to make
several selections.&lt;/p&gt;
&lt;p&gt;A recursive backtracking algorithm is analogous to exploring a
maze but laying out a rope as you go, so tht you can revisit
each possible route. In this case, we are using backtracking
to make the choice of which indices of the input DNA string
to modify. We want to explore all possible choices to generate
all possible variations of the input DNA string, and backtracking
gives us the framework to do that.&lt;/p&gt;
&lt;p&gt;For example, if we wanted to recursively generate codon choices
for the case of an input DNA string like "AAAAA" and &lt;span class="math"&gt;\(d = 2\)&lt;/span&gt;,
we would call a recursive method twice; the first time through,
we would choose one of the five indices, and mark it as picked;
then we would call the method again, and choose a second index
(different from the first) and mark it as picked.&lt;/p&gt;
&lt;p&gt;When unrolled, this is equivalent to a nested for loop,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;for i in range( 0 .. len(dna_string) ):
    for j in range( 0 .. len(dna_string) ):
        if (i != j):
            Start with the binary number 00000
            Set the digit at index i to 1
            Set the digit at index j to 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="backtracking"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="recursive-backtracking-pseudocode"&gt;Recursive Backtracking Pseudocode&lt;/h3&gt;
&lt;p&gt;Basic pseudocode for a backtracking method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;explore method:
    base case:
        visit this solution
    recursive case:
        for each available choice:
            make a choice
            explore outcomes
            unmake the choice
            move on to the next choice
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="dna"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="applying-to-dna-variations"&gt;Applying to DNA Variations&lt;/h2&gt;
&lt;p&gt;There are actually two places where we need to apply
backtracking to our problem.&lt;/p&gt;
&lt;p&gt;&lt;a name="generating-visits"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="generating-visits-with-binary-numbers"&gt;Generating Visits with Binary Numbers&lt;/h3&gt;
&lt;p&gt;The first application of recursive backtracking is to
carry out step 1, choosing indices in the original
DNA string to modify or cycle through altnerate 
codons. We showed above how generating variations
on a kmer of length &lt;span class="math"&gt;\(k\)&lt;/span&gt; at a distance &lt;span class="math"&gt;\(d\)&lt;/span&gt; from the
original kmer was equivalent to generating binary 
numbers with &lt;span class="math"&gt;\(d\)&lt;/span&gt; bits set to 1.&lt;/p&gt;
&lt;p&gt;We can use recursive backtracking to generate these
numbers. By creating a method that recursively selects
an index to switch to 1, and passing that (and all prior
choices) on to further recursive calls, the function
can recurse to a given depth &lt;span class="math"&gt;\(d\)&lt;/span&gt; and visit all possible
binary numbers with &lt;span class="math"&gt;\(d\)&lt;/span&gt; bits set to 1.&lt;/p&gt;
&lt;p&gt;The base case of this recursive method would be reached
when all &lt;span class="math"&gt;\(d\)&lt;/span&gt; choices had been made and &lt;span class="math"&gt;\(d\)&lt;/span&gt; bits were 
set to 1. Then the choice of indices to swap out with
alternate codons would be passed on to a recursive method
that would carry out Step 2 (see below).&lt;/p&gt;
&lt;p&gt;For example, to generate variations of the 5-mer &lt;code&gt;AAAAA&lt;/code&gt;,
we would start by selecting a Hamming distance &lt;span class="math"&gt;\(d\)&lt;/span&gt;, then
generate a binary number with &lt;span class="math"&gt;\(d\)&lt;/span&gt; bits set to 1 to select
indices to modify. Suppose &lt;span class="math"&gt;\(d = 2\)&lt;/span&gt;; then the first few
binary numbers are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;AAAAA
11000
10100
10010
10001
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To expand on the pseudocode a bit more, to generate a
binary number with &lt;span class="math"&gt;\(d\)&lt;/span&gt; bits flipped to 1 we will want
to call a recursive method with a depth of &lt;span class="math"&gt;\(d\)&lt;/span&gt;, making
a choice at each recursive call of which index to set
to 1 next.&lt;/p&gt;
&lt;p&gt;The &lt;span class="math"&gt;\(n^{th}\)&lt;/span&gt; recursive call picks the &lt;span class="math"&gt;\(n^{th}\)&lt;/span&gt; index for
1. Each index can only be chosen once in the stack of 
recursive calls, and the indices that have been chosen
by prior recursive function calls are passed along.&lt;/p&gt;
&lt;p&gt;Thus we need a minimum of two parameters: an integer
indicating the depth level of this recursive function
call, and an integer array of index choices.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;function generate_binary_numbers( depth, choices[], ... ):

    if depth is 0,
        base case
        no more choices left to make
        choices[] is full
        pass along choices[] to assemble the variations

    else,
        recursive case
        for each possible index,
            if this index is not already in choices,
                add this index to choices
                generate_binary_numbers( depth+1, choices[] )
                remove this index from choices
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="assembling"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="assembling-the-variation"&gt;Assembling the Variation&lt;/h3&gt;
&lt;p&gt;Each binary number is then turned into variations by substituting
every combination of 3 codons in every position with a 1
possible, so the first binary number for &lt;span class="math"&gt;\(d=2\)&lt;/span&gt; would generate
the variations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;AAAAA
11000
-----
CCAAA
GCAAA
TCAAA
CGAAA
GGAAA
TGAAA
CTAAA
GTAAA
TTAAA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This would be repeated for all Hamming distances up to the
maximum specified Hamming distance.&lt;/p&gt;
&lt;p&gt;Like the generation of binary numbers, the substitution of all
possible combinations of codons at these positions is a
task conducive to a recursive backtracking algorithm.&lt;/p&gt;
&lt;p&gt;Like the prior task's recursive method, this task's recursive 
method will have one parameter for depth (number of choices
left to make) and a range of choices to try (codons).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;function assemble_variations( depth, choices[], ... ):

    if depth is 0,
        base case
        no more choices left to make
        choices[] is full
        pass along choices[] to assemble the variations

    else,
        recursive case
        for each possible index,
            if this index is not already in choices,
                add this index to choices
                generate_binary_numbers( depth+1, choices[] )
                remove this index from choices
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the final part, Part 3, of this blog post, we will cover the actual 
Go implementation of these functions.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computational Biology"></category><category term="go"></category><category term="golang"></category><category term="rosalind"></category><category term="bioinformatics"></category><category term="recursion"></category><category term="backtracking"></category><category term="strings"></category><category term="combinatorics"></category></entry><entry><title>Recursive Backtracking in Go for Bioinformatics Applications: 1. Counting Variations</title><link href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html" rel="alternate"></link><published>2018-12-26T18:00:00-08:00</published><updated>2018-12-26T18:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-12-26:/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This is the first in a series of three blog posts describing our
solution to a bioinformatics problem from Rosalind.info,
&lt;a href="http://rosalind.info/problems/ba1i/"&gt;Problem BA1(i) (Find most frequent words with mismatches
in a string)&lt;/a&gt;.
To solve this problem and generate variations of a DNA string
as required, we implemented a recursive backtracking method
in the Go programming language.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Part 1: Counting Variations (you are here)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html"&gt;Part 2: Generating Variations&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html"&gt;Part 3: Go Implementation of Recursive Backtracking&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="toc"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem-descr"&gt;Problem Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functions"&gt;Useful Functions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#binomial"&gt;Binomial Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#factorial"&gt;Factorial Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#counting-permutations"&gt;Counting Permutations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#deriving"&gt;Deriving the Formula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#indices"&gt;Term 1: Picking DNA Indices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#side-note"&gt;Term 1: Side Note â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is the first in a series of three blog posts describing our
solution to a bioinformatics problem from Rosalind.info,
&lt;a href="http://rosalind.info/problems/ba1i/"&gt;Problem BA1(i) (Find most frequent words with mismatches
in a string)&lt;/a&gt;.
To solve this problem and generate variations of a DNA string
as required, we implemented a recursive backtracking method
in the Go programming language.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Part 1: Counting Variations (you are here)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html"&gt;Part 2: Generating Variations&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html"&gt;Part 3: Go Implementation of Recursive Backtracking&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="toc"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem-descr"&gt;Problem Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functions"&gt;Useful Functions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#binomial"&gt;Binomial Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#factorial"&gt;Factorial Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#counting-permutations"&gt;Counting Permutations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#deriving"&gt;Deriving the Formula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#indices"&gt;Term 1: Picking DNA Indices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#side-note"&gt;Term 1: Side Note on Ordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modifying"&gt;Term 2: Modifying DNA Codons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#final"&gt;Final Counting Formula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#golang"&gt;Implementing in Go&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#golang-bionomial-factorial"&gt;Binomial and Factorial Functions in Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variations"&gt;Variations Counting Function in Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="problem-descr"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="problem-description"&gt;Problem Description&lt;/h2&gt;
&lt;p&gt;The task at hand is to take a given input strand of DNA,
and generate variations from it that have up to &lt;span class="math"&gt;\(d\)&lt;/span&gt; differences
(a Hamming distance of &lt;span class="math"&gt;\(d\)&lt;/span&gt;) in the codons (base pairs).&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html"&gt;part 1 of this series&lt;/a&gt;, we walk through the
construction of an analytical formula to count the number
of variations of a given DNA string that can be generated,
given the constraints of the problem.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html"&gt;part 2 of this series&lt;/a&gt;, we cover several techniques to
generate variations on a DNA string, and present pseudocode
for the recursive backtracking method that we use here.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html"&gt;part 3 of this series&lt;/a&gt;, we will cover our implementation
of the recursive backtracking method in the Go programming
language.&lt;/p&gt;
&lt;p&gt;&lt;a name="functions"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="useful-functions"&gt;Useful Functions&lt;/h2&gt;
&lt;p&gt;It's always useful to review some basic mathematics
useful for combinatorics applications. We'll review
the factorial and binomial functions, which will
show up in our final formula for the total nubmer
of variations we will be generating.&lt;/p&gt;
&lt;p&gt;&lt;a name="factorial"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="factorial-function"&gt;Factorial Function&lt;/h3&gt;
&lt;p&gt;The factorial function for an integer &lt;span class="math"&gt;\(n\)&lt;/span&gt; is written
&lt;span class="math"&gt;\(n!\)&lt;/span&gt; and is defined for &lt;span class="math"&gt;\(n \geq 1\)&lt;/span&gt; as:&lt;/p&gt;
&lt;div class="math"&gt;$$
n! = n \cdot (n-1) \cdot \dots \cdot 2 \cdot 1
$$&lt;/div&gt;
&lt;p&gt;for example, &lt;span class="math"&gt;\(5!\)&lt;/span&gt; would be:&lt;/p&gt;
&lt;div class="math"&gt;$$
5! = 5 \times 4 \times 3 \times 2 \times 1 = 120
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="binomial"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="binomial-function"&gt;Binomial Function&lt;/h3&gt;
&lt;p&gt;The binomial function has many applications in combinatorics.
It is the number of ways of independently selecting &lt;span class="math"&gt;\(k\)&lt;/span&gt; items
from a set of &lt;span class="math"&gt;\(n\)&lt;/span&gt; items, and is written:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{n}{k} = \dfrac{ n! }{ k! (n-k)! }
$$&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="counting-permutations"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="counting-permutations"&gt;Counting Permutations&lt;/h2&gt;
&lt;p&gt;What we want is a formula to count the number of permutations&lt;/p&gt;
&lt;p&gt;To derive a formula, it helps to think through the problem
starting with smaller special cases, and generalize 
from there in terms of the problem parameters.&lt;/p&gt;
&lt;p&gt;&lt;a name="deriving"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="deriving-the-formula"&gt;Deriving the Formula&lt;/h3&gt;
&lt;p&gt;The problem we're trying to solve is generating all perms
with hamming distance less than or equal to d, but let's
start with a simpler problem: generating all perms with 
hamming distance of exactly d.&lt;/p&gt;
&lt;p&gt;Then we can just sum up over each d.&lt;/p&gt;
&lt;p&gt;Start with a simple situation: string of dna with 3 codons.
Case of hamming distance 0 too trivial, so start with case of
hamming distance of 1.&lt;/p&gt;
&lt;p&gt;There are two terms in our combinatorics formula that we
need to think about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Term 1:&lt;/strong&gt; We have a certain number of codons to modify (this is fixed
  by the Hamming distance d that we pick). Term 1 counts up the
  number of ways of selecting which indices of the original 
  DNA string to modify.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Term 2:&lt;/strong&gt; Once we've picked out the indices we are going to modify, we
  have several variations for each index (4 total codons, so 3
  variations). Term 2 is a count of the number of variations that are
  possible, given the choice of indices in the original DNA string
  to modify.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The approach here is to think about these two terms
independently and separately. Each term has a formula
to count the number of possibilities indexed by each.
Then, because these are independent choices, the total
number of combined choices is the product of these two
terms.&lt;/p&gt;
&lt;p&gt;&lt;a name="indices"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="term-1-picking-dna-indices"&gt;Term 1: Picking DNA Indices&lt;/h3&gt;
&lt;p&gt;The first term in our formula for number of variations
will be the term representing the number of ways of 
choosing which indices in the original DNA input string
to edit.&lt;/p&gt;
&lt;p&gt;Given a Hamming distance of &lt;span class="math"&gt;\(d\)&lt;/span&gt;, and the fact that we
have one and only one edit (Hamming distance unit) per
base pair, Term 1 counts the number of ways of picking
&lt;span class="math"&gt;\(d\)&lt;/span&gt; items from a set of &lt;span class="math"&gt;\(n\)&lt;/span&gt; items. Order does not matter.&lt;/p&gt;
&lt;p&gt;This problem is equivalent to having a row of &lt;span class="math"&gt;\(n\)&lt;/span&gt; on/off
switches, all in the off position, and counting the number
of ways of throwing exactly &lt;span class="math"&gt;\(d\)&lt;/span&gt; of them into the on position.&lt;/p&gt;
&lt;p&gt;Likewise, it is equivalent to having &lt;span class="math"&gt;\(d\)&lt;/span&gt; identical colored balls, 
and counting the number of ways of placing them into &lt;span class="math"&gt;\(n\)&lt;/span&gt;
slots, one ball per slot.&lt;/p&gt;
&lt;p&gt;We can see how the problem has a kind of triangular structure.
Returning to the scenario of &lt;span class="math"&gt;\(n\)&lt;/span&gt; on/off switches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If we have &lt;span class="math"&gt;\(d = n\)&lt;/span&gt; switches to throw, or if we have 
  &lt;span class="math"&gt;\(d = 0\)&lt;/span&gt; switches to throw, in either case we have
  only 1 possible outcome.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we have &lt;span class="math"&gt;\(d = n-1\)&lt;/span&gt; switches to throw, or if we 
  have &lt;span class="math"&gt;\(d = 1\)&lt;/span&gt; switch to throw, either way we have
  &lt;span class="math"&gt;\(n\)&lt;/span&gt; possible outcomes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we have &lt;span class="math"&gt;\(d = n-2\)&lt;/span&gt; or &lt;span class="math"&gt;\(d = 2\)&lt;/span&gt; switches to throw,
  there are &lt;span class="math"&gt;\(n (n-1)\)&lt;/span&gt; possible outcomes; etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In fact, this problem - choosing &lt;span class="math"&gt;\(d\)&lt;/span&gt; things
from a set of &lt;span class="math"&gt;\(n\)&lt;/span&gt; things - is common enough that
there is a special function just to describe it,
and that's the binomial function (covered above).&lt;/p&gt;
&lt;p&gt;The binomial function is defined as:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{n}{k} = \dfrac{ n! }{ k! (n-k)! }
$$&lt;/div&gt;
&lt;p&gt;In the scenarios posed above, the order of our choices
did not matter - the balls were not numbered, the order
in which we threw each switch did not affect the outcome.&lt;/p&gt;
&lt;p&gt;If the order did matter, if the order in which the on/off
switches were thrown mattered or if the balls that were
placed into slots had sequential numbers on them, then we
would need a different function - the expression above 
to count the number of outcomes would not have a &lt;span class="math"&gt;\(k!\)&lt;/span&gt; in 
the denominator.&lt;/p&gt;
&lt;p&gt;&lt;a name="side-note"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="term-1-side-note-on-ordering"&gt;Term 1: Side Note on Ordering&lt;/h3&gt;
&lt;p&gt;If the order of the index choices does not matter, 
the &lt;span class="math"&gt;\(k!\)&lt;/span&gt; term in the denominator must be included 
to cancel out double-counting in the situations where
(for example) &lt;span class="math"&gt;\(i\)&lt;/span&gt; is chosen first and &lt;span class="math"&gt;\(j\)&lt;/span&gt; is chosen second,
and then the situation where &lt;span class="math"&gt;\(j\)&lt;/span&gt; is chosen first and &lt;span class="math"&gt;\(i\)&lt;/span&gt;
is chosen second.&lt;/p&gt;
&lt;p&gt;If the &lt;span class="math"&gt;\(k!\)&lt;/span&gt; term is present in the denominator, it says
that the order in which items are selected does not matter,
in which case we are generating &lt;em&gt;combinations&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To count combinations, use the "n choose k" function. See the 
&lt;a href="http://mathworld.wolfram.com/Combination.html"&gt;Combination&lt;/a&gt;
article on Wolfram MathWorld.&lt;/p&gt;
&lt;p&gt;If the &lt;span class="math"&gt;\(k!\)&lt;/span&gt; term is &lt;em&gt;not&lt;/em&gt; present in the denominator, it says
that the order in which items are selected does matter,
in which case we are generating &lt;em&gt;permutations&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To count permutations, use the "n pick k" function. See the 
&lt;a href="http://mathworld.wolfram.com/Permutation.html"&gt;Permutation&lt;/a&gt;
article on Wolfram MathWorld.&lt;/p&gt;
&lt;p&gt;&lt;a name="modifying"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="term-2-modifying-dna-codons"&gt;Term 2: Modifying DNA Codons&lt;/h3&gt;
&lt;p&gt;Once we've selected the &lt;span class="math"&gt;\(d\)&lt;/span&gt; indices in the original DNA
string that we are going to modify, we have to count the
number of ways those base pairs can be modified.&lt;/p&gt;
&lt;p&gt;We have &lt;span class="math"&gt;\(d\)&lt;/span&gt; base pairs to modify, and &lt;span class="math"&gt;\(c = 4\)&lt;/span&gt; total
codons (ATGC). Each base pair that we are modifying
has &lt;span class="math"&gt;\(c-1\)&lt;/span&gt; possible codons that it we can swap it out
with, and each choice is independent, so the number
of possibile outcomes (Term 2) is:&lt;/p&gt;
&lt;div class="math"&gt;$$
(c-1)^{d}
$$&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="final"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="final-counting-formula"&gt;Final Counting Formula&lt;/h2&gt;
&lt;p&gt;To write the final formula for counting the number of variations &lt;span class="math"&gt;\(V\)&lt;/span&gt;
of a given DNA string of length &lt;span class="math"&gt;\(n\)&lt;/span&gt; that are a Hamming
distance of less than or equal to &lt;span class="math"&gt;\(d\)&lt;/span&gt;, with &lt;span class="math"&gt;\(c\)&lt;/span&gt; possible codons 
(A, T, G, C), we will need to sum over Hamming distances
from 0 to &lt;span class="math"&gt;\(d\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
V = \sum_{k = 0}^{d} \binom{n}{k} (c-1)^{k}
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="golang"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="implementing-in-go"&gt;Implementing in Go&lt;/h2&gt;
&lt;p&gt;Now, let's look at how we would implement this counting
formula in Go. This will be useful, since programs run 
much faster when they are able to allocate all the sapce
they need in memory ahead of time. Counting the number
of variations of our DNA input string will allow us to
do just that.&lt;/p&gt;
&lt;p&gt;&lt;a name="golang-binomial-factorial"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="binomial-and-factorial-functions-in-go"&gt;Binomial and Factorial Functions in Go&lt;/h3&gt;
&lt;p&gt;We'll start with binomial and factorial functions in Go:
continuing with our theme of recursion, we implement
a recursive factorial function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Compute the factorial of an integer.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// base case&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// recursive case&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The factorial function will behave correctly for the
case of &lt;span class="math"&gt;\(n=1\)&lt;/span&gt; and &lt;span class="math"&gt;\(n=0\)&lt;/span&gt;, and will return 1 if &lt;span class="math"&gt;\(n\)&lt;/span&gt; is
negative (which is reasonable behavior for our purposes.)&lt;/p&gt;
&lt;p&gt;The binomial function utilizes the factorial function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Returns value of the binomial coefficient Binom(n, k).&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Binomial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="c1"&gt;// Since C(n, k) = C(n, n-k)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Calculate value of:&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="c1"&gt;// ( n * (n-1) * ... * (n-k+1) )&lt;/span&gt;
    &lt;span class="c1"&gt;// -----------------------------&lt;/span&gt;
    &lt;span class="c1"&gt;//   ( k * (k-1) * ... * 1 )&lt;/span&gt;
    &lt;span class="c1"&gt;// &lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Note that we might want to add some additional error checks to the
&lt;code&gt;Binomial()&lt;/code&gt; function.)&lt;/p&gt;
&lt;p&gt;&lt;a name="variations"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="variations-counting-function-in-go"&gt;Variations Counting Function in Go&lt;/h3&gt;
&lt;p&gt;Now we can put everything together into a function to count
the number of "Hamming neighbors" - variations on a given 
DNA string that are a Hamming distance of up to &lt;span class="math"&gt;\(d\)&lt;/span&gt; away
from the original DNA string.&lt;/p&gt;
&lt;p&gt;To count the number of Hamming neighbors, we implement
the formula above. We leave out the error checks on the
parameter values here, for brevity.&lt;/p&gt;
&lt;p&gt;The inputs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(n\)&lt;/span&gt; - length of DNA input string&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(d\)&lt;/span&gt; - maximum Hamming distance&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(c\)&lt;/span&gt; - number of codons (4, ATGC)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Given an input string of DNA of length n,&lt;/span&gt;
&lt;span class="c1"&gt;// a maximum Hamming distance of d,&lt;/span&gt;
&lt;span class="c1"&gt;// and a number of codons c, determine&lt;/span&gt;
&lt;span class="c1"&gt;// the number of Hamming neighbors of&lt;/span&gt;
&lt;span class="c1"&gt;// distance less than or equal to d&lt;/span&gt;
&lt;span class="c1"&gt;// using a combinatorics formula.&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;CountHammingNeighbors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// We require the following:&lt;/span&gt;
    &lt;span class="c1"&gt;// n &amp;gt; 0&lt;/span&gt;
    &lt;span class="c1"&gt;// d &amp;gt;= 0&lt;/span&gt;
    &lt;span class="c1"&gt;// c &amp;gt; 0&lt;/span&gt;

    &lt;span class="c1"&gt;// Use combinatorics to calculate number of variations&lt;/span&gt;
    &lt;span class="nx"&gt;nv&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// Binomial(n,d) =&amp;gt; number of ways we can&lt;/span&gt;
        &lt;span class="c1"&gt;//                  pick codons to edit&lt;/span&gt;
        &lt;span class="nx"&gt;next_term&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;Binomial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// (c-1)^d =&amp;gt; number of ways that the codons&lt;/span&gt;
        &lt;span class="c1"&gt;//            we picked to edit can be edited&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;next_term&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;nv&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;next_term&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can run this with a few values of k and d to verify it returns
the expected values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;For kmer AAA k = 3:
d = 0, count = 1
d = 1, count = 10
d = 2, count = 37
d = 3, count = 64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;for a kmer of length 3, we can compute the first 3 values (1, 10, 37)
by hand. The last value, when &lt;span class="math"&gt;\(d = k\)&lt;/span&gt;, is a special case where every
base pair in the DNA strand can be changed to any codon. Since there
are 4 possible codons, this leads to &lt;span class="math"&gt;\(4^k = 2^{2k}\)&lt;/span&gt; possibilities.&lt;/p&gt;
&lt;p&gt;For &lt;span class="math"&gt;\(d = k = 3\)&lt;/span&gt;, we have &lt;span class="math"&gt;\(2^6 = 64\)&lt;/span&gt; possible DNA strings.&lt;/p&gt;
&lt;p&gt;Now, moving on to &lt;span class="math"&gt;\(k=5\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;For kmer AAAAA k = 5:
d = 0, count = 1
d = 1, count = 16
d = 2, count = 106
d = 3, count = 376
d = 4, count = 781
d = 5, count = 1024
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can calculate 1 and 16 by hand, verifying those two numbers.
As before, the case of &lt;span class="math"&gt;\(k = d = 5\)&lt;/span&gt; gives a total of &lt;span class="math"&gt;\(4^5 = 2^{10} = 1024\)&lt;/span&gt;
possible DNA strings.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next: &lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html"&gt; Recursive Backtracking in Go for Bioinformatics Applications: 2. Generating Variations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computational Biology"></category><category term="go"></category><category term="golang"></category><category term="rosalind"></category><category term="computational biology"></category><category term="bioinformatics"></category><category term="recursion"></category><category term="backtracking"></category><category term="strings"></category><category term="combinatorics"></category></entry><entry><title>Basic Data Structures in Go: Maps</title><link href="https://charlesreid1.github.io/basic-data-structures-in-go-maps.html" rel="alternate"></link><published>2018-12-20T17:00:00-08:00</published><updated>2018-12-20T17:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-12-20:/basic-data-structures-in-go-maps.html</id><summary type="html">&lt;h2 id="basic-data-structures-in-go-maps"&gt;Basic Data Structures in Go: Maps&lt;/h2&gt;
&lt;p&gt;Continuing with our series of blog posts on what
we've been learning about Go in the process of solving
problems on Rosalind.info, this post will cover how 
some basic data structures work in Go, and how we
used each to solve problems from the Chapter 1 Rosalind
problems.&lt;/p&gt;
&lt;h2 id="maps"&gt;Maps&lt;/h2&gt;
&lt;p&gt;The simplest way to describe a map is to say it is a
structure useful for storing key-value pairs.&lt;/p&gt;
&lt;p&gt;Before we walk through what maps look like in Go, let's
talk about what a map is (in the data structure sense).
And to do â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="basic-data-structures-in-go-maps"&gt;Basic Data Structures in Go: Maps&lt;/h2&gt;
&lt;p&gt;Continuing with our series of blog posts on what
we've been learning about Go in the process of solving
problems on Rosalind.info, this post will cover how 
some basic data structures work in Go, and how we
used each to solve problems from the Chapter 1 Rosalind
problems.&lt;/p&gt;
&lt;h2 id="maps"&gt;Maps&lt;/h2&gt;
&lt;p&gt;The simplest way to describe a map is to say it is a
structure useful for storing key-value pairs.&lt;/p&gt;
&lt;p&gt;Before we walk through what maps look like in Go, let's
talk about what a map is (in the data structure sense).
And to do that, it's useful to talk a bit about mathematical
functions and maps in the mathematical sense.&lt;/p&gt;
&lt;h3 id="what-is-a-map"&gt;What is a map&lt;/h3&gt;
&lt;p&gt;The term "map" is taken from mathematics. A map is just a
relationship - a general term, but still useful. Most 
mathematics courses deal with functions, which are formally 
defined as &lt;strong&gt;maps&lt;/strong&gt; from one set of numbers onto another,
such that one input corresponds to one output.&lt;/p&gt;
&lt;p&gt;A (data structure) map, similarly, is a relationship between
two sets - a key set, and a value set. Each key corresponds
to only one value. &lt;/p&gt;
&lt;p&gt;Maps are typically stored under the hood as either a hash
map (which does not sort keys and has very fast O(1), or
constant time, operations) or a tree map (which sorts keys 
using a binary tree and has slower O(log N) operations).&lt;/p&gt;
&lt;h3 id="map-notation-in-go"&gt;Map notation in Go&lt;/h3&gt;
&lt;p&gt;In Go, map types are denoted &lt;code&gt;map[keyType]valueType&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, to map strings to integers, we would use
a map of type &lt;code&gt;map[string]int&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;We create a map variable by declaring its type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, this does not allocate any space for the map,
and trying to add keys to the map at this point would
result in an error.&lt;/p&gt;
&lt;p&gt;We need to actually allocate space for the map. In Go,
you can allocate space for a map two ways: first, using
Go's built-in &lt;code&gt;make()&lt;/code&gt; function; and second, by creating
and populating the map in one line.&lt;/p&gt;
&lt;h3 id="using-make-with-maps"&gt;Using &lt;code&gt;make()&lt;/code&gt; with maps&lt;/h3&gt;
&lt;p&gt;To allocate space for a map, you can use the &lt;code&gt;make()&lt;/code&gt;
function and pass it the map type. This will actually
create space in memory for the map, and allow you to 
add items or look up keys in the map.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="creating-and-populating"&gt;Creating and populating&lt;/h3&gt;
&lt;p&gt;If you want to create and populate the map in one line,
you can specify the type, then have trailing brackets
containing the items you want to add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an empty map&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create and populate a map&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;G&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="zero-values"&gt;Zero values&lt;/h3&gt;
&lt;p&gt;One feature of maps that makes them really easy to work
with is, if you try and look up a key, and the key does
not exist in the map, the map will not raise an exception
(which Python does), it will return the zero value of 
the value type. &lt;/p&gt;
&lt;p&gt;For example, the zero value of the &lt;code&gt;int&lt;/code&gt; type is 0, 
so if we create a map like &lt;code&gt;m := map[string]int{"A":10}&lt;/code&gt;
and we then look up a key that isn't in the map, like 
&lt;code&gt;m["G"]&lt;/code&gt;, Go will return 0.&lt;/p&gt;
&lt;p&gt;Similarly, the zero value for booleans is false, so you
can utilize the zero value behavior to create a set data
structure using maps. By creating a &lt;code&gt;map[keyType]bool&lt;/code&gt;
map, you can use the boolean value to indicate membership
of a key in the given set. Then, if you look up keys that
do not exist in the map, Go will return the zero value of
booleans by default, which will be false.&lt;/p&gt;
&lt;h3 id="easy-iterating-over-maps"&gt;Easy iterating over maps&lt;/h3&gt;
&lt;p&gt;It is easy to iterate over maps using the &lt;code&gt;range&lt;/code&gt; keyword
in Go, which will return the keys (optionally, both keys 
and values) of the map in a loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="s"&gt;&amp;quot;DEF&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="s"&gt;&amp;quot;GHI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Key:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; --&amp;gt; Value:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="example-assembling-kmer-histogram"&gt;Example: Assembling kmer histogram&lt;/h2&gt;
&lt;p&gt;Here is an example using maps: this function assembles
a kmer histogram from a strand of DNA base pairs. To do
this, it loops over every codon in the DNA strand and
increments a counter in a map. Finally, this histogram
map is returned. (This function is useful for determining
the most frequent kmer.)&lt;/p&gt;
&lt;p&gt;Here's the whole function that helps solve Rosalind problem
BA1B. We'll look at it piece by piece below: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Return the histogram of kmers of length k &lt;/span&gt;
&lt;span class="c1"&gt;// found in the given input&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;KmerHistogram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error: input string was not DNA. Only characters ATCG are allowed, you had %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Number of substring overlaps&lt;/span&gt;
    &lt;span class="nx"&gt;overlap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="c1"&gt;// If overlap &amp;lt; 1, we are looking&lt;/span&gt;
    &lt;span class="c1"&gt;// for kmers longer than our input&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;overlap&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Iterate over each position,&lt;/span&gt;
    &lt;span class="c1"&gt;// extract the string,&lt;/span&gt;
    &lt;span class="c1"&gt;// increment the count.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;overlap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Get the kmer of interest&lt;/span&gt;
        &lt;span class="nx"&gt;substr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;// If it doesn&amp;#39;t exist, the value is 0&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="function-walkthrough"&gt;Function Walkthrough&lt;/h3&gt;
&lt;p&gt;The first thing you'll notice is the comment style:
there is a comment right before each function, which
is common practice in Go, because comments that come
before a function are picked up by &lt;code&gt;godoc&lt;/code&gt; (the Go
documentation tool) and turned into documentation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Return the histogram of kmers of length k &lt;/span&gt;
&lt;span class="c1"&gt;// found in the given input&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;KmerHistogram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Go has internalized the idea that comments are a part
of the documentation, so comments don't need to be 
formatted in any special way (like &lt;code&gt;/// this&lt;/code&gt; or &lt;code&gt;/** this */&lt;/code&gt;
business) to end up being picked up by godoc.&lt;/p&gt;
&lt;p&gt;Next, we create an empty map (kmer strings to integer
frequency counters) and stride over the entire input string
with a window the size of the kmers we are interested in,
adding or incrementing each corresponding counter in the map
as we go.&lt;/p&gt;
&lt;p&gt;The overlap variable is the number of possible kmers of length
&lt;code&gt;k&lt;/code&gt; in the entire input string, which requires a bit of algebra
to gt the indices right:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;// Number of substring overlaps&lt;/span&gt;
    &lt;span class="nx"&gt;overlap&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The for loop utilizes Go's slice notation to take a slice of
the string (which does not require creating or duplicating any
string data), and uses the extracted kmer as a key to add or 
increment the counter: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;// Iterate over each position,&lt;/span&gt;
    &lt;span class="c1"&gt;// extract the string,&lt;/span&gt;
    &lt;span class="c1"&gt;// increment the count.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;overlap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Get the kmer of interest&lt;/span&gt;
        &lt;span class="nx"&gt;substr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;// If it doesn&amp;#39;t exist, the value is 0&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is where the behavior of maps for non-existent keys comes
in handy - in Go, if you ask for a key that does not exist
in the map, the map will return the zero value of the specified
type. &lt;/p&gt;
&lt;p&gt;This statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;can also be written as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, the first time a kmer (stored in &lt;code&gt;substr&lt;/code&gt;) is encountered, the
kmer will not exist as a key in the map, and the key lookup on the 
right hand side will return 0, incrementing the counter to 1
the first time the kmer is encountered.&lt;/p&gt;
&lt;p&gt;Subsequent times the kmer is encountered, the value will be found 
and substituted on the right side so it will be incremented by 1.&lt;/p&gt;
&lt;p&gt;Finally, when we return from the function, we can use a Python-like
syntax of returning multiple values separated by commas, yet
another great feature of Go: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By convention, the return types of functions will include an error type 
at the very end, so if you had a function named &lt;code&gt;ExampleFunction&lt;/code&gt; that 
returned three integers, the function definition would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;ExampleFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Additionally, we also see from the function's return statement
above that we can use the reserved keyword &lt;code&gt;nil&lt;/code&gt; to set a variable
to a null value, and that the convention is to return &lt;code&gt;nil&lt;/code&gt; in place
of the error, so that in the calling function we can set up a structure
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;a, b, c, err := ExampleFunction()

if err != nil {
    err := &amp;quot;Please read this important message&amp;quot;
    return -1,-1,-1,errors.New(err)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;Maps are my favorite data structure, so I'm glad that they're
easy to use in Go. Some important points about using
maps in Go:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Declaring a variable as a map type does not allocate any space
  for the map; saying &lt;code&gt;var m map[keyType]valueType&lt;/code&gt; and then 
  trying to access keys will cause an exception.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To allcoate space for a map, use &lt;code&gt;make(map[keyType]valueType)&lt;/code&gt; 
  or instantiate with the &lt;code&gt;{}&lt;/code&gt; notation, like 
  &lt;code&gt;m := map[keyType]valueType{"asdf":1}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To ask for a key, use the square bracket notation. To set a value
  for a key, use the square bracket notation on the left and assign
  a value on the right: &lt;code&gt;m[my_key] = my_value&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Asking for missing keys will return the zero value of whatever
  type the map values are. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterating over key-value pairs in a map using a for loop is easy
  using the built-in &lt;code&gt;range&lt;/code&gt; keyword.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="addendum-check-if-a-key-is-in-a-map"&gt;Addendum: Check if a Key is in a Map&lt;/h2&gt;
&lt;p&gt;Because of the default behavior of maps, where they return a zero value for
keys that do not exist in the map, it is not immediately obvious how to
differentiate between the case where a key is in a map already and has a zero
value, versus the case where the key does not yet exist in the map and the zero
value is only being returned because the key can't be found.&lt;/p&gt;
&lt;p&gt;To resolve this, we can use two Go features: error-checking, and the underscore - 
a variable that serves as a one-way sink for information, and serves a similar
purpose to the underscore in Python.&lt;/p&gt;
&lt;p&gt;First, we mentioned above that various operations that can return errors will return
an error type as the last return type, along with any other return values.
This includes the operation of accessing a key. To assign the value and the error
to variables at once:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;my_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, to check if the key exists in the map, we are only concerned with the variable
&lt;code&gt;err&lt;/code&gt; and we don't really need the variable &lt;code&gt;v&lt;/code&gt;. Instead of assigning &lt;code&gt;v&lt;/code&gt; to a variable
that we never use, and then having the Go compiler complain about it, we can use the
underscore as a placeholder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;my_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we just add a check for whether &lt;code&gt;err&lt;/code&gt; is nil, and voila, we have our check of
whether a key is in the map or not:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;my_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This key is missing from the map&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This key already exists in the map&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Computational Biology"></category><category term="go"></category><category term="golang"></category><category term="rosalind"></category><category term="computational biology"></category><category term="bioinformatics"></category><category term="maps"></category></entry><entry><title>Learning Bioinformatics with Go and Rosalind</title><link href="https://charlesreid1.github.io/learning-bioinformatics-with-go-and-rosalind.html" rel="alternate"></link><published>2018-12-18T20:00:00-08:00</published><updated>2018-12-18T20:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-12-18:/learning-bioinformatics-with-go-and-rosalind.html</id><summary type="html">&lt;h2 id="learning-go-with-rosalind"&gt;Learning Go with Rosalind&lt;/h2&gt;
&lt;h3 id="what-is-rosalind"&gt;What is Rosalind?&lt;/h3&gt;
&lt;p&gt;Rosalind.info is a website with programming challenges, similar in spirit
to &lt;a href="https://charlesreid1.com/wiki/Project_Euler"&gt;Project Euler&lt;/a&gt;, but with
a focus on bioinformatics. &lt;/p&gt;
&lt;p&gt;Problems in the bioinformatics track are presented grouped by chapter,
with several problems per chapter. The problems are designed like a coding
competition, with problems providing structured input files and expecting
structured output from each calculation. Each time you solve a problem, a
unique input is generated, and you have a time limit in which to run your
code to solve the problem.&lt;/p&gt;
&lt;h3 id="what-is-go"&gt;What is Go?&lt;/h3&gt;
&lt;p&gt;Go is a programming language that is â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="learning-go-with-rosalind"&gt;Learning Go with Rosalind&lt;/h2&gt;
&lt;h3 id="what-is-rosalind"&gt;What is Rosalind?&lt;/h3&gt;
&lt;p&gt;Rosalind.info is a website with programming challenges, similar in spirit
to &lt;a href="https://charlesreid1.com/wiki/Project_Euler"&gt;Project Euler&lt;/a&gt;, but with
a focus on bioinformatics. &lt;/p&gt;
&lt;p&gt;Problems in the bioinformatics track are presented grouped by chapter,
with several problems per chapter. The problems are designed like a coding
competition, with problems providing structured input files and expecting
structured output from each calculation. Each time you solve a problem, a
unique input is generated, and you have a time limit in which to run your
code to solve the problem.&lt;/p&gt;
&lt;h3 id="what-is-go"&gt;What is Go?&lt;/h3&gt;
&lt;p&gt;Go is a programming language that is static, compiled, and concurrent.
It is essentially intended as a modern replacement to C and C++, and is
designed for more modern hardware, networks, and scale of code projects.&lt;/p&gt;
&lt;p&gt;Go is a language that was invented in Google. It provides some very
powerful features, and its design for concurrency is the primary feature
that motivated me to learn Go. See 
&lt;a href="https://blog.golang.org/concurrency-is-not-parallelism"&gt;this Go blog post&lt;/a&gt;
on "Concurrency is not parallelism" for a more in-depth discussion of
Go's concurrency design, and how that is different from (and more general
and more powerful than) parallelism.&lt;/p&gt;
&lt;h2 id="initial-impression-of-go"&gt;Initial Impression of Go&lt;/h2&gt;
&lt;p&gt;My initial impression of Go has been positive thus far.&lt;/p&gt;
&lt;h3 id="syntax"&gt;Syntax&lt;/h3&gt;
&lt;p&gt;The first thing about Go that we will remark on is the syntax - it 
is unusual because it reverses the order that most programming languages
use for variable and type declarations. &lt;/p&gt;
&lt;p&gt;For example, in Java, you declare an integer array like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;public int[5] arr;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;while in Go, you would declare an analogous data structure like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;var arr [5]int
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While this reversal is a bit confusing at first, it is different enough 
from other languages that it easily sticks in your head - which is actually
a welcome change from the stew of slightly-different-but-largely-overlapping 
syntax occurring across common programming languages.&lt;/p&gt;
&lt;p&gt;Go also shares many of the features that make Python such an easy language
to use, including lack of semicolons (yay!) and a useful selection of built-in
methods. &lt;/p&gt;
&lt;h3 id="godoc"&gt;Godoc&lt;/h3&gt;
&lt;p&gt;One of the handiest features of Go is &lt;code&gt;godoc&lt;/code&gt;, a command-line utility that runs
a local web server at &lt;code&gt;http:8080&lt;/code&gt; that serves up Go documentation. This includes
documentation for the standard Go library, as well as documentation for any
libraries found in the Go PATH.&lt;/p&gt;
&lt;h3 id="environment-variables"&gt;Environment Variables&lt;/h3&gt;
&lt;p&gt;Speaking of the Go PATH, one confusing thing about getting started with Go is
all of the environment variables that must be set for Go to find various things.&lt;/p&gt;
&lt;p&gt;Basically, you need to have two directories for Go: the location of your Go tree,
and the directory where you store Go packages and executables.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$GOROOT&lt;/code&gt; refers to the location of your Go tree. For example, this might be the
  directory &lt;code&gt;~/go&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$GOPATH&lt;/code&gt; refers to the location where your Go packages and executables are stored.
  For example, this might be &lt;code&gt;~/work&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these variables should be set in your &lt;code&gt;~/.profile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.com/wiki/Go/Installing#Paths"&gt;Go/Installing&lt;/a&gt; on the 
charlesreid1 wiki for coverage of getting set up with Go.&lt;/p&gt;
&lt;h3 id="arrays-and-slices"&gt;Arrays and Slices&lt;/h3&gt;
&lt;p&gt;The first concept in Go that threw me off was the concept of arrays versus slices.
This was principally due to the poor explanation and choice of examples given on the
Go blog post on how slices work.&lt;/p&gt;
&lt;p&gt;Arrays are chunks of memory that are set aside to store contiguous slots for data.
To create an array, its size must be known in advance, making them less useful
in practice. To resize an array, a new array must be created, and the old array
copied into the new array.&lt;/p&gt;
&lt;p&gt;Slices, on the other hand, can be thought of as tiny data structures
containing pointers to array data. Slices can easily be resized by changing the
data structure, without changing the underlying data.&lt;/p&gt;
&lt;p&gt;There are also built-in &lt;code&gt;make()&lt;/code&gt; and &lt;code&gt;copy()&lt;/code&gt; functions, to allocate slices
that have a specified capacity (or none, in which case the slice has a variable 
size) and copy data from arrays to slices or from slice to slice.&lt;/p&gt;
&lt;p&gt;The confusion around such a fundamental data type makes Go more difficult to learn
and to intuit about what's going on. While Go is clearly superior to C and Java
in many ways, it also has some unfortunate stumbling blocks in its most basic
data structure that many early learners are sure to have trouble with.&lt;/p&gt;
&lt;h2 id="learning-a-new-language"&gt;Learning a New Language&lt;/h2&gt;
&lt;p&gt;One of the things that stood out to me while learning Go was how different it was
from learning a non-language systems technology (library) like Docker or docker-compose, 
or Ansible. &lt;/p&gt;
&lt;p&gt;When you are learning a second or third programming language, you generally have a
mental roadmap of concepts, and how they fit together and build upon each other.
Furthermore, you already know, before ever starting to learn the language, what
that roadmap of concepts generally looks like, from your prior learnings.&lt;/p&gt;
&lt;p&gt;(If you pick up and compare any dozen books on various programming languages, 
you'll find certain core concepts that are repeated from book to book.)&lt;/p&gt;
&lt;p&gt;Compare this with a technology like Ansible, an extremely powerful Python library
that is used for automation of IT and compute infrastructure. While extremely powerful,
Ansible is also extremely complex, and feels bewildering to learn because
it requires all users (including seasoned experts in Unix shell scripting), to 
re-learn an entirely new way of doing things using Ansible's system of modules 
and YAML syntax.&lt;/p&gt;
&lt;p&gt;Ansible has no conceptual roadmap. The Ansible documentation moves somewhat
haphazardly through the many topics that must be covered but that don't fit
together.  Books that cover Ansible often follow the documentation's
organization, or have a similarly confused organization of concepts.
There is no denying it's a great piece of software, but it is very difficult
to reason about and teach compared to a computer language.&lt;/p&gt;
&lt;h2 id="core-concepts"&gt;Core Concepts&lt;/h2&gt;
&lt;p&gt;The first few Rosalind problems from Chapter 1
were an excellent warm-up to get to know Go,
since the tasks were relatively easy and the
main bit to work out was how to use the data
structure correctly, rather than the algorithm.&lt;/p&gt;
&lt;p&gt;Three data structures that we ended up utilizing 
to solve the Chapter 1 challenges using Go were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hash maps&lt;/li&gt;
&lt;li&gt;Strings&lt;/li&gt;
&lt;li&gt;Bit vectors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More coverage of how these data structures work in Go,
plus details of how we used them to solve Rosalind
probelms, to follow in the next blog post.&lt;/p&gt;</content><category term="Computational Biology"></category><category term="go"></category><category term="golang"></category><category term="rosalind"></category><category term="computational biology"></category><category term="bioinformatics"></category></entry><entry><title>First Post of the Fall, Part 2: Flaskadillo</title><link href="https://charlesreid1.github.io/first-post-of-the-fall-part-2-flaskadillo.html" rel="alternate"></link><published>2018-10-30T16:00:00-07:00</published><updated>2018-10-30T16:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-10-30:/first-post-of-the-fall-part-2-flaskadillo.html</id><summary type="html">&lt;h2 id="flask-illo-flaskadillo"&gt;Flask + ILLO = Flaskadillo&lt;/h2&gt;
&lt;p&gt;On October 15, 2018, I had the opportunity to 
offer an in-lab learning opportunity (ILLO) at the 
&lt;a href="http://ivory.idyll.org/lab/"&gt;Lab for Data Intensive Biology&lt;/a&gt;.
The ILLO focused on Flask, a useful Python library
for creating and running web servers. This
library is useful because it has a very low
learning curve, but also has the complexity to
handle complicated, real-world projects.&lt;/p&gt;
&lt;p&gt;As a part of this in-lab learning opportunity, 
I created repository with five simple Flask examples
to highlight five useful capabilities of Flask.&lt;/p&gt;
&lt;p&gt;The repository is called flaskadillo and it is 
available on &lt;a href="https://git.charlesreid1.com/charlesreid1/flaskadillo/"&gt;git.charlesreid1.com&lt;/a&gt;
or on â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="flask-illo-flaskadillo"&gt;Flask + ILLO = Flaskadillo&lt;/h2&gt;
&lt;p&gt;On October 15, 2018, I had the opportunity to 
offer an in-lab learning opportunity (ILLO) at the 
&lt;a href="http://ivory.idyll.org/lab/"&gt;Lab for Data Intensive Biology&lt;/a&gt;.
The ILLO focused on Flask, a useful Python library
for creating and running web servers. This
library is useful because it has a very low
learning curve, but also has the complexity to
handle complicated, real-world projects.&lt;/p&gt;
&lt;p&gt;As a part of this in-lab learning opportunity, 
I created repository with five simple Flask examples
to highlight five useful capabilities of Flask.&lt;/p&gt;
&lt;p&gt;The repository is called flaskadillo and it is 
available on &lt;a href="https://git.charlesreid1.com/charlesreid1/flaskadillo/"&gt;git.charlesreid1.com&lt;/a&gt;
or on &lt;a href="https://github.com/charlesreid1/flaskadillo"&gt;github.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The five capabilities covered by the examples in 
flaskadillo are listed below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;hello - hello world flask server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;api - a simple API server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jinja - a simple Flask server that makes use of Jinja templates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;package - a simple demonstration of how to package flask apps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tests - a simple demonstration of how to write Flask tests&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="example-1-hello-world"&gt;Example 1: Hello World&lt;/h2&gt;
&lt;p&gt;We'll just cover example 1 here, but similar materials
are available for all five examples.&lt;/p&gt;
&lt;p&gt;Example 1 consists of a simple flask app, &lt;code&gt;simple.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;from flask import Flask
app = Flask(__name__)

@app.route(&amp;quot;/&amp;quot;)
def hello():
    return &amp;quot;Hello World!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href="https://git.charlesreid1.com/charlesreid1/flaskadillo/src/branch/master/hello"&gt;hello&lt;/a&gt;
directory of the flaskadillo repo covers how to 
install the necessary packages and run the Flask
application.&lt;/p&gt;
&lt;p&gt;There is also a unit test, &lt;code&gt;test_simple.py&lt;/code&gt;, which demonstrates
how to write tests for Flask applications. To run the unit
test, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pytest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="more-information"&gt;More Information&lt;/h2&gt;
&lt;p&gt;For instructions on each of the 5 examples, 
visit each of the 5 directories in the 
&lt;a href="https://github.com/charlesreid1/flaskadillo"&gt;flaskadillo repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="why-flaskadillo"&gt;Why flaskadillo?&lt;/h3&gt;
&lt;p&gt;Because armadillo.&lt;/p&gt;
&lt;h3 id="why-armadillo"&gt;Why armadillo?&lt;/h3&gt;
&lt;p&gt;The word armadillo means "little armoured one" in Spanish.&lt;/p&gt;
&lt;p&gt;Armadillos are related to anteaters and sloths (all are in the Xenartha superorder).&lt;/p&gt;
&lt;p&gt;The Aztecs called them turtle-rabbits.&lt;/p&gt;</content><category term="Python"></category><category term="Github"></category><category term="Software"></category><category term="Python"></category><category term="Flask"></category></entry><entry><title>First Post of the Fall, Part 1: Data Commons</title><link href="https://charlesreid1.github.io/first-post-of-the-fall-part-1-data-commons.html" rel="alternate"></link><published>2018-10-27T19:00:00-07:00</published><updated>2018-10-27T19:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-10-27:/first-post-of-the-fall-part-1-data-commons.html</id><summary type="html">&lt;h2 id="background-a-bit-about-the-data-commons"&gt;Background: a bit about the Data Commons&lt;/h2&gt;
&lt;p&gt;It has been a productive but busy summer at the
&lt;a href="http://ivory.idyll.org/lab/"&gt;Lab for Data Intensive Biology&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As part of my job, I am supporting a lot of websites
and infrastructure for the &lt;a href="https://public.nihdatacommons.us"&gt;Data Commons Pilot Phase
Consortium (DCPPC)&lt;/a&gt;,
which wrapped up Phase 1 this month.&lt;/p&gt;
&lt;p&gt;The Data Commons is a large-scale effort to establish
a community-driven set of standards for interoperability
for biological data and computation, a massive effort and
a broad mandate that has the potential to enable breakthrough
research that is currently impossible because data and computations
cannot inter-operate between the data â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="background-a-bit-about-the-data-commons"&gt;Background: a bit about the Data Commons&lt;/h2&gt;
&lt;p&gt;It has been a productive but busy summer at the
&lt;a href="http://ivory.idyll.org/lab/"&gt;Lab for Data Intensive Biology&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As part of my job, I am supporting a lot of websites
and infrastructure for the &lt;a href="https://public.nihdatacommons.us"&gt;Data Commons Pilot Phase
Consortium (DCPPC)&lt;/a&gt;,
which wrapped up Phase 1 this month.&lt;/p&gt;
&lt;p&gt;The Data Commons is a large-scale effort to establish
a community-driven set of standards for interoperability
for biological data and computation, a massive effort and
a broad mandate that has the potential to enable breakthrough
research that is currently impossible because data and computations
cannot inter-operate between the data, compute resources, and 
domain expertise that are provided by universities, hospitals, 
research institutes, companies, nonprofits, and citizen 
scientists.&lt;/p&gt;
&lt;h2 id="informationally-challenged-data-commons-growing-pains"&gt;Informationally challenged: Data Commons growing pains&lt;/h2&gt;
&lt;p&gt;An important part of defining a community-driven set of standards is defining a
community, and toward that end the collective members of the Data Commons 
met at monthly face-to-face workshops to iterate tightly on a set of
technologies and standards that will allow each institution's different compute
platforms or data banks to use other institutions' platforms or data banks.
Doing this requirs fostering community and creating the right environment
for people to work through the issues. &lt;/p&gt;
&lt;p&gt;One of the biggest challenges we faced in fostering a community
that could develop and implement a set of standards across such 
a large and diverse group of experts and institutes was coordinating
information. Specifically, making sure that decisions were properly
communicated to the appropriate parties, that important documents
made their way to the entire consortium, and that documents that were
created and edited also be findable and sharable.&lt;/p&gt;
&lt;p&gt;This problem began, back in April, as a very small trash fire.
People were getting used to the Github workflow and did not know
how to find the appropriate repository for the information they
needed to contribute, and consortium members were universally annoyed
that Google Drive's search functionality was so terrible.&lt;/p&gt;
&lt;p&gt;In June we rolled out a trial document-tagging system to the consortium,
to deafening silence - no one was impressed or satisfied with the tagging
system. The real problem was with search.&lt;/p&gt;
&lt;p&gt;Toward that end, I implemented a full-fledged search engine for the Data
Commons that utilized various third-party APIs (Github, Google Drive,
Groups.io, etc.) to index content related to the project, and make it
full-text-searchable.&lt;/p&gt;
&lt;p&gt;The result was &lt;a href="https://github.com/charlesreid1/centillion"&gt;centillion&lt;/a&gt;,
the Data Commons search engine. This search engine provides a portal
to search for Data Commons-related Google Drive documents, Github issues,
Github pull requests, Github files, Groups.io email threads, and more.&lt;/p&gt;
&lt;p&gt;Our story picks up with centillion.&lt;/p&gt;
&lt;h2 id="presenting-centillion-the-data-commons-search-engine"&gt;Presenting centillion, the Data Commons search engine&lt;/h2&gt;
&lt;p&gt;One of the tools I have made heavy use of in support of
web infrastructure for the DCPPC project is Flask, a Python
library for running a web server. Flask is a very powerful
library, but it starts with a relatively simple premise:
Flask lets you create a web appplication that will bind
to a particular port, and you can then add "routes" 
that are endpoints a user can visit, like &lt;code&gt;/hello/world&lt;/code&gt;,
and link those routes to Python functions.&lt;/p&gt;
&lt;p&gt;On Monday 2018-10-28 the DIB Lab's weekly lab meeting featured
yours truly covering the topic of &lt;a href="https://github.com/charlesreid1/centillion"&gt;centillion&lt;/a&gt;,
the Data Commons search engine.&lt;/p&gt;
&lt;p&gt;centillion makes use of the Python library
&lt;a href="https://whoosh.readthedocs.io/en/latest/intro.html"&gt;whoosh&lt;/a&gt;
under the hood, to provide search functionality, while the web 
front-end uses Flask to connect Python functions to a website 
that users can interact with.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screen shot of the centillion search engine (2018-10-27)." src="images/centillion.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screen shot of the centillion search engine (2018-10-27).&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="centillion-architecture-the-short-version"&gt;centillion architecture: the short version&lt;/h2&gt;
&lt;p&gt;As of version 1.7, centillion is packaged as a Python package.
The centillion package consists of two submodules, corresponding
to the Flask frontend and Whoosh backend, respectively: &lt;code&gt;webapp&lt;/code&gt;
and &lt;code&gt;search&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="webapp-submodule"&gt;webapp submodule&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;centillion.webapp&lt;/code&gt; implements the Flask app and defines all
routes. When the user runs a search, it passes the query string
on to a &lt;code&gt;Search&lt;/code&gt; object from the &lt;code&gt;search&lt;/code&gt; submodule. The &lt;code&gt;webapp&lt;/code&gt;
submodule does not know anything about the details of the 
search engine or search index.&lt;/p&gt;
&lt;p&gt;This submodule is located in &lt;code&gt;src/webapp/&lt;/code&gt; in the 
&lt;a href="https://github.com/charlesreid1/centillion"&gt;centillion repo&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="search-submodule"&gt;search submodule&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;centillion.search&lt;/code&gt; implements a search engine using Whoosh,
a programming library for building search engines. Whoosh does not
implement any kind of front end, so its role is restricted entirely
to the back end.&lt;/p&gt;
&lt;p&gt;The search submodule also handles interfacing with the Github, Google,
and Groups.io APIs and translating the results of API calls from these
services into documents whose contents can be extracted and indexed 
by Whoosh.&lt;/p&gt;
&lt;p&gt;This submodule is located in &lt;code&gt;src/search/&lt;/code&gt; in the 
&lt;a href="https://github.com/charlesreid1/centillion"&gt;centillion repo&lt;/a&gt;.&lt;/p&gt;</content><category term="Centillion"></category><category term="DCPPC"></category><category term="Data Commons"></category><category term="Github"></category><category term="Community"></category><category term="Science"></category><category term="Centillion"></category></entry><entry><title>Current Projects</title><link href="https://charlesreid1.github.io/current-projects.html" rel="alternate"></link><published>2018-05-12T15:00:00-07:00</published><updated>2018-05-12T15:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-05-12:/current-projects.html</id><summary type="html">&lt;p&gt;A list of various ongoing projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pandocs and panflute - &lt;a href="http://pages.charlesreid1.com/how-do-i-pandoc"&gt;how do i pandoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pages.charlesreid1.com/b-captain-hook"&gt;captain hook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Git College of Surgery:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/git-college-of-surgery"&gt;git college of surgery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The first successful git-commit-ectomy took place on Friday, June 1, 2018.
    See &lt;a href="https://pages.charlesreid1.com/git-commit-ectomy"&gt;https://pages.charlesreid1.com/git-commit-ectomy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Finishing this requires a better way to visualize git commits&lt;/li&gt;
&lt;li&gt;To do that, we have developed &lt;a href="https://pages.charlesreid1.com/git-subway-maps"&gt;git-subway-maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python + APIs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;building an API that calls APIs so you can API while you API
    (a webhook that calls a hook - see &lt;a href="https://pages.charlesreid1.com/b-captain-hook"&gt;captain hook&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;testing APIs with Python + requests (currently top secret,
    coming soon.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python + Command line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;command line utilities with python â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;A list of various ongoing projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pandocs and panflute - &lt;a href="http://pages.charlesreid1.com/how-do-i-pandoc"&gt;how do i pandoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pages.charlesreid1.com/b-captain-hook"&gt;captain hook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Git College of Surgery:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/git-college-of-surgery"&gt;git college of surgery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The first successful git-commit-ectomy took place on Friday, June 1, 2018.
    See &lt;a href="https://pages.charlesreid1.com/git-commit-ectomy"&gt;https://pages.charlesreid1.com/git-commit-ectomy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Finishing this requires a better way to visualize git commits&lt;/li&gt;
&lt;li&gt;To do that, we have developed &lt;a href="https://pages.charlesreid1.com/git-subway-maps"&gt;git-subway-maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python + APIs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;building an API that calls APIs so you can API while you API
    (a webhook that calls a hook - see &lt;a href="https://pages.charlesreid1.com/b-captain-hook"&gt;captain hook&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;testing APIs with Python + requests (currently top secret,
    coming soon.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python + Command line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;command line utilities with python&lt;/li&gt;
&lt;li&gt;testing command line utilities with python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More stuff:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/charlesreid1/magic-flying-camel"&gt;magic flying camel&lt;/a&gt;
    is a seed repository for getting started with a simple
    Jekyll page on Github Pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/charlesreid1/magic-flying-pelican"&gt;magic flying pelican&lt;/a&gt;
    is a seed repository for getting started with a simple
    Pelican blog on Github Pages&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rise of the mind machines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rainbow-mind-machine/boring-mind-machine"&gt;boring-mind-machine&lt;/a&gt; - contains base classes
    used by all the mind machines&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rainbow-mind-machine/rainbow-mind-machine"&gt;rainbow-mind-machine&lt;/a&gt; - for running Twitter bot flocks&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rainbow-mind-machine/embarcadero-mind-machine"&gt;embarcadero-mind-machine&lt;/a&gt; - for running Github bot flocks&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rainbow-mind-machine/cheeseburger-mind-machine"&gt;cheeseburger-mind-machine&lt;/a&gt; - for running Google Drive bot flocks&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rainbow-mind-machine"&gt;The rainbow mind machine organization&lt;/a&gt; - for containing all of this craziness&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each software package in the mind machine suite
follows (or will follow) the prime number version
system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More info on the &lt;a href="https://charlesreid1.com/wiki/Prime_Number_Version_System"&gt;Prime Number Version System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This is another bit of documentation that was being blocked by 
    the ability to visualize git repositories&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pages.charlesreid1.com/git-subway-maps"&gt;git-subway-maps&lt;/a&gt; should
    help with this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyPi and Dockerhub:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rainbow mind machine software packages are requiring a more
    streamlined deployment process&lt;/li&gt;
&lt;li&gt;Makefiles are in progress&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://pages.charlesreid1.com/how-do-i-pandoc/"&gt;how do i pandoc&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Currently working on implementing several Pandoc/Panflute filters&lt;/li&gt;
&lt;li&gt;Also see &lt;a href="https://github.com/charlesreid1/translate-yer-docs"&gt;https://github.com/charlesreid1/translate-yer-docs&lt;/a&gt;
    for a practical usage of pandoc filters: translating documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://pages.charlesreid1.com/how-do-i-pelican"&gt;how do i pelican&lt;/a&gt; - a crash
course in building a pelican blog&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pages.charlesreid1.com/search-demo-mkdocs-material/"&gt;mkdocs search
demo&lt;/a&gt; a quick
pop-up site demonstrating how to use the built-in search functionality of 
mkdocs-material and lunr.js to index a pile of markdown files containing
interesting links.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pages.charlesreid1.com/b-captain-hook/"&gt;captain hook&lt;/a&gt; - we have already
mentioned captain hook several times, but this is the magic that makes
pages.charlesreid1.com possible.&lt;/p&gt;</content><category term="General"></category><category term="Git"></category><category term="Github"></category><category term="Software"></category><category term="Python"></category></entry><entry><title>Charlesreid1.com Stack</title><link href="https://charlesreid1.github.io/charlesreid1com-stack.html" rel="alternate"></link><published>2018-03-31T23:00:00-07:00</published><updated>2018-03-31T23:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-03-31:/charlesreid1com-stack.html</id><summary type="html">&lt;p&gt;This post is a preview of a series of posts to come, which will document
the process of containerizing the entire &lt;a href="https://charlesreid1.com"&gt;charlesreid1.com&lt;/a&gt; website.&lt;/p&gt;
&lt;p&gt;We will run through a lot of different moving parts and how to get them all working:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple domains and subdomains pointing to different services&lt;/li&gt;
&lt;li&gt;Docker pod for all services&lt;/li&gt;
&lt;li&gt;Nginx + SSL&lt;/li&gt;
&lt;li&gt;Reverse proxies via nginx&lt;/li&gt;
&lt;li&gt;Apache + MySQL + MediaWiki&lt;/li&gt;
&lt;li&gt;phpMyAdmin&lt;/li&gt;
&lt;li&gt;Gitea&lt;/li&gt;
&lt;li&gt;Configuration files under version control&lt;/li&gt;
&lt;li&gt;Data managed with backup/restore scripts and cron jobs&lt;/li&gt;
&lt;li&gt;Static content under version control&lt;/li&gt;
&lt;li&gt;Files server&lt;/li&gt;
&lt;li&gt;REST API&lt;/li&gt;
&lt;li&gt;Management LAN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the code for doing this is in &lt;a href="https://git.charlesreid1.com/docker/pod-charlesreid1"&gt;docker â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is a preview of a series of posts to come, which will document
the process of containerizing the entire &lt;a href="https://charlesreid1.com"&gt;charlesreid1.com&lt;/a&gt; website.&lt;/p&gt;
&lt;p&gt;We will run through a lot of different moving parts and how to get them all working:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple domains and subdomains pointing to different services&lt;/li&gt;
&lt;li&gt;Docker pod for all services&lt;/li&gt;
&lt;li&gt;Nginx + SSL&lt;/li&gt;
&lt;li&gt;Reverse proxies via nginx&lt;/li&gt;
&lt;li&gt;Apache + MySQL + MediaWiki&lt;/li&gt;
&lt;li&gt;phpMyAdmin&lt;/li&gt;
&lt;li&gt;Gitea&lt;/li&gt;
&lt;li&gt;Configuration files under version control&lt;/li&gt;
&lt;li&gt;Data managed with backup/restore scripts and cron jobs&lt;/li&gt;
&lt;li&gt;Static content under version control&lt;/li&gt;
&lt;li&gt;Files server&lt;/li&gt;
&lt;li&gt;REST API&lt;/li&gt;
&lt;li&gt;Management LAN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the code for doing this is in &lt;a href="https://git.charlesreid1.com/docker/pod-charlesreid1"&gt;docker/pod-charlesreid1&lt;/a&gt;,
in particular in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;The big switchover took nearly a month, but it was relatively seamless, and only required one false start and a few minutes of downtime.&lt;/p&gt;
&lt;p&gt;For now, check out the readme at &lt;a href="https://git.charlesreid1.com/docker/pod-charlesreid1"&gt;docker/pod-charlesreid1&lt;/a&gt;.
More details to come.&lt;/p&gt;</content><category term="Charlesreid1"></category><category term="web"></category><category term="git"></category><category term="pelican"></category><category term="nginx"></category><category term="ssl"></category><category term="apache"></category><category term="mediawiki"></category><category term="javascript"></category><category term="php"></category><category term="docker"></category><category term="security"></category></entry><entry><title>D3 Calendar Visualizations</title><link href="https://charlesreid1.github.io/d3-calendar-visualizations.html" rel="alternate"></link><published>2018-02-16T23:00:00-08:00</published><updated>2018-02-16T23:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-02-16:/d3-calendar-visualizations.html</id><summary type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cal-starting"&gt;Starting example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-changed"&gt;What needs to be changed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-data"&gt;Formatting the data&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#cal-data-mediawiki"&gt;MediaWiki edits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-data-git"&gt;Git commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-colormap"&gt;Creating the color map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-code"&gt;How the calendar code works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-final"&gt;Final result&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="cal-starting"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="starting-example"&gt;Starting example&lt;/h1&gt;
&lt;p&gt;Let's begin with a D3 example. Mike Bostock provided a &lt;a href="https://bl.ocks.org/mbostock/4063318"&gt;Calendar View&lt;/a&gt;
block illustrating how to draw a very interesting visualization of
large amounts of data over time:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bl.ocks.org/mbostock/4063318"&gt;
&lt;img src="images/calendar_example.png" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You might recognize this type of graph from Github, whose activity graph
shows the same visualization.&lt;/p&gt;
&lt;p&gt;The data shown in this example consists of several years of stock market data.
It is a simple but very large data set, with each data â€¦&lt;/p&gt;</summary><content type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cal-starting"&gt;Starting example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-changed"&gt;What needs to be changed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-data"&gt;Formatting the data&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#cal-data-mediawiki"&gt;MediaWiki edits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-data-git"&gt;Git commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-colormap"&gt;Creating the color map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-code"&gt;How the calendar code works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-final"&gt;Final result&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="cal-starting"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="starting-example"&gt;Starting example&lt;/h1&gt;
&lt;p&gt;Let's begin with a D3 example. Mike Bostock provided a &lt;a href="https://bl.ocks.org/mbostock/4063318"&gt;Calendar View&lt;/a&gt;
block illustrating how to draw a very interesting visualization of
large amounts of data over time:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bl.ocks.org/mbostock/4063318"&gt;
&lt;img src="images/calendar_example.png" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You might recognize this type of graph from Github, whose activity graph
shows the same visualization.&lt;/p&gt;
&lt;p&gt;The data shown in this example consists of several years of stock market data.
It is a simple but very large data set, with each data poit consisting of one date 
and one number (the percentage gain or loss).&lt;/p&gt;
&lt;p&gt;The example also shows how to perform a simple calculation from multiple fields
of the data to plot a derived quantity. In this case, the data consists of a 
high, low, and close, and the quantity being plotted is the percent change:&lt;/p&gt;
&lt;div class="math"&gt;$$
\mbox{% Change} = \dfrac{\mbox{Close} - \mbox{Open} }{\mbox{Open}}
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="cal-changed"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="what-needs-to-be-changed"&gt;What needs to be changed&lt;/h1&gt;
&lt;p&gt;To change this calendar visualization to visualize our own data, we need to change two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The data set being visualized&lt;/li&gt;
&lt;li&gt;The color map being used&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can leave the rest alone, or make small modifications as needed. Fortunately, these changes
are straightforward to make for the calendar visualization.&lt;/p&gt;
&lt;p&gt;&lt;a name="cal-data"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="formatting-the-data"&gt;Formatting the data&lt;/h1&gt;
&lt;p&gt;To modify the calendar graph for our own data, we'll output data as a time series: 
one column of date/time stamps, and another column of data to plot.&lt;/p&gt;
&lt;p&gt;Let's take a look at the &lt;a href="https://bl.ocks.org/mbostock/raw/4063318/dji.csv"&gt;original data&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Date,Open,High,Low,Close,Volume,Adj Close
2010-10-01,10789.72,10907.41,10759.14,10829.68,4298910000,10829.68
2010-09-30,10835.96,10960.99,10732.27,10788.05,4284160000,10788.05
2010-09-29,10857.98,10901.96,10759.75,10835.28,3990280000,10835.28
2010-09-28,10809.85,10905.44,10714.03,10858.14,4025840000,10858.14
2010-09-27,10860.03,10902.52,10776.44,10812.04,3587860000,10812.04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the code, we can see where this data is actually being parsed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rollup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, to modify this to suit our own custom data set, we can output our data as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;date,series1series2
2010-10-01,1,150
2010-10-02,2,250
2010-10-03,3,350
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and change the data parsing code to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rollup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="c1"&gt;// Change this depending on what you want to plot&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;series1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we discuss a few interesting applications of this visualization technique
and how to generate the data sets.&lt;/p&gt;
&lt;p&gt;&lt;a name="cal-data-mediawiki"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mediawiki-edits"&gt;MediaWiki Edits&lt;/h2&gt;
&lt;p&gt;One of the applications of interest was scraping a MediaWiki wiki
(&lt;a href="https://charlesreid1.com/wiki"&gt;charlesreid1.com/wiki&lt;/a&gt; to be precise)
to determine the number of edits made to the wiki on a given date.&lt;/p&gt;
&lt;p&gt;Fortunately, MediaWiki provides a rich API for interacting with 
wikis programmatically, and one of the best packages for doing it 
is &lt;a href="https://github.com/wikimedia/pywikibot"&gt;pywikibot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The way we compiled the data set for visualization was to scrape
page histories for every page on the wiki, creating one observation
for each edit on each page, and agglomerate the edits for each day
into a final count.&lt;/p&gt;
&lt;p&gt;The schema used was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_id&lt;/code&gt; - sha1 of text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt; - title of article&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timestamp&lt;/code&gt; - timestamp of edit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count&lt;/code&gt; - number of characters in edit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The pseudocode used to extract the page edits was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    get pages generator
    for page in pages:
        get page revisions generator
        for revision in page revisions:
            drop old doc from database
            insert new doc into database
            update record 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, a bit of pywikibot code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;# Get the site&lt;/span&gt;
    &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_site&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Get the iterator returning pages to process&lt;/span&gt;
    &lt;span class="n"&gt;page_generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_page_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Run the algorithm:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;page_generator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="n"&gt;page_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Now parsing page: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_title&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;rev_generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;revisions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;count_chars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rev_generator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="c1"&gt;# Assemble the NoSQL document&lt;/span&gt;
            &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
            &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;
            &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page_title&lt;/span&gt;
            &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;
            &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rev&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# Insert the new NoSQL document&lt;/span&gt;
            &lt;span class="n"&gt;page_history_collection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The mechanisms to obtain the page generator&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_site&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Get the Site object representing charlesreid1.com&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pywikibot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Site&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_page_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;max_items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Get the generator that returns the Page objects &lt;/span&gt;
&lt;span class="sd"&gt;    that we&amp;#39;re interested in, from Site s.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;page_generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allpages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_items&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;page_generator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_maximum_items&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;page_generator&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that pywikibot will already have the site configured
once you run the login script. For more information about
how to log in to a wiki with Pybot, and general information
about Pywikibot tasks, see the &lt;a href="https://charlesreid1.com/wiki/Pywikibot"&gt;Pywikibot page&lt;/a&gt;
on the charlesreid1.com wiki.&lt;/p&gt;
&lt;p&gt;&lt;a name="cal-data-git"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="git-commits"&gt;Git Commits&lt;/h2&gt;
&lt;p&gt;Another application of these types of calendars comes directly
from Github's visualization of the number of commits made by a 
user on each day.&lt;/p&gt;
&lt;p&gt;To extract this information, you will need a folder full of git repositories,
which will allow you to use git status to extract commit information from the 
log of each repository and assemble it all into a time series for a calendar.&lt;/p&gt;
&lt;p&gt;While there is a Python package for interfacing with the git API, git itself
is extremely powerful and is capable of doing this just fine. We use 
Python's subprocess library to make a call to git status, and parse the 
results into a data structure for exporting to CSV.&lt;/p&gt;
&lt;p&gt;Here is the code that was used to walk through each directory
and extract information from a git status command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;


&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clipped&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


    &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;orgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_dir&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/repositories/*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;orgs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;base_org&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;repos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="c1"&gt;# Print out the org and repo name&lt;/span&gt;
            &lt;span class="n"&gt;base_repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;log_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base_org&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;base_repo&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.log&amp;quot;&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_org&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;base_repo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

            &lt;span class="c1"&gt;# Get each commit&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;log_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ISO-8859-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;commit_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

                &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
                                &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;   
                                        &lt;span class="n"&gt;commit_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                        &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                        &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                        &lt;span class="n"&gt;commits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                     &lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="n"&gt;ignore_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;
                                &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;ag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agg&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;commits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;ag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;commits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;commits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;commit_counts.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last bit of code groups each commit by date, applying the
sum function to the number of commits (1 for each commit), 
to yield the total number of commits for each date:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;date,commits
2014-01-17,2
2014-03-26,11
2014-03-28,3
2014-04-01,4
2014-04-02,10
2014-04-03,4
2014-04-04,3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="cal-colormap"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="creating-the-color-map"&gt;Creating the color map&lt;/h1&gt;
&lt;p&gt;The best part of the process is picking a color map for the calendar.
The &lt;a href="http://colorbrewer2.org/#type=sequential&amp;amp;scheme=OrRd&amp;amp;n=7"&gt;ColorBrewer&lt;/a&gt;
site has some good color palettes inspired by cartographic color needs.
Python also provides some useful libraries and functionality for 
generating colormaps.&lt;/p&gt;
&lt;p&gt;There are a number of options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://matplotlib.org/users/colormaps.html"&gt;Matplotlib colormaps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bokeh.github.io/colorcet/"&gt;Bokeh colorcet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matplotlib.org/cmocean/"&gt;Ocean colormaps: cmocean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here, we'll cover an alternative approach:
defining a colormap that linearly interpolates
between colors at particular locations on the 
interval 0 to 1.&lt;/p&gt;
&lt;p&gt;We will also use the &lt;a href="https://github.com/ubernostrum/webcolors"&gt;webcolors&lt;/a&gt; 
module in Python to convert between colors in 
various formats, and a function &lt;code&gt;make_cmap()&lt;/code&gt;
available from &lt;a href="http://schubert.atmos.colostate.edu/~cslocum/code/custom_cmap.py"&gt;Chris Slocum&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://git.charlesreid1.com/d3/charlesreid1-calendar/src/master/make_cmaps.py"&gt;Link to &lt;code&gt;make_cmap.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;make_cmap.py:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_cmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    make_cmap takes a list of tuples which contain RGB values. The RGB&lt;/span&gt;
&lt;span class="sd"&gt;    values may either be in 8-bit [0 to 255] (in which bit must be set to&lt;/span&gt;
&lt;span class="sd"&gt;    True when called) or arithmetic [0 to 1] (default). make_cmap returns&lt;/span&gt;
&lt;span class="sd"&gt;    a cmap with equally spaced colors.&lt;/span&gt;
&lt;span class="sd"&gt;    Arrange your tuples so that the first color is the lowest value for the&lt;/span&gt;
&lt;span class="sd"&gt;    colorbar and the last is the highest.&lt;/span&gt;
&lt;span class="sd"&gt;    position contains values from 0 to 1 to dictate the location of each color.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;mpl&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
    &lt;span class="n"&gt;bit_rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;position length must be the same as colors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;position must start with 0 and end with 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bit_rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                         &lt;span class="n"&gt;bit_rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
                         &lt;span class="n"&gt;bit_rgb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
    &lt;span class="n"&gt;cdict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:[],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:[],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:[]}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cdict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="n"&gt;cdict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="n"&gt;cdict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

    &lt;span class="n"&gt;cmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mpl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LinearSegmentedColormap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_colormap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cdict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, an example of how we can call this function: 
this code creates a colormap ranging from purple to orange.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;purple_to_orange&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Dark purple to bright orange.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;start_hex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#4d2b4b&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mid1_hex&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#8c6bb1&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mid2_hex&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#fdae6b&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;end_hex&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#f16913&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;start_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;webcolors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex_to_rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_hex&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;mid1_color&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;webcolors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex_to_rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid1_hex&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;mid2_color&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;webcolors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex_to_rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid2_hex&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;end_color&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;webcolors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex_to_rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end_hex&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid1_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid2_color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_color&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_cmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, the following code will evaluate the colormap to create
9 separate hex colors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;# Now just call cm(0.0) thru cm(1.0)&lt;/span&gt;
    &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="n"&gt;hex_colorz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
        &lt;span class="n"&gt;rgbd_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;rgb_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rgbd_color&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;hex_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webcolors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb_to_hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rgb_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;hex_colorz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hex_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hex_colorz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="cal-code"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="how-the-calendar-code-works"&gt;How the calendar code works&lt;/h1&gt;
&lt;p&gt;Start with the HTML document: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;background: #272b30;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;calendar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://d3js.org/d3.v4.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;/* D3 code goes here */&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, the Javascript code that creates the calendar
visualization. We'll walk through each part.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;700&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;cellSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// big integers&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;formatStuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;TEH COLORRRZZZZ&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;realBackgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#272b30&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tileBackgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;realBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//&amp;quot;#3a3a3a&amp;quot;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tileStrokeColor&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#3a3a3a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;monthStrokeColor&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#4a4a4a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scaleQuantize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#4d2b4b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#5a3961&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#684777&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#77558f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#8463a5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#cc9189&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#fba25c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#f78e43&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#f47b2b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#f16913&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// purple orange&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The canvas goes on the div tag with id &lt;code&gt;calendar&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Make the canvas&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;div#calendar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;svg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;svg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;translate(&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;



&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Write the years&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;translate(-6,&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)rotate(-90)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;font-family&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sans-serif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;font-size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#bbb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text-anchor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;middle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next two portions are the meat of the calendar visualization,
drawing the tiles and outlines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Draw the tiles representing days of the year&lt;/span&gt;
&lt;span class="cm"&gt;(also draw tile outlines)&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="nx"&gt;tileBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stroke&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tileStrokeColor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeDays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeWeek&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;datum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;


&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;Draw outlines of groups representing months&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stroke&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;monthStrokeColor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeMonths&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pathMonth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, the code that loads the data, filters it, performs any calculations,
and draws colored rectangles on top of the baseline square grid:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/*
Load up the csv file
*/
d3.csv(&amp;quot;page_edits.csv&amp;quot;, function(error, csv) {
  if (error) throw error;

  /*
  This is where you decide what values to plot
  */
  var data = d3.nest()
        .key(function(d) { return d.timestamp ; })
        .rollup(function(d) { 
            return d[0].edits; 
        })
        .object(csv);

  rect.filter(function(d) { return d in data; })
        .attr(&amp;quot;fill&amp;quot;, function(d) { return color(data[d]); })
        .append(&amp;quot;title&amp;quot;)
        .text(function(d) { return d + &amp;quot;: &amp;quot; + formatStuff(data[d]); });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, the most mysterious bit of magic in this code is 
the code that draws the squares around the months.
This has to use the coordinates of the beginning and end 
of the months to draw a complicated square path. &lt;/p&gt;
&lt;p&gt;It's magic, it works, we're happy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;pathMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;d0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;w0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeWeek&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;d1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;w1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeWeek&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;M&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;d0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt;
      &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;H&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;w0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;V&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt;
      &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;H&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;w1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;V&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt;
      &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;H&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;V&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;H&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;cellSize&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="cal-final"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="final-result"&gt;Final result&lt;/h1&gt;
&lt;p&gt;The finished product, visualizing edits to &lt;a href="https://charlesreid1.com/wiki/"&gt;charlesreid1.com/wiki/&lt;/a&gt;
and commits to &lt;a href="http://git.charlesreid1.com"&gt;git.charlesreid1.com&lt;/a&gt;,
can be seen at the following links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wiki edits calendar: &lt;a href="https://charlesreid1.com/wiki_calendar"&gt;https://charlesreid1.com/wiki_calendar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Git commits calendar: &lt;a href="https://git.charlesreid1.com/git_calendar"&gt;https://git.charlesreid1.com/git_calendar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.com/wiki_calendar"&gt;
&lt;img src="images/wiki_calendar.png" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://charlesreid1.com/git_calendar"&gt;
&lt;img src="images/git_calendar.png" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Javascript"></category><category term="javascript"></category><category term="d3"></category><category term="computer science"></category><category term="python"></category><category term="colors"></category></entry><entry><title>Project Euler Problem 172</title><link href="https://charlesreid1.github.io/project-euler-problem-172.html" rel="alternate"></link><published>2018-02-16T18:30:00-08:00</published><updated>2018-02-16T18:30:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-02-16:/project-euler-problem-172.html</id><summary type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe172-problem"&gt;Overview: Problem 172&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-background"&gt;Background&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe172-multiset"&gt;Multiset Permutations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-problemsoln"&gt;A Simple Problem (And Solution)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-complicated"&gt;A Slightly More Complicated Problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-algorithm"&gt;Algorithm&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe172-zero"&gt;Ignoring Numbers Starting with 0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-code"&gt;Code&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe172-test"&gt;Test Cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-recursion"&gt;Recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-pseudocode"&gt;Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-python-code"&gt;Python Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-final"&gt;Final Answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="pe172-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="overview-problem-172"&gt;Overview: Problem 172&lt;/h1&gt;
&lt;p&gt;How many 18-digit numbers &lt;span class="math"&gt;\(n\)&lt;/span&gt; (without leading zeros) are there 
such that no digit occurs more than three times in &lt;span class="math"&gt;\(n\)&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://projecteuler.net/problem=172"&gt;Link to Project Euler Problem 172&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="pe172-background"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;Project Euler Problem 172 is your classic Project Euler problem: short, simple, and overwhelmingly complicated.&lt;/p&gt;
&lt;p&gt;To nail this one, it's important to start simple - very simple. What I'll do is walk through the process 
of â€¦&lt;/p&gt;</summary><content type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe172-problem"&gt;Overview: Problem 172&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-background"&gt;Background&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe172-multiset"&gt;Multiset Permutations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-problemsoln"&gt;A Simple Problem (And Solution)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-complicated"&gt;A Slightly More Complicated Problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-algorithm"&gt;Algorithm&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe172-zero"&gt;Ignoring Numbers Starting with 0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-code"&gt;Code&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe172-test"&gt;Test Cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-recursion"&gt;Recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-pseudocode"&gt;Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-python-code"&gt;Python Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-final"&gt;Final Answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="pe172-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="overview-problem-172"&gt;Overview: Problem 172&lt;/h1&gt;
&lt;p&gt;How many 18-digit numbers &lt;span class="math"&gt;\(n\)&lt;/span&gt; (without leading zeros) are there 
such that no digit occurs more than three times in &lt;span class="math"&gt;\(n\)&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://projecteuler.net/problem=172"&gt;Link to Project Euler Problem 172&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="pe172-background"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;Project Euler Problem 172 is your classic Project Euler problem: short, simple, and overwhelmingly complicated.&lt;/p&gt;
&lt;p&gt;To nail this one, it's important to start simple - very simple. What I'll do is walk through the process 
of breaking this problem down to find and generalize the patterns needed to count permutations of digits.&lt;/p&gt;
&lt;p&gt;First, in combinatorics problems it is important to think about what is changing, and how to count
possible outcomes one piece at a time. Then the overall pieces can be combined to get the total count. 
In this case, we can think about a case for each digit: the case of 3 occurrences, the case of 2 
occurrences, the case of 1 occurrence, and the case of 0 occurrences. Depending on the case, we limit 
our choices for later digits.&lt;/p&gt;
&lt;p&gt;Let's start with a similar, but much simpler, problem: how do we construct a binary number with N 
digits and no more than m 0s and no more than m 1s?&lt;/p&gt;
&lt;p&gt;In fact, let's make it even easier: how do we construct a 10 digit binary number with no more than 
5 0's and no more than 5 1's?&lt;/p&gt;
&lt;p&gt;The answer is, there is only ONE way to choose no more than 5 0's and no more than 5 1's to form a 
10 digit number, and that's by having exactly 5 0's and 5 1's. Now that we know exactly how many of 
each digit we have, we can count the number of permutations of the number 0000011111 (the number of 
permutations).&lt;/p&gt;
&lt;p&gt;&lt;a name="pe172-multiset"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="multiset-permutations"&gt;Multiset Permutations&lt;/h2&gt;
&lt;p&gt;Note that multiset permutations are also discussed on the following wiki pages and blog posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Project Euler/172"&gt;Wiki: Project Euler/172&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Project Euler/15"&gt;Wiki: Project Euler/15&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/ Project Euler/502"&gt;Wiki: Project Euler/502&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/ AOCP/Multisets"&gt;Wiki: AOCP/Multisets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/shortest-lattice-paths-and-multiset-permutations.html"&gt;Blog: Shortest Lattice Paths and Multiset Permutations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we are selecting from a group of &lt;span class="math"&gt;\(N_1\)&lt;/span&gt; things of type A, &lt;span class="math"&gt;\(N_2\)&lt;/span&gt; things of type B, and &lt;span class="math"&gt;\(N_3\)&lt;/span&gt; things of type C 
to form a total of &lt;span class="math"&gt;\(N\)&lt;/span&gt; things, this type of combinatorics problem is called a multiset permutation, and the 
total number of ways of arranging this set of 3 things is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{N}{N_1, N_2, N_3} = \dfrac{N!}{N_1! N_2! N_3!}
$$&lt;/div&gt;
&lt;p&gt;In fact, this generalizes, for &lt;span class="math"&gt;\(k\)&lt;/span&gt; classes of things we have a &lt;span class="math"&gt;\(k\)&lt;/span&gt;-set permutation:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{N}{N_1, \dots, N_k} = \dfrac{N!}{N_1! \dots N_k!}
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="pe172-problemsoln"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="a-simple-problem-and-solution"&gt;A Simple Problem (And Solution)&lt;/h2&gt;
&lt;p&gt;Back to the problem at hand: to count the number of ways of placing 5 0s and 5 1s to form a 10 digit number.&lt;/p&gt;
&lt;p&gt;Once we place 5 digits into any of the 10 available slots, that fixes the locations of the remaining 5 digits. 
However, we still have to include two 5! values, to account for all possible duplicates if we exchanged all 5 
of the 1s with one another, or all 5 of the 0s with one another. We use the expression:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{10}{5} = \dfrac{10!}{5! 5!} = 10 \times 9 \times 8 \times 7 \times 6
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="pe172-complicated"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="a-slightly-more-complicated-problem"&gt;A slightly More Complicated Problem&lt;/h2&gt;
&lt;p&gt;To solve a slightly more complicated problem: suppose we have to assemble a 10-digit binary number from no more than 6 0s and no more than 6 1s?&lt;/p&gt;
&lt;p&gt;Now we have 3 possible cases of numbers of 0s:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;4 0s: 0000111111 - and its permutations

5 0s: 0000011111 - and its permutations

6 0s: 0000001111 - and its permutations
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For each of these cases, we can think of it as the "bucket" of 0s containing 4 0s (5 and 6 0s, respectively) 
and the "bucket" of 1s containing 6 1s (5 and 4 1s, respectively). We still have a number of permutations 
that we can form using this given number of 0s and 1s, given by a multiset permutation expression.&lt;/p&gt;
&lt;p&gt;For each case, we have a multiset permutation expression that tells us how many permutations we can form 
from the given number of 0s and 1s:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{ N }{ N_0, N_1 }
$$&lt;/div&gt;
&lt;p&gt;So we have three possible outcomes, and the total number of arrangements is the sum of these three cases:&lt;/p&gt;
&lt;div class="math"&gt;$$
N_{perms} = \binom{ 10 }{ 6, 4} + \binom{ 10 }{ 5, 5 } + \binom{ 10 }{ 6 , 4 }
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="pe172-algorithm"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="algorithm"&gt;Algorithm&lt;/h1&gt;
&lt;p&gt;We can generalize the process. Suppose we are forming a number of length N from a number of digits/classes &lt;span class="math"&gt;\(k\)&lt;/span&gt; 
labeled from &lt;span class="math"&gt;\(0 \dots k-1\)&lt;/span&gt;, and each digit/class can only appear a maximum of &lt;span class="math"&gt;\(m\)&lt;/span&gt; times.&lt;/p&gt;
&lt;p&gt;The number of combinations that can be formed for a given &lt;span class="math"&gt;\(N, k, m\)&lt;/span&gt; is given by the multiset permutation 
expression above. So the total number of permutations that can be formed is a sum of these multiset permutation 
expressions, over each possible combination of digits/classes into a number of length &lt;span class="math"&gt;\(N\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In computer science terms, we can think of this as a nested for loop or dynamic program; in mathematical terms, 
we can think of a sequence of summations whose limits depend on the variables in the other summations.&lt;/p&gt;
&lt;div class="math"&gt;$$
\sum_{N_1} \sum_{N_2} \dots \sum_{N_k} \binom{N}{N_0, N_1, N_2, \dots, N_{k-1}}
$$&lt;/div&gt;
&lt;p&gt;where the limits of the summations are given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
N_1 = \min \left(N - (k-1) m, 0 \right) \dots m
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
N_2 = \min \left( N - N_1 - (k-2) m, 0 \right) \dots m
$$&lt;/div&gt;
&lt;p&gt;etc...&lt;/p&gt;
&lt;div class="math"&gt;$$
N_{k-1} = \min \left( N - N_1 - N_2 - \dots - N_{k-2}, 0 \right) \dots m
$$&lt;/div&gt;
&lt;p&gt;these all fix the number of zeros N_0:&lt;/p&gt;
&lt;div class="math"&gt;$$
N_0 = N - N_1 - N_2 - N_3 - \dots - N_k
$$&lt;/div&gt;
&lt;p&gt;Notice that we ignore N_0 in the list of summations, because fixing the number of the first k-1 digits/classes 
(1s, 2s, 3s, ..., (k-1)s) will fix the number of 0s. Alternatively, we could count 0s and include a summation over &lt;span class="math"&gt;\(N_0\)&lt;/span&gt;, 
and eliminate the last summation over &lt;span class="math"&gt;\(k-1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;However, the multiset permutation expression includes ALL of the N's, from &lt;span class="math"&gt;\(N_0\)&lt;/span&gt; to &lt;span class="math"&gt;\(N_{k-1}\)&lt;/span&gt;, since the choice 
of each variable leads to additional permutations.&lt;/p&gt;
&lt;p&gt;Also note that any algorithm implementing this procedure can save time by checking if, for the preceding combinations 
of &lt;span class="math"&gt;\(N\)&lt;/span&gt;, we have already reached the maximum possible digits that can be selected. (Alternatively, we could write the 
upper limit of the summations as expressions depending on the prior values of &lt;span class="math"&gt;\(N_i\)&lt;/span&gt;, but we'll keep it simple.) &lt;/p&gt;
&lt;p&gt;&lt;a name="pe172-zero"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="ignoring-numbers-starting-with-zero"&gt;Ignoring Numbers Starting with Zero&lt;/h2&gt;
&lt;p&gt;We have one last hurdle remaining, and that is how to ignore numbers that start with 0.&lt;/p&gt;
&lt;p&gt;If we think about the problem as selecting the number of times each digit is repeated, then assembling that 
selection into all possible permutations, fixing the first digit as 0 is equivalent to removing one from the 
total length of the number that must be assembled, and removing one from the possible 0s that will go in the 
final number. Thus, if we are assembling an N digit number from &lt;span class="math"&gt;\(N_0\)&lt;/span&gt; 0s, &lt;span class="math"&gt;\(N_1\)&lt;/span&gt; 1s, &lt;span class="math"&gt;\(N_2\)&lt;/span&gt; 2s, &lt;span class="math"&gt;\(N_3\)&lt;/span&gt; 3s, on up to &lt;span class="math"&gt;\(N_9\)&lt;/span&gt; 9s, 
then the total number of permutations is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{ N }{N_0, N_1, \dots, N_9}
$$&lt;/div&gt;
&lt;p&gt;If we fix the first digit as 0, the remaining number of permutations is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{N-1}{ N_0-1, N_1, \dots, N_9 }
$$&lt;/div&gt;
&lt;p&gt;Therefore, the number of permutations, excluding those beginning with 0, is written:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{ N }{N_0, N_1, \dots, N_9} - \binom{N-1}{ N_0-1, N_1, \dots, N_9 }
$$&lt;/div&gt;
&lt;p&gt;Also, it is important to note that if N_0 = 0 to begin with, there are no possible ways of assembling numbers that begin with 0 because there are no 0s in the number, so the second term becomes 0:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{ N }{0, N_1, \dots, N_9} - 0
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="pe172-code"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="code"&gt;Code&lt;/h1&gt;
&lt;p&gt;&lt;a name="pe172-test-cases"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="test-cases"&gt;Test Cases&lt;/h2&gt;
&lt;h3 id="test-case-1"&gt;Test Case 1&lt;/h3&gt;
&lt;p&gt;Assemble two digits &lt;span class="math"&gt;\(\{0,1\}\)&lt;/span&gt; into a 10-digit number, if each digit &lt;span class="math"&gt;\(\{0,1\}\)&lt;/span&gt; can occur up to 5 times.&lt;/p&gt;
&lt;p&gt;In this case, we know that 0 and 1 must occur exactly 5 times each. Now we are asking how we can assemble 
two sets of 5 things into 10 slots. This is a multiset permutation problem:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{10}{5,5} = \dfrac{10!}{5! \cdot 5!} = \dfrac{10 \cdot 9 \cdot 8 \cdot 7 \cdot 6}{5 \cdot 4 \cdot 3 \cdot 2 \cdot 1} = 252
$$&lt;/div&gt;
&lt;p&gt;But wait! We also want to exclude numbers starting with 0, so we actually have:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{10}{5, 5} - \binom{9}{4, 5} = 126
$$&lt;/div&gt;
&lt;p&gt;which is half of 252 - exactly what we would expect.&lt;/p&gt;
&lt;h3 id="test-case-2"&gt;Test Case 2&lt;/h3&gt;
&lt;p&gt;Assemble three digits &lt;span class="math"&gt;\(\{[0, 1, 2\}\)&lt;/span&gt; into a 6-digit number, if each digit &lt;span class="math"&gt;\(\{0, 1, 2\}\)&lt;/span&gt; can occur up to 3 times. No number should start with 0.&lt;/p&gt;
&lt;p&gt;In the prior case, we had one outcome of number of 0s and 1s, but in this case, we have a larger number of outcomes that we might see.&lt;/p&gt;
&lt;p&gt;Evaluating the expressions for the limits of &lt;span class="math"&gt;\(N_i\)&lt;/span&gt;, we get:&lt;/p&gt;
&lt;div class="math"&gt;$$
\sum_{N_0 = 0}^{3} \sum_{N_1 = \max(0, 3 - N_0) }^{3} \binom{6}{N_0, N_1, (N-N_0-N_1)}
$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(N_2 = N - N_0 - N_1\)&lt;/span&gt;. Written out, this becomes the total number of possible 6-digit numbers,&lt;/p&gt;
&lt;div class="math"&gt;$$
a = \binom{6}{0,3,3} + \binom{6}{1,2,3} + \binom{6}{1,3,2} + \binom{6}{2,1,3} + \binom{6}{2,2,2} + \\
\binom{6}{2,3,1} + \binom{6}{3,0,3} + \binom{6}{3,1,2} + \binom{6}{3,2,1} + \binom{6}{3,3,0}
$$&lt;/div&gt;
&lt;p&gt;minus the number of 6-digit numbers starting with 0:&lt;/p&gt;
&lt;div class="math"&gt;$$
b = 0 + \binom{5}{0,2,3} + \binom{5}{0,3,2} + \binom{5}{1,1,3} + \binom{5}{1,2,2} + \\
\binom{5}{1,3,1} + \binom{5}{2,0,3} + \binom{5}{2,1,2} + \binom{5}{2,2,1} + \binom{5}{2,3,0}
$$&lt;/div&gt;
&lt;p&gt;Let &lt;span class="math"&gt;\(a\)&lt;/span&gt; be the first expression and &lt;span class="math"&gt;\(b\)&lt;/span&gt; be the second expression; then the total is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In [40]: np.sum(a)
Out[40]: 510.0

In [41]: np.sum(b)
Out[41]: 170.0

In [42]: np.sum(a) - np.sum(b)
Out[42]: 340.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="math"&gt;$$
a - b = 340
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="pe172-recursion"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="recursion"&gt;Recursion&lt;/h2&gt;
&lt;p&gt;The essence of this problem is a nested for loop - but because we have 9 digits to deal with, a 9-level 
nested for loop would be a big headache and would not generalize well.&lt;/p&gt;
&lt;p&gt;Instead, we can write a recursive method that is called for each of the &lt;span class="math"&gt;\(k\)&lt;/span&gt; (9) digits being selected 
to compose the final &lt;span class="math"&gt;\(N\)&lt;/span&gt;- (18-) digit number.&lt;/p&gt;
&lt;p&gt;The recursive method looks something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;solution_count&lt;/span&gt;
&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recursive_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;compute&lt;/span&gt; &lt;span class="n"&gt;multiset&lt;/span&gt; &lt;span class="n"&gt;permutation&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;
        &lt;span class="n"&gt;increment&lt;/span&gt; &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;solutions&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
        &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;assemble&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;N_i&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;N_i&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;
            &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;recursive_method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;unset&lt;/span&gt; &lt;span class="n"&gt;N_i&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="pe172-pseudocode"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pseudocode"&gt;Pseudocode&lt;/h2&gt;
&lt;p&gt;Computing the number of possible integers n that meet the specified criteria thus boils down to a long sequence of nested summations (nested loops).&lt;/p&gt;
&lt;p&gt;The problem is posed for &lt;span class="math"&gt;\(N = 18, k = 10, m = 3\)&lt;/span&gt;. For this case, the final expression for the total number of permutations is:&lt;/p&gt;
&lt;div class="math"&gt;$$
\sum_{N_1} \sum_{N_2} \sum_{N_3} \sum_{N_4} \sum_{N_5} \sum_{N_6} \sum_{N_7} \sum_{N_8} \sum_{N_9} \binom{N}{N_0, N_1, N_2, \dots, N_9} - \binom{N-1}{N_0-1, N_1, N_2, \dots, N_9}
$$&lt;/div&gt;
&lt;p&gt;where the limits of summation are given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
N_1 = \max \left( N - (10-1) m, 0 \right) \dots m
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
N_2 = \max \left( N - N_1 - (10-2) m, 0 \right) \dots m
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
N_3 = \max \left( N - N_1 - N_2 - (10-3) m, 0 \right) \dots m
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
N_4 = \max \left( N - N_1 - N_2 - N_3 - (10-4) m, 0 \right) \dots m
$$&lt;/div&gt;
&lt;p&gt;etc...&lt;/p&gt;
&lt;div class="math"&gt;$$
N_9 = \max \left( N - N_1 - N_2 - \dots - N_7 - N_8, 0 \right) \dots m
$$&lt;/div&gt;
&lt;p&gt;and from these, &lt;span class="math"&gt;\(N_0\)&lt;/span&gt; is determined by:&lt;/p&gt;
&lt;div class="math"&gt;$$
N_0 = N - N_1 - N_2 - \dots - N_8 - N_9
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="pe172-python-code"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="python-code"&gt;Python Code&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://git.charlesreid1.com/cs/euler/raw/master/scratch/Round7_170-180/Problem172.py"&gt;Link to Problem 172 Python Code at git.charlesreid1.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To implement the solution to Problem 172 in Python, we used recursion, as mentioned above.
THe only tricky part of implementing this recursive method was the usual challenge with 
recursive methods: keeping track of the total number of solutions found via a global variable.&lt;/p&gt;
&lt;p&gt;To do this in Python, we declare a variable outside the scope of a given function, and we use
that variable as a global variable by declaring it with the global keyword.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="c1"&gt;# Real problem:&lt;/span&gt;
&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;


&lt;span class="n"&gt;solution_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;factorials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have a &lt;code&gt;main()&lt;/code&gt; driver method to call the recursive method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;solution_count&lt;/span&gt;
    &lt;span class="n"&gt;n_tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;
    &lt;span class="n"&gt;recursive_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Total number of permutations:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solution_count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We have the recursive backtracking method that constructs
all combinations of &lt;span class="math"&gt;\(k\)&lt;/span&gt; digits into &lt;span class="math"&gt;\(N\)&lt;/span&gt;-digit numbers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recursive_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ni&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Use recursive backtracking to form all possible &lt;/span&gt;
&lt;span class="sd"&gt;    combinations of k digits into N-digit numbers &lt;/span&gt;
&lt;span class="sd"&gt;    such that the number of digits is m or less.&lt;/span&gt;

&lt;span class="sd"&gt;    (n_tuple is actually a list.)&lt;/span&gt;

&lt;span class="sd"&gt;    ni = current class step 1..(k-1)&lt;/span&gt;
&lt;span class="sd"&gt;    n_tuple = list of number of digits for each class 0 through k&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;solution_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ni&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c1"&gt;# N_1 through N_(k-1) have been set,&lt;/span&gt;
        &lt;span class="c1"&gt;# now it is time to set N_0:&lt;/span&gt;
        &lt;span class="c1"&gt;# N_0 = N - N_1 - N_2 - N_3 - .. - N_{k-1}&lt;/span&gt;
        &lt;span class="n"&gt;sum_N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
        &lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sum_N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Compute multiset permutation&lt;/span&gt;
        &lt;span class="n"&gt;solution_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;multiset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;multiset_0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="c1"&gt;# Problem: we are not stopping &lt;/span&gt;
        &lt;span class="c1"&gt;# when the sum of digits chosen&lt;/span&gt;
        &lt;span class="c1"&gt;# is greater than N&lt;/span&gt;

        &lt;span class="c1"&gt;# Assemble the minimum and maximum limits for N_i:&lt;/span&gt;
        &lt;span class="c1"&gt;# (Everything up to ni-1 should be defined, no TypeErrors due to None)&lt;/span&gt;
        &lt;span class="n"&gt;sum_N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ni&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
        &lt;span class="n"&gt;ktm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ni&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;
        &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sum_N&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ktm&lt;/span&gt;
        &lt;span class="n"&gt;minn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# Note: previously this was just maxx=m.&lt;/span&gt;
        &lt;span class="c1"&gt;# This required a check around each call to&lt;/span&gt;
        &lt;span class="c1"&gt;# recursive_method to see if the sum of n_tuple&lt;/span&gt;
        &lt;span class="c1"&gt;# was already maxed out. Now we just do it here.&lt;/span&gt;
        &lt;span class="n"&gt;maxx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sum_N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;N_i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;maxx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

                &lt;span class="c1"&gt;# Set&lt;/span&gt;
                &lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ni&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;N_i&lt;/span&gt;

                &lt;span class="c1"&gt;# Explore&lt;/span&gt;
                &lt;span class="n"&gt;recursive_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ni&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="c1"&gt;# Unset&lt;/span&gt;
                &lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ni&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We have a &lt;code&gt;multiset()&lt;/code&gt; method that evaluates the multiset permutation count formula:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{N}{N_1, \dots, N_k} = \dfrac{N!}{N_1! \dots N_k!}
$$&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Number of multiset permutations&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiset_0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Number of multiset permutations that start with 0&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_tuple&lt;/span&gt;&lt;span class="p"&gt;)]))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally, we have a &lt;code&gt;factorial()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Factorial utility&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Error: negative factorials not possible&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At the bottom of the file, we ensure that the driver is run when the 
funtion is run directly through Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="pe172-final"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="final-answer"&gt;Final Answer&lt;/h1&gt;
&lt;p&gt;Setting the correct parameters should result in the following result:&lt;/p&gt;
&lt;div class="math"&gt;$$
P = 227,485,267,000,992,000
$$&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Mathematics"></category><category term="computer science"></category><category term="mathematics"></category><category term="factors"></category><category term="sequences"></category><category term="euler"></category><category term="project euler"></category></entry><entry><title>4x4 Rubik's Cube: Part 4: Sequence Order</title><link href="https://charlesreid1.github.io/4x4-rubiks-cube-part-4-sequence-order.html" rel="alternate"></link><published>2018-01-25T10:00:00-08:00</published><updated>2018-01-25T10:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-01-25:/4x4-rubiks-cube-part-4-sequence-order.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This is Part 4 of a 4-part blog post 
on the mathematics of the 4x4 Rubik's Cube, 
its relation to algorithms, and some 
curious properties of Rubik's Cubes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;See Part 1 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html"&gt;Part 1: Representations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 2 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-2-permutations.html"&gt;Part 2: Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 3 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html"&gt;Part 3: Factoring Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You are currently reading Part 4 of this blog post: &lt;strong&gt;Part 4: Sequence Order&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks4-intro"&gt;Introduction&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks4-intro-order"&gt;Order of a Sequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks4-intro-sofar"&gt;What We Have Covered So Far&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks4-factoring"&gt;Factoring Rubik's Cube Permutations&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks4-factoring-review"&gt;Factoring Permutations: A Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks4-factoring-cube"&gt;Factoring Rubik's â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is Part 4 of a 4-part blog post 
on the mathematics of the 4x4 Rubik's Cube, 
its relation to algorithms, and some 
curious properties of Rubik's Cubes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;See Part 1 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html"&gt;Part 1: Representations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 2 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-2-permutations.html"&gt;Part 2: Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 3 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html"&gt;Part 3: Factoring Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You are currently reading Part 4 of this blog post: &lt;strong&gt;Part 4: Sequence Order&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks4-intro"&gt;Introduction&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks4-intro-order"&gt;Order of a Sequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks4-intro-sofar"&gt;What We Have Covered So Far&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks4-factoring"&gt;Factoring Rubik's Cube Permutations&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks4-factoring-review"&gt;Factoring Permutations: A Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks4-factoring-cube"&gt;Factoring Rubik's Cube Permutations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks4-factoring-R"&gt;Computing the Order of Sequence R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks4-factoring-URUpRp"&gt;Computing the Order of Sequence U R U' R'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks4-factoring-UR"&gt;Computing the Order of Sequence U R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks4-code"&gt;Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks4-conclusions"&gt;Project Conclusions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks4-references"&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks4-appendix"&gt;Appendix&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks4-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a name="rubiks4-intro-order"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="order-of-a-sequence"&gt;Order of a Sequence&lt;/h2&gt;
&lt;p&gt;As a reminder of our overarching goal: starting with a 
4x4 Rubik's Revenge cube, an arbitrary sequence of moves
will scramble the faces of the cube; but if that move sequence 
is repeatedly applied, eventually the cube will return to its
solved state. &lt;/p&gt;
&lt;p&gt;The simplest example is rotating a single face: after applying
the rotation move four times to any face of a solved cube,
the cube will return back to the solved state.&lt;/p&gt;
&lt;p&gt;This is also true of more complicated move sequences, such as
&lt;code&gt;U R U' R'&lt;/code&gt;, which returns the cube back to its original state
after 6 applications, or the move sequence &lt;code&gt;U R&lt;/code&gt;, which
must be applied 105 times before the cube returns back to
its original solved state.&lt;/p&gt;
&lt;p&gt;Our goal is to predict this number: given a move sequence,
how many times must that move sequence be applied to a solved 
cube to return the cube back to its solved state?&lt;/p&gt;
&lt;p&gt;This number is called the &lt;em&gt;order&lt;/em&gt; of a sequence.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks4-intro-sofar"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="what-we-have-covered-so-far"&gt;What We Have Covered So Far&lt;/h2&gt;
&lt;p&gt;In prior posts, we have covered a number of key topics 
that this post will synthesize.&lt;/p&gt;
&lt;p&gt;We started &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html"&gt;Part 1&lt;/a&gt; by discussing ways of representing 
the Rubik's Revenge cube, and we settled on a 96-tuple
representation indicating which faces had moved to what 
locations.&lt;/p&gt;
&lt;p&gt;That led us to &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-2-permutations.html"&gt;Part 2&lt;/a&gt;, in which we discussed the two-row
notation for the 96-tuple representing the cube, and 
demonstrated the utility of this representation by 
showing how moves and move sequences would lead to 
permutations that could be written as 96-tuples using
the two-row notation.&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html"&gt;Part 3&lt;/a&gt;, we covered some key theoretical results following
Donald Knuth's &lt;u&gt;Art of Computer Programming&lt;/u&gt; which allowed
us to develop a permutation algebra to describe the effects 
moves have on the cube. We concluded the previous post 
with an algorithm for factoring permutations into their
intercalation products, and hinted that these permutation
factors were central &lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks4-factoring"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="factoring-rubiks-cube-permutations"&gt;Factoring Rubik's Cube Permutations&lt;/h1&gt;
&lt;p&gt;&lt;a name="rubiks4-factoring-review"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="factoring-permutations-a-review"&gt;Factoring Permutations: A Review&lt;/h2&gt;
&lt;p&gt;In &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html"&gt;Part 3&lt;/a&gt; of this series of blog posts, we looked at 
an example multiset permutation of characters. Here it is
written using the two-row notation:&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = \bigl(\begin{smallmatrix}
    a &amp;amp; a &amp;amp; b &amp;amp; b &amp;amp; b &amp;amp; b &amp;amp; b &amp;amp; c &amp;amp; c &amp;amp; c &amp;amp; d &amp;amp; d &amp;amp; d &amp;amp; d &amp;amp; d \\
    d &amp;amp; b &amp;amp; c &amp;amp; b &amp;amp; c &amp;amp; a &amp;amp; c &amp;amp; d &amp;amp; a &amp;amp; d &amp;amp; d &amp;amp; b &amp;amp; b &amp;amp; b &amp;amp; d
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;p&gt;We covered a technique for factoring this permutation
into independent cycles of faces,&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = \alpha \top \beta \top \dots \top \gamma
$$&lt;/div&gt;
&lt;p&gt;and shared Python code to perform this operation. The resulting
factored permutation was:&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = \bigl( \begin{smallmatrix}
    a &amp;amp; d &amp;amp; d &amp;amp; b &amp;amp; c &amp;amp; d &amp;amp; b &amp;amp; b &amp;amp; c \\
    d &amp;amp; d &amp;amp; b &amp;amp; c &amp;amp; d &amp;amp; b &amp;amp; b &amp;amp; c &amp;amp; a
\end{smallmatrix} \bigr)
\top
\bigl( \begin{smallmatrix}
    a &amp;amp; b \\
    b &amp;amp; a 
\end{smallmatrix} \bigr)
\top 
\bigl( \begin{smallmatrix}
    b &amp;amp; c &amp;amp; d  \\
    c &amp;amp; d &amp;amp; b
\end{smallmatrix} \bigr)
\top 
\bigl( \begin{smallmatrix}
    d \\
    d
\end{smallmatrix} \bigr)
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="rubiks4-factoring-cube"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="factoring-rubiks-cube-permutations_1"&gt;Factoring Rubik's Cube Permutations&lt;/h2&gt;
&lt;p&gt;To factor a Rubik's Cube permutation, we apply
Algorithm A from the prior post to the two-row
96-tuple representation of the Rubik's Cube 
after it has had the move sequence applied once.&lt;/p&gt;
&lt;p&gt;(Note that we only need to apply the sequence
to the cube &lt;em&gt;once&lt;/em&gt;, even if the order of that 
sequence is in the tens of thousands.)&lt;/p&gt;
&lt;p&gt;Let's look at a few move sequences for 
some examples:&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks4-factoring-R"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="computing-the-order-of-sequence-r"&gt;Computing the Order of Sequence R&lt;/h2&gt;
&lt;p&gt;We begin with the solved state, and apply the 
move R to the cube. The result is the 
two-line representation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
(01 02 03 36 05 06 07 40 09 10 11 44 13 14 15 48 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 84 37 38 39 88 41 42 43 92 45 46 47 96 61 57 53 49 62 58 54 50 63 59 55 51 64 60 56 52 16 66 67 68 12 70 71 72 08 74 75 76 04 78 79 80 81 82 83 77 85 86 87 73 89 90 91 69 93 94 95 65)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we can carry out the Algorithm A procedure on
this two-row representation. When we do that, we will
find that there are a large number of one-element 
independent factors; these are the faces that do not 
move during the move sequence R. &lt;/p&gt;
&lt;p&gt;Here is a list of factors that are found by Algorithm A:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Factor sizes: {1, 4}
Factors:
[36, 84, 77, 4]
[40, 88, 73, 8]
[44, 92, 69, 12]
[48, 96, 65, 16]
[61, 64, 52, 49]
[57, 63, 56, 50]
[53, 62, 60, 51]
[58, 59, 55, 54]
Independent Faces: [1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 45, 46, 47, 66, 67, 68, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 95]
Least common multiple: 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The largest set of faces that are exchanged is 4, and 
the smallest is 1. No other groups of faces being 
exchanged have any other sizes. This means that if 
we apply the sequence 4 times, each of those groups 
of faces being interchanged will have returned to their 
original state.&lt;/p&gt;
&lt;p&gt;This tells us what we already knew: that if we apply the 
sequence "R", it rotates groups of pieces in a sequence 
of 4 moves each, so overall the order of this permutation 
is 4 - if we apply the sequence R to a solved 4x4 Rubik's 
Revenge cube 4 times, the cube will return to the solved 
state.&lt;/p&gt;
&lt;p&gt;To formalize this, if we have cycles with arbitrary lengths, 
we must apply the sequence a number of times equal to the 
least common multiple of each factor's size. (For example, 
if we had a cycle of length 3 above, the cycle order would 
have been 12 - because the sequence must be applied 12 times 
before the 4-cycle face exchanges "sync up" with the 3-cycle 
face exchanges.)&lt;/p&gt;
&lt;p&gt;Let's look at a slightly more complicated move sequence
to illustrate this point.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks4-factoring-URUpRp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="computing-the-order-of-sequence-u-r-u-r"&gt;Computing the Order of Sequence U R U' R'&lt;/h3&gt;
&lt;p&gt;As before, we begin by applying the move sequence
once to a solved cube to generate the two-row
n-tuple representation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
(01 02 03 77 05 06 07 73 09 10 11 69 16 12 08 20 17 18 19 36 21 22 23 24 25 26 27 28 29 30 31 32 49 50 51 33 37 38 39 40 41 42 43 44 45 46 47 48 13 56 60 64 53 54 55 34 57 58 59 35 61 62 63 04 96 66 67 68 14 70 71 72 15 74 75 76 65 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 52)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we factor this permutation using Algorithm A:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Factor sizes: {1, 3, 6}
Factors:
[77, 65, 96, 52, 64, 4]
[73, 15, 8]
[69, 14, 12]
[16, 20, 36, 33, 49, 13]
[50, 56, 34]
[51, 60, 35]
Independent Faces: [1, 2, 3, 5, 6, 7, 9, 10, 11, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 57, 58, 59, 61, 62, 63, 66, 67, 68, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95]
Least common multiple: 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This time, we get a couple of cycles with different lengths.
We have four cycles of length 3, and two cycles of length 6,
plus many cycles of length 1 (the unpermuted faces).&lt;/p&gt;
&lt;p&gt;The LCM of 3 and 6 is 6, so the overall order of the 
move sequence &lt;code&gt;U R U' R'&lt;/code&gt; is 6.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks4-factoring-UR"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="computing-the-order-of-sequence-u-r"&gt;Computing the Order of Sequence U R&lt;/h3&gt;
&lt;p&gt;The last sequence we'll look at is the move sequence UR.&lt;/p&gt;
&lt;p&gt;This particular permutation represents an 
interesting corner case: in &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html"&gt;Part 1&lt;/a&gt; of this post,
when we came up with our tuple representation
for the cube, we treated each face as being
non-interchangeable, by giving each face a 
unique number. This means that, for example,
we cannot swap two arbitrary red faces, since
they are attached to other faces via a double edge
or a corner piece.&lt;/p&gt;
&lt;p&gt;This assumption does &lt;em&gt;not&lt;/em&gt; hold for faces 
in the center of the cube. Because center faces
are not attached to any other faces (mechanically 
speaking), the four distinct integers representing
four colored faces can actually be interchanged.&lt;/p&gt;
&lt;p&gt;This plays out with the sequence &lt;code&gt;U R&lt;/code&gt; as follows:&lt;/p&gt;
&lt;p&gt;We start with the two-line representation of the 
n-tuple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
(13 09 05 01 14 10 06 02 15 11 07 03 48 44 40 36 33 34 35 84 21 22 23 24 25 26 27 28 29 30 31 32 61 57 53 49 37 38 39 88 41 42 43 92 45 46 47 96 16 66 67 68 62 58 54 50 63 59 55 51 64 60 56 52 17 18 19 20 12 70 71 72 08 74 75 76 04 78 79 80 81 82 83 77 85 86 87 73 89 90 91 69 93 94 95 65)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can factor this tuple as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Factor sizes: {1, 3, 4, 7, 15}
Factors:
[13, 48, 96, 65, 17, 33, 61, 64, 52, 68, 20, 84, 77, 4, 1]
[9, 15, 40, 88, 73, 8, 2]
[5, 14, 44, 92, 69, 12, 3]
[10, 11, 7, 6]
[36, 49, 16]
[34, 57, 63, 56, 50, 66, 18]
[35, 53, 62, 60, 51, 67, 19]
[58, 59, 55, 54]
Independent Faces: [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 41, 42, 43, 45, 46, 47, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 95]
Least common multiple: 420
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, the adventurous cuber will find, when actually 
carrying out this move sequence, that the order is in fact 
105, and not 420.&lt;/p&gt;
&lt;p&gt;The reason the predicted cube order is 4 times larger than
expected is because, after 105 applications of the move 
sequence, the cube has not actually returned to its original
state, but the only remaining faces that are scrambled
are center faces, which are in fact interchangeable.&lt;/p&gt;
&lt;p&gt;Note this group of 4 faces that are permuted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[10, 11, 7, 6]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These are the four center squares from the &lt;code&gt;U&lt;/code&gt; face. 
If we exclude this group (treating 10, 11, 7, and 6 as 
perfectly interchangeable), the length of all factors
no longer contains 4:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Factor sizes: {1, 3, 7, 15}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Including the 4, we had&lt;/p&gt;
&lt;p&gt;LCM(1,3,4,7,15) = 420&lt;/p&gt;
&lt;p&gt;but excluding the 4, we get:&lt;/p&gt;
&lt;p&gt;LCM(1,3,7,15) = 105&lt;/p&gt;
&lt;p&gt;Systematically, we can search for any groups that contain
&lt;em&gt;only&lt;/em&gt;  faces from the center, and treat 1 such group of 
length n as n groups of length 1 (not contributing to the 
order of the move sequence).&lt;/p&gt;
&lt;p&gt;This provides an interesting contrast between the 4x4 Rubik's 
Revenge cube, in which any center faces may be interchanged with 
any other center faces, and the 3x3 Rubik's Cube, in which
the center faces always remain fixed in relation to one another.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks4-factoring-UwRw"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="computing-the-order-of-sequence-uw-rw"&gt;Computing the Order of Sequence Uw Rw&lt;/h3&gt;
&lt;p&gt;We mentioned in &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html"&gt;Part 1&lt;/a&gt; 
that the move notation &lt;code&gt;Uw&lt;/code&gt; or &lt;code&gt;Dw&lt;/code&gt; indicates a 
quarter clockwise turn of two layers of a face,
not one. We can write the permutation that results
from the move sequence &lt;code&gt;Uw Rw&lt;/code&gt; as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
(13 09 05 01 14 10 06 02 47 43 39 35 48 44 40 36 33 34 83 84 37 38 87 88 25 26 27 28 29 30 31 32 61 57 53 49 62 58 54 50 41 42 91 92 45 46 95 96 16 15 67 68 12 11 71 72 63 59 55 51 64 60 56 52 17 18 19 20 21 22 23 24 08 07 75 76 04 03 79 80 81 82 78 77 85 86 74 73 89 90 70 69 93 94 66 65)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Factoring this permutation, we get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Factor sizes: {1, 3, 15}
Factors:
[13, 48, 96, 65, 17, 33, 61, 64, 52, 68, 20, 84, 77, 4, 1]
[9, 47, 95, 66, 18, 34, 57, 63, 56, 72, 24, 88, 73, 8, 2]
[5, 14, 44, 92, 69, 21, 37, 62, 60, 51, 67, 19, 83, 78, 3]
[10, 43, 91, 70, 22, 38, 58, 59, 55, 71, 23, 87, 74, 7, 6]
[39, 54, 11]
[35, 53, 12]
[40, 50, 15]
[36, 49, 16]
Independent Faces: [25, 26, 27, 28, 29, 30, 31, 32, 41, 42, 45, 46, 75, 76, 79, 80, 81, 82, 85, 86, 89, 90, 93, 94]
Least common multiple: 15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Several groups of 3 faces and of 15 faces, respectively, are permuted,
giving an LCM of 15. Thus, the order of move sequence &lt;code&gt;Uw Rw&lt;/code&gt; is 15.&lt;/p&gt;
&lt;p&gt;We'll look at the factoring of one last sequence: &lt;code&gt;U Rw&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks4-factoring-URw"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="computing-the-order-of-sequence-u-rw"&gt;Computing the Order of Sequence U Rw&lt;/h3&gt;
&lt;p&gt;Here is the permutation representing the 
permutation resulting from the sequence U Rw:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
(13 09 05 01 14 10 06 02 47 43 39 35 48 44 40 36 33 34 83 84 21 22 23 24 25 26 27 28 29 30 31 32 61 57 53 49 37 38 87 88 41 42 91 92 45 46 95 96 16 15 67 68 62 58 54 50 63 59 55 51 64 60 56 52 17 18 19 20 12 11 71 72 08 07 75 76 04 03 79 80 81 82 78 77 85 86 74 73 89 90 70 69 93 94 66 65)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Factoring this permutation, we get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Factor sizes: {1, 3, 4, 10, 15, 16}
Factors:
[13, 48, 96, 65, 17, 33, 61, 64, 52, 68, 20, 84, 77, 4, 1]
[9, 47, 95, 66, 18, 34, 57, 63, 56, 50, 15, 40, 88, 73, 8, 2]
[5, 14, 44, 92, 69, 12, 35, 53, 62, 60, 51, 67, 19, 83, 78, 3]
[10, 43, 91, 70, 11, 39, 87, 74, 7, 6]
[36, 49, 16]
[58, 59, 55, 54]
Independent Faces: [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 41, 42, 45, 46, 71, 72, 75, 76, 79, 80, 81, 82, 85, 86, 89, 90, 93, 94]
Least common multiple: 240
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The order of the move sequence &lt;code&gt;U Rw&lt;/code&gt; is 240.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks4-code"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="code"&gt;Code&lt;/h1&gt;
&lt;p&gt;The code that forms the permutation tuple for a given move sequence
and performs the factoring of that tuple is in &lt;a href="https://git.charlesreid1.com/charlesreid1/rubiks-cube-cycles/src/master/sequence_order.py"&gt;sequence_order.py&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sequence_order.py&lt;/code&gt; file utilizes the 
&lt;a href="https://github.com/dwalton76/rubiks-cube-NxNxN-solver"&gt;dwalton76/rubiks-cube-NxNxN-solver&lt;/a&gt;
library from Github to apply the move sequence once to a cube
to determine the resulting permutation tuple. It then factors 
this tuple into products and finds the LCM of their lengths.&lt;/p&gt;
&lt;p&gt;The code in &lt;code&gt;sequence_order.py&lt;/code&gt; is grouped into functions,
with the key funtion being &lt;code&gt;factor_permutation(top, bottom)&lt;/code&gt;, which 
takes the top and bottom rows of the two-row representation
of a move sequence's permutation.&lt;/p&gt;
&lt;p&gt;The method then performs the factoring procedure covered in
&lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html"&gt;Part 3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the body of the method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factor_permutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm_top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;perm_bot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Factor a permutation into its lowest terms&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;

    &lt;span class="c1"&gt;# Need a way to also mark them as used... bit vector&lt;/span&gt;
    &lt;span class="n"&gt;used_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm_top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perm_top&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;used_vector&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="c1"&gt;# If we still have values to pick out:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;used_vector&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;used_vector&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;leader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perm_top&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;follower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perm_bot&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perm_top&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;follower&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;used_vector&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;follower&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;follower&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# add start to end&lt;/span&gt;
        &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;#import pdb; pdb.set_trace()&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;used_vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perm_top&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This was called by the method applying move sequences
to the Rubik's Cube to obtain the two-row permutation
corresponding to the move sequence of interest.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks4-conclusions"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="project-conclusions"&gt;Project Conclusions&lt;/h1&gt;
&lt;p&gt;In addition to being interesting, this project led to 
some deep insights into the workings of the Rubik's Cube
and ways to think about move sequences.&lt;/p&gt;
&lt;p&gt;More than that, the Rubik's Cube is a toy that provides 
real insight into combinatorics and group theory. The 
concept of order, and the process of thinking through 
different representations of the cube and their consequences
for the implemetation of the final algorithm, provide 
good practice for problems in other, related domains.&lt;/p&gt;
&lt;p&gt;This project began with a simple question. 
While playing with the Rubik's Cube,
we discovered this property of cycles 
(it is actually difficult to miss,
even when learning the beginner method,
as many of the move sequences involved in the 
beginner method have small orders, so it is 
easy to see them repeat.)
The question we set out to answer was,
given an arbitrary sequence, can we determine
the order of that sequence? &lt;/p&gt;
&lt;p&gt;The key to answering this question ultimately
lies in the representation of the permutations;
the right representation makes finding the 
order possible. but it took some trial 
and error with different representations 
before discovering the right approach.&lt;/p&gt;
&lt;p&gt;To anyone who has played with the Rubik's Cube
before, it seems natural that there would be 
&lt;em&gt;some&lt;/em&gt; way to represent moves applied to the cube
in some kind of algebraic terms.
The intercalation product was the key concept
for developing a permutation algebra.
Knuth's Algorithm A was the key concept 
for factoring permutations into their 
respective independent cycles.&lt;/p&gt;
&lt;p&gt;Once an algorithm to factor permutations was developed,
the rest was a straightforward calculation of the LCM
of the lengths of each factor.&lt;/p&gt;
&lt;p&gt;The project was computationally challenging;
recursion was required to implement Algorithm A,
the Rubik's Cube solver had to be modified,
and there were many bugs along the way.&lt;/p&gt;
&lt;p&gt;The procedure we used here can be applied to other problems.
Our procedure was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find a proper, convenient representation for the system state&lt;/li&gt;
&lt;li&gt;Break down the variations of the system into simple cases or steps&lt;/li&gt;
&lt;li&gt;Move away from the specific system, 
    and keep the approach mathematially general. &lt;strong&gt;This is by far the the most 
    important step!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Study the literature and solutions to problems, to become familiar
    with different ways of representing a problem. Different problems
    lend themselves well to different representations, so the more familiar
    you are with different representations, the more problems you'll be able
    to tackle.&lt;/li&gt;
&lt;li&gt;The only way to get familiar with different problem-solving approaches 
    is through practice. It helps to start with easier problems, both because
    you can score some quick points and feel more confident, and also because
    combinatorics and group theory problems often tend to appear simple,
    but deceptively so. The devil is in the details.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="rubiks4-references"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube". Charlesreid1.com wiki, Charles Reid. Edited 25 January 2017. Accessed 25 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube"&gt;https://charlesreid1.com/wiki/Rubiks_Cube&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Revenge". Charlesreid1.com wiki, Charles Reid. Edited 25 January 2017. Accessed 25 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Revenge"&gt;https://charlesreid1.com/wiki/Rubiks_Revenge&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube/Tuple". Charlesreid1.com wiki, Charles Reid. Edited 25 January 2017. Accessed 25 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube/Tuple"&gt;https://charlesreid1.com/wiki/Rubiks_Cube/Tuple&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube/Permutations". Charlesreid1.com wiki, Charles Reid. Edited 25 January 2017. Accessed 25 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube/Permutations"&gt;https://charlesreid1.com/wiki/Rubiks_Cube/Permutations&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Github - dwalton76/rubiks-cube-NxNxN-solver". dwalton76, Github Repository, Github Inc. Accessed 11 January 2017.
&amp;lt;&lt;a href="https://github.com/dwalton76/rubiks-cube-NxNxN-solver"&gt;https://github.com/dwalton76/rubiks-cube-NxNxN-solver&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube NxNxN Solver". Git repository, git.charlesreid1.com. Charles Reid. Updated 25 January 2017.
&amp;lt;&lt;a href="https://git.charlesreid1.com/charlesreid1/rubiks-cube-nnn-solver"&gt;https://git.charlesreid1.com/charlesreid1/rubiks-cube-nnn-solver&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubiks Cube Cycles". Git repository, git.charlesreid1.com. Charles Reid. Updated 25 January 2017.
&amp;lt;&lt;a href="https://git.charlesreid1.com/charlesreid1/rubiks-cube-cycles"&gt;https://git.charlesreid1.com/charlesreid1/rubiks-cube-cycles&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a name="rubiks4-appendix"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="appendix"&gt;Appendix&lt;/h1&gt;
&lt;p&gt;That concludes our discussion of computing the order of move sequences
on a Rubik's Cube. There are many move sequences, and many orders, 
ranging from 1 or 2 up to nearly 100,000. We plan to assemble a 
web site to help readers explore some move sequences and their 
orders - so check back soon...&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Rubiks Cube"></category><category term="rubiks cube"></category><category term="combinatorics"></category><category term="permutations"></category><category term="python"></category><category term="puzzles"></category><category term="art of computer programming"></category><category term="knuth"></category></entry><entry><title>4x4 Rubik's Cube: Part 3: Factoring Permutations</title><link href="https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html" rel="alternate"></link><published>2018-01-20T12:00:00-08:00</published><updated>2018-01-20T12:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-01-20:/4x4-rubiks-cube-part-3-factoring-permutations.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This is Part 3 of a 4-part blog post 
on the mathematics of the 4x4 Rubik's Cube, 
its relation to algorithms, and some 
curious properties of Rubik's Cubes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;See Part 1 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html"&gt;Part 1: Representations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 2 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-2-permutations.html"&gt;Part 2: Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You are currently reading Part 3 of this blog post: &lt;strong&gt;Part 3: Factoring Permutations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See Part 4 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-4-sequence-order.html"&gt;Part 4: Sequence Order&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks3-rubiks3-intro"&gt;Introduction: Cycles, Sequences, and Order&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks3-rubiks3-intro-cycles"&gt;Cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks3-rubiks3-intro-sequences"&gt;Sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks3-rubiks3-intro-order"&gt;Order&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks3-rubiks3-intercalation"&gt;Intercalation Product&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks3-intercalation-definition"&gt;Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks3-intercalation-properties"&gt;Properties&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks3-factoring"&gt;Factoring Permutations Using Knuth's Theorem A&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks3-factoring-significance"&gt;Significance of Factors â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is Part 3 of a 4-part blog post 
on the mathematics of the 4x4 Rubik's Cube, 
its relation to algorithms, and some 
curious properties of Rubik's Cubes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;See Part 1 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html"&gt;Part 1: Representations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 2 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-2-permutations.html"&gt;Part 2: Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You are currently reading Part 3 of this blog post: &lt;strong&gt;Part 3: Factoring Permutations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See Part 4 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-4-sequence-order.html"&gt;Part 4: Sequence Order&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks3-rubiks3-intro"&gt;Introduction: Cycles, Sequences, and Order&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks3-rubiks3-intro-cycles"&gt;Cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks3-rubiks3-intro-sequences"&gt;Sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks3-rubiks3-intro-order"&gt;Order&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks3-rubiks3-intercalation"&gt;Intercalation Product&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks3-intercalation-definition"&gt;Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks3-intercalation-properties"&gt;Properties&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks3-factoring"&gt;Factoring Permutations Using Knuth's Theorem A&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks3-factoring-significance"&gt;Significance of Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubuiks3-factoring-how"&gt;How to Factor Permutations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubuiks3-factoring-how-contd"&gt;How to Factor Permutations (Cont'd)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks3-factoring-algorithmA"&gt;Algorithm A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks3-factoring-pseudocode"&gt;Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks3-factoring-python"&gt;Python Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks3-preview"&gt;Preview of Part 4&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks3-references"&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks3-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;So far we have been discussing representations of the Rubik's Cube,
with the ultimate intention of investigating some of its properties.&lt;/p&gt;
&lt;p&gt;In this post, we define and explore the properties we are interested
in studying.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks3-intro-cycles"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="cycles"&gt;Cycles&lt;/h2&gt;
&lt;p&gt;(Definition of cycle)&lt;/p&gt;
&lt;p&gt;We use the two-line notation introduced in the last blog post,
so a permutation of a 5-tuple might look like this:&lt;/p&gt;
&lt;div class="math"&gt;$$
a = \bigl(\begin{smallmatrix}
  a &amp;amp; b &amp;amp; c &amp;amp; d &amp;amp; e \\
  b &amp;amp; a &amp;amp; e &amp;amp; c &amp;amp; d 
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;p&gt;In this permutation, we see that &lt;span class="math"&gt;\(a\)&lt;/span&gt; and &lt;span class="math"&gt;\(b\)&lt;/span&gt; swap places,
and &lt;span class="math"&gt;\(c\)&lt;/span&gt;, &lt;span class="math"&gt;\(d\)&lt;/span&gt;, and &lt;span class="math"&gt;\(e\)&lt;/span&gt; exchange places as well. These two
groups form two cycles. &lt;/p&gt;
&lt;p&gt;Think of the cycles as the particular way that pieces 
of the permutation are exchanged with one another.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks3-intro-sequences"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="sequences"&gt;Sequences&lt;/h2&gt;
&lt;p&gt;We are interested in studying the properties of the cube,
but in particular we are interested in the properties of 
move sequences applied to the cube.&lt;/p&gt;
&lt;p&gt;There are 36 possible moves on a cube, and a series of 
moves applied in a particular order defines a sequence.
The 36 possible rotations were given in the prior blog post
and cover clockwise and counterclockwise rotations of 
each of the six faces - either the first layer, the second layer,
or both of the first two layers.&lt;/p&gt;
&lt;p&gt;These moves are denoted with six letters (UDLRFB) for the upper,
downward, left, right, front, and back face of the cube, respectively.&lt;/p&gt;
&lt;p&gt;Moves indicated should be clockwise unless they contain an apostrophe
character &lt;code&gt;'&lt;/code&gt;, which indicates counterclockwise rotation.&lt;/p&gt;
&lt;p&gt;A capital letter indicates a rotation of the first layer only 
(e.g., &lt;code&gt;U&lt;/code&gt; indicates a clockwise rotation of the first layer of 
the upper face).&lt;/p&gt;
&lt;p&gt;A lowercase letter indicates a roration of the first and second layers
(e.g., &lt;code&gt;r&lt;/code&gt; indicates a clockwise rotation of the top two layers of
the right face).&lt;/p&gt;
&lt;p&gt;A 2 before the letter indicates that the second layer should be rotated
(e.g., &lt;code&gt;2F&lt;/code&gt; indicates a clockwise rotation of the second layer of the 
front face).&lt;/p&gt;
&lt;p&gt;Each move sequence can be translated into a tuple representation
(see Part 1 blog post). Once we have the tuple representation of a 
permutation, we can do several things, beginning with finding
the cycles that compose the moves of the sequence.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks3-intro-order"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="order"&gt;Order&lt;/h2&gt;
&lt;p&gt;The quantity we are truly interested in is the order of a given cycle.&lt;/p&gt;
&lt;p&gt;The order of a sequence of moves is the number of times that sequence
must be applied to the cube to get the cube to return back to its 
original state. A more convenient way to think about it is, if you 
applied a move sequence to a solved cube, how many times would you 
have to apply it until you reached a solved cube again?&lt;/p&gt;
&lt;p&gt;We begin with the move sequence, which applies a particular permutation
to the cube, exchanging particular pieces in a particular order.
We want to obtain a tuple representation of the permutation
that results from a particular sequence of moves.&lt;/p&gt;
&lt;p&gt;Once we have the tuple representation of a sequence's permutation, we can 
factor it into independent cycles using the techniques covered in 
this blog post. &lt;/p&gt;
&lt;p&gt;The factoring a permutation into cycles will yield the order; 
the order is the least common multiple of the lengths of eacch
cycle that is a factor.&lt;/p&gt;
&lt;p&gt;Using this, we can investigate the properties of the order 
of different move sequences.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks3-intercalation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="intercalation-product"&gt;Intercalation Product&lt;/h1&gt;
&lt;p&gt;In Part 2 of this blog post, we discussed the tuple representation
of a permutation; for example, one permutation &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; of an
&lt;span class="math"&gt;\(n\)&lt;/span&gt;-tuple might be written:&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = \bigl(\begin{smallmatrix}
  1 &amp;amp; 2 &amp;amp; 3 &amp;amp; \cdots &amp;amp; n-1 &amp;amp; n \\
  2 &amp;amp; 3 &amp;amp; 4 &amp;amp; \cdots &amp;amp;  n  &amp;amp; 1
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;p&gt;The top row consists of the elements in the tuple in 
sorted order; the second row consists of elements of the 
tuple corresponding to that permutation.&lt;/p&gt;
&lt;p&gt;In the discussion that follows we'll keep it general,
and talk about multisets - the case in which the top row
has multiple occurrences of different items.&lt;/p&gt;
&lt;p&gt;For the following discussion, we will suppose two permutations
&lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; and &lt;span class="math"&gt;\(\beta\)&lt;/span&gt; composed of four objects &lt;span class="math"&gt;\(\{a, b, c, d,\}\)&lt;/span&gt;, 
each occurring multiple times:&lt;/p&gt;
&lt;div class="math"&gt;$$
\alpha = \bigl(\begin{smallmatrix}
  a &amp;amp; a &amp;amp; b &amp;amp; c &amp;amp; d \\
  c &amp;amp; a &amp;amp; d &amp;amp; a &amp;amp; b
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\beta = \bigl(\begin{smallmatrix}
  a &amp;amp; b &amp;amp; d &amp;amp; d &amp;amp; d \\
  b &amp;amp; d &amp;amp; d &amp;amp; a &amp;amp; d
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="rubiks3-intercalation-definition"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="definition"&gt;Definition&lt;/h2&gt;
&lt;p&gt;Now we define the intercalation product &lt;span class="math"&gt;\(\alpha \top \beta\)&lt;/span&gt; 
of these permutations as the elements of each permutation
organized in an interleaved way - 
each element of &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; and &lt;span class="math"&gt;\(\beta\)&lt;/span&gt; are grouped
by the letter that appears on the top row,
and within those groups they are ordered 
as they appear in &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt;, then as they appear
in &lt;span class="math"&gt;\(\beta\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;For our example, the intercalation product is the following
combination of &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; and &lt;span class="math"&gt;\(\beta\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
\alpha \top \beta = \bigl(\begin{smallmatrix}
  a &amp;amp; a &amp;amp; b &amp;amp; c &amp;amp; d \\
  c &amp;amp; a &amp;amp; d &amp;amp; a &amp;amp; b 
\end{smallmatrix}\bigr) \top \bigl(\begin{smallmatrix}
  a &amp;amp; b &amp;amp; d &amp;amp; d &amp;amp; d \\
  b &amp;amp; d &amp;amp; d &amp;amp; a &amp;amp; d 
\end{smallmatrix}\bigr) = 
\bigl(\begin{smallmatrix}
  a &amp;amp; a &amp;amp; a &amp;amp; b &amp;amp; b &amp;amp; c &amp;amp; d &amp;amp; d &amp;amp; d &amp;amp; d \\
  c &amp;amp; a &amp;amp; b &amp;amp; d &amp;amp; d &amp;amp; a &amp;amp; b &amp;amp; d &amp;amp; a &amp;amp; d
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;p&gt;This is basically an interleaving operation. 
All top-bottom pairs with &lt;span class="math"&gt;\(a\)&lt;/span&gt; at the top are 
grouped together - and within the group,
everyone from &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; comes first, everyone
from &lt;span class="math"&gt;\(\beta\)&lt;/span&gt; comes second.&lt;/p&gt;
&lt;p&gt;The first two &lt;span class="math"&gt;\(a\)&lt;/span&gt; items in &lt;span class="math"&gt;\(\alpha \top \beta\)&lt;/span&gt; 
come from &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt;, the third &lt;span class="math"&gt;\(a\)&lt;/span&gt; item comes from &lt;span class="math"&gt;\(\beta\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id="side-note-why-define-an-intercalation-product"&gt;Side Note: Why Define an Intercalation Product?&lt;/h3&gt;
&lt;p&gt;You may be wondering what the intercalation product has to do 
with Rubik's Cubes or finding the order of a sequence. It turns
out that the intercalation product will allow us to establish
a system of permutation algebra, define certain operations
and properties of permutations, and use these to factor
permutations into independent groups of faces being 
exchanged.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks3-intercalation-properties"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="properties"&gt;Properties&lt;/h2&gt;
&lt;p&gt;We can state some properties of the intercalation algebra already:&lt;/p&gt;
&lt;p&gt;If &lt;span class="math"&gt;\(\alpha \top \pi = \beta \top \pi\)&lt;/span&gt; 
or &lt;span class="math"&gt;\(\pi \top \alpha = \pi \top \beta\)&lt;/span&gt;, 
this implies &lt;span class="math"&gt;\(\alpha = \beta\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;An identity element exists such that 
&lt;span class="math"&gt;\(\epsilon \top \alpha = \alpha \top \epsilon = \alpha\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The commutative property for the intercalation product 
(whether &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; and &lt;span class="math"&gt;\(\beta\)&lt;/span&gt; can be exchanged in expressions)
only holds if &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; and &lt;span class="math"&gt;\(\beta\)&lt;/span&gt; are independent of each 
other (if they permute different elements).
If this condition holds, then 
&lt;span class="math"&gt;\(\alpha \top \beta = \beta \top \alpha\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This property does &lt;em&gt;not&lt;/em&gt; hold in general.&lt;/p&gt;
&lt;p&gt;(An example of permutations that would be independent 
on the Rubik's Cube would be the moves U and D.
These each rotate a different group of faces.)&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks3-factoring"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="factoring-permutations-using-knuths-theorem-a"&gt;Factoring Permutations Using Knuth's Theorem A&lt;/h1&gt;
&lt;p&gt;Volume 3 of Donald Knuth's &lt;u&gt;The Art of Computer Programming&lt;/u&gt;
gives the following theorem on page 26, which gives a very useful
property of intercalation products:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem A.&lt;/strong&gt; Let the elements of the multiset &lt;span class="math"&gt;\(M\)&lt;/span&gt; be linearly
ordered by the relation "&amp;lt;". Every permutation &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; of &lt;span class="math"&gt;\(M\)&lt;/span&gt; 
has a unique representation as the intercalation &lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = 
( x_{1,1} \dots x_{1,n_1} y_1 ) \top 
( x_{2,1} \dots x_{2,n_2} y_2 ) \top 
\dots \top
( x_{t,1} \dots x_{t,n_t} y_t ) 
$$&lt;/div&gt;
&lt;p&gt;where &lt;/p&gt;
&lt;div class="math"&gt;$$
y_1 \leq y_2 \leq \dots \leq y_t
$$&lt;/div&gt;
&lt;p&gt;and &lt;/p&gt;
&lt;div class="math"&gt;$$
y_i &amp;lt; x_{ij} \qquad \mbox{ for } 1 \leq j \leq n_i, 1 \leq i \leq t
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="rubiks3-factoring-significance"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="significance-of-factors"&gt;Significance of Factors&lt;/h2&gt;
&lt;p&gt;Theorem A is central to our goal of studying move sequences 
(and computing their order). To understand why, consider the 
factors that result from Theorem A, and what they mean in the 
specific example of a Rubik's Cube.&lt;/p&gt;
&lt;p&gt;In a regular n-tuple, the factors represent groups of items 
in the tuple that are being exchanged. A tuple that factors
into the intercalation of many very small tuples means the 
permutation mostly consists of swapping pairs or triplets 
of things. A tuple that factors into the intercalation
of two large tuples means, all of the things are divided 
into two groups, and within that group, everybody is mixed
in with everybody else. &lt;/p&gt;
&lt;p&gt;On a Rubik's Cube, the tuple consists of faces being moved,
so a permutation's factors indicate how many faces are being 
swapped. The size of each group of faces gives some indication
as to how long it takes for the cube to "sync up" with its 
original state if the permutation is repeatedly applied; 
a permutation with fewer large factors will take longer than a 
permutation with many small factors.&lt;/p&gt;
&lt;p&gt;For example, suppose a move sequence permutes three corner pieces
on a cube each time it is applied. Then if we write the two-line 
tuple corresponding to that permutation, and we factor it into the 
intercalation product of several tuples, several factors of the
permutation will have a length of three, and will contain the 
set of three faces being exchanged.&lt;/p&gt;
&lt;p&gt;On the other hand, if a move sequence permutes six corner pieces
on a cube each time it is applied, some of the factors will be
groups of six faces being exchanged when the sequence is applied.&lt;/p&gt;
&lt;p&gt;Thus, &lt;em&gt;the (sizes of the) factors of a permutation determine 
the order of the permutation.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks3-factoring-how"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="how-to-factor-permutations"&gt;How to Factor Permutations&lt;/h2&gt;
&lt;p&gt;To factor a permutation, we perform the opposite of the intercalation
product. Now supppose we wish to factor the permutation:&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = \bigl(\begin{smallmatrix}
    a &amp;amp; a &amp;amp; b &amp;amp; b &amp;amp; b &amp;amp; b &amp;amp; b &amp;amp; c &amp;amp; c &amp;amp; c &amp;amp; d &amp;amp; d &amp;amp; d &amp;amp; d &amp;amp; d \\
    d &amp;amp; b &amp;amp; c &amp;amp; b &amp;amp; c &amp;amp; a &amp;amp; c &amp;amp; d &amp;amp; a &amp;amp; d &amp;amp; d &amp;amp; b &amp;amp; b &amp;amp; b &amp;amp; d
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;p&gt;into the intercalation of multiple independent, disjoint cycles,&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = \alpha \top \beta \top \dots \top \gamma
$$&lt;/div&gt;
&lt;p&gt;We can extract each factor one at a time using the following algorithm.&lt;/p&gt;
&lt;p&gt;Start by assuming the first factor &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; contains the first symbol &lt;span class="math"&gt;\(a\)&lt;/span&gt;
in its top row.&lt;/p&gt;
&lt;p&gt;(It turns out this assumption &lt;em&gt;can't&lt;/em&gt; be false - if there is an &lt;span class="math"&gt;\(a\)&lt;/span&gt; 
in the top row of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; then there is an &lt;span class="math"&gt;\(a\)&lt;/span&gt; in the top row of at least 
one factor. We're simply going to pull out those factors with this assumption.)&lt;/p&gt;
&lt;p&gt;Given this assumption, we know &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; must map &lt;span class="math"&gt;\(a\)&lt;/span&gt; to the same letter
as the final permutation maps &lt;span class="math"&gt;\(a\)&lt;/span&gt; to, in the very first column of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;.
The first column of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; is &lt;span class="math"&gt;\(( a d )\)&lt;/span&gt; (a on top, d on bottom). 
That means that if our assumption holds, if &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; contains &lt;span class="math"&gt;\(a\)&lt;/span&gt;, then 
it must permute all &lt;span class="math"&gt;\(a\)&lt;/span&gt;'s into &lt;span class="math"&gt;\(d\)&lt;/span&gt;'s and thus &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; should contain the 
same column &lt;span class="math"&gt;\((a d )\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now suppose that &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; contains &lt;span class="math"&gt;\(d\)&lt;/span&gt;, which it must if our prior step
is true. (&lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; cannot turn &lt;span class="math"&gt;\(a\)&lt;/span&gt; into &lt;span class="math"&gt;\(d\)&lt;/span&gt; if it does not have a &lt;span class="math"&gt;\(d\)&lt;/span&gt;!).
We find the leftmost &lt;span class="math"&gt;\(d\)&lt;/span&gt; on the top line, and see that it maps to the 
symbol &lt;span class="math"&gt;\(d\)&lt;/span&gt;, due to the column &lt;span class="math"&gt;\(( d d )\)&lt;/span&gt; (d on top, d on bottom). 
Thus, &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; should also contain the column  &lt;span class="math"&gt;\(( d d )\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We keep going. Suppose that &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; contains another &lt;span class="math"&gt;\(d\)&lt;/span&gt;, as a consequence
of the prior step. Since we already used the first d column in &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;, we use
the next column, &lt;span class="math"&gt;\(( d b )\)&lt;/span&gt; Thus, &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; should also contain the column &lt;span class="math"&gt;\(( d b )\)&lt;/span&gt;,
and we use the outcome &lt;span class="math"&gt;\(b\)&lt;/span&gt; as the starting point for the next step.&lt;/p&gt;
&lt;p&gt;The process stops as soon as the starting point for the next step
is the letter we began with, &lt;span class="math"&gt;\(a\)&lt;/span&gt;. That's because, at that point,
we've formed a "closed loop" of pieces that permute with one 
another. That closed loop forms the first intercalation factor 
of the permutation &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;If we keep repeating the process described, we eventually wind up 
with &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
\alpha = \bigl(\begin{smallmatrix}
    a &amp;amp; d &amp;amp; d &amp;amp; b &amp;amp; c &amp;amp; d &amp;amp; b &amp;amp; b &amp;amp; c \\
    d &amp;amp; d &amp;amp; b &amp;amp; c &amp;amp; d &amp;amp; b &amp;amp; b &amp;amp; c &amp;amp; a
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;h3 id="side-note-why-does-this-work"&gt;Side Note: Why Does This Work?&lt;/h3&gt;
&lt;p&gt;Let's pause for a moment and see what's happening. 
What we're doing is following a thread between the 
top and bottom rows of the permutation; this thread 
tells us how elements are being moved around to
create permutations.&lt;/p&gt;
&lt;p&gt;(A simpler but easier way to see this is by comparing 
two permutations of &lt;span class="math"&gt;\((1 2 3 4 5 6)\)&lt;/span&gt;: consider the permutation 
&lt;span class="math"&gt;\((2 1 3 4 6 5)\)&lt;/span&gt;, versus the permutation &lt;span class="math"&gt;\((2 4 5 6 1 3)\)&lt;/span&gt;. 
The first permutation swaps positions 0 and 1, and 
positions 4 and 5, independently; the second permutation 
mixes &lt;em&gt;all&lt;/em&gt; positions together.)&lt;/p&gt;
&lt;p&gt;We are assembling &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; piece by piece, by pulling out 
pairs from the top and bottom row of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; and putting them 
into &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt;. At some point we will come back to the starting
point, the symbol &lt;span class="math"&gt;\(a\)&lt;/span&gt;, and we will be finished finding the 
first factor &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt;, which is a disjoint cycle. &lt;/p&gt;
&lt;p&gt;By starting from the top row and following where it leads 
in the bottom row, and continuing until we return to the 
original starting element in the top row, we can carve up 
the permutation into groups of pieces exchanged with one 
another and not with any other pieces, or groups of pieces 
that don't move.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks3-factoring-how-contd"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="how-to-factor-permutations-contd"&gt;How to Factor Permutations (Cont'd)&lt;/h2&gt;
&lt;p&gt;Recall that our goal was to factor the permutation &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; into the 
intercalation of multiple independent and disjoint cycles,
&lt;span class="math"&gt;\(\pi = \alpha \top \beta \top \dots \top \gamma\)&lt;/span&gt;.
We gave a procedure to extract factors and used it to
extract the first factor, &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;However, this is not the end of the factoring process: there are 
still several elements of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; that have not been used to form 
&lt;span class="math"&gt;\(\alpha\)&lt;/span&gt;, and those remaining elements themselves form a permutation 
that can be factored.&lt;/p&gt;
&lt;p&gt;We begin with the original permutation &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = \bigl( \begin{smallmatrix}
    a &amp;amp; a &amp;amp; b &amp;amp; b &amp;amp; b &amp;amp; b &amp;amp; b &amp;amp; c &amp;amp; c &amp;amp; c &amp;amp; d &amp;amp; d &amp;amp; d &amp;amp; d &amp;amp; d \\
    d &amp;amp; b &amp;amp; c &amp;amp; b &amp;amp; c &amp;amp; a &amp;amp; c &amp;amp; d &amp;amp; a &amp;amp; d &amp;amp; d &amp;amp; b &amp;amp; b &amp;amp; b &amp;amp; d
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;p&gt;When we pull out the first factor &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt;, we get:&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = \bigl( \begin{smallmatrix}
    a &amp;amp; d &amp;amp; d &amp;amp; b &amp;amp; c &amp;amp; d &amp;amp; b &amp;amp; b &amp;amp; c \\
    d &amp;amp; d &amp;amp; b &amp;amp; c &amp;amp; d &amp;amp; b &amp;amp; b &amp;amp; c &amp;amp; a
\end{smallmatrix} \bigr)
\top
\bigl( \begin{smallmatrix}
    a &amp;amp; b &amp;amp; b &amp;amp; c &amp;amp; d &amp;amp; d \\
    b &amp;amp; a &amp;amp; c &amp;amp; d &amp;amp; b &amp;amp; d
\end{smallmatrix} \bigr)
$$&lt;/div&gt;
&lt;p&gt;When we pull out the second factor &lt;span class="math"&gt;\(\beta\)&lt;/span&gt;, we get: &lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = \bigl( \begin{smallmatrix}
    a &amp;amp; d &amp;amp; d &amp;amp; b &amp;amp; c &amp;amp; d &amp;amp; b &amp;amp; b &amp;amp; c \\
    d &amp;amp; d &amp;amp; b &amp;amp; c &amp;amp; d &amp;amp; b &amp;amp; b &amp;amp; c &amp;amp; a
\end{smallmatrix} \bigr)
\top
\bigl( \begin{smallmatrix}
    a &amp;amp; b \\
    b &amp;amp; a 
\end{smallmatrix} \bigr)
\top 
\bigl( \begin{smallmatrix}
    b &amp;amp; c &amp;amp; d &amp;amp; d \\
    c &amp;amp; d &amp;amp; b &amp;amp; d
\end{smallmatrix} \bigr)
$$&lt;/div&gt;
&lt;p&gt;The third factor can be pulled out as well, which leaves the last factor, 
a single column &lt;span class="math"&gt;\(( d d )\)&lt;/span&gt; by itself, indicating an element that is 
not moved by the permutation.&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi = \bigl( \begin{smallmatrix}
    a &amp;amp; d &amp;amp; d &amp;amp; b &amp;amp; c &amp;amp; d &amp;amp; b &amp;amp; b &amp;amp; c \\
    d &amp;amp; d &amp;amp; b &amp;amp; c &amp;amp; d &amp;amp; b &amp;amp; b &amp;amp; c &amp;amp; a
\end{smallmatrix} \bigr)
\top
\bigl( \begin{smallmatrix}
    a &amp;amp; b \\
    b &amp;amp; a 
\end{smallmatrix} \bigr)
\top 
\bigl( \begin{smallmatrix}
    b &amp;amp; c &amp;amp; d  \\
    c &amp;amp; d &amp;amp; b
\end{smallmatrix} \bigr)
\top 
\bigl( \begin{smallmatrix}
    d \\
    d
\end{smallmatrix} \bigr)
$$&lt;/div&gt;
&lt;p&gt;Thus the permutation &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; can be expressed as the intercalation 
of four independent cycles.&lt;/p&gt;
&lt;p&gt;This procedure illustrates Knuth's Theorem A.&lt;/p&gt;
&lt;p&gt;(Note: had we initially assumed &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt; contained &lt;span class="math"&gt;\(b\)&lt;/span&gt; instead of &lt;span class="math"&gt;\(a\)&lt;/span&gt;, 
we would end up starting by pulling out a different factor, but we 
would ultimately end up with the same set of four factors.)&lt;/p&gt;
&lt;p&gt;To relate this back to the Rubik's Cube, we can start with a sequence 
of interest, like &lt;code&gt;U R D D B&lt;/code&gt;, and write the tuple representing the 
outcome of this sequence when it is applied to the cube. In this way 
we represent a move sequence as a tuple or as a permutation.&lt;/p&gt;
&lt;p&gt;Next, we factor this permutation the way we factored &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;, 
into the intercalation product of independent cycles. 
These are groups of pieces being swapped each time the 
cycle is applied.&lt;/p&gt;
&lt;p&gt;Now if one factor is of length 4 (group of 4 faces being permuted),
one factor is of length 3, and one factor is of length 20,
then the number of times the sequence must be applied 
before the cube will come back to its original, solved state
is &lt;span class="math"&gt;\(LCM(3,4,20) = 60\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks3-factoring-algorithmA"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="algorithm-a"&gt;Algorithm A&lt;/h2&gt;
&lt;p&gt;Algorithm A is an algorithm written to perform the factoring process
described above.&lt;/p&gt;
&lt;p&gt;We started with the two-row representation above,
so our function will start with the top and bottom rows
of the two-row representation.&lt;/p&gt;
&lt;p&gt;The procedure started with the first entry of the 
top row, and got the corresponding entry of the bottom
row. It then moved to the index of that item on the top row,
and got the coresponding entry of the bottom row, 
and so on, assembling the components of the permutation
by stepping through each.&lt;/p&gt;
&lt;p&gt;In code, this will require us to switch between
items in a list, and the indices of occurrencs of 
items in the list. Fortunately, this is an easy 
and common operation.&lt;/p&gt;
&lt;p&gt;Following is the pseudocode, then the Python code,
to implement Algorithm A on the two-row representation
of a tuple.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks3-factoring-pseudocode"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pseudocode"&gt;Pseudocode&lt;/h2&gt;
&lt;p&gt;Our function takes two arguments: the top and bottom rows
of the two-row representation of this permutation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define function factor_permutations( top row, bottom row )

    create bit vector to mark columns as factored or not

    initialize list of factors

    initialize pointer to active location

    initialize starting index

    while there are still zeros in the bit vector:

        initialize this factor

        run until break reached:

            set bit vector at active location to 1

            get active location entries on top row (leader) and bottom row (follower)

            get next active location (index of follower in top row)

            break if next active location out of bounds

            break if next active location is starting element

            append follower to this factor

        add starting element to end of factor

        add factor to list of factors

        set next start index to index of first 0 in bit vector

    return factors
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks3-factoring-python"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="python-code"&gt;Python Code&lt;/h2&gt;
&lt;p&gt;(Code for Algorithm A)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factor_permutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm_top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;perm_bot&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Factor a permutation into its lowest terms&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;
    &lt;span class="c1"&gt;# Need a way to also mark them as used... bit vector&lt;/span&gt;
    &lt;span class="n"&gt;used_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm_top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perm_top&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;used_vector&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="c1"&gt;# If we still have values to pick out:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;used_vector&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;used_vector&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;leader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perm_top&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;follower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perm_bot&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perm_top&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;follower&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;used_vector&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;follower&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;follower&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# add start to end&lt;/span&gt;
        &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;used_vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perm_top&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="n"&gt;factorsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;factorsize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factors&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks3-preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="preview-of-part-4"&gt;Preview of Part 4&lt;/h1&gt;
&lt;p&gt;We concluded with an algorithm that will be central to our task
of computing the order of a Rubik's Cube move sequence.&lt;/p&gt;
&lt;p&gt;In the next post, we'll apply our method of representing Rubik's Cubes
using the two-line tuple notation, and use the factoring algorithm above,
which will allow us to factor Rubik's Cube permutations into their 
corresponding intercalation products. &lt;/p&gt;
&lt;p&gt;From there, we can count the size of each intercalation product,
and the least common multiple of the sizes gives the order of the 
permutation.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks3-references"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube". Charlesreid1.com wiki, Charles Reid. Edited 20 January 2017. Accessed 20 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube"&gt;https://charlesreid1.com/wiki/Rubiks_Cube&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Revenge". Charlesreid1.com wiki, Charles Reid. Edited 20 January 2017. Accessed 20 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Revenge"&gt;https://charlesreid1.com/wiki/Rubiks_Revenge&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube/Tuple". Charlesreid1.com wiki, Charles Reid. Edited 20 January 2017. Accessed 20 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube/Tuple"&gt;https://charlesreid1.com/wiki/Rubiks_Cube/Tuple&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube/Permutations". Charlesreid1.com wiki, Charles Reid. Edited 20 January 2017. Accessed 20 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube/Permutations"&gt;https://charlesreid1.com/wiki/Rubiks_Cube/Permutations&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Github - dwalton76/rubiks-cube-NxNxN-solver". dwalton76, Github Repository, Github Inc. Accessed 11 January 2017.
&amp;lt;&lt;a href="https://github.com/dwalton76/rubiks-cube-NxNxN-solver"&gt;https://github.com/dwalton76/rubiks-cube-NxNxN-solver&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube NxNxN Solver". Git repository, git.charlesreid1.com. Charles Reid. Updated 20 January 2017.
&amp;lt;&lt;a href="https://git.charlesreid1.com/charlesreid1/rubiks-cube-nnn-solver"&gt;https://git.charlesreid1.com/charlesreid1/rubiks-cube-nnn-solver&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubiks Cube Cycles". Git repository, git.charlesreid1.com. Charles Reid. Updated 20 January 2017.
&amp;lt;&lt;a href="https://git.charlesreid1.com/charlesreid1/rubiks-cube-cycles"&gt;https://git.charlesreid1.com/charlesreid1/rubiks-cube-cycles&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Rubiks Cube"></category><category term="rubiks cube"></category><category term="combinatorics"></category><category term="permutations"></category><category term="python"></category><category term="puzzles"></category><category term="art of computer programming"></category><category term="knuth"></category></entry><entry><title>4x4 Rubik's Cube: Part 2: Permutations</title><link href="https://charlesreid1.github.io/4x4-rubiks-cube-part-2-permutations.html" rel="alternate"></link><published>2018-01-14T20:00:00-08:00</published><updated>2018-01-14T20:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-01-14:/4x4-rubiks-cube-part-2-permutations.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This is Part 2 of a 4-part blog post 
on the mathematics of the 4x4 Rubik's Cube, 
its relation to algorithms, and some 
curious properties of Rubik's Cubes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;See Part 1 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html"&gt;Part 1: Representations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You are currently reading Part 2 of this blog post: &lt;strong&gt;Part 2: Permutations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See Part 3 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html"&gt;Part 3: Factoring Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 4 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-4-sequence-order.html"&gt;Part 4: Sequence Order&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-intro"&gt;Introduction: Sequences and Permutations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-representing"&gt;Representing Permutations: Two-Row Notation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks2-representing-tworow"&gt;Two-Row Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks2-representing-tworow-rubiks"&gt;Two-Row Notation for Rubik's Cube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-sequences"&gt;Sequences&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks2-sequences-review"&gt;Review of Move/Sequence Notation â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is Part 2 of a 4-part blog post 
on the mathematics of the 4x4 Rubik's Cube, 
its relation to algorithms, and some 
curious properties of Rubik's Cubes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;See Part 1 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html"&gt;Part 1: Representations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You are currently reading Part 2 of this blog post: &lt;strong&gt;Part 2: Permutations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See Part 3 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html"&gt;Part 3: Factoring Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 4 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-4-sequence-order.html"&gt;Part 4: Sequence Order&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-intro"&gt;Introduction: Sequences and Permutations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-representing"&gt;Representing Permutations: Two-Row Notation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks2-representing-tworow"&gt;Two-Row Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks2-representing-tworow-rubiks"&gt;Two-Row Notation for Rubik's Cube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-sequences"&gt;Sequences&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks2-sequences-review"&gt;Review of Move/Sequence Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks2-sequences-permute-cube"&gt;How Moves Permute the Cube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-maps"&gt;Rotation Maps&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks2-maps-u"&gt;U Rotation Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks2-maps-d"&gt;D Rotation Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks2-maps-l"&gt;L Rotation Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks2-maps-r"&gt;R Rotation Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks2-maps-f"&gt;F Rotation Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks2-maps-b"&gt;B Rotation Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks2-maps-rotation"&gt;How to Use Rotation Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks2-maps-code"&gt;Face Map Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-tuples"&gt;Tuples for Move Sequences&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks2-tuples-sequences"&gt;Applying Rotation Maps for Sequences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-preview"&gt;Preview of Part 3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-references"&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-appendix"&gt;Appendix: Cube with Numbered Faces&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks2-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In this post, we'll be connecting material from Part 1, about 
how to represent the state of the cube in a mathematical way,
to the ultimate goal of exploring properties of particular
move sequences.&lt;/p&gt;
&lt;p&gt;In paticular, we'll expand on the tuple notation from Part 1,
and demonstrate the two-row permutation notation of Knuth.
This notation is useful for representing permutations 
in a way that makes it possible to create a system for 
describing permutations using algebra.&lt;/p&gt;
&lt;p&gt;We will not discuss the aim of representing permutations
in this way in the present post, but this will be 
described in Part 3.&lt;/p&gt;
&lt;p&gt;Next, we discuss move sequences on the Rubik's Cube - 
these are sequences of rotations of particular faces
on the Rubik's Cube. We discuss the application of the 
two-row permutation notation to describe moves
and to describe move sequences.&lt;/p&gt;
&lt;p&gt;Finally, we discuss rotation maps, a useful concept
in the implementation of permutations via move sequences.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks2-representing"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="representing-permutations-two-row-notation"&gt;Representing Permutations: Two-Row Notation&lt;/h1&gt;
&lt;p&gt;We begin by expanding on and streamlining the tuple notation
introduced in Part 1 of this post so that we have a common
basis for comparing two permutations. We do this using a two-row
notation, where the first row denotes the "solved" or default 
state of the system.&lt;/p&gt;
&lt;p&gt;In the case of the Rubik's Cube, this is equivalent to 
starting a cube in the solved state, then describing where
each face ends up, in order to completely specify 
the outcome of a move or a sequence of moves.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks2-representing-tworow"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="two-row-notation"&gt;Two-Row Notation&lt;/h2&gt;
&lt;p&gt;We begin by considering a permutation of an &lt;span class="math"&gt;\(n\)&lt;/span&gt;-tuple,
which, in the last post, we resolved to denote &lt;/p&gt;
&lt;div class="math"&gt;$$
(2 \quad 3 \quad 4 \quad \dots \quad n \quad 1)
$$&lt;/div&gt;
&lt;p&gt;Now, let us write this as two rows: the first row
consists of each element of the tuple &lt;em&gt;in ascending 
order&lt;/em&gt;, while the second line will the tuple corresponding
to the order of the elements in this particular permutation:&lt;/p&gt;
&lt;div class="math"&gt;$$
a = \bigl(\begin{smallmatrix}
  1 &amp;amp; 2 &amp;amp; 3 &amp;amp; \cdots &amp;amp; n-1 &amp;amp; n \\
  2 &amp;amp; 3 &amp;amp; 4 &amp;amp; \cdots &amp;amp;  n  &amp;amp; 1
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;p&gt;We can think of the first row as denoting the "solved", 
default configuration, and the second row denoting how 
each item is permuted.&lt;/p&gt;
&lt;p&gt;If we had a different permutation, we would simply change
the second row:&lt;/p&gt;
&lt;div class="math"&gt;$$
b = \bigl(\begin{smallmatrix}
  1 &amp;amp; 2 &amp;amp; 3 &amp;amp; \cdots &amp;amp; n-1 &amp;amp; n \\
  n &amp;amp; 4 &amp;amp; 1 &amp;amp; \cdots &amp;amp; 2   &amp;amp; 3
\end{smallmatrix}\bigr)
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="rubiks2-representing-tworow-rubiks"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="two-row-notation-for-rubiks-cube"&gt;Two-Row Notation for Rubik's Cube&lt;/h2&gt;
&lt;p&gt;If we adopt the above two-row notation for the Rubik's Cube,
and we utilize the face numbering and tuple indexing from Part 1,
the top row consists of the integers from 1 to 96:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now suppose we perform a rotation of the upper row U on the cube.
Then we end up with the following tuple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 33 34 35 36 21 22 23 24 25 26 27 28 29 30 31 32 49 50 51 52 37 38 39 40 41 42 43 44 45 46 47 48 65 66 67 68 53 54 55 56 57 58 59 60 61 62 63 64 17 18 19 20 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This tuple denotes the permutation corresponding to the move U 
performed on a solved cube.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks2-sequences"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="sequences"&gt;Sequences&lt;/h1&gt;
&lt;p&gt;&lt;a name="rubiks2-sequences-review"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="review-of-movesequence-notation"&gt;Review of Move/Sequence Notation&lt;/h2&gt;
&lt;p&gt;Let's quickly recap what we already know from prior posts about the 
properties of move sequences on the Rubik's Cube.&lt;/p&gt;
&lt;p&gt;There are 36 possible moves on a cube, and a series of 
moves applied in a particular order defines a sequence.
The 36 possible rotations were given in the prior blog post
and cover clockwise and counterclockwise rotations of 
each of the six faces - either the first layer, the second layer,
or both of the first two layers.&lt;/p&gt;
&lt;p&gt;These moves are denoted with six letters (&lt;code&gt;UDLRFB&lt;/code&gt;) for the upper,
downward, left, right, front, and back face of the cube, respectively.&lt;/p&gt;
&lt;p&gt;Moves indicated should be clockwise unless they contain an apostrophe
character &lt;code&gt;'&lt;/code&gt;, which indicates counterclockwise rotation.&lt;/p&gt;
&lt;p&gt;A capital letter indicates a rotation of the first layer only 
(e.g., &lt;code&gt;U&lt;/code&gt; indicates a clockwise rotation of the first layer of 
the upper face).&lt;/p&gt;
&lt;p&gt;A lowercase letter indicates a roration of the first and second layers
(e.g., &lt;code&gt;r&lt;/code&gt; indicates a clockwise rotation of the top two layers of
the right face).&lt;/p&gt;
&lt;p&gt;A 2 before the letter indicates that the second layer should be rotated
(e.g., &lt;code&gt;2F&lt;/code&gt; indicates a clockwise rotation of the second layer of the 
front face).&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks2-sequences-permute-cube"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="how-moves-permute-the-cube"&gt;How Moves Permute the Cube&lt;/h2&gt;
&lt;p&gt;This will be a little easier to understand if we consider 
a particular move sequence. We'll start simple and consider 
the move sequence &lt;code&gt;U&lt;/code&gt;. This results, as we saw before, in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;U:
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
(13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 33 34 35 36 21 22 23 24 25 26 27 28 29 30 31 32 49 50 51 52 37 38 39 40 41 42 43 44 45 46 47 48 65 66 67 68 53 54 55 56 57 58 59 60 61 62 63 64 17 18 19 20 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let's consider the move sequence &lt;code&gt;U U&lt;/code&gt;, a double rotation of the 
cube's top layer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;U U:
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
(16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 49 50 51 52 21 22 23 24 25 26 27 28 29 30 31 32 65 66 67 68 37 38 39 40 41 42 43 44 45 46 47 48 17 18 19 20 53 54 55 56 57 58 59 60 61 62 63 64 33 34 35 36 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Third, we consider the move sequence &lt;code&gt;U U U&lt;/code&gt;, equivalent to &lt;code&gt;U'&lt;/code&gt;,
a counterclockwise rotation of the top layer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;U U U:
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
(4 8 12 16 3 7 11 15 2 6 10 14 1 5 9 13 65 66 67 68 21 22 23 24 25 26 27 28 29 30 31 32 17 18 19 20 37 38 39 40 41 42 43 44 45 46 47 48 33 34 35 36 53 54 55 56 57 58 59 60 61 62 63 64 49 50 51 52 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The fourth application of &lt;code&gt;U&lt;/code&gt;, of course, will return the cube back to its 
solved state:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;U U U:
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now if we examine the relationship between each of these tuples, 
we see that the faces are exchanged according to specific patterns.&lt;/p&gt;
&lt;p&gt;These groups of four numbered faces are exchanged with one another:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;( 4, 16, 13,  1)
( 8, 15,  9,  2)
(12, 14,  5,  3)
( 7, 11, 10,  6)
(65, 49, 33, 17) 
(66, 50, 34, 18)
(67, 51, 35, 19)
(68, 52, 36, 20)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are 8 total faces, composing one upper quadrant of the face
being rotated.&lt;/p&gt;
&lt;p&gt;The remaining 64 faces do not move:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks2-maps"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="rotation-maps"&gt;Rotation Maps&lt;/h1&gt;
&lt;p&gt;While the 96-tuple representation is useful, a better computational
representation of the tuple is a rotation map, which consists of 
2-tuples of face index numbers that are permuted. For example,
the tuple &lt;span class="math"&gt;\((4,16)\)&lt;/span&gt; would indicate that the position at face 4
would become face 16 after the rotation.&lt;/p&gt;
&lt;p&gt;As a reminder, here is the solved cube's face index layout:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;             01 02 03 04
             05 06 07 08
             09 10 11 12
             13 14 15 16

17 18 19 20  33 34 35 36  49 50 51 52  65 66 67 68
21 22 23 24  37 38 39 40  53 54 55 56  69 70 71 72
25 26 27 28  41 42 43 44  57 58 59 60  73 74 75 76
29 30 31 32  45 46 47 48  61 62 63 64  77 78 79 80

             81 82 83 84
             85 86 87 88
             89 90 91 92
             93 94 95 96
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thus, the rotation map representation of each move would be:&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks2-maps-u"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="u-rotation-map"&gt;U Rotation Map&lt;/h2&gt;
&lt;p&gt;Upon a U rotation, the face 1 will become face 13, indicated by (1,13).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;U:
---------------------
[(1, 13),
 (2, 9),
 (3, 5),
 (4, 1),
 (5, 14),
 (6, 10),
 (7, 6),
 (8, 2),
 (9, 15),
 (10, 11),
 (11, 7),
 (12, 3),
 (13, 16),
 (14, 12),
 (15, 8),
 (16, 4),
 (17, 33),
 (18, 34),
 (19, 35),
 (20, 36),
 (33, 49),
 (34, 50),
 (35, 51),
 (36, 52),
 (49, 65),
 (50, 66),
 (51, 67),
 (52, 68),
 (65, 17),
 (66, 18),
 (67, 19),
 (68, 20)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks2-maps-d"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="d-rotation-map"&gt;D Rotation Map&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;D:
----------------------------------------
[(81, 93),
 (82, 89),
 (83, 85),
 (84, 81),
 (85, 94),
 (86, 90),
 (87, 86),
 (88, 82),
 (89, 95),
 (90, 91),
 (91, 87),
 (92, 83),
 (93, 96),
 (94, 92),
 (95, 88),
 (96, 84),
 (29, 77),
 (30, 78),
 (31, 79),
 (32, 80),
 (45, 29),
 (46, 30),
 (47, 31),
 (48, 32),
 (61, 45),
 (62, 46),
 (63, 47),
 (64, 48),
 (77, 61),
 (78, 62),
 (79, 63),
 (80, 64)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks2-maps-l"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="l-rotation-map"&gt;L Rotation Map&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;L:
----------------------------------------
[(17, 29),
 (18, 25),
 (19, 21),
 (20, 17),
 (21, 30),
 (22, 26),
 (23, 22),
 (24, 18),
 (25, 31),
 (26, 27),
 (27, 23),
 (28, 19),
 (29, 32),
 (30, 28),
 (31, 24),
 (32, 20),
 (1, 80),
 (5, 76),
 (9, 72),
 (13, 68),
 (33, 1),
 (37, 5),
 (41, 9),
 (45, 13),
 (81, 33),
 (85, 37),
 (89, 41),
 (93, 45),
 (68, 93),
 (72, 89),
 (76, 85),
 (80, 81)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks2-maps-r"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="r-rotation-map"&gt;R Rotation Map&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; R:
----------------------------------------
[(49, 61),
 (50, 57),
 (51, 53),
 (52, 49),
 (53, 62),
 (54, 58),
 (55, 54),
 (56, 50),
 (57, 63),
 (58, 59),
 (59, 55),
 (60, 51),
 (61, 64),
 (62, 60),
 (63, 56),
 (64, 52),
 (4, 36),
 (8, 40),
 (12, 44),
 (16, 48),
 (36, 84),
 (40, 88),
 (44, 92),
 (48, 96),
 (84, 77),
 (88, 73),
 (92, 69),
 (96, 65),
 (65, 16),
 (69, 12),
 (73, 8),
 (77, 4)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks2-maps-f"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="f-rotation-map"&gt;F Rotation Map&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; F:
----------------------------------------
[(33, 45),
 (34, 41),
 (35, 37),
 (36, 33),
 (37, 46),
 (38, 42),
 (39, 38),
 (40, 34),
 (41, 47),
 (42, 43),
 (43, 39),
 (44, 35),
 (45, 48),
 (46, 44),
 (47, 40),
 (48, 36),
 (13, 32),
 (14, 28),
 (15, 24),
 (16, 20),
 (20, 81),
 (24, 82),
 (28, 83),
 (32, 84),
 (81, 61),
 (82, 57),
 (83, 53),
 (84, 49),
 (49, 13),
 (53, 14),
 (57, 15),
 (61, 16)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks2-maps-b"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="b-rotation-map"&gt;B Rotation Map&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; B:
----------------------------------------
[(65, 77),
 (66, 73),
 (67, 69),
 (68, 65),
 (69, 78),
 (70, 74),
 (71, 70),
 (72, 66),
 (73, 79),
 (74, 75),
 (75, 71),
 (76, 67),
 (77, 80),
 (78, 76),
 (79, 72),
 (80, 68),
 (1, 52),
 (2, 56),
 (3, 60),
 (4, 64),
 (17, 4),
 (21, 3),
 (25, 2),
 (29, 1),
 (93, 17),
 (94, 21),
 (95, 25),
 (96, 29),
 (52, 96),
 (56, 95),
 (60, 94),
 (64, 93)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks2-maps-rotation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="how-to-use-rotation-map"&gt;How To Use Rotation Map&lt;/h2&gt;
&lt;p&gt;The rotation map enables us to represent a 4x4 Rubik's Cube
as a simple tuple, and just use a Rubik's Cube object from the 
&lt;a href="https://git.charlesreid1.com/charlesreid1/rubiks-cube-nnn-solver"&gt;forked rubikscubesolver library&lt;/a&gt;
at git.charlesreid1.com to get the rotation maps.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Python code:&lt;/span&gt;
&lt;span class="n"&gt;cube0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;cube1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cube0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cube_prior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cube0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_cube&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;

    &lt;span class="c1"&gt;# Get the rotation map&lt;/span&gt;
    &lt;span class="n"&gt;rotmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotation_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# (Print the rotation map here)&lt;/span&gt;

    &lt;span class="c1"&gt;# Apply each transformation in the rotation map to the new cube&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rotmap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# shift item at index m[0] to item at index m[1]&lt;/span&gt;
        &lt;span class="n"&gt;cube1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cube_prior&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;cube_prior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cube1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks2-maps-code"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="face-map-code"&gt;Face Map Code&lt;/h2&gt;
&lt;p&gt;In this section we present a portion of the code 
that actually generates these face maps. This functionality
was not in the &lt;a href="https://github.com/dwalton76/rubiks-cube-NxNxN-solver"&gt;original Rubik's Cube solver library&lt;/a&gt;
from &lt;a href="https://github.com/dwalton76/"&gt;Github user @dwalton76&lt;/a&gt;,
so the library was forked and the functionality added
to the &lt;a href="https://git.charlesreid1.com/charlesreid1/rubiks-cube-nnn-solver"&gt;forked Rubik's Cube solver library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The actual implementation is in the &lt;code&gt;rotation_map(action)&lt;/code&gt; method,
defined for the Rubik's Cube object at the same place as the 
&lt;code&gt;rotate(action)&lt;/code&gt; method. This definition is in 
&lt;code&gt;rubikscubennnsolver/__init__.py&lt;/code&gt; on line 581:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://git.charlesreid1.com/charlesreid1/rubiks-cube-nnn-solver/src/master/rubikscubennnsolver/__init__.py#L581"&gt;link to &lt;code&gt;rubikscubennnsolver/__init__.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This method returns a list containing the tuples of index permutations 
(old,new) that correspond to this particular move. Call it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;URFDLB&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;cube&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RubiksCube444&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solved_4x4x4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotation_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;U&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks2-tuples"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="tuples-for-move-sequences"&gt;Tuples for Move Sequences&lt;/h1&gt;
&lt;p&gt;So far we have shown the tuple representation for the Rubik's Cube
and how it works, and created a more convenient representation for
implementing the cube on a computer and applying rotations.&lt;/p&gt;
&lt;p&gt;Now, we can achieve the goal of this post, which is to be able to
represent the state of a cube, after a certain number of rotations,
in a quantitative and mathematical way.&lt;/p&gt;
&lt;p&gt;In Part 3, we'll develop an algebra of permutations to use 
and understand the tuple representations we are presenting in 
this post.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks2-tuples-sequences"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="applying-rotation-maps-for-sequences"&gt;Applying Rotation Maps for Sequences&lt;/h2&gt;
&lt;p&gt;The concept here is simple: we use the rotation maps that we defined
above to permute elements according to the formula prescribed for 
that particular rotation.&lt;/p&gt;
&lt;p&gt;By applying these permutations sequentially, we can permute the 
96-tuple in a way that represents the permutations created by 
a given sequence of moves.&lt;/p&gt;
&lt;p&gt;For example, after applying four sequence maps corresponding to 
the move sequence &lt;code&gt;U R U' R'&lt;/code&gt; we get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
(1 2 3 77 5 6 7 73 9 10 11 69 16 12 8 20 17 18 19 36 21 22 23 24 25 26 27 28 29 30 31 32 49 50 51 33 37 38 39 40 41 42 43 44 45 46 47 48 13 56 60 64 53 54 55 34 57 58 59 35 61 62 63 4 96 66 67 68 14 70 71 72 15 74 75 76 65 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 52)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks2-preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="preview-of-part-3"&gt;Preview of Part 3&lt;/h1&gt;
&lt;p&gt;As a preview of where we are going with Part 3, let's 
return to the permutation corresponding to &lt;code&gt;U R U' R'&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
(1 2 3 77 5 6 7 73 9 10 11 69 16 12 8 20 17 18 19 36 21 22 23 24 25 26 27 28 29 30 31 32 49 50 51 33 37 38 39 40 41 42 43 44 45 46 47 48 13 56 60 64 53 54 55 34 57 58 59 35 61 62 63 4 96 66 67 68 14 70 71 72 15 74 75 76 65 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 52)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It turns out that, unlike the &lt;code&gt;U&lt;/code&gt; move by itself, this move sequence 
results in groups of either three or six faces exchanging places.
(In Part 3 we will cover the algorithm for finding these groups,
which, crucially, relies on the work we did in this post.)&lt;/p&gt;
&lt;p&gt;The groups of six faces that are permuted are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[77, 65, 96, 52, 64, 4]
[16, 20, 36, 33, 49, 13]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These two sets of six faces all live on corners of the cube, 
so this move sequence swaps six corners.&lt;/p&gt;
&lt;p&gt;Likewise, the groups of three faces that are permuted are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[73, 15, 8]
[69, 14, 12]
[50, 56, 34]
[51, 60, 35]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These are all faces on double edge pieces: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[73, 15, 8]&lt;/code&gt; and &lt;code&gt;[51, 60, 35]&lt;/code&gt; are faces on right-handed double edge pieces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[69, 14, 12]&lt;/code&gt; and &lt;code&gt;[50, 56, 34]&lt;/code&gt; are faces on left-handed double edge pieces&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The remaining faces do not permute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[1, 2, 3, 5, 6, 7, 9, 10, 11, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 57, 58, 59, 61, 62, 63, 66, 67, 68, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What we will discover is that the least common multiple 
of these two numbers, 6 and 3, yields the number of times
this move sequence needs to be applied to a solved cube (6) 
in order to return the cube back to its solved state.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks2-references"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube". Charlesreid1.com wiki, Charles Reid. Edited 14 January 2017. Accessed 14 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube"&gt;https://charlesreid1.com/wiki/Rubiks_Cube&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Revenge". Charlesreid1.com wiki, Charles Reid. Edited 14 January 2017. Accessed 14 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Revenge"&gt;https://charlesreid1.com/wiki/Rubiks_Revenge&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube/Tuple". Charlesreid1.com wiki, Charles Reid. Edited 14 January 2017. Accessed 14 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube/Tuple"&gt;https://charlesreid1.com/wiki/Rubiks_Cube/Tuple&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube/Permutations". Charlesreid1.com wiki, Charles Reid. Edited 14 January 2017. Accessed 14 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube/Permutations"&gt;https://charlesreid1.com/wiki/Rubiks_Cube/Permutations&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Github - dwalton76/rubiks-cube-NxNxN-solver". dwalton76, Github Repository, Github Inc. Accessed 11 January 2017.
&amp;lt;&lt;a href="https://github.com/dwalton76/rubiks-cube-NxNxN-solver"&gt;https://github.com/dwalton76/rubiks-cube-NxNxN-solver&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube NxNxN Solver". Git repository, git.charlesreid1.com. Charles Reid. Updated 14 January 2017.
&amp;lt;&lt;a href="https://git.charlesreid1.com/charlesreid1/rubiks-cube-nnn-solver"&gt;https://git.charlesreid1.com/charlesreid1/rubiks-cube-nnn-solver&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubiks Cube Cycles". Git repository, git.charlesreid1.com. Charles Reid. Updated 14 January 2017.
&amp;lt;&lt;a href="https://git.charlesreid1.com/charlesreid1/rubiks-cube-cycles"&gt;https://git.charlesreid1.com/charlesreid1/rubiks-cube-cycles&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a name="rubiks2-appendix"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="appendix-cube-with-numbered-faces"&gt;Appendix: Cube with Numbered Faces&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;             01 02 03 04
             05 06 07 08
             09 10 11 12
             13 14 15 16

17 18 19 20  33 34 35 36  49 50 51 52  65 66 67 68
21 22 23 24  37 38 39 40  53 54 55 56  69 70 71 72
25 26 27 28  41 42 43 44  57 58 59 60  73 74 75 76
29 30 31 32  45 46 47 48  61 62 63 64  77 78 79 80

             81 82 83 84
             85 86 87 88
             89 90 91 92
             93 94 95 96
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Rubiks Cube"></category><category term="rubiks cube"></category><category term="combinatorics"></category><category term="permutations"></category><category term="python"></category><category term="puzzles"></category><category term="art of computer programming"></category><category term="knuth"></category></entry><entry><title>4x4 Rubik's Cube: Part 1: Representations</title><link href="https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html" rel="alternate"></link><published>2018-01-11T15:00:00-08:00</published><updated>2018-01-11T15:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-01-11:/4x4-rubiks-cube-part-1-representations.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This is Part 1 of a 4-part blog post 
on the mathematics of the 4x4 Rubik's Cube, 
its relation to algorithms, and some 
curious properties of Rubik's Cubes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You are currently reading Part 1 of this blog post: &lt;strong&gt;Part 1: Representations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See Part 2 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-2-permutations.html"&gt;Part 2: Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 3 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html"&gt;Part 3: Factoring Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 4 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-4-sequence-order.html"&gt;Part 4: Sequence Order&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks1-intro"&gt;Introduction: Why the Rubik's Cube&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks1-intro-why"&gt;Why the 4x4 Rubik's Cube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks1-how"&gt;How the Rubik's Cube Works&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-pieces"&gt;The Pieces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-face"&gt;Face Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-color"&gt;Color Notation â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is Part 1 of a 4-part blog post 
on the mathematics of the 4x4 Rubik's Cube, 
its relation to algorithms, and some 
curious properties of Rubik's Cubes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You are currently reading Part 1 of this blog post: &lt;strong&gt;Part 1: Representations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See Part 2 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-2-permutations.html"&gt;Part 2: Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 3 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html"&gt;Part 3: Factoring Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 4 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-4-sequence-order.html"&gt;Part 4: Sequence Order&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks1-intro"&gt;Introduction: Why the Rubik's Cube&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks1-intro-why"&gt;Why the 4x4 Rubik's Cube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks1-how"&gt;How the Rubik's Cube Works&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-pieces"&gt;The Pieces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-face"&gt;Face Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-color"&gt;Color Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-move"&gt;Move Notation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-move-regular"&gt;Regular Face Rotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-move-reverse"&gt;Reverse Face Rotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-move-double"&gt;Double Face Rotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-move-second"&gt;Second Layer Face Rotations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks1-computer"&gt;Computer Representation of a Rubik's Cube&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks1-computer-operations"&gt;Operations and Functionality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks1-computer-face"&gt;Face Numbering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks1-tuple"&gt;Tuple&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks1-tuple-requirements"&gt;Tuple Representation Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks1-tuple-representation"&gt;Tuple Representation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks1-preview"&gt;Preview of Part 2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks1-references"&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="introduction-why-the-rubiks-cube"&gt;Introduction: Why The Rubik's Cube&lt;/h1&gt;
&lt;p&gt;In this series of four posts, we'll take a look at the 
4x4 Rubik's Cube. The Rubik's Cube is an interesting
puzzle that has some profound mathematical connections
to group theory and combinatorics.&lt;/p&gt;
&lt;p&gt;Group theory is a branch of mathematics that applies to 
any system that exhibits symmetry; combinatorics is the 
mathematics of counting things.&lt;/p&gt;
&lt;p&gt;The Rubik's Cube gives us the opportunity to apply
concepts in group theory and combinatorics to 
better understand how the cube works, and to learn
how to apply these principles to real world systems.&lt;/p&gt;
&lt;p&gt;Finally, we will wrap up by discussing some of the 
algorithms that are required to deal with a 
Rubik's Cube computationally.&lt;/p&gt;
&lt;p&gt;In the next two posts, we'll talk more about the
mathematical representation of permutations of 
the Rubik's Cube, and how to use this representation 
to understand some of the properties of move 
sequences when applied to the cube.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-intro-why"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="why-the-4x4-rubiks-cube"&gt;Why The 4x4 Rubik's Cube&lt;/h2&gt;
&lt;p&gt;The 4x4 Rubik's cube, also known as the Rubik's Revenge cube, 
is larger than the standard 3x3 Rubik's Cube - 96 faces, instead of 
the ususal 36. The 4x4 cube exhibits some particularly interesting 
properties as a result of having an even number of squares on each edge. &lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-how"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="how-the-rubiks-cube-works"&gt;How the Rubik's Cube Works&lt;/h1&gt;
&lt;p&gt;Let's start with a discussion of cube mechanics, since this 
is important to coming up with an accurate mathematical model
of the cube.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-how-pieces"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-pieces"&gt;The Pieces&lt;/h2&gt;
&lt;p&gt;The 4x4 Rubik's Cube consists of six faces of sixteen squares 
each, for a total of 96 face squares. These face squares are 
not completely interchangeable, however - the 4x4 cube is actually
composed of three types of pieces, called "cubies".&lt;/p&gt;
&lt;p&gt;&lt;img src="images/cube1.jpg" width="300"/&gt;
&lt;strong&gt;Figure 1: Corner pieces are green.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The first type of piece is a &lt;strong&gt;corner piece&lt;/strong&gt;, which contains 
3 faces. Note that it is impossible for the corner pieces
to change their chirality (direction of rotation).
There are 8 corner pieces, each of which can be oriented
in 3 different ways. &lt;/p&gt;
&lt;p&gt;&lt;img src="images/cube2.jpg" width="300"/&gt;
&lt;strong&gt;Figure 2: Double edge pieces are blue.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The second type of piece is a &lt;strong&gt;double edge (dedge) piece&lt;/strong&gt;.
Each edge is composed of two double edges. There are 
24 total double edge pieces, which can be further classified
into 12 left-handed and 12 right-handed dedge pieces.&lt;/p&gt;
&lt;p&gt;&lt;img src="images/cube3.jpg" width="300"/&gt;
&lt;strong&gt;Figure 3: Center pieces are blue.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lastly, there are 4 &lt;strong&gt;center pieces&lt;/strong&gt; in the center of each
face, for a total of 24 center pieces. Note that each of the 
center pieces of a given color are interchangeable, unlike 
the double edge pieces or corners.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-how-face"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="face-notation"&gt;Face Notation&lt;/h2&gt;
&lt;p&gt;To refer to particular faces on the cube, we use six
letters to indicate different faces:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;U&lt;/code&gt; - upper face (the top of the cube)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;D&lt;/code&gt; - downward face (the bottom of the cube0&lt;/p&gt;
&lt;p&gt;&lt;code&gt;F&lt;/code&gt; - front face (the front of the cube)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - back face (the back side of the cube)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;L&lt;/code&gt; - left face of the cube (on the left side when facing the front F face)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt; - right face of the cube&lt;/p&gt;
&lt;p&gt;This will help refer to how we will rotate the cube.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-how-color"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="color-notation"&gt;Color Notation&lt;/h2&gt;
&lt;p&gt;In the solved state, each cube face has one of six colors.
The orientation of these colors relative to one another
is always fixed; the red and orange colored faces, for example,
are never adjacent. This is due to the nature of the mechanical
pieces that compose the Rubik's Cube.&lt;/p&gt;
&lt;p&gt;The standard faces for each color on a solved cube are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;U&lt;/code&gt; = White&lt;/li&gt;
&lt;li&gt;&lt;code&gt;D&lt;/code&gt; = Yellow&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F&lt;/code&gt; = Green&lt;/li&gt;
&lt;li&gt;&lt;code&gt;B&lt;/code&gt; = Blue (Back-Blue)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L&lt;/code&gt; = Orange&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt; = Red (Red-Right)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that on a 3x3 cube, we can always determine the
final color a face will have, because the six center pieces
on each side of a 3x3 cube always remain fixed.&lt;/p&gt;
&lt;p&gt;On a 4x4 cube, however, all four center squares can rotate 
and move, meaning all 24 center squares are totally 
interchangeable, and there is no link between the 
center colors on a 4x4 cube and the final color
that will be on that face when the cube is solved.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-how-move"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="move-notation"&gt;Move Notation&lt;/h2&gt;
&lt;p&gt;Using the face notation explained above, we can denote 
multiple types of moves on the 4x4 Rubik's Cube.&lt;/p&gt;
&lt;p&gt;We have 36 total moves that we can make on the 4x4 Rubik's Cube,
which can be grouped by the dozen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;L l r R
U u d D
B b f F

L&amp;#39; l&amp;#39; r&amp;#39; R&amp;#39;
U&amp;#39; u&amp;#39; d&amp;#39; D&amp;#39;
B&amp;#39; b&amp;#39; f&amp;#39; F&amp;#39;

2L 2L&amp;#39; 2R 2R&amp;#39;
2U 2U&amp;#39; 2D 2D&amp;#39;
2B 2B&amp;#39; 2F 2F&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's go through the details of the notation.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-how-move-regular"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="regular-face-rotations"&gt;Regular Face Rotations&lt;/h3&gt;
&lt;p&gt;The regular face turns are denoted with capital letters:
&lt;code&gt;L R U D B F&lt;/code&gt; refer to a single clockwise rotation of the 
respective face. Here, "clockwise" means &lt;em&gt;the direction
that is clockwise when facing the given face head-on.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-how-move-reverse"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="reverse-face-rotations"&gt;Reverse Face Rotations&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;'&lt;/code&gt; apostrophe following moves, as in &lt;code&gt;L' R' U' D' B' F'&lt;/code&gt;,
indicates that the move shoud be a &lt;em&gt;counter-clockwise&lt;/em&gt; 
rotation of the given face, instead of clockwise.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-how-move-double"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="double-face-rotations"&gt;Double Face Rotations&lt;/h3&gt;
&lt;p&gt;Rotations that are indicated using a lowercase letter
refer to two-layer rotations: &lt;code&gt;l r u d b f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="images/cube4.jpg" width="300"/&gt;
&lt;strong&gt;Figure 4: Cube state after move &lt;code&gt;u&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That is, the lowercase &lt;code&gt;u&lt;/code&gt; refers to the &lt;em&gt;clockwise&lt;/em&gt; 
rotation of the top two layers of the cube; 
the lowercase &lt;code&gt;r&lt;/code&gt; refers to the &lt;em&gt;clockwise&lt;/em&gt; 
rotation of the rightmost two
layers of the cube; and so on.&lt;/p&gt;
&lt;p&gt;The apostrophe also serves to indicate a 
&lt;em&gt;counter-clockwise&lt;/em&gt; rotation: &lt;code&gt;'l r' u' d' b' f'&lt;/code&gt;
indicate counter clockwise rotations of the two
left, two right, two upper, two bottom, two back,
and two front layers, respectively.&lt;/p&gt;
&lt;p&gt;We have covered the first 24 moves - 
clockwise and counter-clockwise rotations
of single and double layers.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-how-move-second"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="second-layer-face-rotations"&gt;Second Layer Face Rotations&lt;/h3&gt;
&lt;p&gt;&lt;img src="images/cube5.jpg" width="300"/&gt;
&lt;strong&gt;Figure 5: Cube state after move &lt;code&gt;2U&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;2&lt;/code&gt; notation indicates a rotation of the second layer only. 
For example, &lt;code&gt;2U&lt;/code&gt; refers to the clockwise rotation of the second 
layer from the top. This is equivalent to the move sequence 
&lt;code&gt;u U'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Likewise, the apostrophe indicates a counterclockwise rotation.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-computer"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="computer-representation-of-a-rubiks-cube"&gt;Computer Representation of a Rubik's Cube&lt;/h1&gt;
&lt;p&gt;The computer representation we are using is the 
&lt;a href="https://github.com/dwalton76/rubiks-cube-NxNxN-solver"&gt;rubiks-cube-NxNxN-solver&lt;/a&gt;
library by Github user &lt;a href="https://github.com/dwalton76/"&gt;@dwalton&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We have modified this library to provide additional
functionality needed in the project; the fork used 
in this project is available at git.charlesreid1.com:
&lt;a href="https://git.charlesreid1.com/charlesreid1/rubiks-cube-nnn-solver"&gt;rubiks-cube-nnn-solver&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using this library, here's how we create a 4x4
Rubik's Revenge cube:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In [1]: from rubikscubennnsolver.RubiksCube444 import RubiksCube444, solved_4x4x4

In [2]: order = &amp;#39;URFDLB&amp;#39;

In [3]: cube = RubiksCube444(solved_4x4x4, order)

In [4]: cube.print_cube()
         U U U U
         U U U U
         U U U U
         U U U U

L L L L  F F F F  R R R R  B B B B
L L L L  F F F F  R R R R  B B B B
L L L L  F F F F  R R R R  B B B B
L L L L  F F F F  R R R R  B B B B

         D D D D
         D D D D
         D D D D
         D D D D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks1-computer-operations"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="operations-and-functionality"&gt;Operations and Functionality&lt;/h2&gt;
&lt;p&gt;Some important functionality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Obtaining each side&lt;/li&gt;
&lt;li&gt;Applying rotation&lt;/li&gt;
&lt;li&gt;Applying sequence of rotations&lt;/li&gt;
&lt;li&gt;Each side&lt;/li&gt;
&lt;li&gt;Side face numberings, centers, edges&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To obtain each side, use the &lt;code&gt;sides&lt;/code&gt; attribute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In [8]: print(cube.sides)
OrderedDict([(&amp;#39;U&amp;#39;, &amp;lt;rubikscubennnsolver.RubiksSide.Side object at 0x11172d358&amp;gt;), 
             (&amp;#39;L&amp;#39;, &amp;lt;rubikscubennnsolver.RubiksSide.Side object at 0x11172d240&amp;gt;), 
             (&amp;#39;F&amp;#39;, &amp;lt;rubikscubennnsolver.RubiksSide.Side object at 0x11172d5c0&amp;gt;), 
             (&amp;#39;R&amp;#39;, &amp;lt;rubikscubennnsolver.RubiksSide.Side object at 0x11172d5f8&amp;gt;), 
             (&amp;#39;B&amp;#39;, &amp;lt;rubikscubennnsolver.RubiksSide.Side object at 0x11172d518&amp;gt;), 
             (&amp;#39;D&amp;#39;, &amp;lt;rubikscubennnsolver.RubiksSide.Side object at 0x11172d390&amp;gt;)])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each Side object has a long list of methods, including methods
to obtain the index numbers of corner, edge, or center faces 
on a particular side.&lt;/p&gt;
&lt;p&gt;To apply a rotation of a single face, 
use the &lt;code&gt;rotate()&lt;/code&gt; method and pass the 
name of the face:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In [10]: cube.rotate(&amp;quot;U&amp;quot;)

In [11]: cube.print_cube()
         U U U U
         U U U U
         U U U U
         U U U U

F F F F  R R R R  B B B B  L L L L
L L L L  F F F F  R R R R  B B B B
L L L L  F F F F  R R R R  B B B B
L L L L  F F F F  R R R R  B B B B

         D D D D
         D D D D
         D D D D
         D D D D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, the rotate method does not 
take sequences of moves, but this is easily
resolved:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In [12]: cube = RubiksCube444(solved_4x4x4, order)

In [13]: sequence = &amp;quot;U L U&amp;#39; L&amp;#39;&amp;quot;

In [14]: for move in sequence.split():
    ...:     cube.rotate(move)
    ...:

In [15]: cube.print_cube()
         L U U U
         U U U U
         U U U U
         U B B L

D F F F  R L L F  U R R R  B B B B
L L L L  F F F F  R R R R  B B B U
L L L L  F F F F  R R R R  B B B U
L L L L  F F F F  R R R R  B B B U

         D D D D
         D D D D
         D D D D
         B D D D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks1-computer-face"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="face-numbering"&gt;Face Numbering&lt;/h2&gt;
&lt;p&gt;Here is the numerical representation of the faces,
which we will make extensive use of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In [6]: cube.print_cube_layout()
             01 02 03 04
             05 06 07 08
             09 10 11 12
             13 14 15 16

17 18 19 20  33 34 35 36  49 50 51 52  65 66 67 68
21 22 23 24  37 38 39 40  53 54 55 56  69 70 71 72
25 26 27 28  41 42 43 44  57 58 59 60  73 74 75 76
29 30 31 32  45 46 47 48  61 62 63 64  77 78 79 80

             81 82 83 84
             85 86 87 88
             89 90 91 92
             93 94 95 96
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks1-tuple"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="tuple-representation"&gt;Tuple Representation&lt;/h1&gt;
&lt;p&gt;We have a goal of finding a way of representing the 
state of the 4x4 Rubik's Revenge using a tuple, 
which is a mathematical object that will enable us
to investigate properties of sequences, moves, and 
rotations.&lt;/p&gt;
&lt;p&gt;It is important to note that the mechanics of the
cube restrict some of the 96 total faces to only 
occur in particular configurations. By using a 
tuple of 96 integers, we are overspecifying the 
state of the cube, and we would be able to do much 
better if our goal were a minimal representation 
of the Rubik's Cube state.&lt;/p&gt;
&lt;p&gt;However, our goal is &lt;em&gt;not&lt;/em&gt; a minimal representation
of the cube, but a &lt;em&gt;unique&lt;/em&gt; representation of the cube.
As we will see in a later post, the schema we use
does not actually matter, so long as we can 
represent each unique state of the cube using a sequence
of integers of arbitrary length.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-tuple-requirements"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="tuple-representation-requirements"&gt;Tuple Representation Requirements&lt;/h2&gt;
&lt;p&gt;The 4x4 cube, in the solved state, has a few characteristics that can be used
to indicate a particular permutation or configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Face indciators &lt;code&gt;UDFBLR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Colors &lt;code&gt;WYGBRO&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Integers 1-96 to number each face&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is how the faces representation looks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In [17]: cube.print_cube()
         U U U U
         U U U U
         U U U U
         U U U U

L L L L  F F F F  R R R R  B B B B
L L L L  F F F F  R R R R  B B B B
L L L L  F F F F  R R R R  B B B B
L L L L  F F F F  R R R R  B B B B

         D D D D
         D D D D
         D D D D
         D D D D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The equivalent color representation is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;         W W W W
         W W W W
         W W W W
         W W W W

O O O O  G G G G  R R R R  B B B B
O O O O  G G G G  R R R R  B B B B
O O O O  G G G G  R R R R  B B B B
O O O O  G G G G  R R R R  B B B B

         Y Y Y Y
         Y Y Y Y
         Y Y Y Y
         Y Y Y Y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, the tuple representation &lt;em&gt;cannot&lt;/em&gt; use 
colors to represent the state of the cube.
This is because a tuple representation using 
"R" to represent each red face would give us no
way of distinguishing between the (non-interchangeable)
red faces on the cube. For example, if the 
red-green double edge piece were replaced 
with a red-blue double edge piece, oriented
with the red face at the same location,
the n-tuple needs to reflect that this face
has a different value than it did the prior move.&lt;/p&gt;
&lt;p&gt;For this reason, we must use an integer to index 
each distinct face:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;             01 02 03 04
             05 06 07 08
             09 10 11 12
             13 14 15 16

17 18 19 20  33 34 35 36  49 50 51 52  65 66 67 68
21 22 23 24  37 38 39 40  53 54 55 56  69 70 71 72
25 26 27 28  41 42 43 44  57 58 59 60  73 74 75 76
29 30 31 32  45 46 47 48  61 62 63 64  77 78 79 80

             81 82 83 84
             85 86 87 88
             89 90 91 92
             93 94 95 96
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can rearrange this into a 96-tuple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we apply a rotation, for example &lt;code&gt;U R&lt;/code&gt;, 
we will end up with a different cube:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;             13 09 05 01
             14 10 06 02
             15 11 07 03
             48 44 40 36

33 34 35 84  61 57 53 49  16 66 67 68  17 18 19 20
21 22 23 24  37 38 39 88  62 58 54 50  12 70 71 72
25 26 27 28  41 42 43 92  63 59 55 51  08 74 75 76
29 30 31 32  45 46 47 96  64 60 56 52  04 78 79 80

             81 82 83 77
             85 86 87 73
             89 90 91 69
             93 94 95 65
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This particular sequence of moves results in 
a cube state uniquely represented by the following 
96-tuple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(13 9 5 1 14 10 6 2 15 11 7 3 48 44 40 36 33 34 35 84 21 22 23 24 25 26 27 28 29 30 31 32 61 57 53 49 37 38 39 88 41 42 43 92 45 46 47 96 16 66 67 68 62 58 54 50 63 59 55 51 64 60 56 52 17 18 19 20 12 70 71 72 8 74 75 76 4 78 79 80 81 82 83 77 85 86 87 73 89 90 91 69 93 94 95 65)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="rubiks1-tuple-representation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="tuple-representation_1"&gt;Tuple Representation&lt;/h2&gt;
&lt;p&gt;Now, we have managed to find a unique representation for any given cube state 
by labeling each individual face 1-96.&lt;/p&gt;
&lt;p&gt;But we aren't quite done yet. It turns out that our 
statement, that our representation should treat each
face as unique, is not strictly true for all 96 faces.&lt;/p&gt;
&lt;p&gt;The square pieces are completely interchangeable, due to 
the fact that they are not connected to any other faces
(and therefore have no orientation or way of differentiating
them from one another).&lt;/p&gt;
&lt;p&gt;If we are doing anything that involves counting 
configurations, it is important to account for this fact,
by treating the following groups of face indices as
interchangeable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(6, 7, 10, 11)
(22, 23, 26, 27)
(38, 39, 42, 43)
(54, 55, 58, 59)
(70, 71, 74, 75)
(86, 87, 90, 91)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In Part 2 and Part 3 of this series, we will 
encounter these concepts again, and it will
become more clear what these caveats and 
notes mean through example.&lt;/p&gt;
&lt;p&gt;Following is a preview of Part 2 of this 3-part blog post.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="preview-of-part-2"&gt;Preview of Part 2&lt;/h1&gt;
&lt;p&gt;In Part 2 of this series, we will utilize the n-tuple representation
of the 4x4 Rubik's Cube in order to write permutations of the cube
corresponding to specific states, and turn a sequence of moves on the 
cube into permutations.&lt;/p&gt;
&lt;p&gt;We will also create a map for each type of move, telling us 
where each face index will end up.&lt;/p&gt;
&lt;p&gt;In Part 3 we will use these to predict properties of 
rotations applied to the 4x4 Rubik's Cube.&lt;/p&gt;
&lt;p&gt;&lt;a name="rubiks1-references"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube". Charlesreid1.com wiki, Charles Reid. Edited 11 January 2017. Accessed 11 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube"&gt;https://charlesreid1.com/wiki/Rubiks_Cube&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Revenge". Charlesreid1.com wiki, Charles Reid. Edited 11 January 2017. Accessed 11 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Revenge"&gt;https://charlesreid1.com/wiki/Rubiks_Revenge&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube/Tuple". Charlesreid1.com wiki, Charles Reid. Edited 11 January 2017. Accessed 11 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube/Tuple"&gt;https://charlesreid1.com/wiki/Rubiks_Cube/Tuple&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube/Permutations". Charlesreid1.com wiki, Charles Reid. Edited 11 January 2017. Accessed 11 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Rubiks_Cube/Permutations"&gt;https://charlesreid1.com/wiki/Rubiks_Cube/Permutations&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Github - dwalton76/rubiks-cube-NxNxN-solver". dwalton76, Github Repository, Github Inc. Accessed 11 January 2017.
&amp;lt;&lt;a href="https://github.com/dwalton76/rubiks-cube-NxNxN-solver"&gt;https://github.com/dwalton76/rubiks-cube-NxNxN-solver&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubik's Cube NxNxN Solver". Git repository, git.charlesreid1.com. Charles Reid. Updated 11 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com:3000/charlesreid1/rubiks-cube-nnn-solver"&gt;https://git.charlesreid1.com/charlesreid1/rubiks-cube-nnn-solver&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Rubiks Cube Cycles". Git repository, git.charlesreid1.com. Charles Reid. Updated 11 January 2017.
&amp;lt;&lt;a href="https://charlesreid1.com:3000/charlesreid1/rubiks-cube-cycles"&gt;https://git.charlesreid1.com/charlesreid1/rubiks-cube-cycles&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Rubiks Cube"></category><category term="rubiks cube"></category><category term="mathematics"></category><category term="combinatorics"></category><category term="permutations"></category><category term="python"></category><category term="puzzles"></category></entry><entry><title>Let's Generate Permutations!</title><link href="https://charlesreid1.github.io/lets-generate-permutations.html" rel="alternate"></link><published>2018-01-02T18:00:00-08:00</published><updated>2018-01-02T18:00:00-08:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2018-01-02:/lets-generate-permutations.html</id><summary type="html">&lt;h1 id="generating-permutations"&gt;Generating Permutations&lt;/h1&gt;
&lt;p&gt;In today's post we're going to discuss the generation of permutations.&lt;/p&gt;
&lt;p&gt;Often, in combinatorics problems, we are interested in &lt;em&gt;how many&lt;/em&gt; different
instances or configurations of a particular thing we can have (what we'll call
"enumeration" or "counting"). However, that is different from wanting to 
actually see all of those configurations. Indeed, if we are counting 
something with an astronomical number of configurations, we don't want 
to try to list all of them.&lt;/p&gt;
&lt;p&gt;However, as usual, Donald Knuth, who covers the topic of permutation 
generation in Volume 4A of his classic work, 
&lt;u&gt;The Art of Computer Programming&lt;/u&gt;,
uncovers â€¦&lt;/p&gt;</summary><content type="html">&lt;h1 id="generating-permutations"&gt;Generating Permutations&lt;/h1&gt;
&lt;p&gt;In today's post we're going to discuss the generation of permutations.&lt;/p&gt;
&lt;p&gt;Often, in combinatorics problems, we are interested in &lt;em&gt;how many&lt;/em&gt; different
instances or configurations of a particular thing we can have (what we'll call
"enumeration" or "counting"). However, that is different from wanting to 
actually see all of those configurations. Indeed, if we are counting 
something with an astronomical number of configurations, we don't want 
to try to list all of them.&lt;/p&gt;
&lt;p&gt;However, as usual, Donald Knuth, who covers the topic of permutation 
generation in Volume 4A of his classic work, 
&lt;u&gt;The Art of Computer Programming&lt;/u&gt;,
uncovers a problem that is much more complicated and subtle
than it initially appears.&lt;/p&gt;
&lt;h2 id="background-radix-method-for-generating-permutations"&gt;Background: Radix Method for Generating Permutations&lt;/h2&gt;
&lt;p&gt;In Volume 4A of his classic work, &lt;u&gt;The Art of Computer Programming&lt;/u&gt;, 
Donald Knuth turns to the question of generating permutations for a given
combinatoric system. The book opens with Knuth jumping immediately into 
the problem of generating permutations.&lt;/p&gt;
&lt;p&gt;Algorith M is the first algorithm Knuth presents to generate all unique tuples.
To pose the problem a little more clearly, consider a combinatoric system that
has &lt;span class="math"&gt;\(n\)&lt;/span&gt; independent parts, each part having a number of possible states.
We can completely specify the state of the combinatoric system by specifying
an &lt;span class="math"&gt;\(n\)&lt;/span&gt;-tuple:&lt;/p&gt;
&lt;div class="math"&gt;$$
(a_1, a_2, \dots, a_n)
$$&lt;/div&gt;
&lt;p&gt;where each independent variable takes on one of its possible values &lt;span class="math"&gt;\(0 \leq a_i \leq m_i\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Knuth's Algorithm M starts by setting all a's to 0, and incrementing 
the right-most entry of the tuple (carrying if necessary). &lt;/p&gt;
&lt;p&gt;This is equivalent to counting in binary from 0 to &lt;span class="math"&gt;\(N-1\)&lt;/span&gt;,
or to labeling every possible outcome with a number between 0 and &lt;span class="math"&gt;\(N-1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This becomes more clear if we consider the &lt;span class="math"&gt;\(n\)&lt;/span&gt;-tuple to be 
a number in a variable-radix system:&lt;/p&gt;
&lt;p&gt;The number is &lt;span class="math"&gt;\(\left[ a_1, a_2, \dots, a_n \right]\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The radix is &lt;span class="math"&gt;\(\left[ m_1, m_2, \dots, m_n \right]\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;By repeatedly adding 1 to the number &lt;span class="math"&gt;\(\left[ a_1, a_2, \dots, a_n \right]\)&lt;/span&gt;, 
we iterate through every possible tuple &lt;span class="math"&gt;\((a_1, a_2, \dots, a_n)\)&lt;/span&gt; and 
therefore through every possible combination of the independent variables.&lt;/p&gt;
&lt;h2 id="knuths-algorithm-m"&gt;Knuth's Algorithm M&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Algorithm M&lt;/strong&gt; &lt;em&gt;(Mixed-radix generation)&lt;/em&gt;. This algorithm visits all &lt;span class="math"&gt;\(n\)&lt;/span&gt;-tuples that satisfy the number/radix expressions above, by repeatedly adding 1 to the mixed-radix number until overflow occurs. (Aux. variables &lt;span class="math"&gt;\(a_0\)&lt;/span&gt; and &lt;span class="math"&gt;\(m_0\)&lt;/span&gt; introduced for convenience only.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;M1.&lt;/strong&gt; [Initialize.] Set &lt;span class="math"&gt;\(a_j \rightarrow 0\)&lt;/span&gt; for &lt;span class="math"&gt;\(0 \leq j \leq n\)&lt;/span&gt;, set &lt;span class="math"&gt;\(m_0 \rightarrow 2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;M2.&lt;/strong&gt; [Visit.] Visit the &lt;span class="math"&gt;\(n\)&lt;/span&gt;-tuple &lt;span class="math"&gt;\((a_1, \dots, a_n)\)&lt;/span&gt;. (The program that wants to examine all &lt;span class="math"&gt;\(n\)&lt;/span&gt;-tulpes now does its thing.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;M3.&lt;/strong&gt; [Prepare to add one.] Set &lt;span class="math"&gt;\(j \rightarrow n\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;M4.&lt;/strong&gt; [Carry if necessary.] If &lt;span class="math"&gt;\(a_j = m_j - 1\)&lt;/span&gt;, set &lt;span class="math"&gt;\(a_j \rightarrow 0, j \rightarrow j-1\)&lt;/span&gt; and repeat this step.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;M5.&lt;/strong&gt; [Increase, unless done.] If &lt;span class="math"&gt;\(j=0\)&lt;/span&gt;, terminate algorithm. Otherwise set &lt;span class="math"&gt;\(a_j = a_j + 1\)&lt;/span&gt; and go back to step &lt;span class="math"&gt;\(M2\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id="implementing-algorithm-m"&gt;Implementing Algorithm M&lt;/h2&gt;
&lt;p&gt;Unfortunately, this pseudocode takes some work to translate. Fortunately, that's already done in the method below.&lt;/p&gt;
&lt;p&gt;The method below implements Algorithm M in Python to generate random sequences on a 4x4 Rubik's Cube (called the Rubik's Revenge, or RR for short). The RR cube has six faces that can each be rotated clockwise or counterclockwise by a single layer, denoted by the uppercase letters U, D, B, F, L, R (up, down, back, front, left, right, respectively) for clockwise rotations and U', D', B', F', L', R' for counterclockwise rotations, for 12 total moves.&lt;/p&gt;
&lt;p&gt;However, on a 4x4 cube, we can also rotate &lt;em&gt;two&lt;/em&gt; layers at a time. (That's the limit; moving three layers at a time is equivalent to a reversed rotation of the remaining single layer.) This type of rotation is denoted with a "w".&lt;/p&gt;
&lt;p&gt;Thus, rotating the top two layers of each of the six faces clockwise is denoted Uw, Dw, Bw, Fw, Lw, Rw, and counterclockwise rotations are denoted Uw', Dw', Bw', Fw', Lw', Rw', for 12 additional moves.&lt;/p&gt;
&lt;p&gt;We have one more type of move, which is where the second layer only is removed. This type of move is denoted with 2, and the face whose second layer is being rotated, for six moves: 2U, 2D, 2B, 2F, 2L, 2R. The prime notation denotes again a counterclockwise rotation, for an additional six moves: 2U', 2D', 2B', 2F', 2L', 2R'. This yields another 12 moves.&lt;/p&gt;
&lt;p&gt;There are 36 total moves that can be executed on the 4x4 Rubik's Revenge cube.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;algorithm_m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Knuth&amp;#39;s Algorithm M for permutation generation,&lt;/span&gt;
&lt;span class="sd"&gt;    via AOCP Volume 4 Fascile 2.&lt;/span&gt;
&lt;span class="sd"&gt;    This is a generator that returns permtuations &lt;/span&gt;
&lt;span class="sd"&gt;    generated using the variable-radix method. &lt;/span&gt;

&lt;span class="sd"&gt;    This generates ALL permutations.&lt;/span&gt;
&lt;span class="sd"&gt;    Many of these are rotations of one another,&lt;/span&gt;
&lt;span class="sd"&gt;    so use the get_rotations() function&lt;/span&gt;
&lt;span class="sd"&gt;    (defined later) to eliminate redundant sequences.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;moves&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# M1 - Initialize&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;),]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;

    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;nvisits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="c1"&gt;# M2 - visit&lt;/span&gt;
        &lt;span class="n"&gt;move_sequence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aj&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;aj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;move_sequence&lt;/span&gt; 

        &lt;span class="n"&gt;nvisits&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="c1"&gt;# M3 - prepare to +1&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="c1"&gt;# M4 - carry&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="c1"&gt;# M5 - increase unless done&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="test-drive"&gt;Test Drive&lt;/h2&gt;
&lt;p&gt;Let's take a look at how Algorithm M looks when it is applied. 
No surprises here: Algorithm M generates each of the possible 
permutations in sequence.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;

&lt;span class="c1"&gt;# (Algorithm M goes here) &lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;algorithm_m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    [&amp;#39;A A A&amp;#39;,
     &amp;#39;A A B&amp;#39;,
     &amp;#39;A A C&amp;#39;,
     &amp;#39;A A D&amp;#39;,
     &amp;#39;A B A&amp;#39;,
     &amp;#39;A B B&amp;#39;,
     &amp;#39;A B C&amp;#39;,
     &amp;#39;A B D&amp;#39;,
     &amp;#39;A C A&amp;#39;,
     &amp;#39;A C B&amp;#39;,
     &amp;#39;A C C&amp;#39;,
     &amp;#39;A C D&amp;#39;,
     &amp;#39;A D A&amp;#39;,
     &amp;#39;A D B&amp;#39;,
     &amp;#39;A D C&amp;#39;,
     &amp;#39;A D D&amp;#39;,
     &amp;#39;B A A&amp;#39;,
     &amp;#39;B A B&amp;#39;,
     &amp;#39;B A C&amp;#39;,
     &amp;#39;B A D&amp;#39;,
     &amp;#39;B B A&amp;#39;,
     &amp;#39;B B B&amp;#39;,
     &amp;#39;B B C&amp;#39;,
     &amp;#39;B B D&amp;#39;,
     &amp;#39;B C A&amp;#39;,
     &amp;#39;B C B&amp;#39;,
     &amp;#39;B C C&amp;#39;,
     &amp;#39;B C D&amp;#39;,
     &amp;#39;B D A&amp;#39;,
     &amp;#39;B D B&amp;#39;,
     &amp;#39;B D C&amp;#39;,
     &amp;#39;B D D&amp;#39;,
     &amp;#39;C A A&amp;#39;,
     &amp;#39;C A B&amp;#39;,
     &amp;#39;C A C&amp;#39;,
     &amp;#39;C A D&amp;#39;,
     &amp;#39;C B A&amp;#39;,
     &amp;#39;C B B&amp;#39;,
     &amp;#39;C B C&amp;#39;,
     &amp;#39;C B D&amp;#39;,
     &amp;#39;C C A&amp;#39;,
     &amp;#39;C C B&amp;#39;,
     &amp;#39;C C C&amp;#39;,
     &amp;#39;C C D&amp;#39;,
     &amp;#39;C D A&amp;#39;,
     &amp;#39;C D B&amp;#39;,
     &amp;#39;C D C&amp;#39;,
     &amp;#39;C D D&amp;#39;,
     &amp;#39;D A A&amp;#39;,
     &amp;#39;D A B&amp;#39;,
     &amp;#39;D A C&amp;#39;,
     &amp;#39;D A D&amp;#39;,
     &amp;#39;D B A&amp;#39;,
     &amp;#39;D B B&amp;#39;,
     &amp;#39;D B C&amp;#39;,
     &amp;#39;D B D&amp;#39;,
     &amp;#39;D C A&amp;#39;,
     &amp;#39;D C B&amp;#39;,
     &amp;#39;D C C&amp;#39;,
     &amp;#39;D C D&amp;#39;,
     &amp;#39;D D A&amp;#39;,
     &amp;#39;D D B&amp;#39;,
     &amp;#39;D D C&amp;#39;,
     &amp;#39;D D D&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="what-other-ways-are-there"&gt;What Other Ways Are There?&lt;/h2&gt;
&lt;p&gt;All of this may seem obvious or uninteresting,
if you don't realize there are other ways of 
generating all possible &lt;span class="math"&gt;\(n\)&lt;/span&gt;-tuples.&lt;/p&gt;
&lt;p&gt;It's a bit easier to think about for binary 
numbers. Imagine you're trying to generate 
every possible 10-digit binary number.
This means generating all binary numbers
between &lt;span class="math"&gt;\(0\)&lt;/span&gt; and &lt;span class="math"&gt;\(2^{10}-1\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;Algorithm M, as we saw above, just counts 
from 0 to &lt;span class="math"&gt;\(2^{10}-1\)&lt;/span&gt;. But this can involve
changing a large number of bits (for example,
adding 1 to 001111111 results in 010000000,
changing 8 digits. Knuth presents an
alternative algorithm that only requires
changing &lt;em&gt;one&lt;/em&gt; bit to generate the next
permutation, making the algorithm much 
faster.&lt;/p&gt;
&lt;p&gt;More on that algorithm in a future blog post...&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="combinatorics"></category><category term="permutations"></category><category term="python"></category><category term="computer science"></category><category term="algorithms"></category><category term="art of computer programming"></category><category term="knuth"></category></entry><entry><title>Five Letter Words: Part 3: Letter Coverage and Dynamic Programming</title><link href="https://charlesreid1.github.io/five-letter-words-part-3-letter-coverage-and-dynamic-programming.html" rel="alternate"></link><published>2017-09-19T12:00:00-07:00</published><updated>2017-09-19T12:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-09-19:/five-letter-words-part-3-letter-coverage-and-dynamic-programming.html</id><summary type="html">&lt;p&gt;&lt;em&gt;NOTE: The code covered in this post uses Python 3. The scripts can be converted to Python 2 with minimal effort,
but the author would encourage any user of Python 2 to "put on your big kid pants" and 
make the switch to Python 3. Let's all make this painful, drawn-out switch from Python 2 
to Python 3 a thing of the past, shall we?&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#five3-intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five3-example"&gt;A Simple Manual Exmaple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five3-pseudocode"&gt;Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five3-python"&gt;Python Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five3-output"&gt;Output and Timing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="five3-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The letter/word coverage problem, as presented by Donald Knuth in Volume 4, Facicle 0 
of his masterpiece &lt;u&gt;Art of â€¦&lt;/u&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;NOTE: The code covered in this post uses Python 3. The scripts can be converted to Python 2 with minimal effort,
but the author would encourage any user of Python 2 to "put on your big kid pants" and 
make the switch to Python 3. Let's all make this painful, drawn-out switch from Python 2 
to Python 3 a thing of the past, shall we?&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#five3-intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five3-example"&gt;A Simple Manual Exmaple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five3-pseudocode"&gt;Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five3-python"&gt;Python Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five3-output"&gt;Output and Timing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="five3-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The letter/word coverage problem, as presented by Donald Knuth in Volume 4, Facicle 0 
of his masterpiece &lt;u&gt;Art of Computer Programming&lt;/u&gt;, is the problem of finding
the &lt;em&gt;minimum&lt;/em&gt; number of words from the collection of five letter words that 
"cover" (are drawn from) the first N letters of the alphabet.&lt;/p&gt;
&lt;p&gt;The problem has a couple of variations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provided a set of letters, search for the smallest number of words that cover those particular letters.&lt;/li&gt;
&lt;li&gt;Given an integer &lt;span class="math"&gt;\(N \leq 26\)&lt;/span&gt;, search for the smallest number of words that cover the first N letters of the alphabet.&lt;/li&gt;
&lt;li&gt;The same problem as above, but drawing from the first &lt;span class="math"&gt;\(M\)&lt;/span&gt; words of the 5757 total five-letter words.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the sake of simplicity, we will focus on the simplest problem: considering the first &lt;span class="math"&gt;\(N\)&lt;/span&gt; 
letters of the alphabet, find the shortest sequence of words that will provide coverage of the first 
&lt;span class="math"&gt;\(N\)&lt;/span&gt; letters of the alphabet.&lt;/p&gt;
&lt;p&gt;This is an example of a dynamic programming problem: a combinatorics problem that can 
be solved by breaking the overall down into smaller sub-problems, solving the sub-problems, and 
assembling solutions to the sub-problems into an overall problem solution.&lt;/p&gt;
&lt;p&gt;The procedure is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For each word &lt;span class="math"&gt;\(w_i\)&lt;/span&gt;, we begin by assuming this word is the best solution &lt;em&gt;on its own&lt;/em&gt;. This forms the base case/starting solution.&lt;/li&gt;
&lt;li&gt;Next, examine all prior words &lt;span class="math"&gt;\(w_j, j&amp;lt;i\)&lt;/span&gt;, and compare each to using the word &lt;span class="math"&gt;\(w_i\)&lt;/span&gt; by itself.&lt;/li&gt;
&lt;li&gt;For each pair of words, take the union (OR) of the character coverage for word &lt;span class="math"&gt;\(w_i\)&lt;/span&gt; 
and the solution bit vector for word &lt;span class="math"&gt;\(w_j\)&lt;/span&gt; (that is, using the best-covered solution so far 
for word &lt;span class="math"&gt;\(w_j\)&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;Note: for word &lt;span class="math"&gt;\(w_i\)&lt;/span&gt;, we need to store one of these unions as the best-covered solution so far for 
word &lt;span class="math"&gt;\(w_i\)&lt;/span&gt;, but we aren't sure which one yet.)&lt;/li&gt;
&lt;li&gt;For the given pair of words &lt;span class="math"&gt;\(w_j\)&lt;/span&gt; and &lt;span class="math"&gt;\(w_i\)&lt;/span&gt;, we are looking at word &lt;span class="math"&gt;\(w_j\)&lt;/span&gt; and considering the possibility 
of extending that with word &lt;span class="math"&gt;\(w_i\)&lt;/span&gt;. Adding &lt;span class="math"&gt;\(w_i\)&lt;/span&gt; to the best solution so far may or may not improve the best solution,
so we need to decide whether to add &lt;span class="math"&gt;\(w_i\)&lt;/span&gt; to the best solution so far.&lt;/li&gt;
&lt;li&gt;Compute the number of letters covered in the union of &lt;span class="math"&gt;\(w_i\)&lt;/span&gt; and the best solution so far (by, e.g., 
summing up the 1s in the bit vector of &lt;span class="math"&gt;\(w_i\)&lt;/span&gt; added to the bit vector representing the best solution so far for word &lt;span class="math"&gt;\(w_j\)&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;Compute the number of words in the best solution so far for word &lt;span class="math"&gt;\(w_j\)&lt;/span&gt;, and add one to it (representing the new word &lt;span class="math"&gt;\(w_i\)&lt;/span&gt; being added)&lt;/li&gt;
&lt;li&gt;We are searching for the prior solution for word &lt;span class="math"&gt;\(w_j\)&lt;/span&gt; that will lead to the maximum number of 1s in the bit vector&lt;/li&gt;
&lt;li&gt;We break ties by picking the word &lt;span class="math"&gt;\(w_j\)&lt;/span&gt; that will minimize the number of total words&lt;/li&gt;
&lt;li&gt;Once we find the best word &lt;span class="math"&gt;\(w_j\)&lt;/span&gt;, we save the union bit vector for word &lt;span class="math"&gt;\(w_i\)&lt;/span&gt; and word &lt;span class="math"&gt;\(w_j\)&lt;/span&gt; under the 
word &lt;span class="math"&gt;\(w_i\)&lt;/span&gt; combined solution bit vector; we save the length of 1s in the combined solution bit vector; and we save 
the number of words so far in that solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we have gone through every word, we are ready to find the minimum. Do this by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Searching through the solutions for every word, and pick out the one that maximizes the number of 1s in the solution bit vector
(or, rather, that has the correct number of 1s in the bit vector) while also minimizing the total number of words.&lt;/li&gt;
&lt;li&gt;To get the actual sequence of words, rather than just the minimum number of jwords, we need to save the prior word
that leads to the maximum number of 1s in the solution bit vector and minimum number of words, for each word.
Then, at the end, we can backtrack through the words that compose the solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a bit complicated to explain in words, so we'll give a small example,
then some pseudocode. Then we'll present the actual Python program that accomplishes
this task.&lt;/p&gt;
&lt;p&gt;&lt;a name="five3-example"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="a-simple-manual-example"&gt;A Simple Manual Example&lt;/h2&gt;
&lt;p&gt;Let's walk through an example manually to illustrate the approach:&lt;/p&gt;
&lt;p&gt;Suppose we are considering 2-letter words taken from a 5-letter alphabet &lt;em&gt;abcde&lt;/em&gt;.
We can represent a given word as a binary string or bit vector: for example,
the two-letter word &lt;code&gt;aa&lt;/code&gt; would be represented by the bit vector &lt;code&gt;10000&lt;/code&gt;,
&lt;code&gt;ab&lt;/code&gt; would be represented by the bit vector &lt;code&gt;11000&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;Now let's consider a set of words, and step through the algorithm with them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;W0 = aa = 10000
W1 = ab = 11000
W2 = bc = 01100
W3 = aa = 10000
W4 = dd = 00010
W5 = de = 00011
W6 = bb = 01000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we wish to write a dynamic program that will find the smallest set of 
words such that taking the union of each bit vector for each of the words in 
the set will yield the bit vector &lt;code&gt;11111&lt;/code&gt;. At each step, we seek the words that will 
maximize the number of 1s in the union of the bit vectors, while minimizing the number
of words. We take the union of the "longest sequence of 1s" bit vector from the 
prior step, plus the bit vector from the current step.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;W0: aa&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Start with word W0: this is the only bit vector, so it sets the starting "largest sequence of 1s" bit vector. 
We wish to maximize "largest sequence of 1s" and minimize number of words.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only W0 as solution is therefore &lt;span class="math"&gt;\(10000\)&lt;/span&gt;. The number of 1s is 1. The number of words is 1. (W0 SOLUTION)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;W1: ab&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Start with word W1: this is the only bit vector, so it sets the starting "largest sequence of 1s" bit vector. 
We wish to maximize "largest sequence of 1s" and minimize number of words.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only W1 as solution is therefore &lt;span class="math"&gt;\(11000\)&lt;/span&gt;. The number of 1s is 2. The number of words is 1. (W1 SOLUTION)&lt;/li&gt;
&lt;li&gt;union of W0 solution and W1 &lt;span class="math"&gt;\(10000 \bigcup 11000 = 11000\)&lt;/span&gt;. The number of 1s is 2. The number of words is 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;W2: bc&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next is word W2: the "largest sequence of 1s" bit vector is the union of the prior step's "largest sequence of 1s" bit vector and the current word's bit vector. One option:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only W2 as solution is &lt;span class="math"&gt;\(01100\)&lt;/span&gt;. The number of 1s is 2. The number of words is 1.&lt;/li&gt;
&lt;li&gt;union of W0 solution and W2 &lt;span class="math"&gt;\(10000 \bigcup 01100 = 11100\)&lt;/span&gt;. The number of 1s is 3. The number of words is 2. (W2 SOLUTION)&lt;/li&gt;
&lt;li&gt;union of W1 solution and W2 &lt;span class="math"&gt;\(11000 \bigcup 01100 = 11100\)&lt;/span&gt;. The number of 1s is 3. The number of words is 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;W3: aa&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next is word W3: the "largest sequence of 1s" bit vector is the union that maximizes the number of 1s and minimizes the number of words. Two options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only W3 as solution is &lt;span class="math"&gt;\(10000\)&lt;/span&gt;. The number of 1s is 1. The number of words is 1.&lt;/li&gt;
&lt;li&gt;union of W0 solution and W3 &lt;span class="math"&gt;\(10000 \bigcup 10000 = 10000\)&lt;/span&gt;. The number of 1s is 1. The number of words is 2.&lt;/li&gt;
&lt;li&gt;union of W1 solution and W3 &lt;span class="math"&gt;\(11000 \bigcup 10000 = 11000\)&lt;/span&gt;. The number of 1s is 2. The number of words is 2.&lt;/li&gt;
&lt;li&gt;union of W2 solution and W3 &lt;span class="math"&gt;\(11100 \bigcup 10000 = 11100\)&lt;/span&gt;. The number of 1s is 3. The number of words is 3. (W3 SOLUTION)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;W4: dd&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next is word W4: the "largest sequence of 1s" bit vector is the union that maximizes the number of 1s and minimizes the number of words. Three options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only W4 as solution is &lt;span class="math"&gt;\(00010\)&lt;/span&gt;. The number of 1s is 1. The number of words is 1.&lt;/li&gt;
&lt;li&gt;union of W0 solution and W4 &lt;span class="math"&gt;\(10000 \bigcup 00010 = 10010\)&lt;/span&gt;. The number of 1s is 2. The number of words is 2.&lt;/li&gt;
&lt;li&gt;union of W1 solution and W4 &lt;span class="math"&gt;\(11000 \bigcup 00010 = 11010\)&lt;/span&gt;. The number of 1s is 3. The number of words is 2.&lt;/li&gt;
&lt;li&gt;union of W2 solution and W4 &lt;span class="math"&gt;\(11100 \bigcup 00010 = 11110\)&lt;/span&gt;. The number of 1s is 4. The number of words is 3. (W4 SOLUTION)&lt;/li&gt;
&lt;li&gt;union of W3 solution and W4 &lt;span class="math"&gt;\(11100 \bigcup 00010 = 11110\)&lt;/span&gt;. The number of 1s is 4. The number of words is 4.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;W5: de&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next is word W5: the "largest sequence of 1s" bit vector is the union maximizing number of 1s and minimizing number of words. Four options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only W5 as solution is &lt;span class="math"&gt;\(00011\)&lt;/span&gt;. The number of 1s is 2. The number of words is 1.&lt;/li&gt;
&lt;li&gt;union of W0 solution and W5 &lt;span class="math"&gt;\(10000 \bigcup 00010 = 10010\)&lt;/span&gt;. The number of 1s is 2. The number of words is 2.&lt;/li&gt;
&lt;li&gt;union of W1 solution and W5 &lt;span class="math"&gt;\(11000 \bigcup 00011 = 11011\)&lt;/span&gt;. The number of 1s is 4. The number of words is 2.&lt;/li&gt;
&lt;li&gt;union of W2 solution and W5 &lt;span class="math"&gt;\(11100 \bigcup 00011 = 11111\)&lt;/span&gt;. The number of 1s is 5. The number of words is 3. (W5 SOLUTION)&lt;/li&gt;
&lt;li&gt;union of W3 solution and W5 &lt;span class="math"&gt;\(11100 \bigcup 00011 = 11111\)&lt;/span&gt;. The number of 1s is 5. The number of words is 4.&lt;/li&gt;
&lt;li&gt;union of W4 solution and W5 &lt;span class="math"&gt;\(11110 \bigcup 00111 = 11111\)&lt;/span&gt;. The number of 1s is 5. The number of words is 4.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;W6:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Next is word W6: the "largest sequence of 1s" bit vector is the union maximizing number of 1s and minimizing number of words. Five options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only W6 as solution is &lt;span class="math"&gt;\(01000\)&lt;/span&gt;. The number of 1s is 1. The number of words is 1.&lt;/li&gt;
&lt;li&gt;union of W0 solution and W6 &lt;span class="math"&gt;\(10000 \bigcup 01000 = 11000\)&lt;/span&gt;. The number of 1s is 2. The number of words is 2.&lt;/li&gt;
&lt;li&gt;union of W1 solution and W6 &lt;span class="math"&gt;\(11000 \bigcup 01000 = 11000\)&lt;/span&gt;. The number of 1s is 2. The number of words is 2.&lt;/li&gt;
&lt;li&gt;union of W2 solution and W6 &lt;span class="math"&gt;\(11100 \bigcup 01000 = 11100\)&lt;/span&gt;. The number of 1s is 3. The number of words is 3.&lt;/li&gt;
&lt;li&gt;union of W3 solution and W6 &lt;span class="math"&gt;\(11100 \bigcup 01000 = 11100\)&lt;/span&gt;. The number of 1s is 3. The number of words is 4.&lt;/li&gt;
&lt;li&gt;union of W4 solution and W6 &lt;span class="math"&gt;\(11110 \bigcup 01000 = 11110\)&lt;/span&gt;. The number of 1s is 4. The number of words is 4.&lt;/li&gt;
&lt;li&gt;union of W5 solution and W6 &lt;span class="math"&gt;\(11111 \bigcup 01000 = 11111\)&lt;/span&gt;. The number of 1s is 5. The number of words is 4. (W6 SOLUTION)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(NOTE: We don't need to consider every possible combination of W1, W2, W3, W4, W5, and W6; we only need to consider each word once, because each word's current solution can be written in terms of the prior word's solution, so we only need to consider solutions for each word. We've already considered the non-solutions and can therefore ignore them because they don't maximize number of 1s and minimize number of words.)&lt;/p&gt;
&lt;p&gt;Thus far, we have found a ''local'' solution for each word. We can now compare all of these ''local'' solutions to find a ''global'' solution. The global solution will maximize the number of 1s found (meaning we can toss out any solutions that have less than 5 1s), and minimizes the total number of words (meaning, our W5 solution gives us the global optimum).&lt;/p&gt;
&lt;p&gt;Therefore our global solution is the W5 solution: 5 1s, and 3 words. Thus, backtracking, we see that the words W1, W2, W5 cover all of the first five letters, with the minimum number of total words.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;W0 = aa = 10000
W2 = bc = 01100
W5 = de = 00011
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="five3-pseudocode"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="pseudocode"&gt;Pseudocode&lt;/h2&gt;
&lt;p&gt;Here is the pseudocode for the program. We utilize one function to compute
the letter coverage bit vector for a single word, and the rest of the 
functionality will go in the main method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;function word2bitvector(word):
    initialize 26-element bit vector with 0s (one 0 per letter)
    for each letter in word:
        turn the bit for this letter to 1
    return bit vector

fuction main():

    // initialization step:
    initialize best coverage bit vector
    initialize maximum number of 1s (the number of letters N we wish to cover)
    initialize number of words in current solution
    initialize backtracking array (for constructing final solution)

    // outer loop fencepost step:
    set things up for word 0 (base case)

    // loop through each word
    for each word in words:
        // skip word 0 (base case)

        // inner loop fencepost step:
        initialize things for word (i-1)

        for each prior word j &amp;lt; i:
            compute the new potential best coverage bitvector
            compute the number of 1s in the bnew potential best coverage bit vector
            compute numbr of words in new potential best solution
            if this solution is better than current best solution:
                overwrite best solution with current solution

    // get solution:
    find maximum indices of vector of number of 1s 
    // (this is potentially multiple indices, representing multiple 
    //  solutions that satisfy the coverage we want)
    find minimum number of words corresponding to each of the coverage indices
    backtrack through solution indices
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="five3-python"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="python-code"&gt;Python Code&lt;/h2&gt;
&lt;p&gt;The code for this solution can be found here: &lt;a href="https://git.charlesreid1.com/cs/five-letter-words/src/master/letter_coverage.py"&gt;letter_coverage.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This code is as follows:&lt;/p&gt;
&lt;p&gt;Start with the word-to-bit vector function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;word2bitvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Turns a five-letter word into a bit vector representing character coverage.&lt;/span&gt;
&lt;span class="sd"&gt;    Uses 26 letters by default.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;bit_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;bit_vector&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bit_vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We also implement a few helper methods: the first turns a boolean bit vector into 
a pretty string of 0s and 1s:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printbv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bv&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second method is our all-important backtracking to obtain the actual sequence of words
that leads to the minimum coverage, instead of just getting a count of the minimum number 
of words that it takes to cover the first &lt;span class="math"&gt;\(N\)&lt;/span&gt; letters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;btsolution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Reconstruct the sequence of words that gives maximum coverage and minimum word count.&lt;/span&gt;

&lt;span class="sd"&gt;    Input: minimum word key (last word), minimum value (number of words), backtrack (prior word)&lt;/span&gt;

&lt;span class="sd"&gt;    Output: list of words&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;min_key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;prior_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;min_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;prior_key&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;prior_key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;prior_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;prior_key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, we get to the meat of the method: the dynamic program.
Start with some initialization. This is where we set the number of letters
we want to cover, and limit the "vocabulary" if desired: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# Searching for words covering first N letters&lt;/span&gt;
    &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;

    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_words&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# If we want to restrict our search to the first M letters,&lt;/span&gt;
    &lt;span class="c1"&gt;#words = words[:1000]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We begin with the initialization step:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;# Initialization:&lt;/span&gt;
    &lt;span class="c1"&gt;# ----------------&lt;/span&gt;

    &lt;span class="c1"&gt;# Store best coverage bitvectors for each word&lt;/span&gt;
    &lt;span class="n"&gt;bestcoverage_bv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;

    &lt;span class="c1"&gt;# Store number of 1s for best coverage vector for each word&lt;/span&gt;
    &lt;span class="n"&gt;ones_bv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Store number of words in best solution for each word&lt;/span&gt;
    &lt;span class="n"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Store prior word for backtracking&lt;/span&gt;
    &lt;span class="n"&gt;bt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next comes the fencepost initialization step, where we intiialize the solution
for word 0:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;# Fencepost: Initial Step&lt;/span&gt;
    &lt;span class="c1"&gt;# Word 0&lt;/span&gt;
    &lt;span class="c1"&gt;# ----------------&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="c1"&gt;# Start with word 0&lt;/span&gt;
    &lt;span class="n"&gt;wi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Best letter coverage bit vector&lt;/span&gt;
    &lt;span class="n"&gt;bestcoverage_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word2bitvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Length of 1s&lt;/span&gt;
    &lt;span class="n"&gt;ones_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bestcoverage_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c1"&gt;# Number of words in best solution:&lt;/span&gt;
    &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="c1"&gt;# Backtracking: first word has no prior word&lt;/span&gt;
    &lt;span class="n"&gt;bt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we loop over each word &lt;span class="math"&gt;\(w_i, i&amp;gt;0\)&lt;/span&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;# Start by assuming the word by itself, &lt;/span&gt;
    &lt;span class="c1"&gt;# and then examine each possible pairing&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;wi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;# Start with bitvector of word i&amp;#39;s coverage&lt;/span&gt;
        &lt;span class="n"&gt;wi_bv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word2bitvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Fencepost: initial step&lt;/span&gt;
        &lt;span class="c1"&gt;# Word i by itself&lt;/span&gt;
        &lt;span class="c1"&gt;# Assume word i is the first word in the solution,&lt;/span&gt;
        &lt;span class="c1"&gt;# and if we find a better combination with prior word,&lt;/span&gt;
        &lt;span class="c1"&gt;# overwrite this solution.&lt;/span&gt;
        &lt;span class="c1"&gt;# ------------------------&lt;/span&gt;

        &lt;span class="c1"&gt;# Best coverage so far (first guess) is word i by itself&lt;/span&gt;
        &lt;span class="n"&gt;bestcoverage_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wi_bv&lt;/span&gt;

        &lt;span class="c1"&gt;# Count ones in (first guess) best bitvector&lt;/span&gt;
        &lt;span class="n"&gt;ones_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bestcoverage_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="c1"&gt;# Number of words in new best solution:&lt;/span&gt;
        &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="c1"&gt;# Backtracking&lt;/span&gt;
        &lt;span class="n"&gt;bt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="c1"&gt;# Boolean: is this the first word in the sequence of solutions?&lt;/span&gt;
        &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We started by assuming that each word &lt;span class="math"&gt;\(w_i\)&lt;/span&gt; provides a best solution by itself;
the next step is to consider each pairing of &lt;span class="math"&gt;\(w_i\)&lt;/span&gt; with prior words &lt;span class="math"&gt;\(w_j\)&lt;/span&gt;,
and update our current solution if we find a better one: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="c1"&gt;# Now loop over the rest of the words,&lt;/span&gt;
        &lt;span class="c1"&gt;# and look for a better solution.&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;

            &lt;span class="c1"&gt;# Get the prior word&lt;/span&gt;
            &lt;span class="n"&gt;wj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="c1"&gt;# Get best coverage bitvector &lt;/span&gt;
            &lt;span class="n"&gt;wj_bv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bestcoverage_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="c1"&gt;# (potential) new combined coverage vector&lt;/span&gt;
            &lt;span class="n"&gt;bestcoverage_bv_i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logical_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wi_bv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wj_bv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# Number of ones in (potential) new combined coverage vector&lt;/span&gt;
            &lt;span class="n"&gt;ones_bv_i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bestcoverage_bv_i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# Number of words in (potential) new best solution&lt;/span&gt;
            &lt;span class="n"&gt;ws_i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="c1"&gt;# If this solution is better than our current one,&lt;/span&gt;
            &lt;span class="c1"&gt;# overwrite the current solution.&lt;/span&gt;
            &lt;span class="c1"&gt;# (Better means, &amp;quot;more ones&amp;quot;, or &amp;quot;same ones and fewer words&amp;quot;.)&lt;/span&gt;

            &lt;span class="c1"&gt;#import pdb; pdb.set_trace();&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ones_bv_i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ones_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ones_bv_i&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;ones_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ws_i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;bestcoverage_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bestcoverage_bv_i&lt;/span&gt;
                &lt;span class="n"&gt;ones_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ones_bv_i&lt;/span&gt;
                &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ws_i&lt;/span&gt;
                &lt;span class="n"&gt;bt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;

                &lt;span class="c1"&gt;# This word now follows another word in the sequence of solutions&lt;/span&gt;
                &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

            &lt;span class="c1"&gt;# It&amp;#39;s tempting to stop early,&lt;/span&gt;
            &lt;span class="c1"&gt;# but what if we find the perfect &lt;/span&gt;
            &lt;span class="c1"&gt;# solution right at the end?!?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that we have found the coverage for each word, and the corresponding number of words 
in that coverage solution, we find the solution that achieves the desired coverage 
while minimizing the number of words, so that we can construct the actual solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;# Okay, now actually get the solution.&lt;/span&gt;
    &lt;span class="c1"&gt;# The solution is the maximum of ones_bv and the minimum of ws&lt;/span&gt;
    &lt;span class="c1"&gt;# &lt;/span&gt;
    &lt;span class="c1"&gt;# Start by finding the maximum(s) of ones_bv&lt;/span&gt;
    &lt;span class="c1"&gt;# Then check each corresponding index of ws&lt;/span&gt;
    &lt;span class="n"&gt;ones_bv_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ones_bv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ones_bv&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="n"&gt;min_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ones_bv_indices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;min_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ones_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ones_bv_indices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ones_bv_indices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ones_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;min_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;min_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;
            &lt;span class="n"&gt;min_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ones_bv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;



    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Min key: word &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; = &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;min_key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Min val: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; words to cover &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; letters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;btsolution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bt&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="output"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="output-and-timing"&gt;Output and Timing&lt;/h2&gt;
&lt;p&gt;Let's take a look at some example output from the program. 
This program only considers the first 1,000 words in the five-letter word list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ time py letter_coverage.py
Takes 9 words to cover 15 letters
[&amp;#39;which&amp;#39;,
 &amp;#39;their&amp;#39;,
 &amp;#39;about&amp;#39;,
 &amp;#39;could&amp;#39;,
 &amp;#39;after&amp;#39;,
 &amp;#39;right&amp;#39;,
 &amp;#39;think&amp;#39;,
 &amp;#39;major&amp;#39;,
 &amp;#39;level&amp;#39;]

real    0m17.226s
user    0m17.090s
sys     0m0.087s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's the same program, considering all 5,757 words:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ time py letter_coverage.py
akes 9 words to cover 15 letters
[&amp;#39;which&amp;#39;,
 &amp;#39;their&amp;#39;,
 &amp;#39;about&amp;#39;,
 &amp;#39;could&amp;#39;,
 &amp;#39;after&amp;#39;,
 &amp;#39;right&amp;#39;,
 &amp;#39;think&amp;#39;,
 &amp;#39;major&amp;#39;,
 &amp;#39;level&amp;#39;]

real    9m29.619s
user    9m24.360s
sys 0m1.958s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the algorithm is &lt;span class="math"&gt;\(O(N^2)\)&lt;/span&gt;, since it iterates over each word, and for each word,
it examines each possible pairing with a preceding word. Thus, if we increase the number of words
by a factor of 6, we expect the runtime to increase by a factor of 36, for an estimated runtime of 
&lt;span class="math"&gt;\(36 \times 17 \mbox{ seconds} \approx 10 \mbox{ minutes}\)&lt;/span&gt;, which is pretty close to what we see above.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="dynamic programming"></category><category term="python"></category><category term="computer science"></category><category term="graphs"></category><category term="algorithms"></category><category term="art of computer programming"></category><category term="knuth"></category><category term="five letter words"></category></entry><entry><title>Five Letter Words: Part 2: More Five-Word Algorithms</title><link href="https://charlesreid1.github.io/five-letter-words-part-2-more-five-word-algorithms.html" rel="alternate"></link><published>2017-09-02T21:00:00-07:00</published><updated>2017-09-02T21:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-09-02:/five-letter-words-part-2-more-five-word-algorithms.html</id><summary type="html">&lt;p&gt;&lt;em&gt;NOTE: The code covered in this post uses Python 3. The scripts can be converted to Python 2 with minimal effort,
but the author would encourage any user of Python 2 to "put on your big kid pants" and 
make the switch to Python 3. Let's all make this painful, drawn-out switch from Python 2 
to Python 3 a thing of the past, shall we?&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#five2-intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-distinct"&gt;Five-Letter Words with k Distinct Letters&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#five2-variation"&gt;Examining a Variation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-lex"&gt;Lexicographic Ordering of Letters&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#five2-lexicographic"&gt;Five-Letter Words with Lexicographically Ordered Letters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-rlexicographic"&gt;Five-Letter Words with Lexicographically Reversed Letters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-findpalindromes"&gt;Finding Palindromes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#five2-palindromes"&gt;Palindromes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-palindromepairs"&gt;Palindrome Pairs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-nearpalindromes"&gt;Near â€¦&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;NOTE: The code covered in this post uses Python 3. The scripts can be converted to Python 2 with minimal effort,
but the author would encourage any user of Python 2 to "put on your big kid pants" and 
make the switch to Python 3. Let's all make this painful, drawn-out switch from Python 2 
to Python 3 a thing of the past, shall we?&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#five2-intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-distinct"&gt;Five-Letter Words with k Distinct Letters&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#five2-variation"&gt;Examining a Variation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-lex"&gt;Lexicographic Ordering of Letters&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#five2-lexicographic"&gt;Five-Letter Words with Lexicographically Ordered Letters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-rlexicographic"&gt;Five-Letter Words with Lexicographically Reversed Letters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-findpalindromes"&gt;Finding Palindromes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#five2-palindromes"&gt;Palindromes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-palindromepairs"&gt;Palindrome Pairs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-nearpalindromes"&gt;Near Palindromes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="five2-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As mentioned in &lt;a href="http://charlesreid1.github.io/five-letter-words-part-1-getting-familiar-with-the-list.html"&gt;Five Letter Words: Part 1&lt;/a&gt;,
we covered Donald Knuth's list of five letter words, one of the data sets in the 
&lt;a href="http://www3.cs.stonybrook.edu/~algorith/implement/graphbase/implement.shtml"&gt;Stanford Graph Base&lt;/a&gt;
that is covered in greater detail in Knuth's coverage of graph theory in Volume 4, Fascicle 0
of his magnum opus, &lt;u&gt;The Art of Computer Programming&lt;/u&gt;.&lt;/p&gt;
&lt;p&gt;In the section where Knuth introduces the set of words, he also gives readers 
several exercises to get to know the list of words. This multi-part series of posts
(also see &lt;a href="http://charlesreid1.github.io/five-letter-words-part-1-getting-familiar-with-the-list.html"&gt;Five Letter Words: Part 1&lt;/a&gt;)
is covering some of the solutions to these exercises, and expanding on them 
to illustrate some of the interesting and surprising properties of this data set.&lt;/p&gt;
&lt;p&gt;&lt;a name="five2-distinct"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="five-letter-words-with-k-distinct-letters"&gt;Five-Letter Words with k Distinct Letters&lt;/h2&gt;
&lt;p&gt;In Exercise 27, Knuth asks the reader to make a list of words composed of 
a specific number of distinct letters (1, 2, 3, 4, or 5). &lt;/p&gt;
&lt;p&gt;In the list of five-letter words, there are 0 words composed of a single letter,
4 words with two distinct letters (0.07%), 
163 words with three distinct letters (2.8%), 
1756 words with four distinct letters (30.5%), 
and 3834 words with five distinct letters (66.5%).&lt;/p&gt;
&lt;p&gt;Here are a few examples:
* Two distinct letters: mamma, ahhhh, esses, ohhhh
* Three distinct letters: added, seems, sense, level, teeth
* Four distinct letters: which, there, these, where, three
* Five distinct letters: their, about, would, other, words&lt;/p&gt;
&lt;p&gt;To find these, we can design an algorithm that does the following:
split each string into characters,
add them to a set data type (a set discards any duplicates), 
and get the size of the set. 
This will give us the number of unique letters in a given word,
and we can use a list of lists to store all words with 
a specified number of unique letters. &lt;/p&gt;
&lt;p&gt;Once again, we're using our &lt;code&gt;get_words&lt;/code&gt; function,
which we covered in &lt;a href="http://charlesreid1.github.io/five-letter-words-part-1-getting-familiar-with-the-list.html"&gt;Part 1&lt;/a&gt;.
See &lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/get_words.py"&gt;get_words.py&lt;/a&gt;
for that script.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/distinct.py"&gt;distinct.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
distinct.py

Donald Knuth, Art of Computer Programming, Volume 4 Fascicle 0
Exercise #27

How many SGB words contain exactly k distinct letters, for 1 &amp;lt;= k &amp;lt;= 5?
&amp;quot;&amp;quot;&amp;quot;
from pprint import pprint
from get_words import get_words

if __name__==&amp;quot;__main__&amp;quot;:
    words = get_words()

    lengths = [[] for i in range(5+1)]

    for word in words:
        k = len(set(word))
        lengths[k].append(word)

    for i in range(1,5+1):
        print(&amp;quot;-&amp;quot;*40)
        print(&amp;quot;Number of words with {0:d} letters: {1:d}&amp;quot;.format(i, len(lengths[i])))
        print(&amp;quot;, &amp;quot;.join(lengths[i][0:5]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The principal operation here is the statement that gets the length, k:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;k = len(set(word))
lengths[k].append(word)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The operation of turning a word into a set is &lt;span class="math"&gt;\(O(M)\)&lt;/span&gt;, where M is the number of 
letters in the word, and the algorithm performs this operation on each word in sequence,
so overall, the algorithm is &lt;span class="math"&gt;\(O(N)\)&lt;/span&gt;, where N is the number of words.&lt;/p&gt;
&lt;p&gt;The storage space used by the algorithm is also &lt;span class="math"&gt;\(O(N)\)&lt;/span&gt;, since for each word,
the number of distinct letters &lt;span class="math"&gt;\(k \in \{ 0 \dots 5 \}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;If we were dealing with a lot of words, and needed to save some space,
we could represent the list of words with &lt;span class="math"&gt;\(k\)&lt;/span&gt; distinct letters using five bit vectors,
where each bit vector represents the words that are composed of &lt;span class="math"&gt;\(k\)&lt;/span&gt; distinct 
letters, and has a length of &lt;span class="math"&gt;\(N\)&lt;/span&gt;, the number of words. A 0 would indicate the word is 
not in the set (is not composed of &lt;span class="math"&gt;\(k\)&lt;/span&gt; letters), and a 1 would indicate the opposite.&lt;/p&gt;
&lt;p&gt;But here, we keep it simple, since we have a small, known set of words.&lt;/p&gt;
&lt;p&gt;&lt;a name="first2-variation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="examining-a-variation"&gt;Examining a Variation&lt;/h3&gt;
&lt;p&gt;While that's essentially all there is to this algorithm, 
and it takes all of 10 seconds to come up with the idea,
there are some nuances and some bookkeeping details, 
as there are with the design of any algorithm.&lt;/p&gt;
&lt;p&gt;For example, compare the following two approaches;
Approach 1 is used in the program, Approach 2 is a less efficient approach:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # Approach 1:
    for word in words:
        k = len(set(word))
        lengths[k].append(word)


    # Approach 2:
    for k in range(1,5+1):
        if(len(set(word))==k):
            lengths[k].append(word)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While these are both &lt;span class="math"&gt;\(O(N)\)&lt;/span&gt; runtime, the latter approach is inefficient:
we loop over each word five times, and each time we perform the same operation
(turning the letters of a word into a set). &lt;/p&gt;
&lt;p&gt;Is there ever a case where we would want an approach like #2?&lt;/p&gt;
&lt;p&gt;The short answer is, never.&lt;/p&gt;
&lt;p&gt;To give a longer answer, let's consider a case where approach #2 might provide an advantage.
Suppose we were considering a case where &lt;span class="math"&gt;\(k\)&lt;/span&gt; could be larger - 
a list of 15-letter words, for example, so k could be up to 15 - 
and we were only interested in a particular value, or small set of values, of &lt;span class="math"&gt;\(k\)&lt;/span&gt;, like 3 and 4.&lt;br&gt;
Approach 1 would store unnecessary intermediate results (the values of k for all words)
and therefore use extra space, compared with approach #2 where we could change the 
for loop to &lt;code&gt;for k in [3,4]:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even here, though, approach #2 results in unnecessary work, because approach #1
is still computationally more efficient by looping over the list of words only once,
compared with approach #2, which would loop over the list of words twice.&lt;/p&gt;
&lt;p&gt;We may further consider a case where approach #2 would give us an advantage,
and that is the case where we are copying data into the list &lt;code&gt;lengths&lt;/code&gt;, instead of 
just storing a reference to a string. 
Because we only deal with references in Python, we aren't making copies in the 
code given above. But because strings are immutable, we could conceivably be 
making copies if we stored &lt;code&gt;word.upper()&lt;/code&gt; instead of &lt;code&gt;word&lt;/code&gt;.
Approach #2 would use less space, because it only considers the values of k 
that are of interest.&lt;/p&gt;
&lt;p&gt;But even here, approach #1 requires only a small modification to wipe out
the space advantage of approach #2: add an if statement before calling the 
append function: &lt;code&gt;if k in [3,4]&lt;/code&gt;. Now the calculation of turning a word
into a set of characters is performed only once for approach #1, 
and we don't end up storing unnecessary intermediate results.&lt;/p&gt;
&lt;p&gt;The take-home lesson: even if the core idea behind an algorithm is
straightforward, there are still many ways to do it better or worse. &lt;/p&gt;
&lt;p&gt;&lt;a name="five2-lex"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="lexicographic-ordering-of-letters"&gt;Lexicographic Ordering of Letters&lt;/h2&gt;
&lt;p&gt;Knuth points out that the word "first" contains letters that occur
in lexicograhpic order. Exercise #30 of &lt;a href="https://charlesreid1.com/wiki/AOCP"&gt;AOCP&lt;/a&gt;
Volume 4 Fascicle 0 asks us to find the first and last such word that occurs 
in Knuth's set of five letter words.&lt;/p&gt;
&lt;p&gt;To do this, we'll take each word and turn it into a list of characters.
We'll then sort the characters, and turn the sorted list of characters 
back into a string. If the string constructed from sorted characters
equals the original string, we have our word, formed from lexicographically 
ordered letters.&lt;/p&gt;
&lt;p&gt;We can also perform the reverse - search for words whose letters are 
in reverse lexicographic order. One such word is "spied". 
Implementing this task requires a bit more care, 
because of the fact that Python 3 returns generators where Python 2 
would return lists, but we can get around this with the &lt;code&gt;list()&lt;/code&gt; function, 
as we shall see shortly.&lt;/p&gt;
&lt;p&gt;&lt;a name="five2-lexicographic"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="five-letter-words-with-lexicographically-ordered-letters"&gt;Five-Letter Words with Lexicographically Ordered Letters&lt;/h3&gt;
&lt;p&gt;Exercise 30 asks us to find the first and last word in the set of 
five letter words whose letters occur in sorted lexicographic order.
We begin by sorting all of the words, and we find the first such word
is "abbey", while the last such word is "pssst".&lt;/p&gt;
&lt;p&gt;There are 105 total words that fit this description. 
As we might expect, a majority of them begin with 
letters at the beginning of the alphabet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;abbey&lt;/li&gt;
&lt;li&gt;abbot&lt;/li&gt;
&lt;li&gt;abhor&lt;/li&gt;
&lt;li&gt;abort&lt;/li&gt;
&lt;li&gt;abuzz&lt;/li&gt;
&lt;li&gt;achoo&lt;/li&gt;
&lt;li&gt;adder&lt;/li&gt;
&lt;li&gt;adept&lt;/li&gt;
&lt;li&gt;adios&lt;/li&gt;
&lt;li&gt;adopt&lt;/li&gt;
&lt;li&gt;aegis&lt;/li&gt;
&lt;li&gt;affix&lt;/li&gt;
&lt;li&gt;afoot&lt;/li&gt;
&lt;li&gt;aglow&lt;/li&gt;
&lt;li&gt;ahhhh&lt;/li&gt;
&lt;li&gt;allot&lt;/li&gt;
&lt;li&gt;allow&lt;/li&gt;
&lt;li&gt;alloy&lt;/li&gt;
&lt;li&gt;ammos&lt;/li&gt;
&lt;li&gt;annoy&lt;/li&gt;
&lt;li&gt;beefs&lt;/li&gt;
&lt;li&gt;beefy&lt;/li&gt;
&lt;li&gt;beeps&lt;/li&gt;
&lt;li&gt;beers&lt;/li&gt;
&lt;li&gt;beery&lt;/li&gt;
&lt;li&gt;befit&lt;/li&gt;
&lt;li&gt;begin&lt;/li&gt;
&lt;li&gt;begot&lt;/li&gt;
&lt;li&gt;bells&lt;/li&gt;
&lt;li&gt;belly&lt;/li&gt;
&lt;li&gt;below&lt;/li&gt;
&lt;li&gt;berry&lt;/li&gt;
&lt;li&gt;bills&lt;/li&gt;
&lt;li&gt;billy&lt;/li&gt;
&lt;li&gt;bitty&lt;/li&gt;
&lt;li&gt;blowy&lt;/li&gt;
&lt;li&gt;boors&lt;/li&gt;
&lt;li&gt;boost&lt;/li&gt;
&lt;li&gt;booty&lt;/li&gt;
&lt;li&gt;bossy&lt;/li&gt;
&lt;li&gt;ceils&lt;/li&gt;
&lt;li&gt;cello&lt;/li&gt;
&lt;li&gt;cells&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The full output is here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/output/lexico"&gt;lexico output&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The code to find these words is given below:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/lexico.py"&gt;lexico.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
lexico.py

Donald Knuth, Art of Computer Programming, Volume 4 Fascicle 0
Exercise #30

Each letter of the word &amp;quot;first&amp;quot; appears in correct lexicographic order.
Find the first and last such words in the SGB words.
&amp;quot;&amp;quot;&amp;quot;
from get_words import get_words

def in_sorted_order(word):
    chars = list(word)
    if(str(chars)==str(sorted(chars))):
        return True
    else:
        return False

if __name__==&amp;quot;__main__&amp;quot;:

    words = get_words()
    words = sorted(words)

    count = 0
    print(&amp;quot;-&amp;quot;*40)
    print(&amp;quot;ALL lexicographically sorted words:&amp;quot;)
    for word in words:
        if(in_sorted_order(word)):
            print(word)
            count += 1
    print(&amp;quot;{0:d} total.&amp;quot;.format(count))

    print(&amp;quot;-&amp;quot;*40)
    for word in words:
        if(in_sorted_order(word)):
            print(&amp;quot;First lexicographically sorted word:&amp;quot;)
            print(word)
            break

    words.reverse()

    print(&amp;quot;-&amp;quot;*40)
    for word in words:
        if(in_sorted_order(word)):
            print(&amp;quot;Last lexicographically sorted word:&amp;quot;)
            print(word)
            break
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The heart of the method here is the &lt;code&gt;in_sorted_order()&lt;/code&gt; method:
this performs the task, as described above. We take the word 
passed to the function (a string), and turn it into a list 
using the &lt;code&gt;list()&lt;/code&gt; function. We then turn this list 
back into a string (which is the same as the variable &lt;code&gt;word&lt;/code&gt;),
and compare it to the &lt;em&gt;sorted&lt;/em&gt; list of characters, turned back 
into a string, using the call &lt;code&gt;str(sorted(chars))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the two match, we have not affected the order of characters
by sorting them in lexicographic (alphabetic) order,
and therefore the original string was in sorted order,
and we return True. Otherwise, we return False.&lt;/p&gt;
&lt;p&gt;Here's that method one more time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;def in_sorted_order(word):
    chars = list(word)
    if(str(chars)==str(sorted(chars))):
        return True
    else:
        return False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="five2-lexicographic"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="five-letter-words-with-lexicographically-reversed-letters"&gt;Five-Letter Words with Lexicographically Reversed Letters&lt;/h3&gt;
&lt;p&gt;There are significantly fewer five-letter words whose letters are in 
&lt;em&gt;reverse&lt;/em&gt; lexicographic order - 37, compared to the 105 in sorted order.
Here is the full list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mecca&lt;/li&gt;
&lt;li&gt;offed&lt;/li&gt;
&lt;li&gt;ohhhh&lt;/li&gt;
&lt;li&gt;plied&lt;/li&gt;
&lt;li&gt;poked&lt;/li&gt;
&lt;li&gt;poled&lt;/li&gt;
&lt;li&gt;polka&lt;/li&gt;
&lt;li&gt;skied&lt;/li&gt;
&lt;li&gt;skiff&lt;/li&gt;
&lt;li&gt;sniff&lt;/li&gt;
&lt;li&gt;soled&lt;/li&gt;
&lt;li&gt;solid&lt;/li&gt;
&lt;li&gt;sonic&lt;/li&gt;
&lt;li&gt;speed&lt;/li&gt;
&lt;li&gt;spied&lt;/li&gt;
&lt;li&gt;spiff&lt;/li&gt;
&lt;li&gt;spoke&lt;/li&gt;
&lt;li&gt;spoof&lt;/li&gt;
&lt;li&gt;spook&lt;/li&gt;
&lt;li&gt;spool&lt;/li&gt;
&lt;li&gt;spoon&lt;/li&gt;
&lt;li&gt;toked&lt;/li&gt;
&lt;li&gt;toned&lt;/li&gt;
&lt;li&gt;tonic&lt;/li&gt;
&lt;li&gt;treed&lt;/li&gt;
&lt;li&gt;tried&lt;/li&gt;
&lt;li&gt;troll&lt;/li&gt;
&lt;li&gt;unfed&lt;/li&gt;
&lt;li&gt;upped&lt;/li&gt;
&lt;li&gt;urged&lt;/li&gt;
&lt;li&gt;vroom&lt;/li&gt;
&lt;li&gt;wheee&lt;/li&gt;
&lt;li&gt;wooed&lt;/li&gt;
&lt;li&gt;wrong&lt;/li&gt;
&lt;li&gt;yoked&lt;/li&gt;
&lt;li&gt;yucca&lt;/li&gt;
&lt;li&gt;zoned&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code to do this requires only minor modifications to the original, sorted order code.&lt;/p&gt;
&lt;p&gt;To reverse the procedure, we just need to modify the &lt;code&gt;in_sorted_order()&lt;/code&gt; function
to reverse the sorted list of characters before we reassemble it into a string.
We can feed the output of the call to &lt;code&gt;sorted()&lt;/code&gt; to the &lt;code&gt;reversed()&lt;/code&gt; function.
However, in Python 3, this returns a generator object, which is lazy - 
it does not automatically enumerate every character. Unless, of course, 
we force it to.&lt;/p&gt;
&lt;p&gt;That's where the call to &lt;code&gt;list()&lt;/code&gt; comes in handy - by passing a generator 
to &lt;code&gt;list()&lt;/code&gt;, we force Python to enumerate the output of the reversed, sorted list 
generator. Then we turn the reversed, sorted list into a reversed, sorted string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;def in_reverse_sorted_order(word):
    chars = list(word)
    # Note: reversed returns a generator,
    # so we have to pass it to list()
    # to explicitly enumerate the reversed results.
    if(str(chars)==str(list(reversed(sorted(chars))))):
        return True
    else:
        return False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Meanwhile, the rest of the script can stay virtually the same.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/reverse_lexico.py"&gt;reverse_lexico.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
reverse_lexico.py

Donald Knuth, Art of Computer Programming, Volume 4 Fascicle 0
Variation on Exercise #30

Each letter of the word &amp;quot;spied&amp;quot; appears in reversed lexicographic order.
Find more words whose letters appear in reverse lexicographic order.
&amp;quot;&amp;quot;&amp;quot;
from get_words import get_words

def in_reverse_sorted_order(word):
    chars = list(word)
    # Note: reversed returns a generator, 
    # so we have to pass it to list() 
    # to explicitly enumerate the reversed results.
    if(str(chars)==str(list(reversed(sorted(chars))))):
        return True
    else:
        return False

if __name__==&amp;quot;__main__&amp;quot;:

    words = get_words()
    words = sorted(words)

    count = 0
    print(&amp;quot;-&amp;quot;*40)
    print(&amp;quot;ALL lexicographically reversed words:&amp;quot;)
    for word in words:
        if(in_reverse_sorted_order(word)):
            print(word)
            count += 1
    print(&amp;quot;{0:d} total.&amp;quot;.format(count))

    print(&amp;quot;-&amp;quot;*40)
    for word in words:
        if(in_reverse_sorted_order(word)):
            print(&amp;quot;First reverse lexicographically sorted word:&amp;quot;)
            print(word)
            break

    words.reverse()

    print(&amp;quot;-&amp;quot;*40)
    for word in words:
        if(in_reverse_sorted_order(word)):
            print(&amp;quot;Last lexicographically sorted word:&amp;quot;)
            print(word)
            break
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="five2-findpalindromes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="finding-palindromes"&gt;Finding Palindromes&lt;/h2&gt;
&lt;p&gt;Palindromes are words or sets of words that have a reflective property,
namely, they spell the same thing forward and reverse (e.g., "race car",
or "Ere I was able, I saw Malta", or "Doc, note I dissent - a fast never prevents a fatness. I diet on cod.").&lt;/p&gt;
&lt;p&gt;In Exercise 29, Knuth asks the reader to perform a straightforward task - 
find the palindromes in the list of five letter words. (An example of one such
word is "kayak".) But Knuth goes further, and points out that palindromes 
can &lt;em&gt;also&lt;/em&gt; be formed from pairs of words.  He gives the example "regal lager".
He asks the reader to find all palindrome pairs as well.&lt;/p&gt;
&lt;p&gt;When working on these exercises, we became curious about palindromic near-misses.
How many words are &lt;em&gt;almost&lt;/em&gt; palindromes? (Example: "going" is very close to a 
palindrome, if we just changed the n to an o or vice-versa.)
In fact, we already have all the tools we need at our disposal,
as we already covered a script to perform a Euclidean distance calculation.&lt;/p&gt;
&lt;p&gt;We will cover Python code to find words that fit into each of these categories,
and provide some interesting examples. (One of the most surprising things
to us was just how many words meet these criteria!)&lt;/p&gt;
&lt;p&gt;&lt;a name="five2-palindromes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="palindromes"&gt;Palindromes&lt;/h3&gt;
&lt;p&gt;The first task is finding palindromes in the set of five letter words.
There are 18 such words. They are given below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;level&lt;/li&gt;
&lt;li&gt;refer&lt;/li&gt;
&lt;li&gt;radar&lt;/li&gt;
&lt;li&gt;madam&lt;/li&gt;
&lt;li&gt;rotor&lt;/li&gt;
&lt;li&gt;civic&lt;/li&gt;
&lt;li&gt;sexes&lt;/li&gt;
&lt;li&gt;solos&lt;/li&gt;
&lt;li&gt;sagas&lt;/li&gt;
&lt;li&gt;kayak&lt;/li&gt;
&lt;li&gt;minim&lt;/li&gt;
&lt;li&gt;tenet&lt;/li&gt;
&lt;li&gt;shahs&lt;/li&gt;
&lt;li&gt;stats&lt;/li&gt;
&lt;li&gt;stets&lt;/li&gt;
&lt;li&gt;kaiak&lt;/li&gt;
&lt;li&gt;finif&lt;/li&gt;
&lt;li&gt;dewed &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code to check if a word is a palindrome consists of two simple logical test:
Is the character at position 0 equal to the character at position 4?
Is the character at position 1 equal to the character at position 3?
If both of these are true, the word is a palindrome. Here's the Python function
to check if a word is a palindrome:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/palindromes.py"&gt;palindromes.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;test1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;test2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the main driver method, which actually runs the function on each word:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_words&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;kp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;palindromes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="c1"&gt;# Check for palindromes&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])):&lt;/span&gt;
            &lt;span class="n"&gt;kp&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;palindromes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Palindromes: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;palindromes&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;There are &lt;/span&gt;&lt;span class="si"&gt;{0:d}&lt;/span&gt;&lt;span class="s2"&gt; palindromes.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="five2-palindromepairs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="palindrome-pairs"&gt;Palindrome Pairs&lt;/h3&gt;
&lt;p&gt;There are 34 palindromic pairs, if we disallow palindromes from being
considered palindromic pairs with themselves. These are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parts, strap&lt;/li&gt;
&lt;li&gt;lived, devil&lt;/li&gt;
&lt;li&gt;speed, deeps&lt;/li&gt;
&lt;li&gt;sleep, peels&lt;/li&gt;
&lt;li&gt;straw, warts&lt;/li&gt;
&lt;li&gt;faced, decaf&lt;/li&gt;
&lt;li&gt;spots, stops&lt;/li&gt;
&lt;li&gt;fires, serif&lt;/li&gt;
&lt;li&gt;lever, revel&lt;/li&gt;
&lt;li&gt;smart, trams&lt;/li&gt;
&lt;li&gt;ports, strop&lt;/li&gt;
&lt;li&gt;pools, sloop&lt;/li&gt;
&lt;li&gt;stool, loots&lt;/li&gt;
&lt;li&gt;draws, sward&lt;/li&gt;
&lt;li&gt;mined, denim&lt;/li&gt;
&lt;li&gt;spins, snips&lt;/li&gt;
&lt;li&gt;alley, yella&lt;/li&gt;
&lt;li&gt;loops, spool&lt;/li&gt;
&lt;li&gt;sleek, keels&lt;/li&gt;
&lt;li&gt;repel, leper&lt;/li&gt;
&lt;li&gt;snaps, spans&lt;/li&gt;
&lt;li&gt;depot, toped&lt;/li&gt;
&lt;li&gt;timed, demit&lt;/li&gt;
&lt;li&gt;debut, tubed&lt;/li&gt;
&lt;li&gt;laced, decal&lt;/li&gt;
&lt;li&gt;stink, knits&lt;/li&gt;
&lt;li&gt;regal, lager&lt;/li&gt;
&lt;li&gt;tuber, rebut&lt;/li&gt;
&lt;li&gt;remit, timer&lt;/li&gt;
&lt;li&gt;pacer, recap&lt;/li&gt;
&lt;li&gt;snoot, toons&lt;/li&gt;
&lt;li&gt;namer, reman&lt;/li&gt;
&lt;li&gt;hales, selah&lt;/li&gt;
&lt;li&gt;tarps, sprat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code to check for palindrome pairs is a little more involved,
but also consists of a few logical tests to see if letters in 
one position of the first word match letters in another position of 
the second word:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/palindromes.py"&gt;palindromes.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_palindrome_pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;word2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;test0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;word2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;test1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;word2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;test2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;word2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;test3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;word2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;test4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;word2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;test1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;test2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;test3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;test4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the main driver method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;if __name__==&amp;quot;__main__&amp;quot;:
    words = get_words()

    kpp = 0
    palindrome_pairs = []

    # Check for palindrome pairs
    for i in range(len(words)):
        for j in range(i,len(words)):
            if(is_palindrome_pair(words[i],words[j])):
                # Palindromes shouldn&amp;#39;t count as palindrome pairs
                if(words[i] is not words[j]):
                    kpp += 1
                    palindrome_pairs.append((words[i],words[j]))

    print(&amp;quot;-&amp;quot;*40)
    print(&amp;quot;Palindrome Pairs: \n&amp;quot;)
    for pair in palindrome_pairs:
        print(&amp;quot;, &amp;quot;.join(pair))
    print(&amp;quot;There are {0:d} palindrome pairs.&amp;quot;.format(kpp))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="five2-nearpalindromes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="near-palindromes"&gt;Near Palindromes&lt;/h3&gt;
&lt;p&gt;A near-palindrome is a word that would be a palindrome,
if one of its letters were slightly modified. We use a 
"tolerance" parameter to specify how much modification 
we are willing to live with to consider a word a 
near-palindrome.&lt;/p&gt;
&lt;p&gt;There are several ways to do this, but we'll keep it simple:
we consider the totla number of changes to all characters in the word
required to make a word a palindrome, and test whether the changes
required to make the word a palindrome are less than or equal to 
a specified parameter, tolerance.&lt;/p&gt;
&lt;p&gt;For example, if our tolerance were 1, we would consider the 
words "going" and "moron" to be near-palindromes; 
if our tolerance were 2, we would consider the words
"tsars" and "jewel" to be near-palindromes.&lt;/p&gt;
&lt;p&gt;Here is the list of 37 off-by-one palindromes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;going&lt;/li&gt;
&lt;li&gt;seeds&lt;/li&gt;
&lt;li&gt;tight&lt;/li&gt;
&lt;li&gt;trust&lt;/li&gt;
&lt;li&gt;suits&lt;/li&gt;
&lt;li&gt;sends&lt;/li&gt;
&lt;li&gt;plump&lt;/li&gt;
&lt;li&gt;slums&lt;/li&gt;
&lt;li&gt;sighs&lt;/li&gt;
&lt;li&gt;erase&lt;/li&gt;
&lt;li&gt;serfs&lt;/li&gt;
&lt;li&gt;soaps&lt;/li&gt;
&lt;li&gt;sewer&lt;/li&gt;
&lt;li&gt;soups&lt;/li&gt;
&lt;li&gt;sever&lt;/li&gt;
&lt;li&gt;slams&lt;/li&gt;
&lt;li&gt;scabs&lt;/li&gt;
&lt;li&gt;moron&lt;/li&gt;
&lt;li&gt;ceded&lt;/li&gt;
&lt;li&gt;scads&lt;/li&gt;
&lt;li&gt;suets&lt;/li&gt;
&lt;li&gt;fugue&lt;/li&gt;
&lt;li&gt;seder&lt;/li&gt;
&lt;li&gt;tryst&lt;/li&gt;
&lt;li&gt;educe&lt;/li&gt;
&lt;li&gt;twixt&lt;/li&gt;
&lt;li&gt;tutus&lt;/li&gt;
&lt;li&gt;shags&lt;/li&gt;
&lt;li&gt;slims&lt;/li&gt;
&lt;li&gt;abaca&lt;/li&gt;
&lt;li&gt;anima&lt;/li&gt;
&lt;li&gt;celeb&lt;/li&gt;
&lt;li&gt;selfs&lt;/li&gt;
&lt;li&gt;scuds&lt;/li&gt;
&lt;li&gt;tikis&lt;/li&gt;
&lt;li&gt;topos&lt;/li&gt;
&lt;li&gt;rajas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and the list of off-by-two palindromes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;often&lt;/li&gt;
&lt;li&gt;stars&lt;/li&gt;
&lt;li&gt;sight&lt;/li&gt;
&lt;li&gt;visit&lt;/li&gt;
&lt;li&gt;towns&lt;/li&gt;
&lt;li&gt;climb&lt;/li&gt;
&lt;li&gt;flame&lt;/li&gt;
&lt;li&gt;reads&lt;/li&gt;
&lt;li&gt;sings&lt;/li&gt;
&lt;li&gt;hatch&lt;/li&gt;
&lt;li&gt;tends&lt;/li&gt;
&lt;li&gt;naval&lt;/li&gt;
&lt;li&gt;robot&lt;/li&gt;
&lt;li&gt;reeds&lt;/li&gt;
&lt;li&gt;cocoa&lt;/li&gt;
&lt;li&gt;stout&lt;/li&gt;
&lt;li&gt;spins&lt;/li&gt;
&lt;li&gt;onion&lt;/li&gt;
&lt;li&gt;sinks&lt;/li&gt;
&lt;li&gt;edged&lt;/li&gt;
&lt;li&gt;spurs&lt;/li&gt;
&lt;li&gt;jewel&lt;/li&gt;
&lt;li&gt;snaps&lt;/li&gt;
&lt;li&gt;silks&lt;/li&gt;
&lt;li&gt;nasal&lt;/li&gt;
&lt;li&gt;theft&lt;/li&gt;
&lt;li&gt;pagan&lt;/li&gt;
&lt;li&gt;reefs&lt;/li&gt;
&lt;li&gt;stirs&lt;/li&gt;
&lt;li&gt;snips&lt;/li&gt;
&lt;li&gt;tufts&lt;/li&gt;
&lt;li&gt;truss&lt;/li&gt;
&lt;li&gt;strut&lt;/li&gt;
&lt;li&gt;spans&lt;/li&gt;
&lt;li&gt;smelt&lt;/li&gt;
&lt;li&gt;spars&lt;/li&gt;
&lt;li&gt;flake&lt;/li&gt;
&lt;li&gt;rusts&lt;/li&gt;
&lt;li&gt;skims&lt;/li&gt;
&lt;li&gt;sways&lt;/li&gt;
&lt;li&gt;runts&lt;/li&gt;
&lt;li&gt;tsars&lt;/li&gt;
&lt;li&gt;tress&lt;/li&gt;
&lt;li&gt;feted&lt;/li&gt;
&lt;li&gt;rends&lt;/li&gt;
&lt;li&gt;romps&lt;/li&gt;
&lt;li&gt;cilia&lt;/li&gt;
&lt;li&gt;ephod&lt;/li&gt;
&lt;li&gt;fluke&lt;/li&gt;
&lt;li&gt;reset&lt;/li&gt;
&lt;li&gt;farad&lt;/li&gt;
&lt;li&gt;peter&lt;/li&gt;
&lt;li&gt;natal&lt;/li&gt;
&lt;li&gt;thugs&lt;/li&gt;
&lt;li&gt;newel&lt;/li&gt;
&lt;li&gt;paean&lt;/li&gt;
&lt;li&gt;emend&lt;/li&gt;
&lt;li&gt;snoot&lt;/li&gt;
&lt;li&gt;fiche&lt;/li&gt;
&lt;li&gt;porno&lt;/li&gt;
&lt;li&gt;flume&lt;/li&gt;
&lt;li&gt;toons&lt;/li&gt;
&lt;li&gt;roans&lt;/li&gt;
&lt;li&gt;offen&lt;/li&gt;
&lt;li&gt;klunk&lt;/li&gt;
&lt;li&gt;feued&lt;/li&gt;
&lt;li&gt;nihil&lt;/li&gt;
&lt;li&gt;pavan&lt;/li&gt;
&lt;li&gt;relet&lt;/li&gt;
&lt;li&gt;heigh&lt;/li&gt;
&lt;li&gt;revet&lt;/li&gt;
&lt;li&gt;sicks&lt;/li&gt;
&lt;li&gt;spoor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The check for near-palindromes follows the palindrome test 
fairly closely, except instead of checking if letters in two positions
are equal, we check of those two letters are a certain specified 
distance from one another.&lt;/p&gt;
&lt;p&gt;Here is the code for finding near-palindromes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;near_palindromes.py&lt;/span&gt;

&lt;span class="sd"&gt;Donald Knuth, Art of Computer Programming, Volume 4 Fascicle 0&lt;/span&gt;
&lt;span class="sd"&gt;Variation on Exercise #29&lt;/span&gt;

&lt;span class="sd"&gt;Find SGB words that are near-palindromes&lt;/span&gt;
&lt;span class="sd"&gt;(edit distance of one or two letters away from a palindrome).&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;get_words&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_words&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;euclidean_distance&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;euclidean_distance&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_near_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;d1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;euclidean_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;euclidean_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_words&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;knp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;near_palindromes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="c1"&gt;# Euclidean distance tolerance&lt;/span&gt;
    &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_near_palindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;lo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;knp&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;near_palindromes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Near Palindromes: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;near_palindromes&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The number of near-palindromes is &lt;/span&gt;&lt;span class="si"&gt;{0:d}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;near_palindromes&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="five2-references"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Knuth, Donald. &lt;u&gt;The Art of Computer Programming&lt;/u&gt;. Upper Saddle River, NJ: Addison-Wesley, 2008.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Knuth, Donald. &lt;u&gt;The Stanford GraphBase: A Platform for Combinatorial Computing&lt;/u&gt;. New York: ACM Press, 1994. 
&amp;lt;&lt;a href="http://www-cs-faculty.stanford.edu/~knuth/sgb.html"&gt;http://www-cs-faculty.stanford.edu/~knuth/sgb.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Five Letter Words." Git repository, git.charlesreid1.com. Charles Reid. Updated 1 September 2017.
&amp;lt;&lt;a href="http://git.charlesreid1.com/cs/five-letter-words"&gt;http://git.charlesreid1.com/cs/five-letter-words&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="python"></category><category term="computer science"></category><category term="graphs"></category><category term="algorithms"></category><category term="art of computer programming"></category><category term="knuth"></category><category term="five letter words"></category></entry><entry><title>Five Letter Words: Part 1: Getting Familiar With The List</title><link href="https://charlesreid1.github.io/five-letter-words-part-1-getting-familiar-with-the-list.html" rel="alternate"></link><published>2017-09-01T21:00:00-07:00</published><updated>2017-09-01T21:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-09-01:/five-letter-words-part-1-getting-familiar-with-the-list.html</id><summary type="html">&lt;p&gt;&lt;em&gt;NOTE: The code covered in this post uses Python 3. The scripts can be converted to Python 2 with minimal effort,
but the author would encourage any user of Python 2 to "put on your big kid pants" and 
make the switch to Python 3. Let's all make this painful, drawn-out switch from Python 2 
to Python 3 a thing of the past, shall we?&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#five1-about"&gt;About the Five Letter Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-usefulness"&gt;The Usefulness of Five Letter Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-warmup"&gt;Warm-Up Exercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-get"&gt;Get Words Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-euclidean"&gt;Euclidean Distance&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#five1-euclidean-code"&gt;Euclidean Distance Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-euclidean-examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-euclidean-n"&gt;Different-by-N Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-moproblems"&gt;Mo Words, Mo Problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-refs"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="five1-about"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="about-the-five-letter-words"&gt;About the Five-Letter â€¦&lt;/h2&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;NOTE: The code covered in this post uses Python 3. The scripts can be converted to Python 2 with minimal effort,
but the author would encourage any user of Python 2 to "put on your big kid pants" and 
make the switch to Python 3. Let's all make this painful, drawn-out switch from Python 2 
to Python 3 a thing of the past, shall we?&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#five1-about"&gt;About the Five Letter Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-usefulness"&gt;The Usefulness of Five Letter Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-warmup"&gt;Warm-Up Exercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-get"&gt;Get Words Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-euclidean"&gt;Euclidean Distance&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#five1-euclidean-code"&gt;Euclidean Distance Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-euclidean-examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-euclidean-n"&gt;Different-by-N Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-moproblems"&gt;Mo Words, Mo Problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-refs"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="five1-about"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="about-the-five-letter-words"&gt;About the Five-Letter Words&lt;/h2&gt;
&lt;p&gt;In Volume 4, Facsimile 0 of Donald Knuth's &lt;u&gt;Art of Computer Programming&lt;/u&gt;, 
in which Knuth covers graph theory, he introduces a list of five-letter words
as part of a data set useful in exploring graph theory and graph algorithms.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/sgb-words.txt"&gt;list of words&lt;/a&gt; 
is part of the &lt;a href="http://www3.cs.stonybrook.edu/~algorith/implement/graphbase/implement.shtml"&gt;Stanford Graph Base&lt;/a&gt;, 
a set of data sets that are useful for studying graph theory and networks.&lt;/p&gt;
&lt;p&gt;The first few words in the list are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;which&lt;/li&gt;
&lt;li&gt;there&lt;/li&gt;
&lt;li&gt;their&lt;/li&gt;
&lt;li&gt;about&lt;/li&gt;
&lt;li&gt;would&lt;/li&gt;
&lt;li&gt;these&lt;/li&gt;
&lt;li&gt;other&lt;/li&gt;
&lt;li&gt;words&lt;/li&gt;
&lt;li&gt;could&lt;/li&gt;
&lt;li&gt;write&lt;/li&gt;
&lt;li&gt;first&lt;/li&gt;
&lt;li&gt;water&lt;/li&gt;
&lt;li&gt;after&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and so on. There are 5,757 total words in the data set, including some common words
(as the first few listed), as well as some less common words:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;osier&lt;/li&gt;
&lt;li&gt;roble&lt;/li&gt;
&lt;li&gt;rumba&lt;/li&gt;
&lt;li&gt;biffy&lt;/li&gt;
&lt;li&gt;pupal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post is an introduction to the five letter words, and will give a few 
useful algorithms for analyzing the set of words. &lt;/p&gt;
&lt;p&gt;&lt;a name="five1-usefulness"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-usefulness-of-five-letter-words"&gt;The Usefulness of Five Letter Words&lt;/h2&gt;
&lt;p&gt;We are surrounded, always and everywhere, by language - the principal mechanism of 
thought, communication, and expression. Our latent familiarity with language 
makes data sets involving language extremely useful - unlike a data set about 
football scores, property crime, or human fatalities, we don't expend
much effort understanding the nature of the data. Studying language also gives us 
a deeper understanding and appreciation for the complexity of language, for through
our very familiarity with language, it can come to seem deceptively simple.&lt;/p&gt;
&lt;p&gt;Five letter words, in particular, are short enough that they are familiar, 
and surround us, and yet long enough to have variety and lead to some 
very interesting properties. Five also happens to be a computationally 
convenient length.&lt;/p&gt;
&lt;p&gt;&lt;a name="five1-warmup"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="warm-up-exercises"&gt;Warm-Up Exercises&lt;/h2&gt;
&lt;p&gt;In Knuth's AOCP, he presents the reader with several warm-up exercises to 
get familiar with the list of words. We cover solutions to several of these 
exercises. Many of these exercises are creating algorithms that, while not 
utilizing graph theory themselves, can be utilized to construct interesting 
graphs. These exercises are written in Python.&lt;/p&gt;
&lt;p&gt;Let us begin.&lt;/p&gt;
&lt;p&gt;&lt;a name="five1-get"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="get-words-function"&gt;Get Words Function&lt;/h2&gt;
&lt;p&gt;Before starting any analysis of the five letter words, it is a good idea to 
create a function that will load the data set form a text file and load the result
as a Python list. This function is given below:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/get_words.py"&gt;get_words.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
get_words.py

Utility method to load the SBG words
and retun them as a list of strings.
&amp;quot;&amp;quot;&amp;quot;

def get_words():
    # Load the file.
    with open(&amp;#39;sgb-words.txt&amp;#39;,&amp;#39;r&amp;#39;) as f:
        ## This includes \n at the end of each line:
        #words = f.readlines()

        # This drops the \n at the end of each line:
        words = f.read().splitlines()

    return words
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a straightforward use of the &lt;code&gt;read()&lt;/code&gt; and &lt;code&gt;splitlines()&lt;/code&gt; functions in Python.&lt;/p&gt;
&lt;p&gt;&lt;a name="five1-euclidean"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="euclidean-distance"&gt;Euclidean Distance&lt;/h2&gt;
&lt;p&gt;We begin with a calculation of the Eulcidean distance between words.
We define the distance between two words, commonly called the "edit distance,"
based on the notion of a unit change, which is incrementing or decrementing a letter 
by one. Thus, the edit distance between "a" and "b" is 1, the edit distance 
between "e" and "g" is 2, and so on.&lt;/p&gt;
&lt;p&gt;&lt;a name="five1-euclidean-code"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="euclidean-distance-code"&gt;Euclidean Distance Code&lt;/h3&gt;
&lt;p&gt;Let's start with the code that does the calculation of the edit distance between
two words:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/euclidean_distance.py"&gt;euclidean_distance.py&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;import random, math, operator
from pprint import pprint
from get_words import get_words

random.seed(1337)

&amp;quot;&amp;quot;&amp;quot;
euclidean_dist.py

Compute euclidean distance between 5-letter words.
&amp;quot;&amp;quot;&amp;quot;

def euclidean_distance(word1, word2):
    v1 = word2vec(word1)
    v2 = word2vec(word2)
    return l2norm(v1,v2)

def l2norm(vec1, vec2):
    radicand = [(v2-v1)*(v2-v1) for (v1,v2) in zip(vec1,vec2)]
    return math.sqrt(sum(radicand))

def word2vec(word):
    charvec = []
    vec = []
    for c in word:
        charvec.append(c)
        vec.append(ord(c)-ord(&amp;#39;a&amp;#39;))
    return vec

def print_tuple(e):
    print(&amp;quot;Distance between {0:s} and {1:s} = {2:f}&amp;quot;.format(*e))

if __name__==&amp;quot;__main__&amp;quot;:

    words = get_words()

    eds = []
    for i in range(100):
        w1 = words[random.randint(1,5757)]
        w2 = words[random.randint(1,5757)]
        ed = euclidean_distance(w1,w2)
        eds.append((w1,w2,ed))

    sorted_eds = sorted(eds, key=operator.itemgetter(2))

    for e in reversed(sorted_eds):
        print_tuple(e)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this script shares much in common with codes to create 
Caesar ciphers, Affine ciphers, and the like - the heart of the script is 
the &lt;code&gt;word2vec()&lt;/code&gt; function, which converts a five-letter word into a five-component
vector of numbers from 0 to 25. This is done using Python's &lt;code&gt;ord()&lt;/code&gt; function,
which returns the &lt;em&gt;ordinal&lt;/em&gt; value of a character. The letter 'a' is 0, 'b' is 1, 'c' is 2,
and so on.&lt;/p&gt;
&lt;p&gt;The code also implements an L2 norm calculation, which is the mathematical
term for a Euclidean distance calculation. It computes the square root of the 
sum of the squares of the differences between each component of the vector.
This is the standard distance formula from your high school algebra class,
extended to higher dimensions:&lt;/p&gt;
&lt;div class="math"&gt;$$
d = \sqrt{ (x_2 - x_1)^2 + (y_2 - y_1)^2}
$$&lt;/div&gt;
&lt;p&gt;Or, for the physicists out there, the dot product of two vectors.
The L2 norm between two vectors &lt;span class="math"&gt;\(\mathbf{v}_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(\mathbf{v}_2\)&lt;/span&gt; is 
commonly denoted:&lt;/p&gt;
&lt;div class="math"&gt;$$
|| \mathbf{v}_2 - \mathbf{v}_1 ||_2
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="five1-euclidean-examples"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="examples"&gt;Examples&lt;/h3&gt;
&lt;p&gt;To better illustrate what the Euclidean distance calculation looks like,
let's look at some concrete examples of words that have an edit distance of 1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;there, these
right, sight
sound, round
might, night
might, light
along, among
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In each case, we increment or decrement a single letter by 1, 
and the result is another five-letter word in the list.
Perhaps the most surprising result is how &lt;em&gt;many&lt;/em&gt; pairs of 
common words have an edit distance of 1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python diff_by_one.py
1075 words have a Euclidean distance of +/-1.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That means nearly 20% of the words are within a single edit
of another word.&lt;/p&gt;
&lt;p&gt;If we look at words that have an edit distance of more than 1,
we can see that some pairs of words have a single letter that changes 
by 2 units, while other pairs have two letters that differ by a single 
unit: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;would, wound
right, tight
years, wears
never, lever
along, alone
night, light
paper, oboes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last pair is an example of the latter. &lt;/p&gt;
&lt;p&gt;Here are more examples of pairs of words with larger edit distances:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;----------------------------------------
Distance of 3
there, where
would, world
words, woods
sound, pound
those, whose
house, horse
----------------------------------------
Distance of 4
about, cents
after, birds
right, night
think, thing
sound, wound
small, smell
----------------------------------------
Distance of 5
which, weigh
there, theme
other, steer
right, might
years, tears
place, space
place, piece
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="five1-euclidean-n"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="different-by-n-code"&gt;Different-by-N Code&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;IMPORTANT NOTE:&lt;/strong&gt; On 2019-03-09 we revisited the problem set and solution,
and discovered that we had misinterpreted the (much more interesting) original
problem posed by Knuth. Ths will be rectified in a follow-up blog post!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Briefly, the mistake we made here was to interpret this problem as asking for
pairs of words "different by +/-1" to mean, find pairs with a total Hamming
distance (or Euclidean distance) of exactly +/-1 total. This would produce
pairs like "might" and "night".&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In fact, the problem Knuth posed asks for pairs of words
in the SGB that are "different by +/-1 &lt;strong&gt;at each position,&lt;/strong&gt;"
meaning each letter must be different by one and exactly one.
An example of such a pair would be "rover" and "spuds".&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The code that performs the above calculations includes 
&lt;code&gt;diff_by_one.py&lt;/code&gt; and &lt;code&gt;diff_by_n.py&lt;/code&gt;. Here is the former:&lt;/p&gt;
&lt;p&gt;diff_by_one.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
diff_by_one.py

Donald Knuth, Art of Computer Programming, Volume 4 Facsimile 0
Exercise #28

Find pairs of SGB word vectors that differ by +/-1.

(See IMPORTANT NOTE here: https://charlesreid1.github.io/five-letter-words-part-1-getting-familiar-with-the-list.html)
&amp;quot;&amp;quot;&amp;quot;
from get_words import get_words
from euclidean_distance import euclidean_distance

if __name__==&amp;quot;__main__&amp;quot;:
    words = get_words()

    ## To limit the output:
    #words = words[:1000]

    k = 0
    off_by_one = []
    for i in range(len(words)):
        for j in range(i,len(words)):
            d = euclidean_distance(words[i],words[j])
            if(abs(d)==1):
                k += 1
                off_by_one.append((words[i],words[j]))
                print(&amp;quot;{0:s}, {1:s}&amp;quot;.format(words[i],words[j]))

    print(&amp;quot;{0:d} words have a Euclidean distance of +/-1.&amp;quot;.format(k))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a nested for loop that examines all pairs of words. Note that 
we want to avoid the pair (B,A) if we have already found/printed the pair 
(A,B), so we use a nested for loop where the inner index starts at the 
outer index. The core of the script is the &lt;code&gt;euclidean_distance()&lt;/code&gt; function,
covered above.&lt;/p&gt;
&lt;p&gt;This algorithm takes &lt;span class="math"&gt;\(O(N^2)\)&lt;/span&gt; time due to the nested for loops.&lt;/p&gt;
&lt;p&gt;Likewise, here is code to generate pairs that differ by some amount &lt;span class="math"&gt;\(n\)&lt;/span&gt;.
This code will only print 10 pairs for each &lt;span class="math"&gt;\(n\)&lt;/span&gt;, to cut down on running time.&lt;/p&gt;
&lt;p&gt;diff_by_n.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
diff_by_n.py

Donald Knuth, Art of Computer Programming, Volume 4 Facsimile 0
Variation on Exercise #28

Find pairs of SGB word vectors that differ by +/-n.

(See IMPORTANT NOTE here: https://charlesreid1.github.io/five-letter-words-part-1-getting-familiar-with-the-list.html)
&amp;quot;&amp;quot;&amp;quot;
from get_words import get_words
from euclidean_distance import euclidean_distance

def diff_by_n(n):
    k = 0
    off_by_one = []
    for i in range(len(words)):
        for j in range(i,len(words)):
            d = euclidean_distance(words[i],words[j])
            if(abs(d)==n):
                k += 1
                off_by_one.append((words[i],words[j]))
                print(&amp;quot;{0:s}, {1:s}&amp;quot;.format(words[i],words[j]))
        if k&amp;gt;10:
            break

    print(&amp;quot;{0:d} words have a Euclidean distance of +/-{0:d}.&amp;quot;.format(k,n))


if __name__==&amp;quot;__main__&amp;quot;:
    words = get_words()

    for n in [2,3,4,5]:
        print(&amp;quot;-&amp;quot;*40)
        print(&amp;quot;Distance of {0:d}&amp;quot;.format(n))
        diff_by_n(n)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="five1-moproblems"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mo-words-mo-problems"&gt;Mo Words, Mo Problems&lt;/h2&gt;
&lt;p&gt;We have a number of other interesting problems and codes to cover, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Palindromes&lt;/li&gt;
&lt;li&gt;Number of unique words&lt;/li&gt;
&lt;li&gt;Word/letter statistics &lt;/li&gt;
&lt;li&gt;Words consisting of lexicographically sorted letters&lt;/li&gt;
&lt;li&gt;Words consisting of distinct letters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these will be covered in a series of posts to follow.
Then we'll move on to the business of graph theory, implementation of 
these five letter words as graphs, and utilization of software libraries 
designed for graphs and networks (expect some code in Java using Google's
excellent Guava library).&lt;/p&gt;
&lt;p&gt;You can follow all of this in my &lt;a href="https://github.com/charlesreid1/five-letter-words"&gt;five-letter-words&lt;/a&gt; 
repository on Github, and/or in the &lt;a href="https://git.charlesreid1.com/cs/five-letter-words"&gt;five-letter-words&lt;/a&gt; 
repository on git.charlesreid1.com.&lt;/p&gt;
&lt;p&gt;We have also provided additional information on the charlesreid1 wiki,
at &lt;a href="http://charlesreid1.com/wiki/Five_Letter_Words"&gt;Five Letter Words&lt;/a&gt;,
along with a whole bundle of notes from working through Donald Knuth's 
&lt;u&gt;Art of Computer Programming&lt;/u&gt; at the &lt;a href="https://charlesreid1.com/wiki/AOCP"&gt;Art of Computer Programming&lt;/a&gt;
page of the wiki.&lt;/p&gt;
&lt;p&gt;Expect more soon!&lt;/p&gt;
&lt;p&gt;&lt;a name="five1-refs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Knuth, Donald. &lt;u&gt;The Art of Computer Programming&lt;/u&gt;. Upper Saddle River, NJ: Addison-Wesley, 2008.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Knuth, Donald. &lt;u&gt;The Stanford GraphBase: A Platform for Combinatorial Computing&lt;/u&gt;. New York: ACM Press, 1994. 
&amp;lt;&lt;a href="http://www-cs-faculty.stanford.edu/~knuth/sgb.html"&gt;http://www-cs-faculty.stanford.edu/~knuth/sgb.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Five Letter Words." Git repository, git.charlesreid1.com. Charles Reid. Updated 1 September 2017.
&amp;lt;&lt;a href="http://git.charlesreid1.com/cs/five-letter-words"&gt;http://git.charlesreid1.com/cs/five-letter-words&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="python"></category><category term="computer science"></category><category term="graphs"></category><category term="algorithms"></category><category term="art of computer programming"></category><category term="knuth"></category><category term="five letter words"></category></entry><entry><title>Euler's Theorem, the Totient Function, and Calculating Totients By Hand</title><link href="https://charlesreid1.github.io/eulers-theorem-the-totient-function-and-calculating-totients-by-hand.html" rel="alternate"></link><published>2017-08-31T11:00:00-07:00</published><updated>2017-08-31T11:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-08-31:/eulers-theorem-the-totient-function-and-calculating-totients-by-hand.html</id><summary type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#totient-intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#totient-complete-reduced"&gt;Complete and Reduced Residue Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#totient-totient"&gt;Euler's Totient Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#totient-byhand"&gt;Calculating the Totient Function by Hand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
* [Applications](#totient-applications)
    * [Euler's Theorem and Fermat's Little Theorem](#totient-eulers-theorem)
    * [RSA Cryptography](#totient-rsa)
    * [Ramanujan's Sum](#totient-ramanujan)
    * [Vinogradov's Theorem](#totient-vinogradov)
--&gt;

&lt;p&gt;&lt;a name="totient-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Today we're going to delve into a little bit of number theory.&lt;/p&gt;
&lt;p&gt;In number theory, we are usually dealing with modular arithmetic - 
expressions of the form:&lt;/p&gt;
&lt;div class="math"&gt;$$
a \equiv b \mod m
$$&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="math"&gt;$$
f(x) \equiv 0 \mod m
$$&lt;/div&gt;
&lt;p&gt;The mod indicates we're doing modular arithmetic, 
which is (formally) an algebraic system called a ring,
which consists of the integers 0 through m.&lt;/p&gt;
&lt;p&gt;An analogy to modular arithmetic is the way that the sine 
and cosine function "wrap around," and &lt;/p&gt;
&lt;div class="math"&gt;$$
\sin \left â€¦&lt;/div&gt;</summary><content type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#totient-intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#totient-complete-reduced"&gt;Complete and Reduced Residue Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#totient-totient"&gt;Euler's Totient Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#totient-byhand"&gt;Calculating the Totient Function by Hand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
* [Applications](#totient-applications)
    * [Euler's Theorem and Fermat's Little Theorem](#totient-eulers-theorem)
    * [RSA Cryptography](#totient-rsa)
    * [Ramanujan's Sum](#totient-ramanujan)
    * [Vinogradov's Theorem](#totient-vinogradov)
--&gt;

&lt;p&gt;&lt;a name="totient-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Today we're going to delve into a little bit of number theory.&lt;/p&gt;
&lt;p&gt;In number theory, we are usually dealing with modular arithmetic - 
expressions of the form:&lt;/p&gt;
&lt;div class="math"&gt;$$
a \equiv b \mod m
$$&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="math"&gt;$$
f(x) \equiv 0 \mod m
$$&lt;/div&gt;
&lt;p&gt;The mod indicates we're doing modular arithmetic, 
which is (formally) an algebraic system called a ring,
which consists of the integers 0 through m.&lt;/p&gt;
&lt;p&gt;An analogy to modular arithmetic is the way that the sine 
and cosine function "wrap around," and &lt;/p&gt;
&lt;div class="math"&gt;$$
\sin \left( \dfrac{2 \pi}{3}  \right) \equiv
\sin \left( \dfrac{8 \pi}{3}  \right) \equiv 
\sin \left( \dfrac{14 \pi}{3} \right) \equiv \dots
$$&lt;/div&gt;
&lt;p&gt;On a ring, this happens with the integers. So, for example,&lt;/p&gt;
&lt;div class="math"&gt;$$
2 \equiv 6 \equiv 10 \equiv \dots \mod 4
$$&lt;/div&gt;
&lt;p&gt;Modular arithmetic uses the &lt;span class="math"&gt;\(\equiv\)&lt;/span&gt; symbol, and not the &lt;span class="math"&gt;\(=\)&lt;/span&gt; symbol,
because we can't manipulate the left and right side using normal 
rules of algebra - solving equations on a ring requires some care.&lt;/p&gt;
&lt;p&gt;The value of &lt;span class="math"&gt;\(m\)&lt;/span&gt; need not be prime, generally, but if it is, we have 
some special properties that hold.&lt;/p&gt;
&lt;p&gt;&lt;a name="totient-complete-reduced"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="complete-and-reduced-residue-systems"&gt;Complete and Reduced Residue Systems&lt;/h2&gt;
&lt;p&gt;Consider the ring of integers &lt;span class="math"&gt;\(\mod 10\)&lt;/span&gt;, which consists of the numbers&lt;/p&gt;
&lt;div class="math"&gt;$$
\{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 \}
$$&lt;/div&gt;
&lt;p&gt;This is called the complete residue system mod 10.
If we want to solve an equation like &lt;/p&gt;
&lt;div class="math"&gt;$$
2x \equiv 8 \mod 10
$$&lt;/div&gt;
&lt;p&gt;we would &lt;em&gt;normally&lt;/em&gt; just divide both sides by 2.
But because of the "mod 10" we have to be a bit more careful.
Dividing by 2 is just a way of saying, we want to multiply
2 by some number that will make 2 into 1. &lt;/p&gt;
&lt;p&gt;However, because 2 is a factor of 10, there is no number 
in the complete residue system that will yield 1 mod 10 when 
we multiply it by 2:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{eqnarray*}
0 * 2 &amp;amp; \equiv &amp;amp; 0 \mod 10 \\
1 * 2 &amp;amp; \equiv &amp;amp; 2 \mod 10 \\
2 * 2 &amp;amp; \equiv &amp;amp; 4 \mod 10 \\ 
3 * 2 &amp;amp; \equiv &amp;amp; 6 \mod 10 \\
4 * 2 &amp;amp; \equiv &amp;amp; 8 \mod 10 \\
5 * 2 \equiv 10 &amp;amp; \equiv &amp;amp; 0 \mod 10 \\
6 * 2 \equiv 12 &amp;amp; \equiv &amp;amp; 2 \mod 10 \\
7 * 2 \equiv 14 &amp;amp; \equiv &amp;amp; 4 \mod 10 \\
8 * 2 \equiv 16 &amp;amp; \equiv &amp;amp; 6 \mod 10 \\
9 * 2 \equiv 18 &amp;amp; \equiv &amp;amp; 8 \mod 10
\end{eqnarray*}
$$&lt;/div&gt;
&lt;p&gt;The same difficulty appears if we try and solve an equation like&lt;/p&gt;
&lt;div class="math"&gt;$$
5x \equiv 8 \mod 10
$$&lt;/div&gt;
&lt;p&gt;for the same reason - 5 is a factor of 10, so it has no inverse mod 10.&lt;/p&gt;
&lt;p&gt;Contrast that with solving an equation like&lt;/p&gt;
&lt;div class="math"&gt;$$
3x \equiv 8 \mod 10
$$&lt;/div&gt;
&lt;p&gt;which, because 3 does not share any factors with 10, means we can find a number
such that 3 times that number yields 1 mod 10:&lt;/p&gt;
&lt;div class="math"&gt;$$
3 \times 7 \equiv 21 \equiv 1 \mod 10
$$&lt;/div&gt;
&lt;p&gt;so we can solve the equation by multiplying both sides by 7, the inverse of 3:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{eqnarray*}
3 x &amp;amp; \equiv &amp;amp; 8 \mod 10 \\
(7 \times 3) x &amp;amp; \equiv &amp;amp; (7 \times 8) \mod 10 \\
x &amp;amp;=&amp;amp; 56 \mod 10 \\
x &amp;amp;=&amp;amp; 6 \mod 10
\end{eqnarray*}
$$&lt;/div&gt;
&lt;p&gt;We can resolve this by creating a reduced residue system, which is a set of 
integers that have inverses mod 10. The reduced residue system consists of 
integers that &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have no common factors with the ring size &lt;span class="math"&gt;\(m\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Have no two elements that are congruent \mod m&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So a reduced residue system &lt;span class="math"&gt;\(\mod 10\)&lt;/span&gt; could be, for example,&lt;/p&gt;
&lt;div class="math"&gt;$$
\{ 1, 3, 7, 9 \}
$$&lt;/div&gt;
&lt;p&gt;(other reduced residue systems are possible as well).&lt;/p&gt;
&lt;p&gt;It is important to note that we do not include 0, in general, because
0 shares all factors with &lt;span class="math"&gt;\(m\)&lt;/span&gt; - that is, every number in the complete
residue system divides 0, so the greatest common factor of &lt;span class="math"&gt;\(0\)&lt;/span&gt; and &lt;span class="math"&gt;\(m\)&lt;/span&gt; is &lt;span class="math"&gt;\(m\)&lt;/span&gt;
and not 1!&lt;/p&gt;
&lt;p&gt;(The only exception to this rule is &lt;span class="math"&gt;\(m=1\)&lt;/span&gt;, but this is a trivial case,
since &lt;em&gt;every&lt;/em&gt; integer is congruent mod 1.)&lt;/p&gt;
&lt;p&gt;The reduced residue system has the property that any number in the complete
residue system can be generated from the reduced residue system via addition.&lt;/p&gt;
&lt;p&gt;Further, the size of the reduced residue system can be expressed using a function
called the Euler totient function, denoted &lt;span class="math"&gt;\(\phi(m)\)&lt;/span&gt;. The totient function
quantifies the number of integers less than &lt;span class="math"&gt;\(m\)&lt;/span&gt; that are relatively prime 
with &lt;span class="math"&gt;\(m\)&lt;/span&gt; (that is, two numbers such that the greatest common factor, denoted
with the shorthand &lt;span class="math"&gt;\((a,m)\)&lt;/span&gt;, is 1).&lt;/p&gt;
&lt;p&gt;&lt;a name="totient-totient"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="eulers-totient-function"&gt;Euler's Totient Function&lt;/h2&gt;
&lt;p&gt;Euler's totient function, &lt;span class="math"&gt;\(\phi(m)\)&lt;/span&gt;, turns out to be an extremely useful 
quantity in number theory. It also provides a quantitative measure of how 
divisible a number is. Take the two numbers 960 and 961 as examples:&lt;/p&gt;
&lt;div class="math"&gt;$$
\phi(960) = 256 \qquad \phi(961) = 930
$$&lt;/div&gt;
&lt;p&gt;from this, we can see that 960 has many more factors than 961.
Here are their prime factorizations:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{eqnarray*}
960 = 2^6 \times 3 \times 5 \\
961 = 31^2
\end{eqnarray*}
$$&lt;/div&gt;
&lt;p&gt;This means that the ring of integers mod 960 will have far more 
congruences that cannot be solved compared to the ring of integers mod 961.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Historical Note:&lt;/em&gt; The notation &lt;span class="math"&gt;\(\phi(n)\)&lt;/span&gt; was first used by the mathematician
Carl Friedrich Gauss in his incredible book &lt;em&gt;Disquisitiones Arithmeticae&lt;/em&gt;, 
an important historical textbook that focused on gathering all of the results
known to that point about number theory in a single work. (Gauss did omit the 
parenthesis, however, writing the totient function simply as &lt;span class="math"&gt;\(\phi n\)&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;a name="totient-byhand"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="calculating-the-totient-function-by-hand"&gt;Calculating the Totient Function by Hand&lt;/h2&gt;
&lt;p&gt;It may be obvious that the totient function is simple to compute using a computer;
but the question naturally arises: can we compute totient functions for large integers
by hand?&lt;/p&gt;
&lt;p&gt;It turns out we can - we just need to be able to factor the number in question.
(Note that this requirement is true generally; see the section on RSA Cryptography
in a post to follow).&lt;/p&gt;
&lt;p&gt;Let's first illustrate some rules for computing the totient function of composite numbers
with some simple examples. &lt;/p&gt;
&lt;h3 id="totient-property-prime-power"&gt;Totient Property: Prime Power&lt;/h3&gt;
&lt;p&gt;The first useful property is computing the totient function of a number
that is a prime number raised to some power. Let's take the simple example of 
&lt;span class="math"&gt;\(81 = 9^2 = 3^4\)&lt;/span&gt;. We know that any number that shares factors with 81
is a multiple of 3 less than or equal to 81, which is the set of numbers&lt;/p&gt;
&lt;div class="math"&gt;$$
\{ 1 \times 3, 2 \times 3, 3 \times 3, \dots, 3^{4-1} \times 3 \}
$$&lt;/div&gt;
&lt;p&gt;and there are &lt;span class="math"&gt;\(3^{4-1}\)&lt;/span&gt; of these numbers. Thus, of all of the integers 
from &lt;span class="math"&gt;\(1\)&lt;/span&gt; to &lt;span class="math"&gt;\(3^4\)&lt;/span&gt;, there are &lt;span class="math"&gt;\(3^3\)&lt;/span&gt; of them that are not relatively prime 
with &lt;span class="math"&gt;\(3^4\)&lt;/span&gt;. So the totient function can be written:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{eqnarray*}
\phi(81) &amp;amp;=&amp;amp; \phi(3^4) = 3^{4} - 3^{4-1} \\
\phi(81) &amp;amp;=&amp;amp; 81 - 27 \\
\phi(81) &amp;amp;=&amp;amp; = 54
\end{eqnarray*}
$$&lt;/div&gt;
&lt;p&gt;In general, if we are considering the totient function of a prime power &lt;span class="math"&gt;\(p^k\)&lt;/span&gt;,
we can write the totient function as &lt;/p&gt;
&lt;div class="math"&gt;$$
\phi(p^k) = p^{k} - p^{k-1}
$$&lt;/div&gt;
&lt;h3 id="totient-property-product-of-primes"&gt;Totient Property: Product of Primes&lt;/h3&gt;
&lt;p&gt;If we take a composite number like 20, we can split the totient function 
of 20 into the product of the totient function of the factors of 20:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{eqnarray*}
20 = 5 \times 4 \\
\phi(20) = \phi(5) \times \phi(4) \\
\phi(20) = 4 \times 2 = 8
\end{eqnarray*}
$$&lt;/div&gt;
&lt;p&gt;which is, indeed, the value of &lt;span class="math"&gt;\(\phi(20)\)&lt;/span&gt;. However, this does not hold &lt;em&gt;generally&lt;/em&gt;,
as we can see from computing the totient of 50:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{eqnarray*}
50 = 5 \times 10 \\
\phi(50) \neq \phi(5) \times \phi(10)
\phi(50) \neq 4 \times 4
\phi(50) \neq 16
\end{eqnarray*}
$$&lt;/div&gt;
&lt;p&gt;In fact, the value of &lt;span class="math"&gt;\(\phi(50)\)&lt;/span&gt; is 20, not 16! The problem is with our choice
of factors, 5 and 10. These two numbers share a common factor of 5, meaning
their totient functions do not account for &lt;em&gt;all&lt;/em&gt; of the numbers that will be 
relatively prime with 50. &lt;/p&gt;
&lt;p&gt;To fix this, we can further break down 50 into its prime factorization,
and compute the totient function of those primes:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{eqnarray*}
50 &amp;amp;=&amp;amp; 2 \times 5^2 \\
\phi(50) &amp;amp;=&amp;amp; \phi(2) \times \phi(5^2) \\
\phi(50) &amp;amp;=&amp;amp; 1 \times ( 5^2 - 5 ) \\
\phi(50) &amp;amp;=&amp;amp; 1 \times 20 \\
\phi(50) &amp;amp;=&amp;amp; 20
\end{eqnarray*}
$$&lt;/div&gt;
&lt;p&gt;which gives us the correct result of 20.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Generalizing&lt;/em&gt; this rule, we can say that we can break down the totient function
of a product of two numbers &lt;span class="math"&gt;\(s \times t\)&lt;/span&gt; into the product of totient functions 
&lt;span class="math"&gt;\(\phi(s)\)&lt;/span&gt; and &lt;span class="math"&gt;\(\phi(t)\)&lt;/span&gt; only if the greatest common factor between &lt;span class="math"&gt;\(s\)&lt;/span&gt; and &lt;span class="math"&gt;\(t\)&lt;/span&gt; is 1.&lt;/p&gt;
&lt;h3 id="totient-example"&gt;Totient Example&lt;/h3&gt;
&lt;p&gt;Let's consider the following example: suppose we wish to compute &lt;/p&gt;
&lt;div class="math"&gt;$$
\phi( 280 )
$$&lt;/div&gt;
&lt;p&gt;We can start by recognizing some factors of 280 - we can pull out the factors 
7 and 4, and 2 and 5. These can be further factored to yield the prime factorization 
of 280:&lt;/p&gt;
&lt;div class="math"&gt;$$
280 = 2^3 \times 5 \times 7
$$&lt;/div&gt;
&lt;p&gt;Now we can use the property that the totient function of an integer &lt;span class="math"&gt;\(m\)&lt;/span&gt; 
can be expressed as the product of the totient functions of the factors of &lt;span class="math"&gt;\(m\)&lt;/span&gt;.
So we can write &lt;span class="math"&gt;\(\phi(280)\)&lt;/span&gt; as any of the following equivalent expressions:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{eqnarray*}
\phi(280) &amp;amp;=&amp;amp; \phi(10) \times \phi(7) \times \phi(2^2) \\
\phi(280) &amp;amp;=&amp;amp; \phi( 2^3 ) \times \phi(5) \times \phi(7) 
\end{eqnarray*}
$$&lt;/div&gt;
&lt;p&gt;Using the second expression, we know that&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{eqnarray*}
\phi(2^3) &amp;amp;=&amp;amp; (2^3 - 2^2) = 4 \\
\phi(5)   &amp;amp;=&amp;amp; 4 \\
\phi(7)   &amp;amp;=&amp;amp; 6
\end{eqnarray*}
$$&lt;/div&gt;
&lt;p&gt;for an overall totient function value of &lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{eqnarray*}
\phi(280) &amp;amp;=&amp;amp; 4 \times 4 \times 6 \\
\phi(280) &amp;amp;=&amp;amp; 96
\end{eqnarray*}
$$&lt;/div&gt;
&lt;p&gt;which is indeed the correct result:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Totient function calculation with Wolfram Alpha" src="/images/alpha-totient.png"&gt;&lt;/p&gt;
&lt;!--

&lt;a name="totient-applications"&gt;&lt;/a&gt;
## Other Applications

&lt;a name="totient-eulers-theorem"&gt;&lt;/a&gt;
### Euler's Theorem and Fermat's Little Theorem

&lt;a name="totient-rsa"&gt;&lt;/a&gt;
### RSA Cryptography

&lt;a name="totient-ramanujan"&gt;&lt;/a&gt;
### Ramanujan's Sum

&lt;a name="totient-vinogradov"&gt;&lt;/a&gt;
### Vinogradov's Theorem

--&gt;

&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Mathematics"></category><category term="mathematics"></category><category term="factors"></category><category term="number theory"></category><category term="euler"></category></entry><entry><title>Mad Combinatoric Castles</title><link href="https://charlesreid1.github.io/mad-combinatoric-castles.html" rel="alternate"></link><published>2017-07-25T18:00:00-07:00</published><updated>2017-07-25T18:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-07-25:/mad-combinatoric-castles.html</id><summary type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#castles-problem"&gt;Overview: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#polyominoes"&gt;Polyominoes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#castle-rules"&gt;Castle Rules for Polynominoes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#castles-enumerate"&gt;Don't Generate - Enumerate!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="castles-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="overview-the-problem"&gt;Overview: The Problem&lt;/h1&gt;
&lt;p&gt;In an earlier post, I mentioned &lt;a href="https://charlesreid1.com/wiki/Project_Euler"&gt;my efforts on Project Euler problems&lt;/a&gt;
and the wide variety of problems there that can offer some profound mathematical insights.&lt;/p&gt;
&lt;p&gt;Given that the first post covered Project Euler problem 1, I thought it would be nice
if the next problem cranked up the difficulty factor by an order of magnitude.
&lt;a href="https://projecteuler.net/problem=502"&gt;Project Euler Problem 502&lt;/a&gt; is a very hairy combinatorics problem that required me to learn about 
a wide variety of combinatorial enumeration techniques.&lt;/p&gt;
&lt;p&gt;Let's start with the â€¦&lt;/p&gt;</summary><content type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#castles-problem"&gt;Overview: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#polyominoes"&gt;Polyominoes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#castle-rules"&gt;Castle Rules for Polynominoes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#castles-enumerate"&gt;Don't Generate - Enumerate!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="castles-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="overview-the-problem"&gt;Overview: The Problem&lt;/h1&gt;
&lt;p&gt;In an earlier post, I mentioned &lt;a href="https://charlesreid1.com/wiki/Project_Euler"&gt;my efforts on Project Euler problems&lt;/a&gt;
and the wide variety of problems there that can offer some profound mathematical insights.&lt;/p&gt;
&lt;p&gt;Given that the first post covered Project Euler problem 1, I thought it would be nice
if the next problem cranked up the difficulty factor by an order of magnitude.
&lt;a href="https://projecteuler.net/problem=502"&gt;Project Euler Problem 502&lt;/a&gt; is a very hairy combinatorics problem that required me to learn about 
a wide variety of combinatorial enumeration techniques.&lt;/p&gt;
&lt;p&gt;Let's start with the problem statement.&lt;/p&gt;
&lt;h2 id="building-castles"&gt;Building Castles&lt;/h2&gt;
&lt;p&gt;Problem 502 is about building castles. The problem gives an &lt;span class="math"&gt;\(M \times N\)&lt;/span&gt; rectangular grid,
and asks us to count how many "castles" can be built on the rectangular grid, given its maximum
height. &lt;/p&gt;
&lt;p&gt;Here is how the game works:&lt;/p&gt;
&lt;p&gt;First, start by defining a block as a rectangle of height 1, and an integer-valued length.
A castle is a configuation of stacked blocks.&lt;/p&gt;
&lt;p&gt;For a game grid of size &lt;span class="math"&gt;\(M \times N\)&lt;/span&gt;, we can construct castles according to
the following rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blocks can be placed on top of other blocks, but no sticking out past edge&lt;/li&gt;
&lt;li&gt;All blocks aligned to grid&lt;/li&gt;
&lt;li&gt;Two neighboring blocks must have 1 unit of space between them&lt;/li&gt;
&lt;li&gt;Maximum achieved height of castle is EXACTLY M&lt;/li&gt;
&lt;li&gt;Castle is made from even number of blocks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example W = 8, H = 5 castle given in more compact notation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  #   # 
  #   ##
 ## # ##
##### ##
########
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can also build more complicated castles, like this 10 by 100 castle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;X       X      XX    X     XX   XX X X                          X XX          XX   XX  X     X   XXX
X       X      XX    X     XX X XX X X     X     X             XX XX          XX   XX  X     X   XXX
X      XX      XX    X     XX X XXXX X     X     X             XX XX          XX   XX  X     X   XXX
X      XX      XX    X     XX X XXXX X     X     X XXX         XX XX          XX X XX  X     X   XXX
X      XX     XXX    X     XX X XXXX X  X  X     X XXX X X     XX XX          XX X XX  X  X  X   XXX
X      XX  X  XXX  X X     XXXX XXXX X  XX X    XX XXX X X   X XX XX          XX XXXX  X XX XX  XXXX
X  XX  XX  X  XXX  X X     XXXX XXXX XX XX XX XXXX XXX X XXX X XX XX    X     XX XXXXX X XX XX XXXXX
X  XX  XXX X  XXX  X X   X XXXX XXXX XX XX XX XXXX XXXXX XXX XXXX XX  X X     XX XXXXX X XX XXXXXXXX
X XXXXXXXX X XXXXXXX X XXXXXXXX XXXXXXX XX XX XXXXXXXXXXXXXX XXXX XX XX X  XX XX XXXXXXXXXX XXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our objective in this problem is to enumerate all possible castles. Let &lt;span class="math"&gt;\(F(x,y)\)&lt;/span&gt; denote the number of 
unique castles with a width of x and a height of exactly y. The problem gives use the trivial number
&lt;span class="math"&gt;\(F(4,2) = 10\)&lt;/span&gt;. The problem also gives &lt;span class="math"&gt;\(F(13,10)\)&lt;/span&gt; and &lt;span class="math"&gt;\(F(10,13)\)&lt;/span&gt;, both of which are absolutely enormous numbers.&lt;/p&gt;
&lt;p&gt;This should be your first giant red flag that manual enumeration through a traversal of combinatoric space 
is absolutely, positively out of the question. We'll explain why in more detail below, but suffice to say,
there is a combinatoric explosion that occurs for castles larger than 10, so castles with a width of 
1 trillion are going to get STUPID big.&lt;/p&gt;
&lt;p&gt;Then we're given &lt;span class="math"&gt;\(F(100,100)\)&lt;/span&gt;, which is so enormous it has to be reported mod 1,000,000,007.&lt;/p&gt;
&lt;p&gt;Finally, the problem asks us the following whopper of a question:&lt;/p&gt;
&lt;p&gt;What is &lt;span class="math"&gt;\(F(10^{12},100) + F(10^4, 10^4) + F(100,10^{12}) mod 1,000,000,007\)&lt;/span&gt;? &lt;/p&gt;
&lt;p&gt;Whew.&lt;/p&gt;
&lt;h2 id="the-scale-of-the-problem"&gt;The Scale of the Problem&lt;/h2&gt;
&lt;p&gt;For solving this problem it is important to take a step back and think through
the size of the combinatoric space being searched, and what methods we have for 
carving out that space.&lt;/p&gt;
&lt;p&gt;As already mentioned, the size of this problem - the actual number of 
castles - is surely larger than the &lt;a href="https://charlesreid1.com/wiki/Eddington_Number"&gt;Eddington numer&lt;/a&gt;,
the number of protons in the known universe. The numbers of combinations are 
STUPID big. There's no way for the mind to fully wrap itself around the concept.&lt;/p&gt;
&lt;p&gt;The huge numbers involved means, we must have a closed-form expression for &lt;span class="math"&gt;\(F(x,y)\)&lt;/span&gt; that we can
evaluate once to get each of the &lt;span class="math"&gt;\(F(10^{12},100), F(10^4,10^4), F(100,10^{12})\)&lt;/span&gt; required by the answer.
Doing so much as counting to 1 trillion takes minutes on modern computers, so if you're doing anything else
1 trillion times, you'll end up waiting a loooong time.&lt;/p&gt;
&lt;h2 id="generating-functions"&gt;Generating Functions&lt;/h2&gt;
&lt;p&gt;As it turns out, there is indeed a combinatorial enumeration method that does
not require explicitly finding or generating each permutation in order to count
all permutations.  I have covered &lt;a href="https://charlesreid1.com/wiki/Generating_Functions"&gt;generating
functions&lt;/a&gt; on the
charlesreid1.com wiki.  The principal idea behind generating functions is the
observation that we can rearrange the infinite series:&lt;/p&gt;
&lt;div class="math"&gt;$$
G(z) = 1 + z + z^2 + z^3 + \dots
$$&lt;/div&gt;
&lt;p&gt;into the equation &lt;/p&gt;
&lt;div class="math"&gt;$$
G(z) = \dfrac{1}{1-z}
$$&lt;/div&gt;
&lt;p&gt;This single identity leads to a whole family of solution techniques for generating functions.
The basic idea is to start by writing the rules of your system (see above), 
then write a generating function that varies with characteristic variables of the problem 
(width and height in this case, possibly others),
and last, combine the generating functions of different rules or objects into a single generating function.&lt;/p&gt;
&lt;p&gt;&lt;a name="polyominoes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="overview-of-polyominoes"&gt;Overview of Polyominoes&lt;/h1&gt;
&lt;p&gt;Let us begin by considering a two-dimensional grid &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; of points at positive integer coordinates,
&lt;span class="math"&gt;\(\pi = \mathbb{N} \times \mathbb{N}\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;Let a polyomino denote a two-dimensional shape formed by connecting contiguous unit square tiles
together, all of which align to the 2D grid of integers &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;(Granted, this definition sounds a bit pedantic, as we're just describing stackable squares,
but we need to keep the definition general because there are many kinds of polyomonioes,
and many rules that we can set for how we arrange them.)&lt;/p&gt;
&lt;p&gt;If you have played &lt;a href="https://en.wikipedia.org/wiki/Tetris"&gt;Tetris&lt;/a&gt; before, or 
John Conway's &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life"&gt;Game of Life&lt;/a&gt;, you will recognize
polyominoes from those contexts.&lt;/p&gt;
&lt;p&gt;Now, we set up our generating function in terms of characteristics of the problem.&lt;/p&gt;
&lt;p&gt;It is very important to note that, while most of the rules are fairly straightforward to translate into
a polyomonio type of framework, Rule 6 is not. In fact, it is probably Rule 6 that makes Problem 502
so challenging. Were it not for Rule 6, this would be a nearly-trivial problem.&lt;/p&gt;
&lt;p&gt;Let's review our castle construction rules and translate them into polyomino equivalents.&lt;/p&gt;
&lt;p&gt;&lt;a name="castle-rules"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="castle-rules-for-polyominoes"&gt;Castle Rules for Polyominoes&lt;/h2&gt;
&lt;h3 id="generating-function-variables"&gt;Generating Function Variables&lt;/h3&gt;
&lt;p&gt;We want to construct a multivariate ordinary generating function for our castles, since we have 
several variables we want to change, and get back a total count of castles.&lt;/p&gt;
&lt;p&gt;The two most obvious variable choices for our generating function independent variables 
are width &lt;span class="math"&gt;\(x\)&lt;/span&gt; and height &lt;span class="math"&gt;\(y\)&lt;/span&gt;. Surely, these must be in the final generating function.&lt;/p&gt;
&lt;p&gt;However, this still doesn't give us enough information about the construction process 
from step to step. Imagine that we place the first block on row 1.&lt;/p&gt;
&lt;p&gt;Then we may place as many blocks as we would like along row 2, wherever we would like 
(level 2 is the least restricted layer of the castle).&lt;/p&gt;
&lt;p&gt;Now, when we get to row 3, we are only allowed to keep building where there is already 
an existing tower from the prior row. This means, we have to pass along information 
from the prior row - where the bricks are located and how many - so that we know where
the next level may build towers.&lt;/p&gt;
&lt;p&gt;This will remain an open question until we cover a few other representations of 
Problem 502 and ways of modeling it. Then we will cover what additional
variables our generating function might need.&lt;/p&gt;
&lt;h3 id="rule-1-no-overhangs"&gt;Rule 1: No Overhangs&lt;/h3&gt;
&lt;p&gt;Rule 1 stipulates that blocks can be placed on top of
other blocks as long as nothing sticks out past the end
or hags out.&lt;/p&gt;
&lt;p&gt;This ensures that the resulting polyomino is column
convex. Column convexity is the property that we can
draw a vertical line through any column of the
polyomino, and we only intersect the polyomino in two
places. (No internal breaks.)&lt;/p&gt;
&lt;p&gt;This rule stipulates what kind of polyomino
constructions are allowed.&lt;/p&gt;
&lt;h3 id="rule-2-snap-to-grid"&gt;Rule 2: Snap to Grid&lt;/h3&gt;
&lt;p&gt;This rule is just saying that the unit squares in the
castle problem match the unit squares of polyominoes,
ensuring the problems are interchangeable.&lt;/p&gt;
&lt;h3 id="rule-3-neighbor-blocks-need-space"&gt;Rule 3: Neighbor Blocks Need Space&lt;/h3&gt;
&lt;p&gt;Rule 3 is crucial for being able to count blocks. If two
side-by-side contiguous unit squares could be either one
or two blocks, this would make the final count of
solutions much, much, much, much, much bigger than it
should be.&lt;/p&gt;
&lt;h3 id="rule-4-bottom-row-is-one-block"&gt;Rule 4: Bottom Row is One Block&lt;/h3&gt;
&lt;p&gt;This is more of an accounting-based rule, but we define
our castle construction process such that it begins with
a completed row. This means that the number of blocks
that we add on top of that single block must be odd
overall.&lt;/p&gt;
&lt;h3 id="rule-5-maximum-height-is-exactly-h"&gt;Rule 5: Maximum Height is Exactly H&lt;/h3&gt;
&lt;p&gt;As it turns out, the last two rules are the toughest -
in a sense, because they are &lt;strong&gt;global&lt;/strong&gt; conditions on
the combinatoric solution that is being counted.  In
other words, we will use generating functions to
"construct" our combinatoric objects in a methodical
way, and the challenge is on setting global conditions
on the generating function's counted solutions.&lt;/p&gt;
&lt;h3 id="rule-6-even-number-of-blocks"&gt;Rule 6: Even Number of Blocks&lt;/h3&gt;
&lt;p&gt;Rule 6 is definitely what makes this problem difficult. &lt;/p&gt;
&lt;p&gt;Our approach is going to involve coming up with a 
counting function - but this rule tells us that the
counting function will need to have some way of
accounting for the total number of blocks, and
divide by or subtract a factor that accounts for
castles with an odd number of blocks.&lt;/p&gt;
&lt;p&gt;&lt;a name="castles-enumerate"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="dont-generate-enumerate"&gt;Don't Generate - Enumerate!&lt;/h2&gt;
&lt;p&gt;We mentioned above that the number of possibilities
here is huge, so this combinatorics problem falls 
squarely in the realm of enumerating, not generating.&lt;/p&gt;
&lt;p&gt;That being said, and keeping in mind that the problem
size blows up rapidly, it can still be useful to write
an algorithm to generate castles for small values of
width and height, to test formulas for these small
values (and uncover corner cases!).&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.com/wiki/Project_Euler/502"&gt;Project Euler/502&lt;/a&gt;
on the charlesreid1.com wiki for continued work on
this problem. &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Mathematics"></category><category term="computer science"></category><category term="mathematics"></category><category term="factors"></category><category term="sequences"></category><category term="project euler"></category></entry><entry><title>Project Euler Problem 1</title><link href="https://charlesreid1.github.io/project-euler-problem-1.html" rel="alternate"></link><published>2017-07-22T09:00:00-07:00</published><updated>2017-07-22T09:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-07-22:/project-euler-problem-1.html</id><summary type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe1-problem"&gt;Overview: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe1-why"&gt;Why This Problem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe1-deeper"&gt;Going Deeper: An Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="pe1-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="overview-the-problem"&gt;Overview: The Problem&lt;/h1&gt;
&lt;p&gt;Project Euler is a website that provides mathematically-oriented programming problems.
There are many (over 500) and they are a rich source of profound mathematical insights.&lt;/p&gt;
&lt;p&gt;I have been considering a writeup that goes deep into a particular problem,
so why not do it with problem 1?&lt;/p&gt;
&lt;p&gt;Problem 1 of Project Euler asks:&lt;/p&gt;
&lt;blockquote&gt;
Find the sum of all the multiples of 3 or 5 below 1000.
&lt;/blockquote&gt;

&lt;p&gt;It is a pretty simple task - one of the first things covered in a decent programming course
is the â€¦&lt;/p&gt;</summary><content type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe1-problem"&gt;Overview: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe1-why"&gt;Why This Problem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe1-deeper"&gt;Going Deeper: An Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="pe1-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="overview-the-problem"&gt;Overview: The Problem&lt;/h1&gt;
&lt;p&gt;Project Euler is a website that provides mathematically-oriented programming problems.
There are many (over 500) and they are a rich source of profound mathematical insights.&lt;/p&gt;
&lt;p&gt;I have been considering a writeup that goes deep into a particular problem,
so why not do it with problem 1?&lt;/p&gt;
&lt;p&gt;Problem 1 of Project Euler asks:&lt;/p&gt;
&lt;blockquote&gt;
Find the sum of all the multiples of 3 or 5 below 1000.
&lt;/blockquote&gt;

&lt;p&gt;It is a pretty simple task - one of the first things covered in a decent programming course
is the assortment of mathematical operators, including the modular operator and multiplication
operator, useful here.&lt;/p&gt;
&lt;p&gt;This problem is also a familiar problem in another guise - any computer science student
who has solved a variant of the fizz buzz problem will recognize this task 
(in the fizz buzz problem, you print fizz every time a number is divisible by 3
and buzz every time it is divisible by 5, etc.)&lt;/p&gt;
&lt;p&gt;It is a deceptively simple problem. In fact, it is so easy to solve with a computer
that you almost lose a sense of what the manual process would look like.
How might we perform this task by hand? &lt;/p&gt;
&lt;p&gt;Finally, it is an example of a problem in which we are trying to find 
the number of outcomes of several classes of events, and some of the events
are labeled with both classes. This means it will be important to learn and apply
the Inclusion-Exclusion Principle. (Fortunately, this principle is fairly 
straightforward to apply.)&lt;/p&gt;
&lt;p&gt;We will get to the algorithm to counting these factors by hand, and handling 
more complicated constraints as well, but first I'll address why this problem - 
this task - was deemed important enough to be the very first step that nearly 
everyone takes on their epic (or... not so epic) Project Euler journey.&lt;/p&gt;
&lt;p&gt;&lt;a name="pe1-why"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="why-this-problem"&gt;Why This Problem?&lt;/h1&gt;
&lt;p&gt;The central task in this problem is to find multiples of a number &lt;span class="math"&gt;\(k\)&lt;/span&gt;,
and count them. The task is simple enough (unlike later Project Euler questions,
which can be downright &lt;i&gt;frightening&lt;/i&gt; at times), but still requires 
knowledge of loops, operators, and basic algorithm design. It's no litmus test
for whether you can solve Problem 100, but it gets you started.&lt;/p&gt;
&lt;p&gt;The task at the heart of this problem - iterating through a list of multiples
of a number - is at the heart of the Sieve of Eratosthenes algorithm, 
which in turn is at the heart of applied number theory. While it may 
not be the algorithm applied in practice, it is the first and most important
algorithm number theorists learn.&lt;/p&gt;
&lt;p&gt;It's also a first lesson in the subtleties of Project Euler problems - 
the eager but naive algorithm designer will count all multiples of 3,
then all multiples of 5, forgetting that some repeat.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Project Euler Fail" style="width: 150px;" src="/images/pe-fail.png" /&gt;&lt;/p&gt;
&lt;p&gt;Welcome to Project Euler.&lt;/p&gt;
&lt;p&gt;&lt;a name="pe1-deeper"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="going-deeper-an-example"&gt;Going Deeper: An Example&lt;/h1&gt;
&lt;p&gt;It's true that this problem seems a bit boring on its face. But let's dive deeper. Suppose I asked you to find the number of multiples of the integers 3 and 4, but not the integer 5, below 2,001 - and to do so without explicitly enumerating them with a computer.&lt;/p&gt;
&lt;p&gt;To do this, we can express the problem in set notation. We have three sets, A, B, C, containing multiples of 3, 4, and 5, respectively. In set theory language, we wish to find &lt;/p&gt;
&lt;div class="math"&gt;$$
( A \bigcup B ) \backslash C
$$&lt;/div&gt;
&lt;p&gt;We can start by counting the sets A and B, as well as accounting for &lt;span class="math"&gt;\(A \bigcap B\)&lt;/span&gt; (numbers that are multiples of both a and b).&lt;/p&gt;
&lt;p&gt;Next, we can count &lt;span class="math"&gt;\(A \bigcap C\)&lt;/span&gt; and &lt;span class="math"&gt;\(B \bigcap C\)&lt;/span&gt;, which are the multiples of a and b that we counted that we should not have because they are multiples of c. &lt;/p&gt;
&lt;p&gt;Finally, we cannot forget &lt;span class="math"&gt;\(A \bigcap B \bigcap C\)&lt;/span&gt; - numbers that have a, b, and c as multiples. This case is a bit tricky. Any item that is in &lt;span class="math"&gt;\(A \bigcap B \bigcap C\)&lt;/span&gt; has already been removed - twice. The first time was when it was removed because it was in &lt;span class="math"&gt;\(A \bigcap C\)&lt;/span&gt;, and the second time was when it was removed because it was in &lt;span class="math"&gt;\(B \bigcap C\)&lt;/span&gt;. Therefore, we must add each of these items back in, to account for the double-removal and ensure these items are only removed once.&lt;/p&gt;
&lt;p&gt;So we will add the items in &lt;span class="math"&gt;\(A \bigcap B \bigcap C\)&lt;/span&gt; back into the final set.&lt;/p&gt;
&lt;p&gt;Visually representing A, B, and C with a Venn diagram,&lt;/p&gt;
&lt;p&gt;&lt;img alt="Project Euler Problem 1 Venn Diagram" style="background-color: #ddd; width: 500px;" src="/images/pe-venn.png" /&gt;&lt;/p&gt;
&lt;p&gt;To get back to the problem at hand, we can compute the size of these sets using the floor function. For example, the cardinality of A is:&lt;/p&gt;
&lt;div class="math"&gt;$$
\mbox{card}(A) = \mbox{floor}\left( \frac{2001}{3} \right) = 667
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\mbox{card}(B) = \mbox{floor}\left( \frac{2001}{4} \right) = 500
$$&lt;/div&gt;
&lt;p&gt;Next, we subtract the duplicates (numbers with both A and B as factors):&lt;/p&gt;
&lt;div class="math"&gt;$$
\mbox{card}(A \bigcap B) = \mbox{floor}\left( \frac{2001}{3 \cdot 4} \right) = 166
$$&lt;/div&gt;
&lt;p&gt;Now subtract integers that have both a and c as multiples, or b and c as multiples:&lt;/p&gt;
&lt;div class="math"&gt;$$
\mbox{card}(A \bigcap C) = \mbox{floor}\left( \frac{2001}{3 \cdot 5} \right) = 133
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\mbox{card}(B \bigcap C) = \mbox{floor}\left( \frac{2001}{4 \cdot 5} \right) = 100
$$&lt;/div&gt;
&lt;p&gt;And last but not least, those numbers with a, b, and c as factors were just removed twice, so we add them back in once:&lt;/p&gt;
&lt;div class="math"&gt;$$
\mbox{card}(A \bigcap B \bigcap C) = \mbox{floor}\left( \frac{2001}{3 \cdot 4 \cdot 5} \right) = 33
$$&lt;/div&gt;
&lt;p&gt;This gives a total number of multiples M below N with a or b as a factor, but not c:&lt;/p&gt;
&lt;div class="math"&gt;$$
M = \mbox{floor}\left( \frac{N}{a} \right) + \mbox{floor}\left( \frac{N}{b} \right) 
- \mbox{floor}\left( \frac{N}{ab} \right)
- \mbox{floor}\left( \frac{N}{ac} \right) - \mbox{floor}\left( \frac{N}{bc} \right) 
+ \mbox{floor}\left( \frac{N}{abc} \right)
$$&lt;/div&gt;
&lt;p&gt;in our specific case,&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align}
M &amp;amp;=&amp;amp; 667 + 500 - 166 - 133 - 100 + 33 \\
M &amp;amp;=&amp;amp; 801
\end{align}
$$&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Mathematics"></category><category term="computer science"></category><category term="mathematics"></category><category term="factors"></category><category term="sequences"></category><category term="euler"></category><category term="project euler"></category></entry><entry><title>Shortest Lattice Paths and Multiset Permutations</title><link href="https://charlesreid1.github.io/shortest-lattice-paths-and-multiset-permutations.html" rel="alternate"></link><published>2017-07-18T08:00:00-07:00</published><updated>2017-07-18T08:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-07-18:/shortest-lattice-paths-and-multiset-permutations.html</id><summary type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-lattice-paths-problem"&gt;The Lattice Paths Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#problem-formulation-permutations"&gt;Problem Formulation: Permutations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#permutations-of-unique-items-factorial"&gt;Permutations of Unique Items (Factorial)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#permutations-of-items-with-duplicates-multichoose"&gt;Permutations of Items with Duplicates (Multichoose)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#example"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#solving-2d-rectangular-lattice"&gt;Solving 2D Rectangular Lattice&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#more-examples"&gt;More Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#solving-2d-square-lattice-special-case"&gt;Solving 2D Square Lattice (Special Case)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solving-3d-cuboid-lattice"&gt;Solving 3D Cuboid Lattice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solving-3d-cubic-lattice-special-case"&gt;Solving 3D Cubic Lattice (Special Case)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solving-n-dimensional-square-lattice-n-dimensional-multisets"&gt;Solving N-Dimensional Square Lattice (N-Dimensional Multisets)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="the-lattice-paths-problem"&gt;The Lattice Paths Problem&lt;/h2&gt;
&lt;p&gt;I first came across the lattice paths problem in &lt;a href="https://projecteuler.net/problem=15"&gt;Project Euler problem 15&lt;/a&gt;. 
The question described a 2x2 square lattice,
and illustrated the 6 ways of navigating from the top left corner to the bottom right corner by taking the minimum number
of steps - 2 right â€¦&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-lattice-paths-problem"&gt;The Lattice Paths Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#problem-formulation-permutations"&gt;Problem Formulation: Permutations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#permutations-of-unique-items-factorial"&gt;Permutations of Unique Items (Factorial)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#permutations-of-items-with-duplicates-multichoose"&gt;Permutations of Items with Duplicates (Multichoose)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#example"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#solving-2d-rectangular-lattice"&gt;Solving 2D Rectangular Lattice&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#more-examples"&gt;More Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#solving-2d-square-lattice-special-case"&gt;Solving 2D Square Lattice (Special Case)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solving-3d-cuboid-lattice"&gt;Solving 3D Cuboid Lattice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solving-3d-cubic-lattice-special-case"&gt;Solving 3D Cubic Lattice (Special Case)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solving-n-dimensional-square-lattice-n-dimensional-multisets"&gt;Solving N-Dimensional Square Lattice (N-Dimensional Multisets)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="the-lattice-paths-problem"&gt;The Lattice Paths Problem&lt;/h2&gt;
&lt;p&gt;I first came across the lattice paths problem in &lt;a href="https://projecteuler.net/problem=15"&gt;Project Euler problem 15&lt;/a&gt;. 
The question described a 2x2 square lattice,
and illustrated the 6 ways of navigating from the top left corner to the bottom right corner by taking the minimum number
of steps - 2 right steps and 2 down steps. &lt;/p&gt;
&lt;p&gt;The question then asks for the number of minimum paths on a 20 x 20 grid. Needless to say, even without seeing the number, 
it should be obvious that enumerating all of these paths would get extremely expensive with grid dimensions growing beyond 10.
That means this should be approached as an &lt;strong&gt;analytical&lt;/strong&gt; combinatorics problem, not a computational combinatorics problem.
As it turns out, there is a closed-form solution, and this is one of the few Project Euler questions that can be answered 
with the straightforward use of Wolfram Alpha (I solved it while boarding a bus).&lt;/p&gt;
&lt;p&gt;But this is an interesting problem that goes beyond the Project Euler question - it has to do with 
a combinatorics problem that is maddeningly simple, yet surprisingly difficult to formulate - the problem 
of &lt;strong&gt;multisets&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="problem-formulation-permutations"&gt;Problem Formulation: Permutations&lt;/h2&gt;
&lt;p&gt;Thinking through the 2x2 grid, we already stated that the shortest path must consist of 2 right moves and 2 down moves - 
the number of paths is simply a question of the order in which these moves are made. Let us represent the path 
that moves right twice, then down twice, using the string&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;RRDD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have a way of representing paths through the lattice - and we've turned our very specific lattice problem 
into a much more general combinatorics problem. How many unique permutations of the above path/string can we find?&lt;/p&gt;
&lt;h3 id="permutations-of-unique-items-factorial"&gt;Permutations of Unique Items (Factorial)&lt;/h3&gt;
&lt;p&gt;Let's suppose we have a string consisting of unique characters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ABCDEFG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now how many permutations of this string are there? The first letter can be any of the 7 characters, so we have 7 possibilities. 
The second letter can be any of the remaining 6 characters, so we have 7 * 6 possibilities. And so on down the line, until we get a 
total number of possible permutations of the string equal to&lt;/p&gt;
&lt;div class="math"&gt;$$
7! = 7 \times 6 \times 5 \times 4 \times 3 \times 2 \times 1 = 5040
$$&lt;/div&gt;
&lt;p&gt;There are 5040 unique permutations of the string. &lt;/p&gt;
&lt;p&gt;Our situation is complicated by the fact that some of our permutations are repeated. For example, if we label the two down moves 
as D1 and D2, we can choose the first move as D1 and the second move as D2, or the first move as D2 and the second move as D1 - the two are equivalent. 
This will eliminate some of the permutations.&lt;/p&gt;
&lt;h3 id="permutations-of-items-with-duplicates-multichoose"&gt;Permutations of Items with Duplicates (Multichoose)&lt;/h3&gt;
&lt;p&gt;Our case is slightly different: we have items with duplicates. This fits into a general combinatorics framework called 
&lt;a href="https://en.wikipedia.org/wiki/Stars_and_bars_(combinatorics)"&gt;stars-and-bars&lt;/a&gt; (link to Wikipedia article). 
In this framework, we are trying to determine the number of ways that we can partition a set of n objects 
into a set of &lt;span class="math"&gt;\(k\)&lt;/span&gt; bins. The &lt;span class="math"&gt;\(n\)&lt;/span&gt; objects are often denoted as star characters, and the k bins are formed by 
k-1 bar characters. &lt;/p&gt;
&lt;p&gt;For example, if we are adding 5 components to a circuit board, and they can be any one of 9 possible components, we can represent this as
the partitioning of 5 stars among 9 bins, or 8 bars. Here are some possibilities:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;||||||||        &amp;lt;-- No choices made yet (9 bins, 8 partitions)
*|*||*||*|*||   &amp;lt;-- Mix of different components
||*|*||*|*||*   &amp;lt;-- Mix of different components
****|||*|||||   &amp;lt;-- Heavy on component 1
*|**|||**||||   &amp;lt;-- Two pairs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the case of our lattice path problem, we have only two unique characters, D and R. 
We can think of the problem of generating permutations as inserting the down moves into a sequence of right moves. 
We have a certain number of locations where we can insert the down moves, and down moves can be inserted in order.&lt;/p&gt;
&lt;p&gt;This is what's often called a stars-and-bars problem in combinatorics: trying to determine the number of permutations 
of items from multisets can be described as partitioning star characters with bar characters.&lt;/p&gt;
&lt;p&gt;To formulate our problem in these terms, we can think of "distributing" our down moves as we move right through the lattice. 
On the 20x20 grid, we are going to make 20 right moves, and we can distribute our 20 down moves at any of 21 possible locations 
(columns of points on the lattice). &lt;/p&gt;
&lt;p&gt;Thus, our n items, the 20 down moves, are being placed between the 20 right moves, which are the 20 bars that create 
21 bins (21 locations to place the down moves).&lt;/p&gt;
&lt;h3 id="example"&gt;Example&lt;/h3&gt;
&lt;p&gt;Considering the smaller 2x2 example, and replacing bars with R, we have, for a 2x2 lattice, six possibilities:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;RR    &amp;lt;-- No choices made yet
**RR  &amp;lt;-- all on left
*R*R  &amp;lt;-- distributed... etc...
*RR*
R**R
R*R*
RR**
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To enumerate the number of possibilities, we use the multichoose function, denoted "n multichoose k". This counts the number of ways
to place n objects (D) into &lt;span class="math"&gt;\(k\)&lt;/span&gt; bins (created by &lt;span class="math"&gt;\(k-1\)&lt;/span&gt; other objects, R). The multichoose function is defined as
(see &lt;a href="https://en.wikipedia.org/wiki/Multiset#Counting_multisets"&gt;https://en.wikipedia.org/wiki/Multiset#Counting_multisets&lt;/a&gt; Wikipedia page for proper Latex notation - 
it looks like the binomial coefficient but with 2 parentheses):&lt;/p&gt;
&lt;div class="math"&gt;$$
n \mbox{  multichoose  } k = \binom{n+k-1}{n} 
$$&lt;/div&gt;
&lt;p&gt;where, again, n is number of objects, being split into &lt;span class="math"&gt;\(k\)&lt;/span&gt; partitions by &lt;span class="math"&gt;\(k-1\)&lt;/span&gt; other objects.&lt;/p&gt;
&lt;p&gt;Now, let's plug in the numbers for the 2 by 2 lattice. We get:&lt;/p&gt;
&lt;div class="math"&gt;$$
n = 2, k = 3
$$&lt;/div&gt;
&lt;p&gt;We are partitioning 2 down moves among 3 possible columns in the lattice. This gives:&lt;/p&gt;
&lt;div class="math"&gt;$$
2 \mbox{  multichoose  } 3 = \binom{2+3-1}{2} = \binom{4}{2} = 10
$$&lt;/div&gt;
&lt;p&gt;which is indeed the number of paths through the lattice.&lt;/p&gt;
&lt;h2 id="solving-2d-rectangular-lattice"&gt;Solving 2D Rectangular Lattice&lt;/h2&gt;
&lt;p&gt;To generalize, on a lattice of width &lt;span class="math"&gt;\(W\)&lt;/span&gt; and height &lt;span class="math"&gt;\(H\)&lt;/span&gt;, we have &lt;span class="math"&gt;\(W\)&lt;/span&gt; right moves that form &lt;span class="math"&gt;\(W+1\)&lt;/span&gt; partitions,
in which we are placing H items. The number of possible paths through the lattice is therefore 
equivalent to permutations of the string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;RRRR...(W times)...RRRDDDD...(H times)...DDDD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now n and k are given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
n = H, k = W+1
$$&lt;/div&gt;
&lt;p&gt;so the total number of possible paths through the W x H square lattice is:&lt;/p&gt;
&lt;div class="math"&gt;$$
(H) \mbox{  multichoose  } (W+1) = \binom{W+1+H-1}{H} = \binom{W+H}{H}
$$&lt;/div&gt;
&lt;h3 id="more-examples"&gt;More Examples&lt;/h3&gt;
&lt;p&gt;The number of minimal paths through a 4 x 2 lattice (identical to the number of paths 
through a 2 x 4 lattice) is:&lt;/p&gt;
&lt;div class="math"&gt;$$
P = \binom{4+2}{2} = \binom{4+2}{4} = 15
$$&lt;/div&gt;
&lt;p&gt;The number of minimal paths through an 8x8 lattice is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
P = \binom{8+8}{8} = 12,870
$$&lt;/div&gt;
&lt;p&gt;and finally, the number of minimal paths through a 20 x 20 lattice is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
P = \binom{20+20}{20} = 137,846,528,\mbox{XXX}
$$&lt;/div&gt;
&lt;p&gt;(This is the Project Euler problem 15 answer so last few digits are omitted.)&lt;/p&gt;
&lt;h2 id="solving-2d-square-lattice-special-case"&gt;Solving 2D Square Lattice (Special Case)&lt;/h2&gt;
&lt;p&gt;If we use the above formulas for the special case where the dimensions of the grid
are equal, such as the 20 x 20 case, we get the simpler and more symmetric formula:&lt;/p&gt;
&lt;div class="math"&gt;$$
P = \binom{2D}{D}
$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(D\)&lt;/span&gt; is the dimension of the square grid. &lt;/p&gt;
&lt;h2 id="solving-3d-cuboid-lattice"&gt;Solving 3D Cuboid Lattice&lt;/h2&gt;
&lt;p&gt;(Note: &lt;a href="https://en.wikipedia.org/wiki/Cuboid"&gt;cuboids&lt;/a&gt; are the 3D analogue of 2D rectangles.)&lt;/p&gt;
&lt;p&gt;If we take this idea a step further, and use a slightly different combinatoric formula,
we can generalize the problem to paths through higher dimensional lattices. 
This is an approach I came up with through trial and error, 
and some experimentation with Mathematica.&lt;/p&gt;
&lt;p&gt;Suppose we have a 3D lattice, composed of 8 cubes, 2 on each side.
Now we wish to know: how many shortest Manhattan distance paths are there
through the lattice, from one corner to the other?&lt;/p&gt;
&lt;p&gt;This can be re-cast, as we did above, as the problem of counting
unique permutations of a string of the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;UURRBB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where U denotes an up move, R denotes a right move, and B denotes a back move.&lt;/p&gt;
&lt;p&gt;While we could use the multiset approach from above to describe this problem, 
it turns out that this approach is not powerful enough to describe the problem
of arbitrary 3D lattices.&lt;/p&gt;
&lt;p&gt;Let's pose the problem slightly more generally: we have C bags of moves or characters,
each of a different size. We must use each character i precisely as many times as we have 
instances in its bag C_i. How many unique permutations are there?&lt;/p&gt;
&lt;p&gt;Consider the following example string of length &lt;span class="math"&gt;\(N = 14\)&lt;/span&gt;, consisting of:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{array}
N_x &amp;amp;=&amp;amp; 4 \mbox{  UP moves} \\
N_x &amp;amp;=&amp;amp; 4 \mbox{  RIGHT moves} \\
N_x &amp;amp;=&amp;amp; 6 \mbox{  BACK moves}
\end{array}
$$&lt;/div&gt;
&lt;p&gt;These form a path through a 3D lattice of size &lt;span class="math"&gt;\(4 \times 4 \times 6\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;UUUURRRRBBBBBB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The number of unique permutations can be computed by breaking this into sub-problems.
Start by asking how many permutations there are of the string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;UUUUXXXXXXXXXX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Treating the Rs and Bs as identical). Then we get:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{N}{N_x} = \binom{N_x + N_y + N_z}{N_x} = \binom{14}{10} = 1001
$$&lt;/div&gt;
&lt;p&gt;Next, we deal with the other sub-problem, the Xs, by asking how many ways 
we can permute the following string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;RRRRBBBBBB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which is solved via another binomial coefficient. This number of permutations is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
\binom{N_y + N_z}{N_y} = \binom{N_y + N_z}{N_z} = \binom{10}{4} = \binom{10}{6} = 210
$$&lt;/div&gt;
&lt;p&gt;Now combining these, we get the overall number of permutations:&lt;/p&gt;
&lt;div class="math"&gt;$$
P = \binom{14}{4} \cdot \binom{10}{4} = 210,210
$$&lt;/div&gt;
&lt;h2 id="solving-3d-cubic-lattice-special-case"&gt;Solving 3D Cubic Lattice (Special Case)&lt;/h2&gt;
&lt;p&gt;If we have the special case of a perfect cubic lattice, the formula above reduces to the nice and symmetric:&lt;/p&gt;
&lt;div class="math"&gt;$$
\dfrac{(3n)!}{(n!)^3}
$$&lt;/div&gt;
&lt;h2 id="solving-n-dimensional-square-lattice-n-dimensional-multisets"&gt;Solving N-Dimensional Square Lattice (N-Dimensional Multisets)&lt;/h2&gt;
&lt;p&gt;Let's look at the example of a traversal of a 4D lattice, 
which we can think of as the evolution of a 3D traversal in time
(a step in the fourth dimension would represent a "pause" in the 3D traversal). &lt;/p&gt;
&lt;p&gt;Consider the traversal of a cube with dimensions &lt;span class="math"&gt;\(3 \times 4 \times 5 \times 3\)&lt;/span&gt;. Then&lt;/p&gt;
&lt;div class="math"&gt;$$
N = 3 + 4 + 5 + 3
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
N_x = 3
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
N_y = 4
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
N_z = 5
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
N_t = 3
$$&lt;/div&gt;
&lt;p&gt;A path on this 4D lattice has the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;UUURRRRBBBBBWWW
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(where &lt;span class="math"&gt;\(W\)&lt;/span&gt; denotes wait, or a step in the time dimension).&lt;/p&gt;
&lt;p&gt;The number of permutations is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
P = \binom{N_x + N_y + N_z + N_t}{N_x} \cdot \binom{N_y + N_z + N_t}{N_y} \cdot \binom{N_z + N_t}{N_z} 
$$&lt;/div&gt;
&lt;p&gt;For our specific example,&lt;/p&gt;
&lt;div class="math"&gt;$$
P = \binom{3+4+5+3}{3} \cdot \binom{4+5+3}{4} \cdot \binom{5+3}{5} = 455 \cdot 495 \cdot 56 = 12,612,600
$$&lt;/div&gt;
&lt;p&gt;Confirmed by Mathematica:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Permutations with Mathematica" src="/images/mathematica-lattice.png"&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Mathematics"></category><category term="computer science"></category><category term="mathematics"></category><category term="combinatorics"></category><category term="permutations"></category><category term="lattice paths"></category><category term="puzzles"></category><category term="project euler"></category></entry><entry><title>Computing Square Roots: Part 2: Using Continued Fractions</title><link href="https://charlesreid1.github.io/computing-square-roots-part-2-using-continued-fractions.html" rel="alternate"></link><published>2017-07-14T20:00:00-07:00</published><updated>2017-07-14T20:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-07-14:/computing-square-roots-part-2-using-continued-fractions.html</id><summary type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cf-number-systems"&gt;Number Systems and Representations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-cf"&gt;Continued Fraction Representations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-convergents"&gt;Convergents of Continued Fractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-example-coeffs"&gt;Example: Continued Fraction Coefficients of &lt;span class="math"&gt;\(\sqrt{14}\)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-example-convergents"&gt;Example: Convergents of &lt;span class="math"&gt;\(\sqrt{14}\)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-sqrt-approx"&gt;Approximating Square Roots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="cf-number-systems"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="continued-fractions"&gt;Continued Fractions&lt;/h2&gt;
&lt;p&gt;Let's start part 2 of our discussion of computing square roots by talking about 
continued fractions. When we first learn mathematics, we learn to count in the 
base 10 system: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. We can construct representations of 
all of the integers using these 10 digits, by arranging them in a different order.
So, for example, saying 125 is equivalent to saying â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cf-number-systems"&gt;Number Systems and Representations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-cf"&gt;Continued Fraction Representations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-convergents"&gt;Convergents of Continued Fractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-example-coeffs"&gt;Example: Continued Fraction Coefficients of &lt;span class="math"&gt;\(\sqrt{14}\)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-example-convergents"&gt;Example: Convergents of &lt;span class="math"&gt;\(\sqrt{14}\)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-sqrt-approx"&gt;Approximating Square Roots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="cf-number-systems"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="continued-fractions"&gt;Continued Fractions&lt;/h2&gt;
&lt;p&gt;Let's start part 2 of our discussion of computing square roots by talking about 
continued fractions. When we first learn mathematics, we learn to count in the 
base 10 system: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. We can construct representations of 
all of the integers using these 10 digits, by arranging them in a different order.
So, for example, saying 125 is equivalent to saying:&lt;/p&gt;
&lt;div class="math"&gt;$$
125 = 1 \times 10^2 + 2 \times 10^1 + 5 \times 10^0
$$&lt;/div&gt;
&lt;p&gt;Later on in our mathematical lives, we learn that we can use other integers
as our base, or &lt;strong&gt;radix&lt;/strong&gt;, by expressing every integer as the sum of various 
powers of that integer. For example, 125
can be decomposed into powers of 2. In a base 2 system, we have only two symbols,
0 and 1, so 125 can be represented as 1111101, which is equivalent to saying:&lt;/p&gt;
&lt;div class="math"&gt;$$
125 = 1 \times 2^6 + 1 \times 2^5 + 1 \times 2^4 + 1 \times 2^3 + 1 \times 2^2 + 1 \times 2
$$&lt;/div&gt;
&lt;p&gt;Note that 1111101 is close to 1111111, which is &lt;span class="math"&gt;\(2^7 = 128\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;As Knuth points out in his &lt;u&gt;Art of Computer Programming&lt;/u&gt;, Part II:&lt;/p&gt;
&lt;blockquote&gt;
&lt;i&gt;"If our ancestors had invented arithmetic by counting with their two fists
or their eight fingers, instead of their ten "digits," we would never have to 
worry about writing binary-decimal conversion routines. (And we would perhaps
never have learned as much about number systems.)
&lt;/i&gt;
&lt;/blockquote&gt;

&lt;p&gt;This idea of an alternative radix to the traditional base 10 leads to entirely new 
number systems with their own interesting properties. However, it goes even further - 
as a high school student in 1955, Donald Knuth invented a number system with an
imaginary, 4-symbol radix in base &lt;span class="math"&gt;\(2i\)&lt;/span&gt; (where &lt;span class="math"&gt;\(i = \sqrt{-1}\)&lt;/span&gt;), called 
the &lt;a href="https://en.wikipedia.org/wiki/Quater-imaginary_base"&gt;quater-imaginary base&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are also number systems that use an irrational radix, such as 
&lt;a href="https://en.wikipedia.org/wiki/Golden_ratio_base"&gt;phinary&lt;/a&gt;, which uses the golden ratio
as its radix. Thus, the Golden Ratio &lt;span class="math"&gt;\(\phi = \dfrac{1 + \sqrt{5}}{2}\)&lt;/span&gt; becomes &lt;span class="math"&gt;\(\phi = 1\)&lt;/span&gt;,
&lt;span class="math"&gt;\(2 = \phi^1 + \phi^-2\)&lt;/span&gt; becomes &lt;span class="math"&gt;\(2 = 10.01\)&lt;/span&gt;, &lt;span class="math"&gt;\(5 = \phi^3 + \phi^{-1} + \phi^{-4}\)&lt;/span&gt; 
becomes &lt;span class="math"&gt;\(5 = 1000.1001\)&lt;/span&gt;, and so on. In the case of the irrational number &lt;span class="math"&gt;\(\sqrt{5}\)&lt;/span&gt;, 
this number becomes a rational number in base &lt;span class="math"&gt;\(\phi\)&lt;/span&gt;: &lt;span class="math"&gt;\(\sqrt{5} = \phi^2 + \phi^{-1}\)&lt;/span&gt; 
becomes &lt;span class="math"&gt;\(\sqrt{5} = 10.1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The single central idea behind these number systems is that the abstract 
set of integers &lt;span class="math"&gt;\(\mathbb{Z}\)&lt;/span&gt; are being represented on an &lt;a href="https://en.wikipedia.org/wiki/Ring_(algebra)"&gt;algebraic ring&lt;/a&gt;,
which is a fundamental mathematical object. Initially the idea of a ring
may seem strange, but it creates the foundations of modern number theory.&lt;/p&gt;
&lt;p&gt;&lt;a name="cf-cf"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="continued-fraction-representations"&gt;Continued Fraction Representations&lt;/h2&gt;
&lt;p&gt;(Note that while the next two sections will have a lot of "magic numbers," we will
step through the procedure in the following sections, and it will be more clear
where these numbers come from. There is also an excellent continued fractions calculator
available online &lt;a href="http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/cfCALC.html"&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;We can use other kinds of mathematical objects to represent different numbers.
Another technique is to use continued fractions to represent numbers.
These are well-studied mathematical objects that date back to Euclid's &lt;u&gt;Elements&lt;/u&gt;.
The basic idea is to create a recursive expression that involves fractions nested
beneath other fractions:&lt;/p&gt;
&lt;div class="math"&gt;$$
a_0+\cfrac{1}{a_1 +\cfrac{1}{a_2 +\cfrac{1}{
      \begin{array}{@{}c@{}c@{}c@{}}
        a_3 + {}\\ &amp;amp;\ddots\\ &amp;amp;&amp;amp;{}+ \cfrac{1}{a_n}
      \end{array}
}}}
$$&lt;/div&gt;
&lt;p&gt;For ease of writing, this is often written as:&lt;/p&gt;
&lt;div class="math"&gt;$$
a_0 + \dfrac{1}{a_1 +} \quad \dfrac{1}{a_2 +} \quad \dfrac{1}{a_3 + } \quad \dots \quad \dfrac{1}{a_{n-1} + } \quad \dfrac{1}{a_n}
$$&lt;/div&gt;
&lt;p&gt;or, even shorter,&lt;/p&gt;
&lt;div class="math"&gt;$$
[a_0; a_1, a_2, a_3, \dots]
$$&lt;/div&gt;
&lt;p&gt;These variables &lt;span class="math"&gt;\(a_i\)&lt;/span&gt; are called the &lt;em&gt;terms&lt;/em&gt; of the continued fraction.
Continued fractions can be used to represent rational numbers, in which case the continued fraction
representation terminates after a finite number of terms. For example, &lt;span class="math"&gt;\(\dfrac{125}{3} = [41; 1, 2]\)&lt;/span&gt;, &lt;/p&gt;
&lt;div class="math"&gt;$$
\dfrac{125}{3} = 41 +\cfrac{1}{1 +\cfrac{1}{2}} 
$$&lt;/div&gt;
&lt;p&gt;Continued fractions can also be used to represent irrational numbers, 
in which case the continued fraction representation is a repeating pattern
of variable length. For example, &lt;span class="math"&gt;\(\sqrt{14} = [3; \overline{1,2,1,6}]\)&lt;/span&gt;, where
the line over the last digits indicates that the pattern repeats infinitely as
&lt;span class="math"&gt;\(1, 2, 1, 6, 1, 2, 1, 6, 1, 2, 1, 6, \dots\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
3 + \cfrac{1}{
    1 + \cfrac{1}{
        2+\cfrac{1}{
            1+\cfrac{1}{
                6+\cfrac{1}{
                    \begin{array}{@{}c@{}c@{}c@{}}
                        1 + {}\\ &amp;amp;\ddots\\ &amp;amp;&amp;amp;{}
                    \end{array}
                }
            }
        }
    }
}
$$&lt;/div&gt;
&lt;p&gt;A few useful properties of these patterns, for square roots, are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, the integer portion (3 in the case above) is the largest integer 
    whose square is less than the number (14).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second, the sequence of integers that repeats is always palindromic,
    and it always begins repeating once it reaches a value of &lt;span class="math"&gt;\(2 a_0\)&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are a few more square roots represented as continued fractions, to help illustrate
the above properties:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{array}
_ \sqrt{19} &amp;amp;=&amp;amp; [4; \overline{2, 1, 3, 1, 2, 8}] \\
\sqrt{115} &amp;amp;=&amp;amp; [10; \overline{1, 2, 1, 1, 1, 1, 1, 2, 1, 20}] \\
\sqrt{988} &amp;amp;=&amp;amp; [31; \overline{2, 3, 4, 1, 20, 6, 1, 14, 1, 6, 20, 1, 4, 3, 2, 62}]
\end{array}
$$&lt;/div&gt;
&lt;p&gt;Next, we'll cover how to turn these terms &lt;span class="math"&gt;\([a_0; a_1, a_2, \dots]\)&lt;/span&gt; into rational
numbers &lt;span class="math"&gt;\(\frac{P}{Q}\)&lt;/span&gt;. These fractions are called &lt;em&gt;convergents&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="convergents"&gt;Convergents&lt;/h2&gt;
&lt;p&gt;We will show an example of how to compute a continued fraction in the next section, 
but we will cover one additional topic first. In order to be useful, we need some way
to evaluate the continued fraction representation. One way to do this is to repeatedly
compute common denominators, perform the fraction addition, and inert the result. 
The fraction that results is equivalent to the continued fraction expression, but is 
a rational number and therefore easier to evaluate. &lt;/p&gt;
&lt;p&gt;It turns out that this rational number is a very important quantity called the &lt;strong&gt;convergent&lt;/strong&gt; 
of &lt;span class="math"&gt;\(\sqrt{n}\)&lt;/span&gt;. However, it is cumbersome to perform the operation of de-rationalizing 
the continued fraction. There is a useful shortcut that takes the form of a recurrence relation.&lt;/p&gt;
&lt;p&gt;The &lt;span class="math"&gt;\(n^{th}\)&lt;/span&gt; convergent is defined as the rational number that results when the continued fraction
representation is carried out to &lt;span class="math"&gt;\(n\)&lt;/span&gt; terms, then expanded and simplified into a rational number.
If a number like &lt;span class="math"&gt;\(\sqrt{19}\)&lt;/span&gt; has an infinite continued fraction representation, it means we can compute
progressively more accurate rational approximations. &lt;/p&gt;
&lt;p&gt;For example, we know from the above that &lt;span class="math"&gt;\(\sqrt{19} = [4; \overline{2,1,3,1,2,8}]\)&lt;/span&gt;. Using this fact,
we can use successive terms to write successive linear approximations:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{array}
_ \sqrt{19} &amp;amp;\approx&amp;amp; 4 \\
\quad       &amp;amp;\approx&amp;amp; 4 + \frac{1}{2+0} \approx \frac{9}{2} \\
\quad       &amp;amp;\approx&amp;amp; 4 + \cfrac{1}{2+\cfrac{1}{1}} \approx \frac{13}{3} \\
\quad       &amp;amp;\approx&amp;amp; 4 + \cfrac{1}{2+\cfrac{1}{\cfrac{1}{3}}} \approx \frac{48}{11} \\
\end{array}
$$&lt;/div&gt;
&lt;p&gt;If we continue this sequence, we get a slew of approximations (there are also additional approximations between
each of &lt;em&gt;these&lt;/em&gt; terms...):&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{array}
_ \sqrt{19} &amp;amp;\approx&amp;amp; \frac{61}{14} \\
\quad       &amp;amp;\approx&amp;amp; \frac{170}{39} \\
\quad       &amp;amp;\approx&amp;amp; \frac{1421}{326} \\
\quad       &amp;amp;\approx&amp;amp; \frac{3012}{691} \\
\quad       &amp;amp;\approx&amp;amp; \frac{4433}{1017} \\
\sqrt{19}   &amp;amp;\approx&amp;amp; \frac{16311}{3742}
\end{array}
$$&lt;/div&gt;
&lt;p&gt;The numerator and denominator of the &lt;span class="math"&gt;\(k^{th}\)&lt;/span&gt; convergent are denoted &lt;span class="math"&gt;\(P_k\)&lt;/span&gt; and &lt;span class="math"&gt;\(Q_k\)&lt;/span&gt;, 
respectively, and can be computed through the recurrence relation:&lt;/p&gt;
&lt;div class="math"&gt;$$
\dfrac{P_k}{Q_k} = \dfrac{P_{k-2} + a_k P_{k-1}}{Q_{k-2} + a_k Q_{k-1}}
$$&lt;/div&gt;
&lt;p&gt;where the initial values are &lt;span class="math"&gt;\(P_{-2} = 0, P_{-1} = 1\)&lt;/span&gt; for P and
&lt;span class="math"&gt;\(Q_{-2} = 1, Q_{-1} = 0\)&lt;/span&gt; for Q
(making the first convergent equal to &lt;span class="math"&gt;\(\frac{a_0}{1}\)&lt;/span&gt;).
This can be used to compute successive approximations.
Note that on a computational platform, you will quickly reach the end 
of your accuracy limit, so care must be taken for continued fraction
sequences of longer than about 10 terms.&lt;/p&gt;
&lt;p&gt;&lt;a name="cf-example-coeffs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="example-continued-fraction-coefficients-of-sqrt14"&gt;Example: Continued Fraction Coefficients of &lt;span class="math"&gt;\(\sqrt{14}\)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Let's walk through an example of how to compute the continued fraction 
representation &lt;span class="math"&gt;\([a_0; a_1, a_2, \dots, a_n]\)&lt;/span&gt; for a square root,
and how to compute the &lt;span class="math"&gt;\(k^{th}\)&lt;/span&gt; convergent.&lt;/p&gt;
&lt;p&gt;Begin with the square root of a given number. For variety, we will use &lt;span class="math"&gt;\(\sqrt{14}\)&lt;/span&gt;.
We begin by computing the nearest integer to 14's square root. If we don't have a 
square root routine, we can try integers by squaring them, and find the last integer
that, when squared, is less than 14. This is &lt;span class="math"&gt;\(a_0 = 3\)&lt;/span&gt;. To interpret, &lt;span class="math"&gt;\(a_0\)&lt;/span&gt; is 
the largest integer portion of our square root, with the residual portion 
&lt;span class="math"&gt;\(\sqrt{14}-3\)&lt;/span&gt; the portion that will be represented by the continued fraction.&lt;/p&gt;
&lt;p&gt;Here's what we have:&lt;/p&gt;
&lt;div class="math"&gt;$$
\sqrt{14} = 3 + (\sqrt{14} - 3) \\
$$&lt;/div&gt;
&lt;p&gt;We can drop the residual for an initial rational approximation of &lt;span class="math"&gt;\(\sqrt{14} \approx 13\)&lt;/span&gt;,
but we can do better by going another step.&lt;/p&gt;
&lt;p&gt;We recognize that the residual, which we want write in the form &lt;span class="math"&gt;\(\dfrac{1}{\mbox{something}}\)&lt;/span&gt;,
can be written as &lt;span class="math"&gt;\(\dfrac{1}{\dfrac{1}{\sqrt{14}-3}}\)&lt;/span&gt;: &lt;/p&gt;
&lt;div class="math"&gt;$$
\sqrt{14} = 3 + \dfrac{1}{ \frac{1}{\sqrt{14}-3} }
$$&lt;/div&gt;
&lt;p&gt;Now examine the inverse residual term &lt;span class="math"&gt;\(\dfrac{1}{\sqrt{14}-3}\)&lt;/span&gt; for step 1,
which we will call &lt;span class="math"&gt;\(r_1\)&lt;/span&gt;. 
Repeat the procedure we performed above: find the nearest integer 
portion to this quantity. In this case,&lt;/p&gt;
&lt;div class="math"&gt;$$
\dfrac{1}{r_1} = \dfrac{1}{\sqrt{14}-3} = 1.34833...
$$&lt;/div&gt;
&lt;p&gt;Now split this into its integer portion, which becomes &lt;span class="math"&gt;\(a_1\)&lt;/span&gt;, 
and its remaining fractional portion, .34833...:&lt;/p&gt;
&lt;div class="math"&gt;$$
a_1 = floor( \dfrac{1}{r_1} )
$$&lt;/div&gt;
&lt;p&gt;and the new residual &lt;span class="math"&gt;\(r\)&lt;/span&gt; is written in terms of the old residual
and the coefficent &lt;span class="math"&gt;\(a_i\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
r_2 = \dfrac{1}{r_1} - a_1
$$&lt;/div&gt;
&lt;p&gt;Generalizing, we get an iterative procedure to determine the 
coefficients &lt;span class="math"&gt;\(a_i\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
a_i = floor( \dfrac{1}{r_i} )
$$&lt;/div&gt;
&lt;p&gt;followed by:&lt;/p&gt;
&lt;div class="math"&gt;$$
r_{i+1} = \dfrac{1}{r_i} - a_i
$$&lt;/div&gt;
&lt;p&gt;where the initial values &lt;span class="math"&gt;\(a_0, r_0\)&lt;/span&gt; are computed as mentioned above,
and the rest of the values in the sequence follow.&lt;/p&gt;
&lt;p&gt;Continuing for &lt;span class="math"&gt;\(\sqrt{14}\)&lt;/span&gt;, we get:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{array}
_ a_0 &amp;amp;=&amp;amp; 3 \\
r_1 &amp;amp;=&amp;amp; \dfrac{1}{\sqrt{14}-3} = 1.348331 \\
a_1 &amp;amp;=&amp;amp; 1 \\
r_2 &amp;amp;=&amp;amp; \dfrac{1}{.348331} = 2.870829 \\
a_2 &amp;amp;=&amp;amp; 2 \\
r_3 &amp;amp;=&amp;amp; \dfrac{1}{0.870829} = 1.1483311 \\
a_3 &amp;amp;=&amp;amp; 1 \\
r_4 &amp;amp;=&amp;amp; \dfrac{1}{0.1483311} = 6.741676 \\
a_4 &amp;amp;=&amp;amp; 6
\end{array}
$$&lt;/div&gt;
&lt;p&gt;It is at this point that we see &lt;span class="math"&gt;\(2 a_0\)&lt;/span&gt; and know that our (palindromic) 
sequence will repeat. (When we evaluate the convergents, we will utilize
the palindromic nature of this sequence.)&lt;/p&gt;
&lt;p&gt;Collecting these terms gives us the expected result: &lt;span class="math"&gt;\(\sqrt{14} = [3; 1, 2, 1, 6]\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This gives us an algorithmic procedure for computing the 
continued fraction representation &lt;span class="math"&gt;\([a_0; a_1, a_2, a_n]\)&lt;/span&gt; of a number -
with the important caveat, as mentioned above, that some integers
have sequences that are extremely long before they repeat, making it 
impossible to find the full continued fraction representation 
without arbitrary precision libraries.&lt;/p&gt;
&lt;p&gt;That being said, if you are only interested in the first 10 or so
terms of the continued fraction representation, here is a 
static Java method to compute them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="cm"&gt;/** Find the (shorter than 10) continued fraction sequence for sqrt(n). &lt;/span&gt;
&lt;span class="cm"&gt;     * This returns a list of integers, [a0, a1, a2, ...]&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * @params n Number to compute the square root of.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;continuedFractionSqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isPerfectSquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error: n cannot be a perfect square.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;niters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// handbrake&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ai&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;remainder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;coeffs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Fencepost&lt;/span&gt;
        &lt;span class="n"&gt;remainder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;niters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;remainder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;ai&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;remainder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ai&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ai&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;coeffs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/** Check if x is a perfect square. */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isPerfectSquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/** Find the floor of a double. */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is a short program that uses this routine to compute 
the continued fraction representation of &lt;span class="math"&gt;\(\sqrt{14}\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SquareRootCF&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sqrt(14) = &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Convergents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;continuedFractionSqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sqrt(19) = &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Convergents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;continuedFractionSqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the corresponding output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ javac SquareRootCF.java &amp;amp;&amp;amp; java SquareRootCF
sqrt(14) = [3, 1, 2, 1, 6]
sqrt(19) = [4, 2, 1, 3, 1, 2, 8]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="cf-example-convergents"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="example-convergents-of-sqrt14"&gt;Example: Convergents of &lt;span class="math"&gt;\(\sqrt{14}\)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;We now turn to the task of computing the convergents of the continued fraction,
which will yield successive rational numbers that are progressively better approximations
to &lt;span class="math"&gt;\(\sqrt{14}\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;We start with the expression given above for the &lt;span class="math"&gt;\(k^{th}\)&lt;/span&gt; convergent: &lt;/p&gt;
&lt;div class="math"&gt;$$
\dfrac{P_k}{Q_k} = \dfrac{P_{k-2} + a_k P_{k-1}}{Q_{k-2} + a_k Q_{k-1}}
$$&lt;/div&gt;
&lt;p&gt;with initial values &lt;span class="math"&gt;\(P_{-2} = 0, P_{-1} = 1\)&lt;/span&gt; for P and
&lt;span class="math"&gt;\(Q_{-2} = 1, Q_{-1} = 0\)&lt;/span&gt; for Q. This yields 
the first "real" convergent:&lt;/p&gt;
&lt;div class="math"&gt;$$
\dfrac{P_1}{Q_1} = \dfrac{1 + 1 \times a_1}{0 + a_1 \times 1} = \dfrac{1 + 3}{0 + 1} = \dfrac{4}{1}
$$&lt;/div&gt;
&lt;p&gt;Successive approximations will use the values &lt;span class="math"&gt;\(P_1\)&lt;/span&gt; and &lt;span class="math"&gt;\(Q_1\)&lt;/span&gt; to compute
the next convergents.&lt;/p&gt;
&lt;div class="math"&gt;$$
\dfrac{P_2}{Q_2} = \dfrac{P_0 + P_1 a_1}{Q_0 + Q_1 a_1} = \frac{11}{3}
$$&lt;/div&gt;
&lt;p&gt;Continuing in this fashion gives:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{array}
\quad \dfrac{P_2}{Q_2} &amp;amp;=&amp;amp; \dfrac{15}{4} \\
\dfrac{P_3}{Q_3} &amp;amp;=&amp;amp; \dfrac{101}{27}
\end{array}
$$&lt;/div&gt;
&lt;p&gt;and so on. This recurrence relation is easy to code up. It starts with 
the continued fraction coefficients for the given square root, 
and computes successive values of P and Q. The number of terms computed
is specified by the user. Once it reaches the end of the sequence of 
continued fraction coefficients, it can start at the beginning again 
(the sequence is palindromic). &lt;/p&gt;
&lt;p&gt;Finally, it returns the values of &lt;span class="math"&gt;\(P_k\)&lt;/span&gt; and &lt;span class="math"&gt;\(Q_k\)&lt;/span&gt;, and of the 
successive convergents:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{array}
_ \sqrt{14} &amp;amp;\approx&amp;amp; 3 \\
&amp;amp;\approx&amp;amp; 4 \\
&amp;amp;\approx&amp;amp; 11/3 \\
&amp;amp;\approx&amp;amp; 15/4 \\
&amp;amp;\approx&amp;amp; 101/27 \\
&amp;amp;\approx&amp;amp; 116/31 \\
&amp;amp;\approx&amp;amp; 333/89 \\
&amp;amp;\approx&amp;amp; 449/120 \\
&amp;amp;\approx&amp;amp; 3027/809 \\
&amp;amp;\approx&amp;amp; 3476/929 \\
&amp;amp;\approx&amp;amp; 9979/2667 
\end{array}
$$&lt;/div&gt;
&lt;p&gt;Here is a static method in Java that will compute the convergents
of a square root:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="cm"&gt;/** &lt;/span&gt;
&lt;span class="cm"&gt;     * Compute the convergents (rational representation of&lt;/span&gt;
&lt;span class="cm"&gt;     * continued fraction).&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * This uses the recurrence relation:&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * P_n     P_n-2 + a_n P_n-1&lt;/span&gt;
&lt;span class="cm"&gt;     * ---- = -----------------&lt;/span&gt;
&lt;span class="cm"&gt;     *  Q_n    Q_n-2 + a_n Q_n-1&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;convergents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nterms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;convergents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cfrepr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;continuedFractionSqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Initial values for convergent recurrence relation&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;Pnm2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// P_{n-2}&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;Pnm1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;Qnm2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;Qnm1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Term 0 is the constant value a0.&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;accessindex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;nterms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cfrepr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accessindex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pnm2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Pnm1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;Q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Qnm2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Qnm1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;Pnm2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pnm1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;Pnm1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;Qnm2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Qnm1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;Qnm1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accessindex&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;cfrepr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="c1"&gt;// Ensure we keep repeating the sequence&lt;/span&gt;
                &lt;span class="c1"&gt;// if the sequence has fewer terms than&lt;/span&gt;
                &lt;span class="c1"&gt;// the user asks for.&lt;/span&gt;
                &lt;span class="c1"&gt;// This allows us to get really good&lt;/span&gt;
                &lt;span class="c1"&gt;// approximations for numbers.&lt;/span&gt;
                &lt;span class="c1"&gt;// This only works because the sequence&lt;/span&gt;
                &lt;span class="c1"&gt;// is palindromic.&lt;/span&gt;
                &lt;span class="n"&gt;accessindex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;accessindex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;convergents&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;convergents&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;convergents&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is a simple driver program that prints out several
convergents for &lt;span class="math"&gt;\(\sqrt{14}\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SquareRootCF&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;conv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Convergents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;convergents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Convergent &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;conv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;conv&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the corresponding console output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ javac SquareRootCF.java &amp;amp;&amp;amp; java SquareRootCF
Convergent 1: 4/1
Convergent 2: 11/3
Convergent 3: 15/4
Convergent 4: 101/27
Convergent 5: 116/31
Convergent 6: 333/89
Convergent 7: 449/120
Convergent 8: 3027/809
Convergent 9: 3476/929
Convergent 10: 9979/2667
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="cf-sqrt-refs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Hardy, G. H. &lt;u&gt;A Course of Pure Mathematics.&lt;/u&gt; 
Cambridge University Press, Tenth Edition (1908-1967).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Knuth, Donald. &lt;u&gt;The Art of Computer Programming, Volume 2: Seminumerical Algorithms.&lt;/u&gt; 
Addison-Wesley Publishing Company, Second Edition (1975).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Mathematics"></category><category term="computer science"></category><category term="java"></category><category term="mathematics"></category><category term="number theory"></category><category term="square roots"></category><category term="numerical methods"></category><category term="continued fractions"></category><category term="irrational numbers"></category></entry><entry><title>Computing Square Roots: Part 1: Using Newton's Method</title><link href="https://charlesreid1.github.io/computing-square-roots-part-1-using-newtons-method.html" rel="alternate"></link><published>2017-07-14T18:00:00-07:00</published><updated>2017-07-14T18:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-07-14:/computing-square-roots-part-1-using-newtons-method.html</id><summary type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-roots"&gt;Newton's Method for Finding Roots of Equations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-square-roots"&gt;Newton's Method for Finding Square Roots&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-program"&gt;Newton's Method for Finding Square Roots: Program&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-accuracy"&gt;Accuracy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-speed"&gt;Speed&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-next"&gt;Next Steps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-refs"&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="newton-roots"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="newtons-method-for-finding-roots-of-equations"&gt;Newton's Method for Finding Roots of Equations&lt;/h2&gt;
&lt;p&gt;Suppose we have a function &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; and we want to 
compute values of &lt;span class="math"&gt;\(x\)&lt;/span&gt; for which &lt;span class="math"&gt;\(f(x)=0\)&lt;/span&gt;. These values 
of &lt;span class="math"&gt;\(x\)&lt;/span&gt; are called the &lt;strong&gt;roots&lt;/strong&gt; of &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We can compute the roots using Newton's Method,
which utilizes the derivative of the function
to iteratively compute the roots of the function.&lt;/p&gt;
&lt;p&gt;Newton's method begins with an initial guess.
It evaluates the derivative â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-roots"&gt;Newton's Method for Finding Roots of Equations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-square-roots"&gt;Newton's Method for Finding Square Roots&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-program"&gt;Newton's Method for Finding Square Roots: Program&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-accuracy"&gt;Accuracy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-speed"&gt;Speed&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-next"&gt;Next Steps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-refs"&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="newton-roots"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="newtons-method-for-finding-roots-of-equations"&gt;Newton's Method for Finding Roots of Equations&lt;/h2&gt;
&lt;p&gt;Suppose we have a function &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; and we want to 
compute values of &lt;span class="math"&gt;\(x\)&lt;/span&gt; for which &lt;span class="math"&gt;\(f(x)=0\)&lt;/span&gt;. These values 
of &lt;span class="math"&gt;\(x\)&lt;/span&gt; are called the &lt;strong&gt;roots&lt;/strong&gt; of &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We can compute the roots using Newton's Method,
which utilizes the derivative of the function
to iteratively compute the roots of the function.&lt;/p&gt;
&lt;p&gt;Newton's method begins with an initial guess.
It evaluates the derivative of the fnction at the 
initial guess, which gives the slope of the tangent line,
and computes the root of the tangent line as the next
approximation of the root of the function.&lt;/p&gt;
&lt;p&gt;This is based on the point-slope formula,&lt;/p&gt;
&lt;div class="math"&gt;$$
y - y_0 = m(x - x_0) 
$$&lt;/div&gt;
&lt;p&gt;Now the left side becomes &lt;/p&gt;
&lt;div class="math"&gt;$$
f(x) - f(x_0) = f'(x_0)(x - x_0)
$$&lt;/div&gt;
&lt;p&gt;and at the root, we know &lt;span class="math"&gt;\(f(x)=0\)&lt;/span&gt;, so rearranging this equation
into an expression for the root &lt;span class="math"&gt;\(x\)&lt;/span&gt; gives: &lt;/p&gt;
&lt;div class="math"&gt;$$
x = x_0 - \dfrac{f(x_0)}{f'(x_0)}
$$&lt;/div&gt;
&lt;p&gt;Now, this is the equation for the next approximation for the root.
To turn this into an iterative procedure, we write this as&lt;/p&gt;
&lt;div class="math"&gt;$$
x_{i+1} = x_{i} - \dfrac{f(x_i)}{f'(x_i)}
$$&lt;/div&gt;
&lt;p&gt;Newton's Method then allows us to evaluate the 
above expression as many times as we would like
to achive the desired accuracy. &lt;/p&gt;
&lt;p&gt;Two caveats with Newton's Method: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The function must be relatively well-behaved; 
    Newton's Method does not converge for functions with
    large, high-order derivatives.&lt;/li&gt;
&lt;li&gt;The convergence of the method depends on the accuracy 
    of the initial guess. If you can make a good guess, do it!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="newton-square-roots"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="newtons-method-for-finding-square-roots"&gt;Newton's Method for Finding Square Roots&lt;/h2&gt;
&lt;p&gt;Note that we can use the procedure and equation from above
to compute the numerical value of a given function to an arbitrary
degree of accuracy, so long as we have the derivative (and a program 
that can keep track of arbitrary digits).&lt;/p&gt;
&lt;p&gt;Suppose we want to use Newton's Method to compute &lt;span class="math"&gt;\(\sqrt{2}\)&lt;/span&gt;.
Then we can solve for the roots of the following function:&lt;/p&gt;
&lt;div class="math"&gt;$$
f(x) = x^2 - a
$$&lt;/div&gt;
&lt;p&gt;for &lt;span class="math"&gt;\(a = 2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Note that the derivative of this function is computed using the power rule,
which is trivial to implement, so we can also use this method to compute
general &lt;span class="math"&gt;\(n^{th}\)&lt;/span&gt; roots of &lt;span class="math"&gt;\(a\)&lt;/span&gt;, by solving for roots of:&lt;/p&gt;
&lt;div class="math"&gt;$$
f(x) = x^n - a
$$&lt;/div&gt;
&lt;p&gt;For a monomial with nonzero power, the derivative is always l&lt;span class="math"&gt;\(f'(x) = n x^{n-1}\)&lt;/span&gt;, 
so in the square root case we have &lt;span class="math"&gt;\(f'(x) = 2x\)&lt;/span&gt;. Now we plug these two functions
into the iterative formula for Newton's Method to get:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{array}
a x_{i+1} &amp;amp;=&amp;amp; x_{i} - \dfrac{f(x_n)}{f'(x_n)} \\
x_{i+1} &amp;amp;=&amp;amp; x_{i} - \dfrac{x_i^2 - a}{2 x_i }
\end{array}
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="newton-program"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="newtons-method-for-finding-square-roots-program"&gt;Newton's Method for Finding Square Roots: Program&lt;/h2&gt;
&lt;p&gt;This can be implemented in a programming language to yield an iterative
method for computing square roots. We can either specify a tolerance (better),
or a number of iterations. Here is a static method for computing
a square root using Newton's method. The user specifies the value of &lt;span class="math"&gt;\(a\)&lt;/span&gt;,
the number they want to compute the square root of; &lt;span class="math"&gt;\(x_0\)&lt;/span&gt;, the initial guess;
and a tolerance, which controls the number of decimal places of accuracy of the 
final answer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="cm"&gt;/** Compute a square root using Newton&amp;#39;s Method, to a specified tolerance.&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * @param a Compute the square root of a.&lt;/span&gt;
&lt;span class="cm"&gt;     * @param x0 Initial guess.&lt;/span&gt;
&lt;span class="cm"&gt;     * @param tol Tolerance (stopping criteria).&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;nmsqrttol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;tol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xip1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xip1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="n"&gt;xip1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;xip1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xip1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;xip1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(There is no check for infinite loops because our function is a smooth
polynomial and Newton's Method will always converge.) &lt;/p&gt;
&lt;p&gt;Here is sample output from a program that varies the tolerance and prints
the corresponding value of the square root that was computed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ javac SquareRoot.java &amp;amp;&amp;amp; java SquareRoot
Actual value sqrt(2) = 1.4142135623730951
Testing Newton&amp;#39;s Method, Specifying Tolerance:
Tol         sqrt(2)
0.1         1.4166666666666667
0.01        1.4142156862745099
0.001       1.4142135623746899
0.0001      1.4142135623746899
1e-05       1.4142135623746899
1e-06       1.4142135623730951
1e-07       1.4142135623730951
1e-08       1.4142135623730951
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="newton-accuracy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="accuracy"&gt;Accuracy&lt;/h2&gt;
&lt;p&gt;Now that we've coded up Newton's Method, we can determine the number of accurate 
digits. There are a couple of ways to do this, but I went with a string comparison 
method. I start with a text file containing thousands of digits of the square root of 2,
then I compute the square root of 2 using Newton's Method. The longest common substring
gives me the number of accurate digits, plus "1.", so if I subtract 2 I get the 
total number of accurate digits after the decimal place. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;javac SquareRoot.java &amp;amp;&amp;amp; java SquareRoot
Tolerance = 0.1     Number of accurate digits = 2
Tolerance = 0.01        Number of accurate digits = 5
Tolerance = 0.001       Number of accurate digits = 11
Tolerance = 0.0001      Number of accurate digits = 11
Tolerance = 1e-05       Number of accurate digits = 11
Tolerance = 1e-06       Number of accurate digits = 15
Tolerance = 1e-07       Number of accurate digits = 15
Tolerance = 1e-08       Number of accurate digits = 15
Tolerance = 1e-09       Number of accurate digits = 15
Tolerance = 1e-10       Number of accurate digits = 15
Tolerance = 1e-11       Number of accurate digits = 15
Tolerance = 1e-12       Number of accurate digits = 15
Tolerance = 1e-13       Number of accurate digits = 15
Tolerance = 1e-14       Number of accurate digits = 15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="newton-speed"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="speed"&gt;Speed&lt;/h2&gt;
&lt;p&gt;It is also important to measure performance, in the form of speed. How fast is 
Newton's Method relative to the built-in square root function in the math library?&lt;/p&gt;
&lt;p&gt;Turns out the performance of Newton's Method is much worse than the built-in math library's 
square root function. The Newton's Method defined above is around 100 times slower. 
Here are the results of a simple timing test, in which we compute the square root
10 million times, timing how long it takes, and divide by the number of operations
to yield the time per operation (or rather, as it is slightly easier to grasp, 
the time per 1k operations);:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    /** Time Newton&amp;#39;s Method.
     *
     * How long does it take to achieve 10 digits of accuracy? */
    public static void testTime() { 

        int Nops;
        double a;
        double initialGuess;
        double tol;
        double time;

        Tim tim;

        Nops = 10000000;
        a = 2;
        initialGuess = 1;
        tol = 1E-8;
        tim = new Tim();
        tim.tic();
        for(int i=0; i&amp;lt;Nops; i++) { 
            nmsqrttol(a, initialGuess, tol);
        }
        tim.toc();
        time = 1000*tim.elapsedms()/Nops;
        System.out.println(&amp;quot;Newton&amp;#39;s Method Time (ms) per 1k operations: &amp;quot;+time);


        Nops = 10000000;
        a = 2;
        tim = new Tim();
        tim.tic();
        for(int i=0; i&amp;lt;Nops; i++) { 
            Math.sqrt(a);
        }
        tim.toc();
        time = 1000*tim.elapsedms()/Nops;
        System.out.println(&amp;quot;Math Library Time (ms) per 1k operations: &amp;quot;+time);

    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;javac SquareRoot.java &amp;amp;&amp;amp; java SquareRoot
Newton&amp;#39;s Method Time (ms) per 1k operations: 0.016
Math Library Time (ms) per 1k operations: 3.0E-4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While the accuracy of Newton's Method for square roots may not be that great,
it ain't bad, for 9 lines of code. &lt;/p&gt;
&lt;p&gt;&lt;a name="newton-next"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;In a blog post to follow, we'll compare the speed and accuracy of square root computations using Newton's Method
to an alternative approach involving the continued fraction representation of square roots. This particularly interesting
technique can also be used to solve the Pell equation, a quadratic Diophantine equation of the form:&lt;/p&gt;
&lt;div class="math"&gt;$$
x^2 - D y^2 = 1
$$&lt;/div&gt;
&lt;p&gt;But more on that in a future post...&lt;/p&gt;
&lt;p&gt;&lt;a name="newton-refs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Press, William et al. "Numerical Recipes in C." Cambridge Unviersity Press (2007).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"SquareRoot.java". Charles Reid. git.charlesreid1.com.
&amp;lt;&lt;a href="https://git.charlesreid1.com/cs/java/src/master/numerics/newtons-method"&gt;https://git.charlesreid1.com/cs/java/src/master/numerics/newtons-method&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Mathematics"></category><category term="computer science"></category><category term="java"></category><category term="mathematics"></category><category term="number theory"></category><category term="square roots"></category><category term="numerical methods"></category><category term="newtons method"></category><category term="irrational numbers"></category></entry><entry><title>CSE 143 Final Project: Hilbert Sort: 3. The Code</title><link href="https://charlesreid1.github.io/cse-143-final-project-hilbert-sort-3-the-code.html" rel="alternate"></link><published>2017-06-30T20:00:00-07:00</published><updated>2017-06-30T20:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-06-30:/cse-143-final-project-hilbert-sort-3-the-code.html</id><summary type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;p&gt;This is the third in a series of three posts 
detailing the Hilbert Sort problem,
its solution, and its implementation.
This post deals with the code to solve the
Hilbert Sort problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#hilbert3-pseudocode"&gt;Pseudocode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#hilbert3-code"&gt;Code&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#hilbert3-utility"&gt;Utility Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert3-recursive"&gt;Recursive Sort Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert3-main"&gt;Main Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#hilbert2-references"&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="hilbert3-pseudocode"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="hilbert-sort-pseudocode"&gt;Hilbert Sort: Pseudocode&lt;/h1&gt;
&lt;p&gt;From our prior post, here is the psudocode for our Hilbert Sort function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define hilbert_sort( unsorted queue, square dimension ):
    create southwest queue
    create northwest queue
    create northeast queue
    create southeast queue
    for each point:
        if in southwest:
            create new point using X -&amp;gt; Y, Y -&amp;gt; X
            add to southwest queue
        if in â€¦&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;p&gt;This is the third in a series of three posts 
detailing the Hilbert Sort problem,
its solution, and its implementation.
This post deals with the code to solve the
Hilbert Sort problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#hilbert3-pseudocode"&gt;Pseudocode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#hilbert3-code"&gt;Code&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#hilbert3-utility"&gt;Utility Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert3-recursive"&gt;Recursive Sort Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert3-main"&gt;Main Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#hilbert2-references"&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="hilbert3-pseudocode"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="hilbert-sort-pseudocode"&gt;Hilbert Sort: Pseudocode&lt;/h1&gt;
&lt;p&gt;From our prior post, here is the psudocode for our Hilbert Sort function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define hilbert_sort( unsorted queue, square dimension ):
    create southwest queue
    create northwest queue
    create northeast queue
    create southeast queue
    for each point:
        if in southwest:
            create new point using X -&amp;gt; Y, Y -&amp;gt; X
            add to southwest queue
        if in northwest:
            create new point using X -&amp;gt; 2X, Y -&amp;gt; 2Y - S
            add to northwest queue
        if in northeast:
            create new point using X -&amp;gt; 2X - S, Y -&amp;gt; 2Y - S
            add to northeast queue
        if in southeast:
            create new point using X -&amp;gt; S - 2Y, Y -&amp;gt; 2S - 2X
            add to southeast queue

        hilbertsort(southwest queue, square dimension)
        hilbertsort(northwest queue, square dimension)
        hilbertsort(northeast queue, square dimension)
        hilbertsort(southeast queue, square dimension)

        create new results queue
        add points from southwest into results queue
        add points from northwest into results queue
        add points from northeast into results queue
        add points from southeast into results queue
        return results queue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Because we are manually sorting, and we want order to be preserved,
we should be using a queue to organize points as we sort them.
That way, we add them in sorted order, and we are then able to remove
them in sorted order.&lt;/p&gt;
&lt;p&gt;&lt;a name="hilbert3-code"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="hilbert-sort-code"&gt;Hilbert Sort: Code&lt;/h1&gt;
&lt;p&gt;We begin by covering a utility class used by the Hilbert Sort method
to store &lt;span class="math"&gt;\((X,Y)\)&lt;/span&gt; points. This is a simple example of a composition 
design pattern. Next, we cover the bulk of the problem solution: 
the recursive sort method that partiions points into quadrants.
Finally, we cover the main method, which demonstrates reading data
from an input file and passing it to the sort method.&lt;/p&gt;
&lt;p&gt;&lt;a name="hilbert3-utility"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="hilbert-sort-utility-classes"&gt;Hilbert Sort: Utility Classes&lt;/h2&gt;
&lt;p&gt;To organize &lt;span class="math"&gt;\((X,Y)\)&lt;/span&gt; point data, we use a simple class
using composition. This is defined next to the HilbertSort 
class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/**
 * An (x,y) Point class. 
 */
class Point {
    int x, y; // (x,y) point.
    String name; // Each (x,y) point has a name in the file. Used for output.
    /** Constructor. */
    public Point(int x, int y, String name) { 
        this.x = x; this.y = y; this.name = name;
    }
    /** String representation (x,y). */
    public String toString() { 
        return &amp;quot;(&amp;quot;+this.x+&amp;quot;,&amp;quot;+this.y+&amp;quot;,&amp;quot;+this.name+&amp;quot;)&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="hilbert3-recursive"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="recursive-sort-function"&gt;Recursive Sort Function&lt;/h2&gt;
&lt;p&gt;Following is the recursive sort method, which (like merge sort)
consists of a split step, which partitions an &lt;span class="math"&gt;\(S \times S\)&lt;/span&gt; 
square into quadrants and distributes points in the square into their
corresponding quadrants, and a merge step, which stitches together
each quadrant in the correct order. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    /** Recursive implementation of a Hilbert sort. */
    public static Queue&amp;lt;Point&amp;gt; hilbertSort(Queue&amp;lt;Point&amp;gt; inputP, int S) {
        // Recursive method:
        // Apply the Hilbert geometrical quadrant division 
        // to sort points by when they are visited by a Hilbert curve.
        //
        // Base case: 
        // There are 1 or fewer points in each quadrant.
        // Keep splitting into quadrants until we reach the base case. 
        if(inputP.size()&amp;lt;1) {
            return new LinkedList&amp;lt;Point&amp;gt;();
        } else if(inputP.size()==1) {
            return inputP;
        }

        // split by quadrant
        Queue&amp;lt;Point&amp;gt; qSW = new LinkedList&amp;lt;Point&amp;gt;();
        Queue&amp;lt;Point&amp;gt; qNW = new LinkedList&amp;lt;Point&amp;gt;();
        Queue&amp;lt;Point&amp;gt; qNE = new LinkedList&amp;lt;Point&amp;gt;();
        Queue&amp;lt;Point&amp;gt; qSE = new LinkedList&amp;lt;Point&amp;gt;();

        // Sort points by dividing into quadrants
        for(Point p : inputP) { 

            // Prepare for the tricky part.
            //
            // Rotate the quadrant, and points in it,
            // so that everything is now translated to fit
            // how the template of the Hilbert curve is being drawn.
            // (SW-&amp;gt;NW-&amp;gt;NE-SE)

            boolean inSWquadrant = (2*p.x &amp;lt;= S) &amp;amp;&amp;amp; (2*p.y &amp;lt;= S);
            boolean inNWquadrant = (2*p.x &amp;lt;= S) &amp;amp;&amp;amp; (2*p.y &amp;gt;= S);

            boolean inNEquadrant = (2*p.x &amp;gt;= S) &amp;amp;&amp;amp; (2*p.y &amp;gt;= S);
            boolean inSEquadrant = (2*p.x &amp;gt;= S) &amp;amp;&amp;amp; (2*p.y &amp;lt;= S);

            // Each time we sort (x,y) points into quadrants,
            // we also transform each coordinate point 
            // in such a way that it rescales to an S x S square,
            // but does not modify the order of the points. 
            //
            // Note that we can keep everything as integers by
            // continuing to look at an S x S square,
            // and double the x and y values to shift them over/up.
            //
            // Two easy cases:
            if(inNWquadrant) {
                // Northwest quadrant: 
                // - shift y down by S/2
                // - keep x and y in same order
                qNW.add( new Point(2*p.x, 2*p.y-S, p.name) );

            } else if(inNEquadrant) {
                // Northeast quadrant:
                // - shift x and y down by S/2
                // - keep x and y in same order
                qNE.add( new Point(2*p.x - S, 2*p.y - S, p.name) );

            } else if(inSWquadrant) { 
                // Southwest quadrant:
                // - x and y need to swap places 
                // - that&amp;#39;s it.
                qSW.add( new Point(2*p.y, 2*p.x, p.name) );

            } else if(inSEquadrant) { 
                // Southeast quadrant:
                // - trickiest quadrant.
                // - We want to preserve S - x, distance from right side
                // - we want to use it as the new y coordinate
                qSE.add( new Point(S - 2*p.y, 2*(S - p.x), p.name) );

            }

        }
        // Sort til you reach the base case.
        qSW = hilbertSort(qSW, S); 
        qNW = hilbertSort(qNW, S); 
        qNE = hilbertSort(qNE, S); 
        qSE = hilbertSort(qSE, S);

        Queue&amp;lt;Point&amp;gt; result = new LinkedList&amp;lt;Point&amp;gt;();
        for(Point q : qSW) result.add(q);
        for(Point q : qNW) result.add(q);
        for(Point q : qNE) result.add(q); 
        for(Point q : qSE) result.add(q);

        return result;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="hilbert3-main"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="main-method"&gt;Main Method&lt;/h2&gt;
&lt;p&gt;The last part of the code is the portion that loads the points and their labels 
from a file, and populates a Queue of Point objects from it.
This queue of points is then sorted and returned in order.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    /** Main driver. */
    public static void main(String[] args) { 

        Scanner stdin = new Scanner(new BufferedReader(new InputStreamReader(System.in)));

        int n = stdin.nextInt();
        int S = stdin.nextInt();

        // n lines of 3 tokens each
        Queue&amp;lt;Point&amp;gt; inputPoints = new LinkedList&amp;lt;Point&amp;gt;();
        for(int i=0; i&amp;lt;n; i++) { 
            int x0 = stdin.nextInt();
            int y0 = stdin.nextInt();
            String label = stdin.next();
            inputPoints.add(new Point(x0,y0,label));
        }
        Queue&amp;lt;Point&amp;gt; sortedPoints = hilbertSort(inputPoints, S);
        for(Point p : sortedPoints) { 
            System.out.println(p.name);
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="hilbert3-refs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"ACM Pacific Region Programming Competition." Association of Computing Machinery. Accessed 19 June 2017.
&amp;lt;&lt;a href="http://acmicpc-pacnw.org/"&gt;http://acmicpc-pacnw.org/&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Hilbert Sort." Git repository, git.charlesreid1.com. Charles Reid. Updated 16 June 2017.
&amp;lt;&lt;a href="https://git.charlesreid1.com/cs/finalproject-143/src/master/hilbert/HilbertSort.java"&gt;https://git.charlesreid1.com/cs/finalproject-143/src/master/hilbert/HilbertSort.java&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="programming"></category><category term="computer science"></category><category term="final project"></category><category term="competitive programming"></category><category term="hilbert sort"></category><category term="java"></category></entry><entry><title>CSE 143 Final Project: Hilbert Sort: 2. The Solution Algorithm</title><link href="https://charlesreid1.github.io/cse-143-final-project-hilbert-sort-2-the-solution-algorithm.html" rel="alternate"></link><published>2017-06-27T11:00:00-07:00</published><updated>2017-06-27T11:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-06-27:/cse-143-final-project-hilbert-sort-2-the-solution-algorithm.html</id><summary type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;p&gt;This is the second in a series of three posts 
detailing the Hilbert Sort problem,
its solution, and its implementation.
This post solves the problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#hilbert2-problem"&gt;Hilbert Sort Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-space"&gt;Space Is The Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-reflections"&gt;The Reflections&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#hilbert2-quad"&gt;Reflected Quadrants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-scaling"&gt;Scaling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-reflection"&gt;Reflection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-reflection-solution"&gt;Solving the Reflection Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-procedure"&gt;Procedure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="hilbert2-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="hilbert-sort-problem"&gt;Hilbert Sort Problem&lt;/h1&gt;
&lt;p&gt;In the prior post, we covered the Hilbert Sort problem, 
but we state it once more succinctly here before 
detailing a solution to the problem.&lt;/p&gt;
&lt;p&gt;The Hilbert Sort problem asks the following: 
given a set of labeled &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; points,
how can we sort the points according to 
the order â€¦&lt;/p&gt;</summary><content type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;p&gt;This is the second in a series of three posts 
detailing the Hilbert Sort problem,
its solution, and its implementation.
This post solves the problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#hilbert2-problem"&gt;Hilbert Sort Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-space"&gt;Space Is The Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-reflections"&gt;The Reflections&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#hilbert2-quad"&gt;Reflected Quadrants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-scaling"&gt;Scaling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-reflection"&gt;Reflection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-reflection-solution"&gt;Solving the Reflection Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-procedure"&gt;Procedure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="hilbert2-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="hilbert-sort-problem"&gt;Hilbert Sort Problem&lt;/h1&gt;
&lt;p&gt;In the prior post, we covered the Hilbert Sort problem, 
but we state it once more succinctly here before 
detailing a solution to the problem.&lt;/p&gt;
&lt;p&gt;The Hilbert Sort problem asks the following: 
given a set of labeled &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; points,
how can we sort the points according to 
the order in which they are visited 
by a space-filling Hilbert curve?&lt;/p&gt;
&lt;p&gt;Revisiting the example input and output provided, the input provides 
the number of points and size of the grid on the first line, 
followed by each point's coordinates and label.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Input:
    14 25
    5 5 Honolulu
    5 10 PugetSound
    5 20 Victoria
    10 5 Berkeley
    10 10 Portland
    10 15 Seattle
    10 20 Vancouver
    15 5 LasVegas
    15 10 Sacramento
    15 15 Kelowna
    15 20 PrinceGeorge
    20 5 Phoenix
    20 10 SaltLakeCity
    20 20 Calgary

Output:
    Honolulu
    Berkeley
    Portland
    PugetSound
    Victoria
    Vancouver
    Seattle
    Kelowna
    PrinceGeorge
    Calgary
    SaltLakeCity
    Sacramento
    LasVegas
    Phoenix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="hilbert2-space"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="space-is-the-place"&gt;Space is the Place&lt;/h1&gt;
&lt;p&gt;To solve the Hilbert Sort problem, we have to avoid the temptation
to think about the Hilbert curve and the way that it is constructed.
While we spent quite a bit of time talking about the Hilbert curve
and how it is constructed, the curve itself is not what we are 
interested in - we are interested in the order in which the points
are visited. &lt;/p&gt;
&lt;p&gt;Also remember, the motivation of solving the Hilbert Sort problem is to 
arrange spatial &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; points so closer points are nearer together.&lt;/p&gt;
&lt;p&gt;No matter how many iterations of the Hilbert curve we end up drawing,
we always apply the same procedure: cut the square into four quadrants, 
reflect the southwest corner about the bottom left to top right diagonal,
and reflect the southeast corner about the bottom right to top left diagonal.&lt;/p&gt;
&lt;p&gt;We will always visit points in the southwest quadrant before we visit 
points in the northwest quadrant; we will always visit points in the northwest
corner before we visit points in the northeast corner; etc.&lt;/p&gt;
&lt;p&gt;&lt;a name="hilbert2-reflections"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="the-reflections"&gt;The Reflections&lt;/h1&gt;
&lt;p&gt;The trickiest part of the Hilbert Sort problem is the reflection that happens 
to the lower left and lower right quadrants.&lt;/p&gt;
&lt;p&gt;&lt;a name="hilbert2-quad"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="reflected-quadrants"&gt;Reflected Quadrants&lt;/h2&gt;
&lt;p&gt;Start with the first step of the Hilbert sort - take a square with points contained in it. 
Split the square into four quadrants (with the intention of creating four sub-problems).
However, to conform to the Hilbert Curve construction process,
the lower left and lower right squares must be reflected.
The lower left square is reflected about the bottom left to upper right diagonal,
while the lower right square is reflected about the bottom right to upper left diagonal.&lt;/p&gt;
&lt;p&gt;Convince yourself of this by studying the curve construction procedure as illustrated
by Hilbert himself in his 1890 paper (a.k.a., Hilbert Illustrates A Hilbert Curve):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hilbert Illustrates Construction of Hilbert Curve" src="/images/HilbertCurve-OriginalPaper.png"&gt;&lt;/p&gt;
&lt;p&gt;We are working toward a recursive method - and recursive methods call themselves repeatedly,
apply to subproblems that are trivially similar. However, to translate this into a recursive 
problem, we have to deal with the rotations within the current recursive step, 
in such a way that we don't need to know the orientation of the prior square 
to know the order in which to visit the squares - it is always southwest, northwest, notheast, southwest.&lt;/p&gt;
&lt;p&gt;After we split the squares into quadrants, 
after we toss out any quadrants with no points, 
we walk through each of the four quadrants in order 
(southwest, northwest, northeast, southwest).
If there is a single point in the quadrant,
we add it to the priority queue.&lt;/p&gt;
&lt;p&gt;It is here that we take care of the rotation - 
before we recursively call the Hilbert sort method
on the quadrant itself.&lt;/p&gt;
&lt;p&gt;&lt;a name="hilbert2-scaling"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="scaling"&gt;Scaling&lt;/h2&gt;
&lt;p&gt;We have a prescribed order for the four quadrants 
in the current recursive level, and the current recursive level
is working its way through each of those four quadrants.
But remember, our algorithm only cares about the order of points.
It does not care about the &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; location. 
So we can ireflect &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; points by changing their 
&lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; coordinate locations. Ultimately
we are only changing the program's internal representation
of each point, not the original data on disk, 
so we can think of &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; as mutable for our purposes.&lt;/p&gt;
&lt;p&gt;This is an important part of our solution:
scaling (and reflecting) each quadrant before 
recursively calling the Hilbert sort method 
on the points contained in it.&lt;/p&gt;
&lt;p&gt;If we are considering a single quadrant 
of dimensions &lt;span class="math"&gt;\(\frac{S}{2} \times \frac{S}{2}\)&lt;/span&gt;,
containing points &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt;, we may be able to 
pass in the corners of our square, plus the 
&lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; points contained in it.
However, as our squares get smaller,
the distance between points gets smaller as well,
so this has an upper limit as to how many points 
it can sort.&lt;/p&gt;
&lt;p&gt;On the other hand, we can avoid passing all that information around
and using doubles, by just rescaling everything to the given
quadrant. We want each recursive level to completely forget 
about where in the recursive stack it is, how large its square is
relative to the original, etc. All it should be doing is 
solving the same problem repeatedly - which is what recursion
is best at. If we double the sides of the square, we get 
a shape with original size &lt;span class="math"&gt;\(S \times S\)&lt;/span&gt;. To keep the points 
shifted correctly we double their &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; coordinates 
to &lt;span class="math"&gt;\((2x, 2y)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Once this transformation is performed, we are ready to call
the Hilbert Sort function recursively - for the 
northwest and northeast quadrants only. The southwest and 
southeast quadrants still have a ways to go.&lt;/p&gt;
&lt;p&gt;&lt;a name="hilbert2-reflection"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="reflection"&gt;Reflection&lt;/h2&gt;
&lt;p&gt;In addition to the scale-up transformation, southwest and southeast 
qaudrant points must be reflected about their diagonals.&lt;/p&gt;
&lt;p&gt;Here's an example of what the process looks like in action:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hilbert Sort Poster Flowchart" src="/images/hilbert-poster.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="hilbert2-reflection-solution"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="solving-the-reflection-problem"&gt;Solving the Reflection Problem&lt;/h1&gt;
&lt;p&gt;The above section described where in the process the reflection 
of the &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; points should happen. The process of applying the 
reflection differs between the southwest and southeast quadrants.&lt;/p&gt;
&lt;p&gt;In the southwest quadrant, points are being reflected about the 
diagonal line &lt;span class="math"&gt;\(y=x\)&lt;/span&gt;, so the reflection of &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; points in the 
southwest quadrant can be performed by swapping the 
&lt;span class="math"&gt;\(x\)&lt;/span&gt; and &lt;span class="math"&gt;\(y\)&lt;/span&gt; values of all of the points in that quadrant.&lt;/p&gt;
&lt;p&gt;In the southeast quadrant, the points are refelected about the 
diagonal &lt;span class="math"&gt;\(y = -x\)&lt;/span&gt;, but it is not quite &lt;span class="math"&gt;\(y = -x\)&lt;/span&gt;, given that there is
an offset of a half-quadrant width on the left. &lt;/p&gt;
&lt;p&gt;After an &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; point is transformed, it has a height equal to
the distance from the point's x coordinate to the start of the qudarant.
In equations,&lt;/p&gt;
&lt;div class="math"&gt;$$
y = S - x
$$&lt;/div&gt;
&lt;p&gt;Further, after an &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; point is transformed, the distance from the 
top of the bounding box to the former y coordinate 
is the new x coordinate, &lt;/p&gt;
&lt;div class="math"&gt;$$
x = \frac{S}{2} - y
$$&lt;/div&gt;
&lt;p&gt;The relative x coordinates of each point 
(relative meaning, 0 starts at the beginning of the curent square,
rather than the whole square) are 
the x coordinates minus the half-quadrant width.&lt;/p&gt;
&lt;p&gt;Once these reflections are performed, we pass the 
resulting &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; points on to a new Hilbert sort.
The new Hilbert sort will be operating on an &lt;span class="math"&gt;\(S x S\)&lt;/span&gt; 
square, as before. Importantly, the &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; points have been
transformed in such a way that the order in which the Hilbert
curve visits each point has not been affected.&lt;/p&gt;
&lt;p&gt;&lt;a name="hilbert2-procedure"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="hilbert-sort-procedure"&gt;Hilbert Sort Procedure&lt;/h1&gt;
&lt;p&gt;The implementation strategy is, obviously, recursive. What we want to do at each level is:
* Start with a square and points contained in the square. 
* Cut the square under consideration into four quadrants.
* Apply a transformation to each square so that it is re-oriented in a manner that matches our original Hilbert curve.&lt;/p&gt;
&lt;p&gt;Once each of those squares goes through all of its respective recursive calls, 
it will return a sorted list of points. Then we will know what to do - 
we collect each of the sorted points from each of the four quadrants in order, 
maintain that order, and return those sorted quadrants.&lt;/p&gt;
&lt;p&gt;To nail down the details, treat the square under consideration as ranging from 
&lt;span class="math"&gt;\((0,0)\)&lt;/span&gt; to &lt;span class="math"&gt;\((S,S)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Each time we cut a square into quadrants, we re-orient ourselves as to where 
&lt;span class="math"&gt;\((0,0)\)&lt;/span&gt; is located and which quadrants will be visited in which order.
If we are in the lower left quadrant, &lt;span class="math"&gt;\(x\)&lt;/span&gt; is below &lt;span class="math"&gt;\(\frac{S}{2}\)&lt;/span&gt; and 
&lt;span class="math"&gt;\(y\)&lt;/span&gt; is below &lt;span class="math"&gt;\(\frac{S}{2}\)&lt;/span&gt;, so we rotate and reflect by swapping x and y:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        X -&amp;gt; Y
        Y -&amp;gt; X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we are in the upper left quadrant, x is below &lt;span class="math"&gt;\(\frac{S}{2}\)&lt;/span&gt;, y is above &lt;span class="math"&gt;\(\frac{S}{2}\)&lt;/span&gt;, 
so subtract &lt;span class="math"&gt;\(\frac{S}{2}\)&lt;/span&gt; from y and we're done.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        X -&amp;gt; X
        Y -&amp;gt; Y-(S/2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we are in the upper right quadrant, x is above &lt;span class="math"&gt;\(\frac{S}{2}\)&lt;/span&gt;, y is above &lt;span class="math"&gt;\(\frac{S}{2}\)&lt;/span&gt;, 
so subtract &lt;span class="math"&gt;\(\frac{S}{2}\)&lt;/span&gt; from both&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        X -&amp;gt; X - S/2
        Y -&amp;gt; Y - S/2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we are in the lower right quadrant, our x and y values are now 
relative to the quadrant bounding box. The distance to the top of the 
bounding box to the y coordinate becomes our new x coordinate, while the 
distance from the right of the bounding box S to the x coordinate becomes 
our new y coordinate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        X -&amp;gt; S/2 - Y
        Y -&amp;gt; S - X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Recursion always requires a base case and a recursive case. Our "base case" is the 
simple comparison of one or no points in each of our four quadrants. If we get to 
this base case, we know the order in which the Hilbert Curve will visit each of 
those points.&lt;/p&gt;
&lt;p&gt;If we are not at the base case, if we have a large number of points to sort, 
we can bin together all the points in a given quadrant, and consider the order
in which those points go with an additional level of finer granularity. &lt;/p&gt;
&lt;p&gt;&lt;a name="hilbert2-pseudocode"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="pseudocode"&gt;Pseudocode&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;set square dimension S

create unsorted queue
load points into unsorted queue

create sorted queue
sorted queue = hilbert_sort( unsorted queue, square dimension )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now here is the Hilbert sort function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define hilbert_sort( unsorted queue, square dimension ):
    create southwest queue
    create northwest queue
    create northeast queue
    create southeast queue
    for each point:
        if in southwest:
            create new point using X -&amp;gt; Y, Y -&amp;gt; X
            add to southwest queue
        if in northwest:
            create new point using X -&amp;gt; 2X, Y -&amp;gt; 2Y - S
            add to northwest queue
        if in northeast:
            create new point using X -&amp;gt; 2X - S, Y -&amp;gt; 2Y - S
            add to northeast queue
        if in southeast:
            create new point using X -&amp;gt; S - 2Y, Y -&amp;gt; 2S - 2X
            add to southeast queue

        hilbertsort(southwest queue, square dimension)
        hilbertsort(northwest queue, square dimension)
        hilbertsort(northeast queue, square dimension)
        hilbertsort(southeast queue, square dimension)

        create new results queue
        add points from southwest into results queue
        add points from northwest into results queue
        add points from northeast into results queue
        add points from southeast into results queue
        return results queue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="hilbert2-refs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"ACM Pacific Region Programming Competition." Association of Computing Machinery. Accessed 19 June 2017.
&amp;lt;&lt;a href="http://acmicpc-pacnw.org/"&gt;http://acmicpc-pacnw.org/&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Ãœber die stetige Abbildung einer Linie auf ein FlÃ¤chenstÃ¼ck." D. Hilbert. 
&lt;strong&gt;Mathematische Annalen&lt;/strong&gt; 38 (1891), 459â€“460. &lt;a href="/files/HilbertCurve.pdf"&gt;(pdf)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Hilbert Curve." Wikipedia: The Free Encyclopedia. Wikimedia Foundation. Edited 29 April 2017. Accessed 23 June 2017.
&amp;lt;&lt;a href="https://en.wikipedia.org/wiki/Hilbert_curve"&gt;https://en.wikipedia.org/wiki/Hilbert_curve&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="programming"></category><category term="computer science"></category><category term="final project"></category><category term="competitive programming"></category><category term="hilbert sort"></category></entry><entry><title>CSE 143 Final Project: Hilbert Sort: 1. The Problem</title><link href="https://charlesreid1.github.io/cse-143-final-project-hilbert-sort-1-the-problem.html" rel="alternate"></link><published>2017-06-23T16:30:00-07:00</published><updated>2017-06-23T16:30:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-06-23:/cse-143-final-project-hilbert-sort-1-the-problem.html</id><summary type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;p&gt;This is the first in a series of three posts 
detailing the Hilbert Sort problem,
its solution, and its implementation.
This post sets up the problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#hilbert-motivation"&gt;Hilbert Sort: Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-spacefilling"&gt;Hilbert, Peano, and Space-Filling Curves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-curve"&gt;Constructing a Hilbert Curve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-sort"&gt;Performing a Hilbert Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-problem"&gt;Problem Statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-refs"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="hilbert-motivation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="hilbert-sort-motivation"&gt;Hilbert Sort: Motivation&lt;/h1&gt;
&lt;p&gt;In the next few series of posts, we will cover the Hilbert Sort problem,
how it works, and how to implement it.&lt;br&gt;
However, before we describe the problem further, 
let's start with some motivation for solving this problem.&lt;/p&gt;
&lt;p&gt;Suppose we're dealing with a very large number of independent objects â€¦&lt;/p&gt;</summary><content type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;p&gt;This is the first in a series of three posts 
detailing the Hilbert Sort problem,
its solution, and its implementation.
This post sets up the problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#hilbert-motivation"&gt;Hilbert Sort: Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-spacefilling"&gt;Hilbert, Peano, and Space-Filling Curves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-curve"&gt;Constructing a Hilbert Curve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-sort"&gt;Performing a Hilbert Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-problem"&gt;Problem Statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-refs"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="hilbert-motivation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="hilbert-sort-motivation"&gt;Hilbert Sort: Motivation&lt;/h1&gt;
&lt;p&gt;In the next few series of posts, we will cover the Hilbert Sort problem,
how it works, and how to implement it.&lt;br&gt;
However, before we describe the problem further, 
let's start with some motivation for solving this problem.&lt;/p&gt;
&lt;p&gt;Suppose we're dealing with a very large number of independent objects
on a 2D coordinate grid, each with a coordinate location &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt;.
(For example, a large population of particles moving in a fluid, or a large number 
of characters on a map in a game.) &lt;/p&gt;
&lt;p&gt;Here is our box of particles:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Box of Particles" src="/images/hilbert1a.png"&gt;&lt;/p&gt;
&lt;p&gt;Now, suppose that we have more data than can be handled by a single computer,
and we want to arrange the data on different computers. However, we want to 
arrange the data in such a way that we preserve the spatial characteristics
of the data.&lt;/p&gt;
&lt;p&gt;If we implement a naive sort method for Cartesian points that sorts points by
x coordinate value, breaking ties with the y coordinate value, 
we end up with points that are neighbors in space, but far away 
in the data container's storage (like an array). 
This is particularly true if there are large crowds of points in the grid.&lt;/p&gt;
&lt;p&gt;Here is an illustration of a set of points and their resulting 
storage schema in an array that sorts points by x coordinate.
It shows two purple particles, close by in space, but with&lt;br&gt;
several green particles further away distance-wise but 
not with respect to the x coordinate. The spatial locality
of points is not preserved in the data container, 
so clearly, a better method of sorting and organizing points is needed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bad Schema" src="/images/hilbert1b.png"&gt;&lt;/p&gt;
&lt;p&gt;An alternative to this schema that yields better locality properties,
but that leads to a much higher cost for sorting points, involves 
iterating over each point, and for each point, finding the closest points to it
in space. However, this itself requires iterating over each point.
This approach ends up walking over each point (the point whose nearest neighbors we are finding),
and doing a second nested walk over each point (checking if a point is a nearest neighbor
to this one). The overall cost of doing this is &lt;span class="math"&gt;\(O(N^2)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;It is a deceptively tricky problem: how to organize a large group of points 
in a way that preserves spatial locality?&lt;/p&gt;
&lt;p&gt;But first, we'll cover the topic of space filling curves, then return to this topic.&lt;/p&gt;
&lt;p&gt;&lt;a name="hilbert-spacefilling"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="space-filling-curves"&gt;Space Filling Curves&lt;/h1&gt;
&lt;p&gt;Mathematician Giuseppe Peano was a prolific teacher and researcher known for many things,
but one of his more curious ideas is known as the Peano Curve. Peano was attempting to
answer the question of whether a continuous curve could be bounded by a finite space,
and he invented a counter-example: a recipe for breaking a curve into parts
that can be replicated and repeated and applied to the copies as many times as 
desired, and always result in a continuous curve.&lt;/p&gt;
&lt;p&gt;The way that space-filling curves in general are constructed is to 
create a pattern, then scale it down and repeat it, 
attaching subsequent scaled-down, repeated curves.
Peano simply invented the first curve; there are many variations 
on the original space-filling curve idea (including the Hilbert Curve - 
more on that in a moment).&lt;/p&gt;
&lt;p&gt;The &lt;a href="/files/PeanoCurve.pdf"&gt;original 1890 paper by Giuseppe Peano&lt;/a&gt; is entitled "Sur une courbe,
qui remplit toute une aire plane", published in 1890 in Mathematische Annalen I, 
Issue 36. Unfortunately, it has no pictures, but here is a rendering from 
Wikimedia Commons:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Peano Curve" src="/images/PeanoCurve-Many.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://commons.wikimedia.org/wiki/File:Peano_curve.png"&gt;(Link to original on Mediawiki Commons)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, the Peano curve was nice, but it had some mathematical properties 
that made it difficult to deal with. So in 1890,
&lt;a href="/files/HilbertCurve.pdf"&gt;David Hilbert published a follow-up paper&lt;/a&gt; 
in Mathematische Annalen I Issue 38, entitled 
"Ueber die stetige Abbildung einer Linie auf ein FlaÌˆchenstuÌˆck",
which slightly modified the recipe to create a curve with more 
elegant mathematical properties. &lt;/p&gt;
&lt;p&gt;Also, he included pictures.&lt;/p&gt;
&lt;p&gt;Here is the first set of figures from Hilbert's 
&lt;a href="/files/HilbertCurve.pdf"&gt;original 1890 paper&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hilbert Curve" src="/images/HilbertCurve-OriginalPaper.png"&gt;&lt;/p&gt;
&lt;p&gt;And here is a slightly cleaner rendering of the Hilbert Curve pattern 
repeated six times:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hilbert Curve" src="/images/HilbertCurve-Many.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://commons.wikimedia.org/wiki/File:Hilbert_curve.svg"&gt;(Link to original on Wikimedia Commons)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From the abstract of Hilbert's paper:&lt;/p&gt;
&lt;blockquote&gt;
Peano has recently shown in the Mathematical Annals, 2 by an arithmetical observation, 
how the points of a line can be mapped continuously to the points of a surface part. 
The functions required for such a mapping can be produced more clearly by using the 
following geometrical view. Let us divide the line to be represented-about a straight 
line of the length 1-into four equal parts 1, 2, 3, 4, and the surface which we assume 
in the form of a square of the side length 1 Straight into 4 equal squares 1, 2, 3, 4 
(Fig. 1). Secondly, we divide each of the partial sections 1, 2, 3, 4 again into 4 equal
parts so that we obtain on the straight the 16 partial sections 1, 2, 3, ..., 16; At the 
same time, each of the 4 squares 1, 2, 3, 4 is divided into 4 equal squares, and the numbers 
1, 2, ..., 16 are then written to the resulting 16 squares, That each successive square 
follows the previous one with one side (Fig. 2). If we think of this method, as shown in 
Fig. 3, the next step, it is easy to see how to assign a single definite point of the 
square to any given point of the line. It is only necessary to determine the partial 
stretches of the line to which the given point falls. The squares indicated by the same 
numbers are necessarily in one another and include a certain point of the surface piece 
in the boundary. This is the point assigned to the given point. The image thus found is 
unambiguous and continuous, and vice versa, each point of the square corresponds to 
one, two, or four points of the line. Moreover, it appears remarkable that, by a 
suitable modification of the partial lines in the squares, a clear and continuous 
representation can easily be found, the reversal of which is nowhere more than 
three-fold.

&lt;br /&gt;

- David Hilbert, "Ãœber die stetige Abbildung einer Linie auf ein FlÃ¤chenstÃ¼ck", Mathematische Annalen Vol 38 

&lt;/blockquote&gt;

&lt;p&gt;Thanks to Google Translate for an incredible job.&lt;/p&gt;
&lt;p&gt;&lt;a name="hilbert-curve"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="constructing-a-hilbert-curve"&gt;Constructing a Hilbert Curve&lt;/h1&gt;
&lt;p&gt;To construct a Hilbert curve, you just have to follow the recipe.
It doesn't matter what your square contains so far,
or how many levels in you are, whether it's the first curve
or the five hundredth:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, take yer square. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second, quadruple yer square. That means, make four copies, that all make a square.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now rotate the bottom left and bottom right via diagonal reflection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fourth step is, you're done - that's you're new square!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a name="hilbert-sort"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="performing-a-hilbert-sort"&gt;Performing a Hilbert Sort&lt;/h1&gt;
&lt;p&gt;We will omit a proof of the statement, but given a set of unique (x,y) points,
we can always construct a minimal-size Hilbert Curve that visits each point only
once. &lt;/p&gt;
&lt;p&gt;Points can be sorted, then, according to when they would be visited by 
said Hilbert Curve. And this ordering provides better preservation of spatial 
locality and structure of points when aligning them in memory, because 
these space-filling curves are recursive and preserve spatial locality
in a top-down fashion.&lt;/p&gt;
&lt;p&gt;For example, if we have two points in our square, one in the lower left 
and one in the lower right, and we are sorting them via a Hilbert Sort,
we definitely know that a Hilbert curve constructed to visit both of these points
will definitely visit the lower left point (the quadrant where the Hilbert curve starts)
before it visits the lower right point (in the quadrant where the Hilbert curve stops).&lt;/p&gt;
&lt;p&gt;This requires thinking about &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; points in the box in terms of quadrants, 
and the order in which the Hilbert curve will visit each quadrant or region,
rather than thinking in terms of the explicit Hilbert curve that will visit each 
particular &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; point:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Box of Particles, Divided Into Quadrants" src="/images/hilbert2a.png"&gt;&lt;/p&gt;
&lt;p&gt;This is a subtle shift in the thinking about this problem, but it is crucial
to a successful implementation of a Hilbert sort. The problem that will follow,
which asks to implement the Hilbert sort, has many distracting details, 
including the Hilbert curve itself. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remember, in Hilbert sort, the end goal is not the curve itself, but the sort order.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here is how the quadrant-by-quadrant partitioning to sort elements ends up looking 
when applied repeatedly: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Repeated Applications" src="/images/hilbert2b.png"&gt;&lt;/p&gt;
&lt;p&gt;It is important to note that the two diagonal reflections happening in the corners
are the trickiest part of this problem. We will cover this operation in greater detail
in the solution blog post.&lt;/p&gt;
&lt;p&gt;&lt;a name="hilbert-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="problem-statement"&gt;Problem Statement&lt;/h1&gt;
&lt;p&gt;Following is a paraphrased problem statement from the &lt;a href="/files/HilbertSort.pdf"&gt;original
ACM ICPC Regional Programming Competition
problem statement&lt;/a&gt; that this problem and its solution was based on.&lt;/p&gt;
&lt;p&gt;"If points &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; are sorted primarily by x, breaking ties by y, then points that are 
adjacent in memory will have similar x coordinates but not necessarily similar y,
potentially placing them far apart on the grid. To better preserve distances, we may 
sort the data along a continuous space-filling curve.&lt;/p&gt;
&lt;p&gt;"We consider one such space-filling curve called the Hilbert curve...&lt;/p&gt;
&lt;p&gt;"Given some locations of interest, you are asked to sort them according to when the 
Hilbert curve visits them. Note that while the curve intersects itself at 
infinitely many places, e.g., at &lt;span class="math"&gt;\((\frac{S}{2}, \frac{S}{2})\)&lt;/span&gt;, making S odd 
guarantees all integer points are visited just once."&lt;/p&gt;
&lt;p&gt;Here is an example input file, giving a set of points 
on an &lt;span class="math"&gt;\(M \times N\)&lt;/span&gt; grid:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    14 25
    5 5 Honolulu
    5 10 PugetSound
    5 20 Victoria
    10 5 Berkeley
    10 10 Portland
    10 15 Seattle
    10 20 Vancouver
    15 5 LasVegas
    15 10 Sacramento
    15 15 Kelowna
    15 20 PrinceGeorge
    20 5 Phoenix
    20 10 SaltLakeCity
    20 20 Calgary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The corresponding output can be verified intuitively,
assuming the coordinates given above are accurate!
Here is the output. Indeed, the order in which each
city is visited is what we would expect if we drew
a space-filling Hilbert curve over a map of the western
United States and Canada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    Honolulu
    Berkeley
    Portland
    PugetSound
    Victoria
    Vancouver
    Seattle
    Kelowna
    PrinceGeorge
    Calgary
    SaltLakeCity
    Sacramento
    LasVegas
    Phoenix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that we've used up all of our space here describing the problem,
in a follow-up post we will go into greater detail about
how to solve the problem conceptually, and come up with some 
pseudocode for a recursive method (since this is a recursive task).
Then, a third post will go into greater detail about the 
final Java code to perform this task.&lt;/p&gt;
&lt;p&gt;&lt;a name="hilbert-refs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"ACM Pacific Region Programming Competition." Association of Computing Machinery. Accessed 19 June 2017.
&amp;lt;&lt;a href="http://acmicpc-pacnw.org/"&gt;http://acmicpc-pacnw.org/&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Sur une courbe, qui remplit toute une aire plane." G. Peano. 
&lt;strong&gt;Mathematische Annalen&lt;/strong&gt; 36 (1890), 157â€“160. &lt;a href="/files/PeanoCurve.pdf"&gt;(pdf)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Ãœber die stetige Abbildung einer Linie auf ein FlÃ¤chenstÃ¼ck." D. Hilbert. 
&lt;strong&gt;Mathematische Annalen&lt;/strong&gt; 38 (1891), 459â€“460. &lt;a href="/files/HilbertCurve.pdf"&gt;(pdf)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Hilbert Curve." Wikipedia: The Free Encyclopedia. Wikimedia Foundation. Edited 29 April 2017. Accessed 23 June 2017.
&amp;lt;&lt;a href="https://en.wikipedia.org/wiki/Hilbert_curve"&gt;https://en.wikipedia.org/wiki/Hilbert_curve&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Peano Curve." Wikipedia: The Free Encyclopedia. Wikimedia Foundation. Edited 16 October 2016. Accessed 23 June 2017.
&amp;lt;&lt;a href="https://en.wikipedia.org/wiki/Peano_curve"&gt;https://en.wikipedia.org/wiki/Peano_curve&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="programming"></category><category term="computer science"></category><category term="final project"></category><category term="competitive programming"></category><category term="hilbert sort"></category></entry><entry><title>CSE 143 Final Project: Classy</title><link href="https://charlesreid1.github.io/cse-143-final-project-classy.html" rel="alternate"></link><published>2017-06-23T09:00:00-07:00</published><updated>2017-06-23T09:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-06-23:/cse-143-final-project-classy.html</id><summary type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#classy-problem"&gt;Problem Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-approach"&gt;Solution Approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-algo"&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-pseudo"&gt;Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-oop"&gt;Using an Object-Oriented Approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-code"&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-refs"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="classy-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="problem-description"&gt;Problem Description&lt;/h1&gt;
&lt;p&gt;Comedian John Cleese, in his memoir &lt;strong&gt;So Anyway...&lt;/strong&gt;, described the social classes of his
mother and father as "upper-uper-lower-middle class" and "middle-middle-middle-lower-middle class",
respectively. Write a program that will sort individuals based on a labeling of their 
social standing by class.&lt;/p&gt;
&lt;p&gt;The three main classes are upper, middle, and lower. Classes progress hierarchically
from right to left. For example, lower-upper would come before lower-lower.
There is also ordering within a class, so upper-upper is a higher class than middle-upper.&lt;/p&gt;
&lt;p&gt;Once you have reached â€¦&lt;/p&gt;</summary><content type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#classy-problem"&gt;Problem Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-approach"&gt;Solution Approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-algo"&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-pseudo"&gt;Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-oop"&gt;Using an Object-Oriented Approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-code"&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-refs"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="classy-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="problem-description"&gt;Problem Description&lt;/h1&gt;
&lt;p&gt;Comedian John Cleese, in his memoir &lt;strong&gt;So Anyway...&lt;/strong&gt;, described the social classes of his
mother and father as "upper-uper-lower-middle class" and "middle-middle-middle-lower-middle class",
respectively. Write a program that will sort individuals based on a labeling of their 
social standing by class.&lt;/p&gt;
&lt;p&gt;The three main classes are upper, middle, and lower. Classes progress hierarchically
from right to left. For example, lower-upper would come before lower-lower.
There is also ordering within a class, so upper-upper is a higher class than middle-upper.&lt;/p&gt;
&lt;p&gt;Once you have reached the lowest level of detail of one of the classes, assume that
all further classes are equivalent to middle. This means upper and middle-upper are
equivalent, and middle-middle-lower-middle and lower-middle are equivalent.&lt;/p&gt;
&lt;p&gt;Input files have a line with the number of names, then one name per line,
with the name, a colon, then the title. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;5
mom: upper upper lowre middle class
dad: middle middle lower middle class
queen_elizabeth: upper upper class
chair: lower lower class
unclebob: middle lower middle class
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The proper output should be the name of each person,
sorted in order according to their social status, e.g.,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;queenelizabeth
mom
dad
unclebob
chair
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="classy-approach"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="solution-approach"&gt;Solution Approach&lt;/h1&gt;
&lt;p&gt;(This discusses an approach specific to Java, 
but a similar approach could be adopted for other languages
in which comparison operators can be overloaded for objects.)&lt;/p&gt;
&lt;p&gt;The problem lays out all of the essential components that a solution requires.
This can most easily be implemented using an object and a comparator: 
the object represents a person, and has a field to store their name and a field
to store their titles (array-like container for Strings). These objects
would then implement comparators so that individuals could be compared. 
This functionality then allows the array to be sorted, using the built-in 
Collections sort function or a custom sort function.&lt;/p&gt;
&lt;p&gt;&lt;a name="classy-algo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="algorithm"&gt;Algorithm&lt;/h1&gt;
&lt;p&gt;The classy algorithm can be briefly described in this way: we are iterating over two lists of strings,
of possibly unequal length, and comparing them right to left. We have a few very simple rules that 
determine whether one title comes before the other. We have a few simple rules for breaking ties.&lt;/p&gt;
&lt;p&gt;The core of the algorithm is the comparison operation, in which we are assuming that these two things 
are equal, until we encounter evidence to the contrary. Briefly, the pseudocode can be expressed as follows
(where we adopt the Java convention that a negative result means the first item comes before the second item):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;if item1 &amp;lt; item2:
    return -1
else if item1 &amp;gt; item2: 
    return 1
else:
    # keep going
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we find a difference, we stop and return right away, 
but otherwise we continue, and assume the two are equal.&lt;/p&gt;
&lt;p&gt;The problem statement tells us that if a title is missing, and the title lengths are mismatched, we should 
fill in with "middle". This translates into a second comparison block, in which one of the items is 
hard-coded as "middle", due to an empty list of titles:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;if item &amp;lt; &amp;quot;middle&amp;quot;:
    return -1
else if item &amp;gt; &amp;quot;middle&amp;quot;
    return 1
else:
    # keep going
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how these fit together:
* Start by splitting the input titles, most likely strings, into lists
* Iterate over each title, from right to left, and compare the titles.
* When we reach the end of the shorter list, continue comparing titles right to left, filling in "middle".
* If the titles are tied, break ties with name.
* The algorithm should be implemented in a way that has access to both the titles and the names of the two people being compared.
* In Java, we can define people objects, then we can either have People objects implement Comparable, or we can define our own Comparator for two People objects.&lt;/p&gt;
&lt;p&gt;&lt;a name="classy-pseudo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="pseudocode"&gt;Pseudocode&lt;/h1&gt;
&lt;p&gt;When we translate the above procedure into Python-like pseudocode, here is the result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define compare_lengths(title1, title2):
    list1 = title1.split()
    list2 = title2.split()
    for i in min(list1.size, list2.size):
        sal1 = list1.reverse[i]
        sal2 = list2.reverse[i]
        if sal1 &amp;lt; sal2:
            return -1
        else if sal1 &amp;gt; sal2:
            return 1

    larger_list = &amp;lt;point to larger list&amp;gt;
    for i in ( min(list1.size,list2.size)+1 ... max(list1.size, list2.size) ):
        salX = larger_list.reverse[i]
        if SalX &amp;lt; &amp;quot;middle&amp;quot;:
            return -1
        if salX &amp;gt; &amp;quot;middle&amp;quot;
            return 1

    # If you get here, it&amp;#39;s a tie. Use names for tie-breaker.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="classy-oop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="using-an-object-oriented-approach"&gt;Using an Object-Oriented Approach&lt;/h1&gt;
&lt;p&gt;To apply object-oriented principles in this situation, 
we want to bundle together related data, and abstract 
away details. That means we want to create an object
to associate the name and titles of a given person,
and implement functionality to allow each person
to be compared with other people. &lt;/p&gt;
&lt;p&gt;This will allow us to create two people 
and compare them with greater than, less than, or 
equal to operators. More importantly, this will also allow us 
to perform sorting.&lt;/p&gt;
&lt;p&gt;Our Java program Classy is a simple driver that loads the names and titles
of people from standard input.&lt;/p&gt;
&lt;p&gt;The Person class stores associated name and title data for each person.
This class implements the Comparable interface, which requires it 
to implement a &lt;code&gt;compareTo()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;class Person implements Comparable&amp;lt;Person&amp;gt; {

    ...

    public int compareTo(Person p2) { 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Person class constructor just tokenizes one line of input,
populating the titles list and the person's name. Here is the 
declaration of those private fields:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;class Person implements Comparable&amp;lt;Person&amp;gt; {
    private String name;
    private ArrayList&amp;lt;String&amp;gt; titles;

    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The implementation of the compareTo method 
utilized Stack objects to examine the 
sequence of titles in reverse.&lt;/p&gt;
&lt;p&gt;Pop the stacks until one of them is empty.
Then, keep popping until both are empty, 
using "middle" in place of the empty stack.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    /** Compare a person to another person. */
    public int compareTo(Person p2) { 

        Stack&amp;lt;String&amp;gt; st1 = new Stack&amp;lt;String&amp;gt;();
        Stack&amp;lt;String&amp;gt; st2 = new Stack&amp;lt;String&amp;gt;();

        // Add names to stack, left to right
        for(String title : this.getTitles()) {
            st1.push(title);
        }
        for(String title : p2.getTitles()) { 
            st2.push(title);
        }

        // Compare each name, from right-to-left.
        // If stack 1 is not empty, pop next item, otherwise use &amp;quot;middle&amp;quot;
        // If stack 2 is not empty, pop next item, otherwise use &amp;quot;middle&amp;quot;

        int max = Math.max(this.getTitles().size(), p2.getTitles().size());
        for(int i=0; i&amp;lt;max; i++) {

            // Pop names from the stack, right to left.
            String s1, s2;

            if(!st1.isEmpty()) {
                s1 = st1.pop();
            } else {
                s1 = &amp;quot;middle&amp;quot;;
            }

            if(!st2.isEmpty()) {
                s2 = st2.pop();
            } else {
                s2 = &amp;quot;middle&amp;quot;;
            }

            // Rather than converting strings to numbers,
            // compare the strings directly (lower &amp;lt; middle &amp;lt; upper).
            int res = s2.compareTo(s1);

            // Return the first non-zero value
            if( res != 0 ) {
                return res;
            }
        }

        // If we reach here, there was a tie.
        // Use name as tie breaker.
        return this.getName().compareTo(p2.getName());
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="classy-code"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="code"&gt;Code&lt;/h1&gt;
&lt;p&gt;Here is the entire Classy code, also available on 
&lt;a href="https://git.charlesreid1.com/cs/finalproject-143/src/master/classy/Classy.java"&gt;git.charlesreid1.com&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;import java.util.*; 
import java.io.*;
public class Classy { 

    public static void main(String[] args) { 
        Scanner s = new Scanner(new BufferedReader(new InputStreamReader(System.in)));

        // Read the input file: new Person for each line
        int n = Integer.parseInt(s.nextLine());
        ArrayList&amp;lt;Person&amp;gt; people = new ArrayList&amp;lt;Person&amp;gt;();
        while(s.hasNextLine()) {
            String line = s.nextLine();
            String[] deets = line.split(&amp;quot; &amp;quot;);
            Person p = new Person(deets);
            people.add(p);
        }

        Collections.sort(people);
        for(Person p : people) { 
            System.out.println(p);
        }
    }
}

class Person implements Comparable&amp;lt;Person&amp;gt; {
    private String name;
    private ArrayList&amp;lt;String&amp;gt; titles;

    /** Person constructor - pass in a String array with the deets. */
    public Person(String[] deets) { 
        name = deets[0];
        // Remove : from name
        name = name.substring(0,name.length()-1);

        // initialize list of classes 
        titles = new ArrayList&amp;lt;String&amp;gt;();
        for(int i=1; i&amp;lt;deets.length-1; i++) { 
            titles.add(deets[i]);
        }
        // Last word will be &amp;quot;class&amp;quot;, so ignore.
    }

    /** Get a person&amp;#39;s name. */
    public String getName() { return name; }

    /** Get a person&amp;#39;s titles in an ArrayList. */
    public ArrayList&amp;lt;String&amp;gt; getTitles() { return titles; }

    /** Get a string representation of a person. */
    public String toString() { return getName(); }

    /** Compare a person to another person. */
    public int compareTo(Person p2) { 

        Stack&amp;lt;String&amp;gt; st1 = new Stack&amp;lt;String&amp;gt;();
        Stack&amp;lt;String&amp;gt; st2 = new Stack&amp;lt;String&amp;gt;();

        // Add names to stack, left to right
        for(String title : this.getTitles()) {
            st1.push(title);
        }
        for(String title : p2.getTitles()) { 
            st2.push(title);
        }

        // Compare each name, from right-to-left.
        // If stack 1 is not empty, pop next item, otherwise use &amp;quot;middle&amp;quot;
        // If stack 2 is not empty, pop next item, otherwise use &amp;quot;middle&amp;quot;

        int max = Math.max(this.getTitles().size(), p2.getTitles().size());
        for(int i=0; i&amp;lt;max; i++) {

            // Pop names from the stack, right to left.
            String s1, s2;

            if(!st1.isEmpty()) {
                s1 = st1.pop();
            } else {
                s1 = &amp;quot;middle&amp;quot;;
            }

            if(!st2.isEmpty()) {
                s2 = st2.pop();
            } else {
                s2 = &amp;quot;middle&amp;quot;;
            }

            // Rather than converting strings to numbers,
            // compare the strings directly (lower &amp;lt; middle &amp;lt; upper).
            int res = s2.compareTo(s1);

            // Return the first non-zero value
            if( res != 0 ) {
                return res;
            }
        }

        // If we reach here, there was a tie.
        // Use name as tie breaker.
        return this.getName().compareTo(p2.getName());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="classy-refs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="references"&gt;References&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"ACM Pacific Region Programming Competition." Association of Computing Machinery. 19 June 2017.
&amp;lt;&lt;a href="http://acmicpc-pacnw.org/"&gt;http://acmicpc-pacnw.org/&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"finalproject-143 (git repository)." Charles Reid. Modified 16 June 2017. Accessed 23 June 2017.
&amp;lt;&lt;a href="https://git.charlesreid1.com/cs/finalproject-143/src/master/classy/Classy.java"&gt;https://git.charlesreid1.com/cs/finalproject-143/src/master/classy/Classy.java&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Computer Science"></category><category term="programming"></category><category term="comparison"></category><category term="sorting"></category><category term="algorithms"></category><category term="computer science"></category><category term="final project"></category><category term="competitive programming"></category></entry><entry><title>CSE 143 Final Project: Checkers</title><link href="https://charlesreid1.github.io/cse-143-final-project-checkers.html" rel="alternate"></link><published>2017-06-19T11:00:00-07:00</published><updated>2017-06-19T11:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-06-19:/cse-143-final-project-checkers.html</id><summary type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#checkers-intro"&gt;The Problem&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#checkers-problem"&gt;Problem Description: Checkers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-input"&gt;Input File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-output"&gt;Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-solution"&gt;The Solution&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#checkers-kiss"&gt;Keep It Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-parity"&gt;Solution Analysis: Parity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-euler"&gt;Solution Analysis: Graphs and Euler Tours&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-algo"&gt;Solution Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-pseudocode"&gt;Solution Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Solution Code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-refs"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="checkers-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="the-problem"&gt;The Problem&lt;/h1&gt;
&lt;p&gt;This is a programming challenge that was assigned to some of my CSE 143 students 
as a final project for their class.&lt;/p&gt;
&lt;p&gt;The origin of this problem was the Association of Computing Machinery (ACM)'s 
International Collegiate Programming Competition (ICPC),
in particular the Pacific Northwest Regional Competition, Division 1 challenges from 2015.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://acmicpc-pacnw.org/"&gt;Link to Pacific NW ACM ICPC page.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="checkers-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="problem-description-checkers"&gt;Problem Description: Checkers&lt;/h2&gt;
&lt;p&gt;In the Checkers problem â€¦&lt;/p&gt;</summary><content type="html">&lt;h1 id="table-of-contents"&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#checkers-intro"&gt;The Problem&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#checkers-problem"&gt;Problem Description: Checkers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-input"&gt;Input File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-output"&gt;Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-solution"&gt;The Solution&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#checkers-kiss"&gt;Keep It Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-parity"&gt;Solution Analysis: Parity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-euler"&gt;Solution Analysis: Graphs and Euler Tours&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-algo"&gt;Solution Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-pseudocode"&gt;Solution Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Solution Code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-refs"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="checkers-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="the-problem"&gt;The Problem&lt;/h1&gt;
&lt;p&gt;This is a programming challenge that was assigned to some of my CSE 143 students 
as a final project for their class.&lt;/p&gt;
&lt;p&gt;The origin of this problem was the Association of Computing Machinery (ACM)'s 
International Collegiate Programming Competition (ICPC),
in particular the Pacific Northwest Regional Competition, Division 1 challenges from 2015.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://acmicpc-pacnw.org/"&gt;Link to Pacific NW ACM ICPC page.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="checkers-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="problem-description-checkers"&gt;Problem Description: Checkers&lt;/h2&gt;
&lt;p&gt;In the Checkers problem, you are presented with a checkerboard consisting of 
black and white squares. The boards follow a normal checkers layout, that is,
all of the pieces occupy only the light or dark squares on the board.&lt;/p&gt;
&lt;p&gt;There are several white and black pieces arranged on the checkerboard.
Your goal is to answer the following question: can any one single 
black piece be used to jump and capture all of the white pieces 
in a single move? This assumes that each of the black pieces are 
"king" pieces and can jump in either direction.&lt;/p&gt;
&lt;p&gt;For example, the following 7x7 board configuration has one black piece 
that can jump all of the white pieces on the board with a single sequence
of moves. The black piece at B2 jumps to D4, then to F2.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Checkerboard 1 - demonstrate solution" src="/images/checkers1.png"&gt;&lt;/p&gt;
&lt;p&gt;If an additional white piece is added, there is no sequence of moves
that will allow any black piece to jump all of the white pieces.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Checkerboard 2 - demonstrate no solution" src="/images/checkers2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="checkers-input"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="input-file"&gt;Input File&lt;/h2&gt;
&lt;p&gt;The input file consists of one line with a single integer, 
representing the size of the (square) board. 
Following are characters representing the board state.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt; represents a square that pieces cannot occupy - the off-color squares.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_&lt;/code&gt; represents an unoccupied but valid square.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;B&lt;/code&gt; represents a black piece. &lt;code&gt;W&lt;/code&gt; represents a white piece.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;8
._._._._
_._._._.
.W._.B._
_.W.W._.
.W.B._._
_._._._.
.W._.W._
_._._._.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="checkers-output"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="output"&gt;Output&lt;/h2&gt;
&lt;p&gt;The output is simple: simply state which of the black checkers is capable of 
jumping each of the white checkers. If none, say "None". If multiple, say "Multiple".&lt;/p&gt;
&lt;p&gt;&lt;a name="checkers-solution"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="the-solution"&gt;The Solution&lt;/h1&gt;
&lt;p&gt;&lt;a name="checkers-kiss"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="keep-it-simple"&gt;Keep It Simple&lt;/h2&gt;
&lt;p&gt;To successfully solve the checkers problem, it is important to &lt;strong&gt;keep it simple&lt;/strong&gt;. 
There are different ways of representing the checkers problem abstractly,
but the best representation in a program is the simplest one - 
use a 2D array of chars to represent the board.&lt;/p&gt;
&lt;p&gt;Also as usual with permutations of arrangements on boards of fixed size,
recursion will be useful here.&lt;/p&gt;
&lt;p&gt;&lt;a name="checkers-parity"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="solution-analysis-parity"&gt;Solution Analysis: Parity&lt;/h2&gt;
&lt;p&gt;We can begin our analysis of the checkers problem with a few observations.&lt;/p&gt;
&lt;p&gt;First, we know that the valid squares for checkers are squares that are off by two.
But we know further that the black checkers must only move in jumps, which mean that
a piece at &lt;span class="math"&gt;\((i,j)\)&lt;/span&gt; can only reach squares indexed by 
&lt;span class="math"&gt;\((i + 4m, j + 4m)\)&lt;/span&gt; or &lt;span class="math"&gt;\((i + 4m + 2, j + 4n + 2)\)&lt;/span&gt;, 
where &lt;span class="math"&gt;\(m, n\)&lt;/span&gt; are positive/negative integers.&lt;/p&gt;
&lt;p&gt;That is, the checker pieces can make jumps of 2 squares at a time.  For example, if a checker
starts at the square &lt;span class="math"&gt;\((3,3)\)&lt;/span&gt; and jumps a white piece down and to the right, it moves
to square &lt;span class="math"&gt;\((5,5)\)&lt;/span&gt; or &lt;span class="math"&gt;\((3+2, 3+2)\)&lt;/span&gt;. If it jumps another white piece up and to the right,
it moves to square &lt;span class="math"&gt;\((3, 7)\)&lt;/span&gt; or &lt;span class="math"&gt;\((3, 3 + 4)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Further, we know that a black checker can only jump checkers at 
squares of the form &lt;span class="math"&gt;\((a + 2m + 1, b + 2n + 1)\)&lt;/span&gt;. Thus, black checkers either
have the correct parity to jump all of the white checkers, or they have
the same parity as the white checkers (in which case they can be ignored).&lt;/p&gt;
&lt;p&gt;If a black checker does not have the correct parity to jump white checkers, 
we can save ourselves time by not checking it.&lt;/p&gt;
&lt;p&gt;For example, in the checkerboard below, there are four black checkers,
but only one (row 2, column 3) has the correct parity to jump each of the 
white pieces. The other three are &lt;/p&gt;
&lt;p&gt;The other three 
has the correct parity, while the black checker in the right do not.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Checkerboard 3 - illustrate parity" src="/images/checkers3.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="checkers-euler"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="solution-analysis-graphs-and-euler-tours"&gt;Solution Analysis: Graphs and Euler Tours&lt;/h2&gt;
&lt;p&gt;If we examine the squares with correct parity, we can translate the board
into a graph representation. Squares with the "jump" parity are nodes
on the graph that can perform jumps. (No whites should have jump parity,
otherwise the board is impossible.) &lt;/p&gt;
&lt;p&gt;Squares with the "jumped" (i.e., white pieces) parity are nodes that are 
being jumped. These nodes form the edges between jump parity nodes,
and these edges must be occupied by a white piece for a black piece
to be able to pass through them. In this way, we can think of white pieces
as "bridges" between jump parity squares.&lt;/p&gt;
&lt;p&gt;This representation leads to thinking about the tour the black checker takes
through the checkerboard as an Euler tour across the graph. &lt;/p&gt;
&lt;p&gt;An Euler Tour, made famous by the 
&lt;a href="https://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg"&gt;Seven Bridges of KÃ¶nigsberg&lt;/a&gt;
problem solved by Euler in 1736, 
is a path that visits each node of the graph, traversing 
each edge once and only once.&lt;/p&gt;
&lt;p&gt;Euler showed that an Euler path visiting each edge of the graph
depends on the degree of each node in the graph.
For an Euler path to exist, the graph must be connected
and there must be exactly zero or two nodes of 
odd degree.&lt;/p&gt;
&lt;p&gt;If we walk through the checker board and construct the graph
(or assemble the information that the graph would have told us), 
we can determine whether an Euler tour exists, and find the Euler tour.&lt;/p&gt;
&lt;p&gt;The example above shows a checkerboard with two white pieces
forming two edges. The first white piece connects a jump parity square 
with a black piece on it to a jump parity square that is empty.
The second white piece connects two empty jump parity squares.&lt;/p&gt;
&lt;p&gt;The black "entrance" node has an odd degree (1).
The second, unoccupied node has an even degree (2).
The third, unoccupied node has an odd degree (1).
Therefore the graph has two nodes of odd degree, so an Euler tour exists. &lt;/p&gt;
&lt;p&gt;If we modify this example to add one additional white checker piece
on a square with correct parity, the Euler Path analysis identifies this 
as a board with no solution:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Checkerboard 4 - illustrate no Euler tour" src="/images/checkers4.png"&gt;&lt;/p&gt;
&lt;p&gt;This is because three of the nodes have degree 1 and one node has degree 3,
for a total of 4 nodes with odd degree. The requirements for an Euler Tour 
to exist (equivalent to saying a solution to the Checkers problem can be found
for a given black checker) are violated, so no solution can be found.&lt;/p&gt;
&lt;p&gt;If we were to add a second black checker piece two squares away,
an alternate graph (highlighted in blue) can be constructed, 
and an alternate Euler path through the graph is available.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Checkerboard 5 - illustrate alternate Euler tour" src="/images/checkers5.png"&gt;&lt;/p&gt;
&lt;p&gt;On the red graph, each node has an odd degree, so the number of nodes with odd degree is not 0 or 2.
On the blue graph, only the start and end nodes have an odd degree (1), while the rest of the nodes 
have a degree of 2 (one input and one output). This means an Euler Tour exists on the blue graph.&lt;/p&gt;
&lt;p&gt;In practice, a given black piece has a given graph connecting squares on the checkerboard - 
we can ask each node on that graph for its degree, and the degree of its neighbors,
and if a black piece results in an invalid number of odd nodes, we can abandon it.&lt;/p&gt;
&lt;p&gt;&lt;a name="checkers-algo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="solution-algorithm"&gt;Solution Algorithm&lt;/h2&gt;
&lt;p&gt;The algorithm to find solutions to this problem very roughly follows this pattern:
* First, perform a parity check to determine if a solution is impossible.
* Loop over each square of the board, looking for black pieces
* For each black piece:
    * Look at each neighbor:
        * Determine if there is a square to jump to if neighbor is white 
        * Determine number of odd neighbors
    * Fail if more than 2 odd neighbors, or 2 odd neighbors and odd self
    * Backtracking: explore neighbors, determine if all whites can be jumped&lt;/p&gt;
&lt;p&gt;&lt;a name="checkers-pseudocode"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="solution-pseudocode"&gt;Solution Pseudocode&lt;/h2&gt;
&lt;p&gt;The solution code has three basic parts (four, including the input parser):
* Initialize and parse the board
* Loop over each square, checking if black piece is a solution
* Function to check if black piece is a solution piece 
* (Recursive backtracking) function to jump each white piece possible to jump.&lt;/p&gt;
&lt;p&gt;Start with the initialization of the board and looping over each 
black piece to check if it is a solution piece:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;initialize solutions counter
initialize board

for each s in squares:
    if s is black piece:
        if s is solution piece:
            increment solutions counter
            save location

print summary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we just need to implement functions that can (a) check if a square
contains a black piece (easy) and (b) check if a black piece is a 
solution piece (uh... kind of what the whole problem boils down to, no?)&lt;/p&gt;
&lt;p&gt;We break that functionality into a separate function. Here is the 
pseudocode to check if a black piece in a particular square 
is a solution piece. This function iterates over squares 
with jump parity - that means this function traverses the 
&lt;strong&gt;nodes only&lt;/strong&gt; in the graph representation of the checkerboard.&lt;/p&gt;
&lt;p&gt;This function enforces the requirement that no node can have more than 2 odd neighbors,
or be odd if it has more than 2 odd neighbors, since a graph must have 0 or 2 nodes
with odd degree in the graph for an Euler Tour to exist. &lt;/p&gt;
&lt;p&gt;While we're at it, we also check if there are any white checker pieces
without a square to land in when they are jumped (i.e., landing square blocked 
by another black piece or at edge of board).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;function is solution piece:
    for each square of similar &amp;quot;jump&amp;quot; parity:
        for each neighbor:
            check if neighbor is odd 
            if a neighbor square is white:
                if next square is not empty:
                    fail fast

    if more than 2 odd neighbors, or 2 neighbors and odd:
        fail fast

    # we have a viable solution

    recursively count number of jumped white checkers 

    if number of jumped white checkers equals number of white checkers on board:
        return true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finding squares of similar jump parity is as easy as looping over each row and column, 
and checking if it is off by 2 with the row/column of the black checker piece that we are
currently checking. Checking if a neighbor is odd is as straightforward as counting its degree - 
checking each of its four neighbors and determining which ones are open.
This leaves finding the number of jumped white checkers as the only functionality left to define.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define number of jumped white checkers:
    initialize white checkers jumped counter
    for each neighbor:
        if white piece, unvisited, with an empty place to jump to:
            visit white piece
            increment white checkers jumped
            call number of jumped white checkers on next next neighbor
            # this should be the empty space
    return number white checkers jumped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="checkers-refs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;"ACM Pacific Region Programming Competition." Association of Computing Machinery. 19 June 2017.
&amp;lt;&lt;a href="http://acmicpc-pacnw.org/"&gt;http://acmicpc-pacnw.org/&lt;/a&gt;&amp;gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="programming"></category><category term="computer science"></category><category term="final project"></category><category term="competitive programming"></category></entry><entry><title>Teaching Recursion with the N Queens Problem</title><link href="https://charlesreid1.github.io/teaching-recursion-with-the-n-queens-problem.html" rel="alternate"></link><published>2017-05-16T18:00:00-07:00</published><updated>2017-05-16T18:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-05-16:/teaching-recursion-with-the-n-queens-problem.html</id><summary type="html">&lt;p&gt;Table of Contents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-gentle-intro"&gt;A Gentle Introduction to Recursion&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-backtrack"&gt;Recursive Backtracking&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-decision"&gt;Paring Down the Decision Tree&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-pseudocode"&gt;The Pseudocode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-diag"&gt;Accounting for Diagonal Attacks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-why"&gt;Why the N Queens Problem?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="8q-gentle-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="a-gentle-introduction-to-recursion"&gt;A Gentle Introduction to Recursion&lt;/h2&gt;
&lt;p&gt;Recursion, particularly recursive backtracking, is far and away the most challenging topic 
I cover when I teach the CSE 143 (Java Programming II) course at South Seattle College.
Teaching the concept of recursion, on its own, is challenging: 
the concept is a hard one to encounter in everyday life, making it unfamiliar, 
and that creates a lot of friction when students try to understand how to apply recursion. &lt;/p&gt;
&lt;p&gt;The â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Table of Contents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-gentle-intro"&gt;A Gentle Introduction to Recursion&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-backtrack"&gt;Recursive Backtracking&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-decision"&gt;Paring Down the Decision Tree&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-pseudocode"&gt;The Pseudocode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-diag"&gt;Accounting for Diagonal Attacks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-why"&gt;Why the N Queens Problem?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="8q-gentle-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="a-gentle-introduction-to-recursion"&gt;A Gentle Introduction to Recursion&lt;/h2&gt;
&lt;p&gt;Recursion, particularly recursive backtracking, is far and away the most challenging topic 
I cover when I teach the CSE 143 (Java Programming II) course at South Seattle College.
Teaching the concept of recursion, on its own, is challenging: 
the concept is a hard one to encounter in everyday life, making it unfamiliar, 
and that creates a lot of friction when students try to understand how to apply recursion. &lt;/p&gt;
&lt;p&gt;The key, as I tell students from day one of the recursion unit,
is to always think in terms of the base case and the recursive case.
The base case gives your brain a "trapdoor" to exit out of an otherwise 
brain-bending infinite conceptual loop. It helps recursion feel more manageable.
But most importantly: it enables thinking about recursion 
in terms of its inputs and outputs. &lt;/p&gt;
&lt;p&gt;More specifically, to understand recursion requires (no, not recursion)
thinking about two things: &lt;strong&gt;where you enter the function&lt;/strong&gt; 
and &lt;strong&gt;when you stop calling the function&lt;/strong&gt;.
These are the two &lt;em&gt;least&lt;/em&gt; complicated cases, and they 
also happen to be the two &lt;em&gt;most&lt;/em&gt; important cases.&lt;/p&gt;
&lt;p&gt;College courses move at an artificially inflated pace, 
ill-suited for most community college students,
and the material prescribed must be presented at the given pace
mostly independent of any real difficulties the students face
(there is only minimal room for adjustment, &lt;em&gt;at most&lt;/em&gt; 2-3 lectures).&lt;/p&gt;
&lt;p&gt;This means that, before the students have had an opportunity to get comfortable 
with the concept of recursion, and really nail it down, they're introduced to yet another
mind-bending topic: recursive backtracking algorithms. &lt;/p&gt;
&lt;p&gt;These bring a whole new set of complications to the table.
Practice is crucial to students' understanding, and all too often,
the only way to get students to practice (particularly with difficult subject matter 
like recursion) is to spend substantial amounts of time in class.
My recursion lectures routinely throw my schedule off by nearly a week,
because even the simplest recursion or backtracking exercise can eat up
an hour or more.&lt;/p&gt;
&lt;p&gt;&lt;a name="8q-backtrack"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="recursive-backtracking"&gt;Recursive Backtracking&lt;/h2&gt;
&lt;p&gt;Backtracking is an approach for exploring problems that involve
making choices from a set of possible choices. A classic example of 
backtracking is the 8 Queens problem, which asks: "How many ways are there
of placing 8 queens on a chessboard, such that no queen attacks any other queen?"&lt;/p&gt;
&lt;p&gt;The problem is deceptively simple; solving it requires some mental gymnastics.
(By the way, most people who have actually heard of the problem are computer scientists
who were exposed to it &lt;strong&gt;in the process of learning how to solve it&lt;/strong&gt;, 
leading to the hipster effect - it's often dismissed by computer scientists as 
an "easy" problem. The curse of knowledge at work.)&lt;/p&gt;
&lt;p&gt;The recursive backtracking algorithm requires thinking about the squares on which 
to place the 8 queens in question as the set of choices to be made. &lt;/p&gt;
&lt;p&gt;The naive approach ignores the constraints, and makes all 8 choices of where to place
the 8 queens before ever checking if the queen placements are valid. Thus, we could start
by placing all 8 queens in one single row on the top, or along one single column on the left.
Using this approach, we have 64 possibilities (64 open squares) for the first queen,
then 63 possibilities for the second queen, then 62 possibilities for the third queen,
and so on. This gives a total number of possible combinations of:&lt;/p&gt;
&lt;div class="math"&gt;$$
\dfrac{64!}{(64-8)!} = 178,462,987,637,760
$$&lt;/div&gt;
&lt;p&gt;(By the way, for those of you following along at home, you can do this calculation with Python:)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from scipy import *
&amp;gt;&amp;gt;&amp;gt; math.factorial(64)/math.factorial(64-8)
178462987637760L
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Even for someone without a sense of big numbers, like someone in Congress, 
that's still a pretty big number. Too many for a human being to actually try 
in a single lifetime.&lt;/p&gt;
&lt;p&gt;&lt;a name="8q-decision"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="paring-down-the-decision-tree"&gt;Paring Down the Decision Tree&lt;/h2&gt;
&lt;p&gt;But we can do better - we can utilize the fact that the queen, in chess,
attacks horizontally and vertically, by doing two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Limit the placement of queens so that there is one queen per column;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Limit the placement of queens so that there is one queen per row.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Note that this is ignoring diagonal attacks; we'll get there in a minute.)&lt;/p&gt;
&lt;p&gt;This limits the number of solutions as follows: the first queen placed on the board
must go in the first column, and has 8 possible squares in which it can go.
The second queen must go in the second column, and has 7 possible squares in which 
it can go - ignoring the square corresponding to the row that would be attacked
by the first queen. The third queen goes into the third column, which has 6 open
squares (ignoring the two rows attacked by the two queens already placed).&lt;/p&gt;
&lt;p&gt;That leads to far fewer solutions:&lt;/p&gt;
&lt;div class="math"&gt;$$
8! = 40,320
$$&lt;/div&gt;
&lt;p&gt;and for those following along at home in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from scipy import *
&amp;gt;&amp;gt;&amp;gt; math.factorial(8)
40320
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To visualize how this utilization of information
helps reduce the problem space, I often make use of 
a decision tree, to get the students to think about
recursive backtracking as a depth-first tree
traversal. &lt;/p&gt;
&lt;p&gt;(By the way, this is a strategy whose usefulness 
extends beyond the 8 queens problem, or even 
recursive backtracking problems. For example,
the problem of finding cycles in a directed graph
can be re-cast in terms of trees.)&lt;/p&gt;
&lt;p&gt;&lt;img src="images/8-queens-decision-tree.png" width="500px" /&gt;&lt;/p&gt;
&lt;p&gt;So far, we have used two of the three directions of attack for queens.
This is also enough information to begin an implementation of an algorithm - 
a backtracking algorithm can use the fact that we place one queen per column,
and one queen per row, to loop over each row, and steadily march through each 
column sequentially (or vice-versa).&lt;/p&gt;
&lt;p&gt;&lt;a name="8q-pseudocode"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-pseudocode"&gt;The Pseudocode&lt;/h2&gt;
&lt;p&gt;There is still a bit more to do to cut down on the problem space
that needs to be explored, but before we do any of that,
we should first decide on an approach and sketch out the psuedocode.&lt;/p&gt;
&lt;p&gt;The structure of the explore method pseudocode thus looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;explore(column):
    if last column:
        # base case
        add to solutions
    else:
        # recursive case
        for each row:
            if this is a safe row:
                place queen on this row
                explore(column+1)
                remove queen from this row
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="the-actual-code"&gt;The Actual Code&lt;/h2&gt;
&lt;p&gt;Over at &lt;a href="https://git.charlesreid1.com/charlesreid1/n-queens"&gt;git.charlesreid1.com/charlesreid1/n-queens&lt;/a&gt; 
I have several implementations of the N Queens problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://git.charlesreid1.com/charlesreid1/n-queens/src/master/java/NQueens.java"&gt;Java solution&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://git.charlesreid1.com/charlesreid1/n-queens/src/master/perl/nqueens.pl"&gt;Perl solution&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://git.charlesreid1.com/charlesreid1/n-queens/src/master/python/nqueens.py"&gt;Python solution&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://git.charlesreid1.com/charlesreid1/n-queens/src/master/cpp/nqueens.cpp"&gt;C++ solution&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="row-column-and-diagonal-attacks"&gt;Row, Column, and Diagonal Attacks&lt;/h2&gt;
&lt;p&gt;We have already utilized knowledge that there will only be one queen 
per column, and one queen per row. But one last bit of information we can
utilize is the fact that queens attack diagonally. 
This allows us to eliminate any squares that are along the diagonals
of queens that have already been placed on the board.&lt;/p&gt;
&lt;p&gt;How to eliminate the diagonals? It basically boils down to two approaches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use a Board class to abstract away details (and the Board class will implement "magic" like an &lt;code&gt;isValid()&lt;/code&gt; method).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hack the index - implement some index-based math to eliminate 
   any rows that are on the diagonals of queens already on the board.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first approach lets you abstract away the details,
possibly even using &lt;a href="http://www.buildingjavaprograms.com/code-files/4ed/ch12/Board.java"&gt;a Board class written by a textbook&lt;/a&gt;,
which is &lt;s&gt;lazy&lt;/s&gt; fine, if you are working on a practical problem
and need some elbow grease, but not so much if you are a computer science
student learning the basic principles of software design.&lt;/p&gt;
&lt;p&gt;The second approach requires some deep thinking about how the locations of 
the N (or 8) queens are being represented in the program.&lt;/p&gt;
&lt;p&gt;&lt;a name="8q-diag"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="accounting-for-diagonal-attacks"&gt;Accounting for Diagonal Attacks&lt;/h2&gt;
&lt;p&gt;At some point, when you use the above pseudocode, 
you are going to want to know the answer to the following question:
&lt;strong&gt;for a given column k, what rows are invalid because they are on 
diagonals of already-placed queens?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To answer this, think about where the diagonal indices of 
chess board squares are located, and how to find the diagonals on column X 
attacked by a queen placed in column Y.&lt;/p&gt;
&lt;p&gt;The following diagram shows a queen on row 3 of column 2, and the diagonal
attack vectors of that queen. Each of the squares along those diagonal
vectors can be ruled out as possible squares to place a queen. 
When selecting a square for the third queen, which goes in the third column, 
the second and fourth rows can both be ruled out due to the diagonals.
(The third row, of course, can also be ruled out, due to the one-queen-per-row rule.)&lt;/p&gt;
&lt;p&gt;However, the effect of the already-placed queen propagates forward, 
and affects the choice of possible squares for each queen after it. 
If we jump ahead in the recursive algorithm, to say, queen number 6, 
being placed on column number 6 (highlighted in blue), the queen in column 2 (row 3) 
still affects the choice of squares for that column (as do all queens previously
placed on the board).  In the case pictured in the figure, 
the seventh row (as well as an off-the-board row) of column 6 
can be ruled out as possible squares for the placement of the 
6th queen.&lt;/p&gt;
&lt;p&gt;&lt;img src="images/8-queens-diag.png" width="500px" /&gt;&lt;/p&gt;
&lt;p&gt;Accounting for these diagonal attacks can lead to substantial speed-ups: 
each queen that is placed can eliminate up to two additional squares per column,
which means the overall decision tree for the N queens problem becomes a lot less
dense, and faster to explore. &lt;/p&gt;
&lt;p&gt;&lt;a name="8q-why"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="why-the-n-queens-problem"&gt;Why the N Queens Problem?&lt;/h2&gt;
&lt;p&gt;Invariably, some students will deal with this difficult problem
by questioning the premise of the question - a reasonable 
thing to wonder. &lt;/p&gt;
&lt;p&gt;This leads to a broader, more important question: 
why do computer scientists focus so much on &lt;em&gt;games&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Games, like computers, are self-contained universes, 
they are abstract systems, they remove messy details and complications.
They allow you to start, from scratch, by setting up a board,
a few rules, a few pieces - things that are easy to implement 
in a computer.&lt;/p&gt;
&lt;p&gt;Mazes, crossword puzzles, card games, checkers, chess, 
are all systems with a finite, small number of elements 
that interact in finite, small numbers of ways.
The beauty of games is that those small rule sets
can result in immensely complex systems, so that there
are more &lt;a href="https://en.wikipedia.org/wiki/Shannon_number"&gt;branches in the chess decision tree&lt;/a&gt;
(the Shannon number, &lt;span class="math"&gt;\(10^{120}\)&lt;/span&gt;) than there are 
&lt;a href="https://en.wikipedia.org/wiki/Eddington_number"&gt;protons in the universe&lt;/a&gt;
(the Eddington number, &lt;span class="math"&gt;\(10^{80}\)&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;That simplicity is important in computer science.
Any real-world problem is going to have to be broken down,
eventually, into pieces, into rules, into a finite representation,
so that anything we try to model with a computer, 
any problem we attempt to solve computationally,
no matter how complex, will always have a game-like representation.&lt;/p&gt;
&lt;p&gt;(Side note: much of the literature in systems operations research,
which studies the application of mathematical optimization to
determine the best way to manage resources, 
came out of work on war games - which were 
themselves game-ified, simplified representations
of real, complex systems. Econometrics, or 
"computational economics," is another field where 
game theory has gained much traction and finds many 
practical applications.)&lt;/p&gt;
&lt;p&gt;Recursion, too, is a useful concept in and of itself,
one that shows up in sorting and searching algorithms,
computational procedures, and even in nature. &lt;/p&gt;
&lt;p&gt;But it isn't just knowing &lt;strong&gt;where&lt;/strong&gt; to look - 
it's knowing what you're looking for in the first place. &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="java"></category><category term="algorithms"></category><category term="recursion"></category><category term="n-queens"></category></entry><entry><title>Undergraduate Research Project: Wireless Sensor Networks for Internet of Things Applications (Part 2: The Technologies)</title><link href="https://charlesreid1.github.io/undergraduate-research-project-wireless-sensor-networks-for-internet-of-things-applications-part-2-the-technologies.html" rel="alternate"></link><published>2017-05-14T12:00:00-07:00</published><updated>2017-05-14T12:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-05-14:/undergraduate-research-project-wireless-sensor-networks-for-internet-of-things-applications-part-2-the-technologies.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr2-tech"&gt;Undergraduate Research (UGR) Project: The Technologies&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr2-overview"&gt;Overview of the UGR Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-student"&gt;Student-Led Components&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr2-pi"&gt;Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-questions"&gt;Question Skills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-aircrack"&gt;Aircrack/Airodump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-csv"&gt;Pi CSV Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-db"&gt;NoSQL Database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-backend"&gt;Backend Components&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr2-stunnel"&gt;Stunnel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-vps"&gt;Virtual Private Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-docker"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-flowchart"&gt;Technologies Flowchart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="ugr2-tech"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="undergraduate-research-project-ugr-the-technologies"&gt;Undergraduate Research Project (UGR): The Technologies&lt;/h1&gt;
&lt;p&gt;In this post we'll cover some of the technologies that were used in our
South Seatte College undergraduate research project.
The project involved an ensemble of different technologies
to complete each component of the data analysis pipeline.
Some components were planned for, but other components 
were implemented due to "surprise" challenges that cropped up 
during the course of the project, while â€¦&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr2-tech"&gt;Undergraduate Research (UGR) Project: The Technologies&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr2-overview"&gt;Overview of the UGR Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-student"&gt;Student-Led Components&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr2-pi"&gt;Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-questions"&gt;Question Skills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-aircrack"&gt;Aircrack/Airodump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-csv"&gt;Pi CSV Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-db"&gt;NoSQL Database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-backend"&gt;Backend Components&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr2-stunnel"&gt;Stunnel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-vps"&gt;Virtual Private Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-docker"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-flowchart"&gt;Technologies Flowchart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="ugr2-tech"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="undergraduate-research-project-ugr-the-technologies"&gt;Undergraduate Research Project (UGR): The Technologies&lt;/h1&gt;
&lt;p&gt;In this post we'll cover some of the technologies that were used in our
South Seatte College undergraduate research project.
The project involved an ensemble of different technologies
to complete each component of the data analysis pipeline.
Some components were planned for, but other components 
were implemented due to "surprise" challenges that cropped up 
during the course of the project, while yet more technologies
were integrated into the pipeline to avoid extra costs. &lt;/p&gt;
&lt;p&gt;&lt;a name="ugr2-overview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="overview-of-the-ugr-project"&gt;Overview of the UGR Project&lt;/h2&gt;
&lt;p&gt;Before we go further, let's recap what the project was all about.
As the research project mentor, I was leading a group of five undergraduate 
students in a project entitled "Wireless Sensor Networks for Internet of Things
Applications." This involved guiding students through the construction of a data analysis
pipeline that would utilize a set of sensors, each collecting data about wireless networks 
in the vicinity, and collect the data into a central database. We then impemented
data analysis and visualization tools to analyze the sensor data that was collected
and extract meaningful information from it.&lt;/p&gt;
&lt;p&gt;There were three major sets of tools used - those used onboard the Raspberry Pi sensors
(to extract and transfer wireless data), those used to store and organize 
the wireless sensor data (NoSQL database tools), and those used to process,
analyze, and visualize the data colleted (Python data analysis tools).&lt;/p&gt;
&lt;p&gt;The technologies used can be classified two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Student-Led Components&lt;/em&gt;&lt;/strong&gt; - the software components of the pipeline 
    that students learned about, and whose implementation was student-led. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Backend Components&lt;/em&gt;&lt;/strong&gt; - the software components of the pipeline
    that were too complicated, too hairy, and/or too extraneous to the project
    objectives to have students try and handle. These were the components of the project
    that "just worked" for the students. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="ugr2-student"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="student-led-components"&gt;Student-Led Components&lt;/h2&gt;
&lt;p&gt;&lt;a name="ugr2-pi"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="raspberry-pi"&gt;Raspberry Pi&lt;/h3&gt;
&lt;p&gt;The Raspberry Pi component presented some unique challenges, with the chief being,
enabling the students to actually remotely connect via SSH to a headless Raspberry Pi. &lt;/p&gt;
&lt;p&gt;This deceptively simple task requires an intermediate knowledge of computer networking,
and coupled with the obstreperous Raspberry Pi, a restrictive college network,
the additional complications of students running Linux via virtual machines on Windows 
(&lt;strong&gt;all&lt;/strong&gt; of the students were using Windows)...
It ended up taking more than a month to be able to 
consistently boot up the Pi, remotely SSH to the Pi, 
and get a command line using either a crossover cable
or a wireless network. &lt;/p&gt;
&lt;p&gt;Part of this was induced by hardware, but part was due to unfamiliarity with SSH and Linux,
the problems that constantly cropped up ("X is not working in the virtual machine")
that were trivial for me to solve, but enigmas for the students, 
who often did not possess Google-fu.&lt;/p&gt;
&lt;p&gt;&lt;a name="ugr2-questions"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="question-skills"&gt;Question Skills&lt;/h3&gt;
&lt;p&gt;This last point is subtle but important: 
the simple skill of knowing what questions to ask, and how to ask them, 
be they questions asked of a machine or a person or a data set,
was one of the most important skills the students gained during this process.
These skills go beyond the usual computer science curriculum,
which consists of learning structured information in terms of languages and functionality,
and require students to solve unstructured problems that are complex - 
so complex, they simply do not care about languages or functionality.&lt;/p&gt;
&lt;p&gt;The flexibility to use many tools was a key element of this project,
and a principal reason to use a scripting language (Python)
that was flexible enough to handle the many tasks we would be 
asking of it.&lt;/p&gt;
&lt;p&gt;A word about networking issues that the students had connecting to the headless Raspberry Pis: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Issues were due to a combination of hardware and networking problems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many issues required multi-step workarounds&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Workarounds introduced new concepts (DHCP, subnets, IP configuration schemes, IPv6) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each new concept introduced led students to feel overwhelmed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Students had a difficult time telling what steps were "normal" and which were esoteric&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is a lot of documentation to read - especially difficult for non-English speakers &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of the multitude of problems students experienced arose from different aspects of the machines.
Each problem (networking, hardware, physical power, cables, networking, 
 packet dropping, interfaces, incorrect configuration, 
  firewalls) led to more concepts, more software, more commands.&lt;/p&gt;
&lt;p&gt;It can be difficult to troubleshoot networking and hardware issues.
It is even more difficult to explain the problem while you are troubleshooting it, 
and also explain things are important and that students should learn more about,
versus some concept that is of questionable usefulness.
(Case in point: regular expressions.) On top of that, it is difficult to 
constantly make judgment calls about what things are important, how important they are,
and also helping students not to feel overwhelmed by all the things they don't know yet.&lt;/p&gt;
&lt;p&gt;All the while, you are also teaching Google-fu. Did I mention that many of the students
do not speak English as their first language?&lt;/p&gt;
&lt;h3 id="aircrackairodump"&gt;Aircrack/Airodump&lt;/h3&gt;
&lt;p&gt;Once the students had reached the Raspberry Pi command line, we moved on to our next major tool - 
the &lt;a href="https://aircrack-ng.org"&gt;aircrack-ng&lt;/a&gt; suite. This was a relatively easy tool to get working,
as it was already available through a package manager (yet another new concept for the students), 
so we did not waste much time getting aircrack operational and gathering our first sensor data. 
However, to interpret the output of the tool required spending substantial time covering 
many aspects of networking - not just wireless networks, but general concepts like packets,
MAC addresses, IP addresses, DHCP, ARP, encryption, and the 802.11 protocol specification.&lt;/p&gt;
&lt;p&gt;Initially I had thought to use a Python library called &lt;a href="http://secdev.org/projects/scapy/"&gt;Scapy&lt;/a&gt;,
which provides functionality for interacting with wireless cards and wireless packets directly from Python.
My bright idea was to use aircrack to show students what kind of information about wireless networks
can be extracted, and to write a custom Python script that would extract only the information we were
interested in.&lt;/p&gt;
&lt;p&gt;Unfortunately, the complexity of Scapy, and the advanced level of knowledge
required of users (even to follow the documentation), 
meant the tool overwhelmed the students. 
We wound up practicing putting wireless USB devices into monitor mode
from the command line, and starting the wireless network signal
profiling tool. &lt;/p&gt;
&lt;p&gt;The approach we adopted was to collect wireless network data using aircrack-ng's
airodump-ng tool, and to dump the network data at short intervals (15 seconds) 
to CSV files. These CSV files were then post-processed with Python to extract information 
and populate the database. &lt;/p&gt;
&lt;p&gt;By the end of the first quarter of the project, we were able to utilize 
airodump-ng to collect wireless network data into CSV files, and parse the data
with a Python script.&lt;/p&gt;
&lt;p&gt;&lt;a name="ugr2-csv"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="pi-csv-files"&gt;Pi CSV Files&lt;/h3&gt;
&lt;p&gt;Further complicating the process of collecting wireless network data from 
Raspberry Pis was the fact that we were gathering data from the Pis in a
variety of different environments - most of which were unfamiliar, 
and would not reliably have open wireless networks or networks that the Pi
was authorized to connect to. 
Even on the South Seattle campus, the network was locked down, with only
HTTP, HTTPS, and DNS traffic allowed on ports 80, 443, and 53, respectively.&lt;/p&gt;
&lt;p&gt;This meant we couldn't rely on the Pis making a direct connection to the 
remote server holding the central database. &lt;/p&gt;
&lt;p&gt;Instead, we utilized rsync to synchronize the CSV files gathered by the Pi
with the remote server, and we offloaded the process of extracting and analyzing 
data from the CSV files to a script on the remote server.&lt;/p&gt;
&lt;p&gt;That way, the Pis gather the raw data and shuttle the raw data to the remote server
(whenever it is available), and the data extraction and analysis process can be performed
on the raw data in the CSV files as many times as necessary. If the analysis 
required different data, or needed to be re-run, the process could simply be updated
and re-run on the databae server, with the Raspberry Pi removed from the loop.&lt;/p&gt;
&lt;p&gt;&lt;a name="ugr2-db"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="nosql-database"&gt;NoSQL Database&lt;/h3&gt;
&lt;p&gt;We needed a warehouse to store the data that the Raspberry Pis were gathering.
The aircrack script was dumping CSV files to disk every 15 seconds. 
Rather than process the data on-board the Raspberry Pi, 
the script to extract and process data from the CSV files 
was run on the computer running the database.&lt;/p&gt;
&lt;p&gt;This is a best practice I learned form experience: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Extract and process the sensor data on-premises (i.e., near or where the data is stored)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep the original, raw data whenever possible, transport it to the data storage &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assume the components of your pipeline will be unreliable or asychronously available&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build the pipeline to be robust and handle failures.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We used a cheap, $5/month virtual private server from Linode
to run the database. The database technology we chose was MongoDB,
mainly because it is a ubiquitous, open-source, network-capable 
NoSQL database. The NoSQL option was chosen to give students
flexibility in structuring the database, and avoid the extra pain 
of making a weakly-typed language like Python talk to a strongly-typed 
database system like SQLite or PostgreSQL 
(which would raise so many questions from students about what 
 is "normal" or "not normal" that I would start to feel like the 
 parent of a bunch of teenagers).&lt;/p&gt;
&lt;p&gt;Think of the long-term influence that research mentors can have: 
simply by showing students how to use vim, and not emacs, 
I have set them on the path to enlightenment.&lt;/p&gt;
&lt;p&gt;We ran the database on the server, but conceptualizing the database
was difficult for the students. To this end, I set up an instance of
Mongo Express, which provided a password-protected, web-based interface
for administering MongoDB that enabled the students to deal with and visualize
information more easily.&lt;/p&gt;
&lt;p&gt;MongoDB also provided Python bindings via PyMongo, 
and it was all available for students to install on their local
virtual machines and experiment with basic database operations.
The MongoDB documentation provides some good examples.&lt;/p&gt;
&lt;p&gt;The main struggle that students had was transferring what they had learned
about wireless signals and aircrack to the database. 
Knowing what questions to ask the database proved to take most of their time.&lt;/p&gt;
&lt;p&gt;&lt;a name="ugr2-backend"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="backend-components"&gt;Backend components&lt;/h2&gt;
&lt;p&gt;During the process of getting each component working, 
the project occasionally encountered difficulties.
The chiefest among these was the fact that 
the wireless network at our college allowed traffic 
only on ports 80, 443, and 53, meaning SSH, Rsync, and 
MongoDB traffic would not make it past the school's firewall.&lt;/p&gt;
&lt;p&gt;&lt;a name="ugr2-stunnel"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="stunnel"&gt;Stunnel&lt;/h3&gt;
&lt;p&gt;I have &lt;a href="http://charlesreid1.github.io/stunnel.html"&gt;written about Stunnel before&lt;/a&gt; 
on this blog, and have some notes 
on Stunnel on the &lt;a href="https://charlesreid1.com/wiki/Stunnel"&gt;charlesreid1.com wiki&lt;/a&gt;.
This tool proved invaluable for overcoming some of the 
difficulties on the back-end for the Raspberry Pis.&lt;/p&gt;
&lt;p&gt;To allow the Raspberry Pis to securely send data
to the database server, I wrote a script
that would run on boot and would look for a list of 
trusted wireless networks, connect to them,
and establish an stunnel connection with the remote database server.
The script then used rsync over stunnel to synchronize any raw data 
collected by the Raspberry Pi with the remote database server.&lt;/p&gt;
&lt;p&gt;This also satisfied the criteria that the 
data pipeline be robust and capable of handling 
failure - this system used stunnel to punch out of a 
restrictive firewall, and rsync handled comparisons of 
raw data on the remote and local ends to ensure that 
only the minimum possible amount of data was 
transferred between the two. The raw data was 
plain text and consisted of text files of modest size,
making the job easy for rsync.&lt;/p&gt;
&lt;p&gt;This was implemented in a boot script, so one simply connected 
one of the Raspberry Pis to a portable power source (battery pack),
and the Pi would look for networks that it trusted, 
join those networks, and make an stunnel connection over the network
to transfer its data (CSV files) to the database server.&lt;/p&gt;
&lt;p&gt;&lt;a name="ugr2-vps"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="virtual-private-server"&gt;Virtual Private Server&lt;/h3&gt;
&lt;p&gt;Another bit of infrastructure that was provided on the back end 
was the virtual private server from Linode, so that the students 
did not have to find a workaround to SSH out of the school's 
restrictive firewall. A domain for the server was also purchased/provided.&lt;/p&gt;
&lt;p&gt;&lt;a name="ugr2-docker"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="docker"&gt;Docker&lt;/h3&gt;
&lt;p&gt;The virtual private server ran each service in a Docker container - 
stunnel, MongoDB, MongoExpress, 
and the long list of Python tools needed to run the 
Jupyter notebooks for data analysis.&lt;/p&gt;
&lt;p&gt;Each Docker container exposed a particular port, 
making it accessible at an appropriate scope,
and by connecting containers to other containers,
each component could also seamlessly communicate.
Thus one Docker container ran the MongoDB, while another
container ran MongoExpress, which established a connection
to the MongoDB container.&lt;/p&gt;
&lt;p&gt;Using Docker was not strictly necessary, but it was a good
opportunity to learn about Docker and get it set up to help solve
real-world infrastructure and service problems.&lt;/p&gt;
&lt;p&gt;&lt;a name="ugr2-flowchart"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="technologies-flowchart"&gt;Technologies Flowchart&lt;/h2&gt;
&lt;p&gt;The following flowchart shows the technology stack that was used to coordinate 
the various moving parts between the Raspberry Pi clients and the remote 
database server.&lt;/p&gt;
&lt;p&gt;&lt;img alt="UGR Wifi Schematic" src="/images/ugr-wifi.png"&gt;&lt;/p&gt;</content><category term="Wireless"></category><category term="wireless"></category><category term="security"></category><category term="undergraduate research project"></category><category term="stunnel"></category><category term="SSH"></category><category term="aircrack"></category><category term="mongodb"></category><category term="python"></category><category term="jupyter"></category><category term="linux"></category><category term="raspberry pi"></category></entry><entry><title>Undergraduate Research Project: Wireless Sensor Networks for Internet of Things Applications (Part 1: The Project)</title><link href="https://charlesreid1.github.io/undergraduate-research-project-wireless-sensor-networks-for-internet-of-things-applications-part-1-the-project.html" rel="alternate"></link><published>2017-05-14T11:00:00-07:00</published><updated>2017-05-14T11:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-05-14:/undergraduate-research-project-wireless-sensor-networks-for-internet-of-things-applications-part-1-the-project.html</id><summary type="html">&lt;p&gt;Table of Contents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr-overview"&gt;Overview of the Undergraduate Research (UGR) Project&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr-ugr"&gt;South Seattle UGR Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr-engr-design"&gt;Engineering Design Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr-components"&gt;Project Components: Extract, Store, and Analyze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr-buzzword"&gt;The Internet of Things: Not Just a Buzzword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr-uw"&gt;UW Research Symposium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="ugr-overview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="overview-of-the-undergraduate-research-ugr-project"&gt;Overview of the Undergraduate Research (UGR) Project&lt;/h1&gt;
&lt;p&gt;&lt;a name="ugr-ugr"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="south-seattle-ugr-project"&gt;South Seattle UGR Project&lt;/h2&gt;
&lt;p&gt;For the past year, in addition to my duties as a computer science and math instructor at South Seattle College,
I have served as a research mentor for an NSF-funded undergraduate research project involving (off-and-on) five different 
South Seattle students - all of whom have expressed interest in transferring to the University of Washington's 
computer science â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Table of Contents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr-overview"&gt;Overview of the Undergraduate Research (UGR) Project&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr-ugr"&gt;South Seattle UGR Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr-engr-design"&gt;Engineering Design Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr-components"&gt;Project Components: Extract, Store, and Analyze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr-buzzword"&gt;The Internet of Things: Not Just a Buzzword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr-uw"&gt;UW Research Symposium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="ugr-overview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="overview-of-the-undergraduate-research-ugr-project"&gt;Overview of the Undergraduate Research (UGR) Project&lt;/h1&gt;
&lt;p&gt;&lt;a name="ugr-ugr"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="south-seattle-ugr-project"&gt;South Seattle UGR Project&lt;/h2&gt;
&lt;p&gt;For the past year, in addition to my duties as a computer science and math instructor at South Seattle College,
I have served as a research mentor for an NSF-funded undergraduate research project involving (off-and-on) five different 
South Seattle students - all of whom have expressed interest in transferring to the University of Washington's 
computer science program after they finish at South Seattle College.&lt;/p&gt;
&lt;p&gt;The students have various levels of preparation - some have taken calculus and finished programming, while others 
are just starting out and have no programming experience outside of "programming lite" languages like HTML and CSS. &lt;/p&gt;
&lt;p&gt;But it's also been an extremely rewarding opportunity. I have gotten the chance to kindle students' interests in the 
vast world of wireless security, introduced them to essential technologies like Linux, helped them get hands-on experience
with NoSQL databases, and guided them through the process of analyzing a large data set to extract meaningful information -
baby data scientists taking their first steps. &lt;/p&gt;
&lt;p&gt;These are all skills that will help equip students who are bound for university-level computer science programs,
giving them both basic research skills (knowing the process to get started answering difficult, complex questions) 
and essential tools in their toolbelt. &lt;/p&gt;
&lt;p&gt;Two students who I mentored as part of a prior UGR project last year (also focused on wireless networks 
and the use of Raspberry Pi microcomputers) both successfully transferred to the 
University of Washington's computer science program (one in the spring quarter of 2016, 
the other in the fall of 2016). Both students told me that one of the first courses they took 
at the University of Washington was a 2-credit Linux laboratory class, where they learned the basics of Linux.
Having already installed Linux virtual machines onto their personal computers, and having used technologies
like SSH to remotely connect to other Linux machines, they both happily reported that it was 
smooth sailing in the course, and it was one less thing to worry about in the 
process of transferring and adjusting to the much faster pace of university courses.&lt;/p&gt;
&lt;p&gt;&lt;a name="ugr-engr-design"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="engineering-design-project"&gt;Engineering Design Project&lt;/h2&gt;
&lt;p&gt;The project was entitled "Wireless Sensor Networks for Internet of Things Applications," 
and was intended to get students introduced to the basic workflow of any 
internet of things system: a sensor to collect data, a wireless network to connect 
sensors together, a warehouse to store data collected from sensors,
and a workflow for analyzing the data to extract meaningful information.&lt;/p&gt;
&lt;p&gt;The focus was to implement a general workflow using tools that could extend to 
many internet of things applications, be they commercial, residential, or industrial. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However,&lt;/strong&gt; the NSF grant provided only a modest amount of funding, intended to go toward
stipends to pay students and mentors a modest amount during the quarter, with only
modest amounts of money for basic equipment.  (We were basically running a research project on a $100 budget.)&lt;/p&gt;
&lt;p&gt;That meant the project had to be flexible, scrappy, and run on a shoestring budget.
This meant we were limited to cheap, off-the-shelf technologies for the sensors,
the sensor platform, and the back-end infrastructure. Two technologies in particular
lent themselves nicely to these constraints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Wireless USB antennas - USB wifi dongles are cheap ($10), and the ubiquity of wireless
    networks and wifi signals meant this would provide us with a rich data set on the cheap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Raspberry Pi - the Raspberry Pi is a credit-card sized microcomputer that runs a full stack
    Linux operating system. With the low price point ($30) and the many free and open-source 
    tools available for Linux, this was a natural choice for the sensor platform.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result was a set of wireless sensors - Raspberry Pis with two wireless antennas -
one antenna for listening to and collect wireless signal data in monitor mode,
and one antenna to connect to nearby wireless networks to establish a connection
to a centralized data warehouse server.&lt;/p&gt;
&lt;p&gt;&lt;a name="ugr-components"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="project-components-extract-store-and-analyze"&gt;Project Components: Extract, Store, and Analyze&lt;/h2&gt;
&lt;p&gt;The wireless sensor network project had three major components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Extract&lt;/em&gt;&lt;/strong&gt; - using a wireless USB antenna, the Raspberry Pi would listen to
    wireless signals in the area, creating a profile of local network names,
    MAC addresses, signal strengths, encryption types, and a list of 
    both clients and routers. Students used the &lt;a href="http://aircrack-ng.org"&gt;aircrack-ng&lt;/a&gt; 
    suite to extract wireless signal information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IMPORTANT SIDE NOTE - students also learned about wiretapping laws and various 
    legal aspects of wireless networks - the difference between monitoring ("sniffing") 
    wireless traffic versus simply building a profile of wireless traffic. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Store&lt;/em&gt;&lt;/strong&gt; - students learned about NoSQL databases (we used &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt;)
    and set up a NoSQL database to store information about wireless signals. 
    This also required some basic Python programming, as the wireless signal information
    was exported to a large number of CSV files and had to be programmatically
    collated and extracted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Analyze&lt;/em&gt;&lt;/strong&gt; - the pinnacle of the project was in the analysis of the wireless signal data
    that was captured. Students ran several "experiments," collecting wireless signals 
    for 2 hours using a portable battery and a Raspberry Pi with wifi dongles.
    By running experiments under different conditions (at the college library, 
    at a coffee shop, on a bus), a diverse set of data was gathered, allowing students
    to extract meaningful information about each experiment from each data set.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="ugr-buzzword"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-internet-of-things-not-just-a-buzzword"&gt;The Internet of Things: Not Just a Buzzword&lt;/h2&gt;
&lt;p&gt;One of the biggest challenges starting out was in getting the students into the 
right "mindset" about the Internet of Things. This was a challenge that 
I did not forsee when I came up with the project title. As a chemical engineer
working on natural gas processing at a startup company, I knew the value of 
creating wireless infrastructure to extract data from sensors, throw it into 
a giant bucket, and utilize computational tools to analyze the data and extract 
information from it.&lt;/p&gt;
&lt;p&gt;But the students involved in the project had no exposure to this kind of workflow.
To them, the Internet of Things meant toasters and TVs that were connected to 
the internet, so they were expecting a design project in which we would make
a prototype consumer device intended to connect to the internet.&lt;/p&gt;
&lt;p&gt;Further complicating things was the fact that we were focusing on 
&lt;strong&gt;building a data acquisition system&lt;/strong&gt; - a data analysis pipeline - a workflow for 
extracting, storing, and analyzing sensor data. We were not focused
on the specific types of questions that our specific type of data 
could answer. This was a bit puzzling for the students (who could not see
the intrinsic value of building a data analysis pipeline).
Much of their time was spent struggling with what, exactly, we were
supposed to be doing with the data, and getting past a 
contaminated, consumer-centric view of the term "Internet of Things."&lt;/p&gt;
&lt;p&gt;It was, therefore, a major breakthrough when one of the students, 
as we were diving deeper into the data analysis portion, utilizing Python 
to plot the data, quantitatively analyze it, and better understand it, 
told me, "Looking back, I realize that I was thinking really narrowly 
about the whole project. I thought we were going to build a 'smart' device, 
like a business project. But now I realize our project has a bigger scope, 
because of the analysis part." &lt;/p&gt;
&lt;p&gt;That, in a nutshell, was &lt;strong&gt;precisely&lt;/strong&gt; the intention of the project.&lt;/p&gt;
&lt;p&gt;&lt;a name="ugr-uw"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="university-of-washington-undergraduate-research-symposium"&gt;University of Washington Undergraduate Research Symposium&lt;/h2&gt;
&lt;p&gt;Next week the students present the culmination of their research project at the University of Washington's 
&lt;a href="http://www.washington.edu/undergradresearch/symposium/"&gt;Undergraduate Research Symposium&lt;/a&gt;, where they will have a poster
that summarizes their research effort, the results, and the tools that were used. &lt;/p&gt;
&lt;p&gt;It is clear to anyone attending the Undergrad Research Symposium that community college students are among the minority 
of students who are involved in, and benefiting from, research projects. The intention of most of the projects 
showcased at the symposium is to launch undergraduate students into a graduate level research career 
and prepare them to hit the ground running, and have a stronger resume and application,
when they have finished their undergraduate education and are applying to graduate schools.
Many of the research posters at the symposium showcase research using expensive equipment, specialized materials and methods,
and complex mathematical methods. Many of the students are mentored by world-class research professors 
with deep expertise and small armies of graduate and postgraduate researchers. &lt;/p&gt;
&lt;p&gt;Despite our research efforts being completely outmatched 
by many of the undergraduate researchers from the University of Washington 
(out-funded, out-manned, and out-gunned), our group managed to pull together a 
very interesting and very ambitious design project that collected a very rich data set.
The students were introduced to some useful tools and fields of computer science 
(wireless networks, privacy and security, embedded devices, databases, Linux), 
and exposed students to a totally new way of thinking about the "internet of things"
that allows them to move beyond the shallow hype of internet-connected toothbrushes. 
The students have developed the ability to build a data pipeline that could be used by a company
to address real, significant problems and needs around data. &lt;/p&gt;
&lt;p&gt;All in all, this was an extremely worthwhile, high-impact project that's equipping 
the next generation of computer scientists with the cognitive tools
to anticipate and solve data problems, which (as hardware becomes cheaper
and embedded devices become more ubiquitous) are problems that will only become 
more common in more industries.&lt;/p&gt;
&lt;p&gt;&lt;a name="ugr-poster"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-poster"&gt;The Poster&lt;/h2&gt;
&lt;p&gt;Here's a rough draft of the poster we will be showing at the UGR symposium: &lt;/p&gt;
&lt;p&gt;&lt;img alt="UGR Poster" src="/images/ugr-poster.png"&gt;&lt;/p&gt;</content><category term="Wireless"></category><category term="wireless"></category><category term="security"></category><category term="undergraduate research project"></category><category term="stunnel"></category><category term="SSH"></category><category term="aircrack"></category><category term="mongodb"></category><category term="python"></category><category term="jupyter"></category><category term="linux"></category><category term="raspberry pi"></category></entry><entry><title>Stunnel</title><link href="https://charlesreid1.github.io/stunnel.html" rel="alternate"></link><published>2017-04-30T20:00:00-07:00</published><updated>2017-04-30T20:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-04-30:/stunnel.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-intro"&gt;Introduction&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#stunnel-what"&gt;What Does Stunnel Do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stunnel-work"&gt;How Does Stunnel Work?&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-server"&gt;Setting Up an Stunnel Server&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#stunnel-server-resoures"&gt;Charlesreid1.com Resources for Stunnel Servers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-client"&gt;Setting Up an Stunnel Client&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-protocols"&gt;Example Protocols&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-docker"&gt;Stunnel with Docker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-troubleshooting"&gt;Troubleshooting Stunnel Connections&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-refs"&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="stunnel-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a name="stunnel-what"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="what-does-stunnel-do"&gt;What Does Stunnel Do?&lt;/h3&gt;
&lt;p&gt;Stunnel is a tool for creating SSL tunnels between a client and a server.&lt;/p&gt;
&lt;p&gt;Creating SSL connections is a general task that is very useful.
In particular, any packet of any protocol can always be wrapped in an
additional SSL layer, with packets embedded within packets, so this means 
you can wrap arbitrary traffic protocols in SSL using Stunnel.&lt;/p&gt;
&lt;p&gt;Stunnel requires â€¦&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-intro"&gt;Introduction&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#stunnel-what"&gt;What Does Stunnel Do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stunnel-work"&gt;How Does Stunnel Work?&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-server"&gt;Setting Up an Stunnel Server&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#stunnel-server-resoures"&gt;Charlesreid1.com Resources for Stunnel Servers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-client"&gt;Setting Up an Stunnel Client&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-protocols"&gt;Example Protocols&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-docker"&gt;Stunnel with Docker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-troubleshooting"&gt;Troubleshooting Stunnel Connections&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-refs"&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="stunnel-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a name="stunnel-what"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="what-does-stunnel-do"&gt;What Does Stunnel Do?&lt;/h3&gt;
&lt;p&gt;Stunnel is a tool for creating SSL tunnels between a client and a server.&lt;/p&gt;
&lt;p&gt;Creating SSL connections is a general task that is very useful.
In particular, any packet of any protocol can always be wrapped in an
additional SSL layer, with packets embedded within packets, so this means 
you can wrap arbitrary traffic protocols in SSL using Stunnel.&lt;/p&gt;
&lt;p&gt;Stunnel requires a client and a server on either end of the tunnel.&lt;/p&gt;
&lt;p&gt;This writeup assumes access to both the server and the client.
If you don't have access to the client, the server certificate
needs to be signed by a certificate authority that the client trusts.
You can either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Shell out big bucks for a certificate signed by a certificate authority company, thereby contributing to the ongoing racketeering of said companies;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a LetsEncrypt certificate, signed by a certificate authority for free; or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use a self-signed certificate and install the certificate authority onto the client computer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(These are all difficult and confusing processes, 
compounded by OpenSSL's lack of documentation
and a proliferation of incorrect terminology.
Good luck.)&lt;/p&gt;
&lt;p&gt;&lt;a name="stunnel-work"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="how-does-stunnel-work"&gt;How Does Stunnel Work?&lt;/h3&gt;
&lt;p&gt;The client stunnel instance will encrypt traffic, 
and the server stunnel instance will decrypt traffic.&lt;/p&gt;
&lt;p&gt;When encrypting traffic, stunnel accepts incoming traffic by listening on
a port (almost always a local port). It will wrap the traffic in an encrypted
SSL layer (TCP wrapping) using the SSL certificate/key that is shared between
the client and the server. The client then sends out the encrypted traffic 
over an external connection, and on to the stunnel server.&lt;/p&gt;
&lt;p&gt;When decrypting traffic, stunnel will listen on an external connection for 
incoming, encrypted SSL traffic. It will use its SSL certificate/key to 
decrypt the traffic and unwrap the SSL layer. It will then forward this traffic
on to another (usually local) port.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Stunnel flowchart schematic" src="/images/stunnel1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="stunnel-server"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="setting-up-an-stunnel-server"&gt;Setting Up an Stunnel Server&lt;/h2&gt;
&lt;p&gt;Stunnel servers can listen on any port, and the port you choose depends on the application. 
The configuration we're showing here is intended to bypass a network that is tightly controlled
and locked down except for HTTP and HTTPS traffic (ports 80 and 443).&lt;/p&gt;
&lt;p&gt;Consider an example of connecting a local service on local port 8443 (not open to the outside world)
to an stunnel server listening on port 443 (open to the outside world).&lt;/p&gt;
&lt;p&gt;stunnel will listen on port 443, open to external traffic, for SSL-encrypted stunnel traffic. 
This means that only stunnel can listen on 443 (so this cannot be a server for an HTTPS web 
site - if a user points their browser to https://yourstunnelserver.com stunnel will not understand
the HTTPS request and will discard it). 
We can use stunnel on any port that we want, but communicating between stunnel clients 
and servers on port 443 allows us to disguise arbitrary traffic (HTTP, HTTPS, SSH, database, 
etc.) as legitimate HTTPS. &lt;/p&gt;
&lt;p&gt;This is very useful if we have a firewall that is actively inspecting
the type of traffic inside of packets, and dropping packets with particular protocols like 
SSH or OpenVPN. By wrapping that traffic in an SSL layer, there is no way for the 
firewall to inspect the contents of the packet, so it just looks like ordinary HTTPS traffic.
The firewall can't decrypt the packet contents, so it doesn't know if you are visiting 
your bank, checking your email, or sneaking SSH/OpenVPN traffic through the firewall. &lt;/p&gt;
&lt;p&gt;(Note that other services like Iodine allow you to do similar things with other protocols,
like disguising network connections using encrypted DNS on port 53.)&lt;/p&gt;
&lt;p&gt;Typically, stunnel is forwarding that traffic on to a local port, something like 8443. 
(The common scenario is if you have a service only exposed to LOCAL traffic from localhost or 127.0.0.1 
and not bound to an EXTERNAL ip address like 0.0.0.0). &lt;/p&gt;
&lt;p&gt;&lt;a name="stunnel-server-resources"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="charlesreid1com-resources-for-stunnel-servers"&gt;Charlesreid1.com Resources for Stunnel Servers&lt;/h3&gt;
&lt;p&gt;The charlesreid1.com wiki has an extensive guide to setting up an Stunnel server: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/Server"&gt;charlesreid1.com/wiki/Stunnel/Server&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/Docker"&gt;charlesreid1.com/wiki/Stunnel/Docker&lt;/a&gt; - wiki page detailing the use of Docker and Docker containers to run an stunnel server.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The charlesreid1.com git server has several repositories with configuration files for setting up an stunnel server: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.charlesreid1.com/docker/d-stunnel"&gt;d-stunnel repository&lt;/a&gt; - repo containing Docker configuration files, for creating a Docker container that runs an stunnel server.
    This repository contains example stunnel configuration files for running a number of different protocols over stunnel (ssh, http, and rsync).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="stunnel-client"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="setting-up-an-stunnel-client"&gt;Setting Up an Stunnel Client&lt;/h2&gt;
&lt;p&gt;Running an stunnel client requires installing stunnel and 
setting up a configuration file just like if you were setting up an Stunnel/Server, 
except swapping the accept and connect ports, since we want the client to accept local 
traffic (e.g., on port 8443) and send it on to the server that it connects to with SSL 
(e.g., on port 443).&lt;/p&gt;
&lt;p&gt;&lt;a name="stunnel-client-resources"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="charlesreid1com-resources-for-stunnel-clients"&gt;Charlesreid1.com Resources for Stunnel Clients&lt;/h2&gt;
&lt;p&gt;The charlesreid1.com wiki has an extensive guide to setting up an Stunnel client: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/Client"&gt;charlesreid1.com/wiki/Stunnel/Client&lt;/a&gt; - wiki page detailing the stunnel configuration process for stunnel servers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The charlesreid1.com git server has several repositories with configuration files for setting up an stunnel client: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://git.charlesreid1.com/mac/m-stunnel"&gt;m-stunnel repository&lt;/a&gt; - stunnel configuration files for running an stunnel client on Mac OS X&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://git.charlesreid1.com/rpi/pi-stunnel"&gt;pi-stunnel repository&lt;/a&gt; - stunnel configuration files for running an stunnel client on Raspberry Pi&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="stunnel-protocols"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="example-protocols"&gt;Example Protocols&lt;/h2&gt;
&lt;p&gt;One of the most beautiful aspects of networking is that packets can be wrapped within other packets - 
so theoretically it can be packets all the way down. This allows us to use stunnel's SSL TCP wrappers to wrap
just about any traffic we want. This means we can run various services (encrypted or not) through stunnel,
including but not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SSH (secure shell)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SCP (secure copy)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenVPN (virtual network)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rsync (file transfer)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MongoDB (NoSQL database)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis (local-only NoSQL database)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While stunnel has a few pre-configured services that it can deal with, 
users can also define their own custom protocols, over whatever port they please.&lt;/p&gt;
&lt;p&gt;The charlesreid1.com wiki details stunnel configuration for all of the above protocols,
excepting MongoDB and redis. Here are links to pages specifying how to configure stunnel
for each protocol:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/SSH"&gt;SSH over stunnel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/Scp"&gt;SCP over stunnel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/HTTP"&gt;HTTP over stunnel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/OpenVPN"&gt;OpenVPN over stunnel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/Rsync"&gt;Rsync over stunnel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href="https://charlesreid1.com/wiki/Stunnel/Rsync"&gt;Rsync over stunnel&lt;/a&gt; page, in particular,
details the steps needed to define your own custom protocol and have stunnel wrap it 
in an SSL layer &lt;em&gt;correctly&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="stunnel-docker"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="stunnel-with-docker"&gt;Stunnel with Docker&lt;/h2&gt;
&lt;p&gt;Docker is a useful way of managing services in a self-contained and reproducible manner.
Running stunnel through a Docker container is surprisingly easy: 
once you've installed stunnel into the docker container, you just need to map 
the incoming port (containing incoming encrypted traffic from the client, linked to the external network interface)
to the outgoing port (containing decrypted traffic from stunnel, linked to a local-only service on a closed port).&lt;/p&gt;
&lt;p&gt;The charlesreid1.com wiki details how to create set up SSH over stunnel at the following page:
* &lt;a href="https://charlesreid1.com/wiki/Stunnel/Docker"&gt;charlesreid1.com/wiki/Stunnel/Docker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The charlesreid1.com git server has an stunnel docker repository with configuration files
for running a Docker stunnel server, along with several example stunnel server configuration files
for handling protocols like rsync, ssh, and http:
* &lt;a href="https://git.charlesreid1.com/docker/d-stunnel"&gt;d-stunnel repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="stunnel-troubleshooting"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="troubleshooting-stunnel-connections"&gt;Troubleshooting Stunnel Connections&lt;/h2&gt;
&lt;p&gt;In the &lt;a href="https://git.charlesreid1.com/docker/d-stunnel"&gt;d-stunnel repository&lt;/a&gt; is a document called &lt;code&gt;DEBUGGING.md&lt;/code&gt; 
that contains a number of techniques for debugging an stunnel connection. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://git.charlesreid1.com/docker/d-stunnel/src/master/DEBUGGING.md"&gt;Here is the direct link to DEBUGGING.md&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The techniques covered include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Configuring stunnel to run in the foreground (print log messages to console instead of to log file)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configuring stunnel to output debugging information &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Poking the stunnel server with telnet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inspecting open ports with nmap&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Watching &lt;code&gt;/var/log/syslog&lt;/code&gt; for activity&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href="https://git.charlesreid1.com/docker/d-stunnel/src/master/DEBUGGING.md"&gt;DEBUGGING.md&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;&lt;a name="stunnel-refs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"Stunnel". Charlesreid1.com wiki. 30 April 2017. 
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Stunnel"&gt;https://charlesreid1.com/wiki/Stunnel&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Category: Stunnel". Charlesreid1.com wiki. 30 April 2017. 
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Category:Stunnel"&gt;https://charlesreid1.com/wiki/Category:Stunnel&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Stunnel/Server". Charlesreid1.com wiki. 30 April 2017. 
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/Server"&gt;https://charlesreid1.com/wiki/Stunnel/Server&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Stunnel/Client". Charlesreid1.com wiki. 30 April 2017. 
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/Client"&gt;https://charlesreid1.com/wiki/Stunnel/Client&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Stunnel/Docker". Charlesreid1.com wiki. 30 April 2017. 
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/Docker"&gt;https://charlesreid1.com/wiki/Stunnel/Docker&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Stunnel/Certificates". Charlesreid1.com wiki. 30 April 2017. 
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/Certificates"&gt;https://charlesreid1.com/wiki/Stunnel/Certificates&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Stunnel/Rsync". Charlesreid1.com wiki. 30 April 2017. 
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/Rsync"&gt;https://charlesreid1.com/wiki/Stunnel/Rsync&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Stunnel/SSH". Charlesreid1.com wiki. 30 April 2017. 
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/SSH"&gt;https://charlesreid1.com/wiki/Stunnel/SSH&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Stunnel/Scp". Charlesreid1.com wiki. 30 April 2017. 
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/Scp"&gt;https://charlesreid1.com/wiki/Stunnel/Scp&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Stunnel/OpenVPN". Charlesreid1.com wiki. 30 April 2017. 
&amp;lt;&lt;a href="https://charlesreid1.com/wiki/Stunnel/OpenVPN"&gt;https://charlesreid1.com/wiki/Stunnel/OpenVPN&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Security"></category><category term="stunnel"></category><category term="SSL"></category><category term="encryption"></category><category term="SSH"></category><category term="networking"></category><category term="OpenVPN"></category></entry><entry><title>Traveling Schoolteacher Problem</title><link href="https://charlesreid1.github.io/traveling-schoolteacher-problem.html" rel="alternate"></link><published>2017-04-30T13:00:00-07:00</published><updated>2017-04-30T13:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-04-30:/traveling-schoolteacher-problem.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="#tstp-intro"&gt;The Traveling Schoolteacher Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-math"&gt;The Mathematical Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-pseudocode"&gt;The Pseudocode&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-java"&gt;The Java Code&lt;/a&gt; &lt;ul&gt;
&lt;li&gt;&lt;a href="#tstp-classes"&gt;TSTP Class Fields and Methods&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-base"&gt;Explore: Base Case&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-recursive"&gt;Explore: Recursive Case&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-graphs"&gt;Example Graphs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-results"&gt;Results&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tstp-walltime-nodes"&gt;Walltime vs Number of Nodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="tstp-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-traveling-schoolteacher-problem"&gt;The Traveling Schoolteacher Problem&lt;/h2&gt;
&lt;p&gt;The Traveling Schoolteacher Problem (TSTP) is a variation on the Traveling Salesperson Problem (TSP).&lt;/p&gt;
&lt;p&gt;The Traveling Schoolteacher Problem supposes a schoolteacher that is traveling from school to school
in order to give lessons at different schools. Being a poor schoolteacher, they are only able to afford an older car that gets bad mileage and has a small gas tank.&lt;/p&gt;
&lt;p&gt;After visiting each school â€¦&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="#tstp-intro"&gt;The Traveling Schoolteacher Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-math"&gt;The Mathematical Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-pseudocode"&gt;The Pseudocode&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-java"&gt;The Java Code&lt;/a&gt; &lt;ul&gt;
&lt;li&gt;&lt;a href="#tstp-classes"&gt;TSTP Class Fields and Methods&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-base"&gt;Explore: Base Case&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-recursive"&gt;Explore: Recursive Case&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-graphs"&gt;Example Graphs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-results"&gt;Results&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tstp-walltime-nodes"&gt;Walltime vs Number of Nodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="tstp-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-traveling-schoolteacher-problem"&gt;The Traveling Schoolteacher Problem&lt;/h2&gt;
&lt;p&gt;The Traveling Schoolteacher Problem (TSTP) is a variation on the Traveling Salesperson Problem (TSP).&lt;/p&gt;
&lt;p&gt;The Traveling Schoolteacher Problem supposes a schoolteacher that is traveling from school to school
in order to give lessons at different schools. Being a poor schoolteacher, they are only able to afford an older car that gets bad mileage and has a small gas tank.&lt;/p&gt;
&lt;p&gt;After visiting each school, the schoolteacher receives payment from the school, in the currency of &lt;span class="math"&gt;\(P\)&lt;/span&gt; gallons of gasoline. 
Different schools pay the teacher different amounts of gasoline, further complicating matters. The schoolteacher's car has a 
small gas tank that can only hold a maximum of &lt;span class="math"&gt;\(M\)&lt;/span&gt; gallons of gas, and the schoolteacher cannot travel with cans of gasoline. 
Any gasoline the schoolteacher receives above &lt;span class="math"&gt;\(M\)&lt;/span&gt; gallons of gas must be left behind. &lt;/p&gt;
&lt;p&gt;Traveling from a source node to a target node incurs a cost of &lt;span class="math"&gt;\(C\)&lt;/span&gt; gallons of gas, deducted from the gas tank's total at the source node.&lt;/p&gt;
&lt;p&gt;In an attempt to minimize losses and avoid running out of gas, the traveling schoolteacher must plan out a route 
that both avoids running out of gas and minimizes the total distance traveled.&lt;/p&gt;
&lt;p&gt;&lt;a name="tstp-math"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-mathematical-model"&gt;The Mathematical Model&lt;/h2&gt;
&lt;p&gt;To represent this problem in the computer, we can use a graph - just like the Traveling Salesperson Problem solution - but modified a bit. Like the TSP, we can also solve the Traveling Schoolteacher Problem with recursive backtracking.&lt;/p&gt;
&lt;p&gt;Each edge will represent a cost in gas, and each school arrived at will result in a payment in gas. Thus, the "real cost" of an edge will change depending on the state of the gas tank and the path taken to arrive there. &lt;/p&gt;
&lt;p&gt;We can add a number to each node to represent the amount of gas that that school pays the schoolteacher.
We can use a number in each edge to represent the amount of gas that it costs to travel from one school to another.
The backtracking solution will explore various paths through teh graph, keeping track of the gas tank's running total and rejecting any paths that lead to an empty gas tank.&lt;/p&gt;
&lt;p&gt;&lt;a name="tstp-pseudocode"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-pseudocode"&gt;The Pseudocode&lt;/h2&gt;
&lt;p&gt;Revisiting the original Traveling Salesperson Problem, the recursive backtracking method we implemented was described with the following pseudocode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;explore(neighbors):

    if(no more unvisited neighbors):
        # This is the base case.
        if total distance is less than current minimum:
            save path and new minimum

    else:
        # This is the recursive case.
        if current distance is greater than current minimum:
            skip
        else:
            for neighbor in unvisited neighbors:
                visit neighbor
                explore(new_neighbors)
                unvisit neighbor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To modify this to solve the Traveling Schoolteacher Problem, we want to make a few additions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check if the gas tank is empty, and if so, don't explore this path&lt;/li&gt;
&lt;li&gt;Check if the current distance is greater than our current minimum-distance path through the graph&lt;/li&gt;
&lt;li&gt;Add gas from each school to the gas tank (up to the tank's maximum), subtract gas from each path from the gas tank&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This results in the following pseudocode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;explore(neighbors):

    if(no more unvisited neighbors):
        # This is the base case.
        if total distance is less than current minimum:
            save path and new minimum

    else:
        # This is the recursive case.
        if gas tank is below empty:
            skip
        if current distance is greater than current minimum:
            skip
        else:
            add gas from this school to gas tank
            for neighbor in unvisited neighbors:
                visit neighbor
                deduct gas to get to neighbor from gas tank

                explore(new_neighbors)

                unvisit neighbor
                add gas back into gas tank
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have a backtracking algorithm for the original Traveling Salesperson Problem TSP, it's quite easy to make the few modifications required to solve the Traveling Schoolteacher Problem TSTP.&lt;/p&gt;
&lt;p&gt;&lt;a name="tstp-java"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-java-code"&gt;The Java Code&lt;/h2&gt;
&lt;p&gt;The Java code to solve the TSTP is organized into several classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TSTP class - implements the recursive backtracking solution method, and owns temporary variables used by backtracking.&lt;/li&gt;
&lt;li&gt;Node class - the Node is a lightweight class that stores an integer, representing the amount of gas this school pays the teacher. (Note, Node stores no links. Graph links handled by Guava.)&lt;/li&gt;
&lt;li&gt;Edge class - the Edge class is a lightweight class that stores an integer for each edge, representing the amount of gas this path costs to travel.&lt;/li&gt;
&lt;li&gt;RandomNodeGraph - a static class that builds random graphs with nodes and edges pre-populated with values. Parameters like connectivity and maximum gas tank capacity can be passed to introduce variation and ensure the graph is solvable (or not).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="tstp-classes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="tstp-class-fields-and-methods"&gt;TSTP Class Fields and Methods&lt;/h3&gt;
&lt;p&gt;The TSTP class implements several fields to store the graph, and to store temporary information about the current solution during recursive backtracking (such that it is accessible by each instance of the recursive method). &lt;/p&gt;
&lt;p&gt;The class stores the current route in an integer array, along with the current path distance, the current minimum distance, and the current state of the gas tank.&lt;/p&gt;
&lt;p&gt;The TSTP class has a public &lt;code&gt;solve()&lt;/code&gt; method, which calls a private recursive backtracking &lt;code&gt;explore()&lt;/code&gt; method to solve the problem. &lt;/p&gt;
&lt;p&gt;The recursive method will have a base case and a recursive case.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;base case&lt;/strong&gt; is that we have visited all cities on the graph. Check if this is a new solution, and if so, save it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;recursive case&lt;/strong&gt;, we explore all solutions possible starting at the current node (passed in as a parameter), having already made N choices (passed in as a parameter). We do this by making a choice (and marking the node as visited), then exploring the consequences (through a recursive call), then unmaking the choice (rmarking the node as unvisited).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the explore method header:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    /** Recursive backtracking method: 
        explore possible solutions starting 
        at this node, having made nchoices */
    public void explore(Node node, int nchoices) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="tstp-base"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="explore-base-case"&gt;Explore: Base Case&lt;/h3&gt;
&lt;p&gt;The base case begins by checking if the minimum distance has been set, and if so, whether the current distance is larger than the minimum distance. If so, this route is abandoned; otherwise, we have a new solution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        if(nchoices == graphSize) {
            // 
            // BASE CASE
            //
            if(this.this_distance &amp;lt; this.min_distance || this.min_distance &amp;lt; 0) {
                this.min_distance = this.this_distance;
                printSolution();
            } else {
                printFailure();
            }

        } else {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="tstp-recursive"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="explore-recursive-case"&gt;Explore: Recursive Case&lt;/h3&gt;
&lt;p&gt;Next, the recursive case will explore each of the possible choices open to it by iterating over each choice available at a node, and for each node, choosing it, exploring the results, and unchoosing it. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        } else {
            //
            // RECURSIVE CASE
            //  
            if(this.gas_tank &amp;lt;= 0) {
                // Bummer, man.
                return;
            }
            if(this.min_distance &amp;gt; 0 &amp;amp;&amp;amp; this.this_distance &amp;gt; this.min_distance) {
                // Give up, there&amp;#39;s no hope.
                return;
            }

            // Now the teacher teaches,
            // Now the teacher gets some gas. 
            // If the tank is full...  bummer, man.
            this.gas_tank += Math.min(this.tankSize, this.gas_tank + node.pay);

            // For each neighbor:
            Set&amp;lt;Node&amp;gt; neighbors = graph.adjacentNodes(node);
            for(Node neighbor : neighbors) {
                if(neighbor.visited == false) {

                    int distance_btwn = -10000;

                    // Using a for loop, 
                    // but there should only be one edge.
                    for( Edge edge : graph.edgesConnecting(node, neighbor) ) {
                        distance_btwn = edge.cost;
                    }

                    // Make a choice
                    this.route[nchoices] = neighbor.id;
                    neighbor.visit();
                    this.this_distance += distance_btwn;

                    // Explore the consequences
                    explore(neighbor,nchoices+1);

                    // Unmake the choice
                    this.route[nchoices] = -1;
                    neighbor.unvisit();
                    this.this_distance -= distance_btwn;
                }
                // Move on to the next choice (continue loop)
            }               
        } // End base/recursive case
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="tstp-graphs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="example-graphs"&gt;Example Graphs&lt;/h2&gt;
&lt;p&gt;Just so you can see what they look like, here are a couple of graphs 
generated for the traveling schoolteacher problem:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/graphviz_tstp_6.png" width="400px" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/graphviz_tstp_8.png" width="400px" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/graphviz_tstp_12.png" width="400px" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="tstp-results"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="results"&gt;Results&lt;/h2&gt;
&lt;p&gt;&lt;a name="tstp-walltime-nodes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="walltime-vs-number-of-nodes"&gt;Walltime vs. Number of Nodes&lt;/h3&gt;
&lt;p&gt;The following is a plot of walltime versus number of nodes:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/tstp-java-scaling.png" width="500px" /&gt;&lt;/p&gt;
&lt;p&gt;This plot shows that the traveling schoolteacher problem 
is solved faster than the traveling salesperson problem.
This makes sense - for a given city, many of the possible routes can be
eliminated from the list of routes to explore, due to the additional constraint
of the gas tank needing to remain full. If there are only 2 gallons of gas 
in the tank, this constrains the choices of nodes to explore to those 
requiring 2 gallons of gas or less.&lt;/p&gt;
&lt;p&gt;This is particularly true for the scenario used when generating the above graph - 
the constraint of the gas tank size is used to construct an "interesting" graph
tand ensure that we don't end up with a graph where the traveling schoolteacher 
gets "stuck" somewhere without enough gas to continue. Here is the relevant section
of the &lt;code&gt;RandomNodeGraph.java&lt;/code&gt; class. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;getNextCost()&lt;/code&gt; method generates a random edge
between two cities, with a &lt;span class="math"&gt;\(\frac{T}{T+1}\)&lt;/span&gt; percent chance of it being impossible for the 
teacher to travel that route due to a gas tank that's too small:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    private static int getNextCost(int T) {
        Random r = new Random();
        return 1+r.nextInt(T);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Likewise, here is the &lt;code&gt;getNextPay()&lt;/code&gt; method, which generates a random 
amount of pay (in gas) that the &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    private static int getNextPay(int T) {
        Random r = new Random();
        return (int)(0.5*T + 0.5*(r.nextInt(T)+1));
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is a link to the full &lt;code&gt;RandomNodeGraph.java&lt;/code&gt; file on the charlesreid1.com git server, 
contained in the &lt;code&gt;tsp&lt;/code&gt; repository (which has several codes related to the traveling salesperson problem):
&lt;a href="https://git.charlesreid1.com/charlesreid1/tsp/src/master/schoolteacher-guava/RandomNodeGraph.java"&gt;https://git.charlesreid1.com/charlesreid1/tsp/src/master/schoolteacher-guava/RandomNodeGraph.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And here is a link to the &lt;code&gt;tsp&lt;/code&gt; repository on the same charlesreid1.com git server:
&lt;a href="https://git.charlesreid1.com/charlesreid1/tsp/src/master/schoolteacher-guava"&gt;https://git.charlesreid1.com/charlesreid1/tsp/src/master/schoolteacher-guava&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In a city with 10 routes connecting to other cities, having edges that the schoolteacher
cannot travel, or nodes that limit the amount of gas the schoolteacher receives, 
can constrain the number of possible routes and reduce the number of routes that need to be 
explored. The methods above ensure that this will not happen very often, but that it will happen
some of the time. These routes that can be eliminated can lead to a significant reduction
in computational time.&lt;/p&gt;
&lt;p&gt;&lt;a name="tstp-conclusion"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This project shows how easy it is to utilize the Guava library to solve computational problems
in Java and create computing benchmarks and graphs of scaling behavior. The original code to 
solve the traveling salesperson problem using recursive backtracking was fairly straightforward to 
implement on a graph, and extending this code to implement additional constraints and solve the 
traveling schoolteacher problem was surprisingly easy to do. &lt;/p&gt;
&lt;p&gt;Fitting the scaling behavior to a line and computing the slope would make the scaling study
more quantitative, and needs to be done, but unfortunately the Google Sheets tool does not have 
this capability, so this information will be done with Python (scipy linear algebra package)
and comparisons between the TSP and TSTP slopes will be added later.&lt;/p&gt;
&lt;p&gt;&lt;a name="tstp-references"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"tsp (git repository)." Charles Reid. Modified 7 April 2017. Accesssed 30 April 2017.
&amp;lt;&lt;a href="https://git.charlesreid1.com/charlesreid1/tsp"&gt;https://git.charlesreid1.com/charlesreid1/tsp&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Solving the Traveling Salesperson Problem with Java and Guava." Charles Reid. 23 March 2017. Accessed 30 April 2017.
&amp;lt;&lt;a href="https://charlesreid1.github.io/solving-the-traveling-salesperson-problem-with-java-and-guava.html"&gt;https://charlesreid1.github.io/solving-the-traveling-salesperson-problem-with-java-and-guava.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Better Timing of Guava Traveling Salesperson Problem Code: Timing Scripts." Charles Reid. 1 April 2017. Accessed 30 April 2017.
&amp;lt;&lt;a href="https://charlesreid1.github.io/better-timing-of-guava-traveling-salesperson-problem-code-timing-scripts.html"&gt;https://charlesreid1.github.io/better-timing-of-guava-traveling-salesperson-problem-code-timing-scripts.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Java"></category><category term="computer science"></category><category term="guava"></category><category term="graph"></category><category term="TSP"></category></entry><entry><title>The Z-Machine: A Simple Turing Machine</title><link href="https://charlesreid1.github.io/the-z-machine-a-simple-turing-machine.html" rel="alternate"></link><published>2017-04-24T20:00:00-07:00</published><updated>2017-04-24T20:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-04-24:/the-z-machine-a-simple-turing-machine.html</id><summary type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#z-bkg"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-setup"&gt;The Z-Machine: Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-instructions"&gt;The Z-Machine: Instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-loop"&gt;Simple Example: Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-addition"&gt;Implementing an Addition Operator on the Z-Machine&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#z-solution-approach"&gt;The Solution Approach (The Maths)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-addition1"&gt;Solution 1: Positive Integers Only&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-addition2"&gt;Solution 2: Dealing with Zeros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-subtraction"&gt;Implementing a Decrement Operator on the Z-Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-lessthan"&gt;Implementing a Less Than Operator on the Z-Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-whocares"&gt;Who Cares? (Or, How To Build A Computer)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="z-bkg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;Recently I discovered the wonderful blog of &lt;a href="http://blog.jgc.org/2013/05/the-two-problems-i-had-to-solve-in-my.html"&gt;John Graham-Cumming&lt;/a&gt;.
One of hist posts, from 2013, details a question that he had to answer for the Oxford University Department of Computer Science's "interviews" 
(which, I believe, are a kind of final â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#z-bkg"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-setup"&gt;The Z-Machine: Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-instructions"&gt;The Z-Machine: Instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-loop"&gt;Simple Example: Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-addition"&gt;Implementing an Addition Operator on the Z-Machine&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#z-solution-approach"&gt;The Solution Approach (The Maths)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-addition1"&gt;Solution 1: Positive Integers Only&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-addition2"&gt;Solution 2: Dealing with Zeros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-subtraction"&gt;Implementing a Decrement Operator on the Z-Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-lessthan"&gt;Implementing a Less Than Operator on the Z-Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-whocares"&gt;Who Cares? (Or, How To Build A Computer)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="z-bkg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;Recently I discovered the wonderful blog of &lt;a href="http://blog.jgc.org/2013/05/the-two-problems-i-had-to-solve-in-my.html"&gt;John Graham-Cumming&lt;/a&gt;.
One of hist posts, from 2013, details a question that he had to answer for the Oxford University Department of Computer Science's "interviews" 
(which, I believe, are a kind of final examination "interview" to graduate, not an interview for admittance to the program).
Graham-Cumming describes one of the quetions he was presented with during his interview.&lt;/p&gt;
&lt;p&gt;&lt;a name="z-setup"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-z-machine-setup"&gt;The Z-Machine: Setup&lt;/h2&gt;
&lt;p&gt;Here is the problem setup:&lt;/p&gt;
&lt;p&gt;Suppose you have a computer with a very simple memory layout. 
The memory consists of a series of numbered locations, each of which can store numbers. 
These numbers are positive or negative integers. Here is an illustration of an example of this memory layout:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Z Machine Memory Layout" src="https://charlesreid1.com/w/images/2/22/Z-Machine1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="z-instructions"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-z-machine-instructions"&gt;The Z-Machine: Instructions&lt;/h2&gt;
&lt;p&gt;Z-Machine Instructions&lt;/p&gt;
&lt;p&gt;The machine can only perform three instructions: Zero (Z), Increment (I), and Jump (J).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Z operator&lt;/strong&gt; zeros out a location in memory. The operation specifies which index should be zeroed out. For example, Z4 will zero out index 4 (which is the 5th item in memory, since indexing starts at 0).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;I operator&lt;/strong&gt; increments the value at a location in memory by 1. The operation specifies which index should be incremented. For example, I6 will increment index 6 (the 7th item in memory) by 1.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;J operator&lt;/strong&gt; compares two locations in memory. If the values are different, the jump operator will branch (that is, jump to a different location in the code). The two locations are specified when calling the operator, and an arrow (or operation number) indicates where the operator should branch TO if the values are not the same. If the values are the same, the code continues.&lt;/p&gt;
&lt;p&gt;The program stops when it reaches the end of the instruction list.&lt;/p&gt;
&lt;p&gt;&lt;a name="z-loop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="simple-example-loop"&gt;Simple Example: Loop&lt;/h2&gt;
&lt;p&gt;Here is an example of a loop program. This program sets memory index 4 to zero, 
then increments it until it is equal to the value in memory index 20:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;001   Z4
002   I4
003   J4,20 --&amp;gt; 002
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The instruction &lt;code&gt;J4,20 --&amp;gt; 002&lt;/code&gt; indicates that the values in cell 4 and cell 20 
should be compared, and if they are not equal, the machine should jump to instruction &lt;code&gt;002&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="z-addition"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="implementing-an-addition-operation-on-the-z-machine"&gt;Implementing an Addition Operation on the Z-Machine&lt;/h2&gt;
&lt;p&gt;Graham-Cumming includes the following programming challenge in his &lt;a href="http://blog.jgc.org/2013/05/the-two-problems-i-had-to-solve-in-my.html"&gt;blog post&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Suppose a machine has two numbers in the first two locations in memory. Utilize these three operations to add the two numbers together and put the result into the third location in memory.&lt;/p&gt;
&lt;p&gt;Under what circumstances does the program fail?&lt;/p&gt;
&lt;p&gt;&lt;a name="z-solution-approach"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="the-solution-approach-the-maths"&gt;The Solution Approach (The Maths)&lt;/h3&gt;
&lt;p&gt;To approach the solution, start with the maths. What we're doing is trying to define a "complex" arithmetical operation (addition) from simpler "unit" operations (increment by one), so it will be helpful to wipe our mental slate clean and start at the very beginning of the problem.&lt;/p&gt;
&lt;p&gt;When I teach a math class, whether it be a developmental math class, an algebra class, or a calculus class, I always spend the first "full" lecture by guiding the students through this very procedure. Here's how I set the tone: "Imagine that you are stranded on a desert island, with no calculators, no math books, nothing but your fingers and toes. Now suppose you are tasked with reinventing all of mathematics, entirely from scratch. How would you do it?"&lt;/p&gt;
&lt;p&gt;This is a challenging task - and part of the challenge is just knowing where to begin (just how clean should you wipe the mental slate?). The Z-Machine problem formulation resolves that problem by explicitly enumerating valid operations. But let's continue with the desert island analogy for a bit.&lt;/p&gt;
&lt;p&gt;If we begin at what is truly the beginning, we can start with a single unit, the number 1. (If we want to fast forward through thousands of years of human history, we can instead start with the number 0 in addition to the number 1.) Having only a single number is boring, because we can't count anything. We need a way to generate more numbers. So, we begin by defining an increment operation. We begin with the unit, 1. We declare that we can combine 1 with any other number. When we combine 1 with another 1, we get a new, larger number - which we arbitrarily call two, and represent using this funny squiggle: 2.&lt;/p&gt;
&lt;p&gt;Now that we have defined the increment operation, adding a unit, we can begin to generate new numbers. We start with 1+1, which gives 2. The next number can be found by adding 1 to 2, which gives us a new number that we arbitrarily call three, and represent with a funny squiggle: 3.&lt;/p&gt;
&lt;p&gt;We continue in this manner, until we reach 9, and run out of squiggles to write. The next number we will get is a special number, because it is equal to the total number of fingers. When we get to 9, and add one more, we get "two hands", which we arbitrarily call ten. If we want to keep counting beyond ten, we're stuck, because we've run out of fingers. But we can take a shortcut - we can let one toe represent "two hands". So, we hold up one toe, to represent ten. To write ten, we can let the first digit represent how many toes we are holding up, and the second digit represent how many fingers we are holding up. That means we can write our "two hands" quantity as 10 - one toe, no fingers.&lt;/p&gt;
&lt;p&gt;We can keep on incrementing by 1, and using this system we can count all the way up to 99, at which point we will need another pair of hands or feet to keep generating new numbers, or we can suppose that after counting to 99, we are able to hold numbers in our head.&lt;/p&gt;
&lt;p&gt;But once again, we're generating numbers slowly. We want a way to generate more numbers, faster, so we can count higher. So, we define a new addition operation. Rather than adding 1, we define the general operation of addition recursively. To add two numbers like a and b, we can define this addition in terms of a unit increment:&lt;/p&gt;
&lt;div class="math"&gt;$$
a + b = a + 1 + 1 + 1 + \dots + 1
$$&lt;/div&gt;
&lt;p&gt;We increment the quantity a by 1, b times. This gives us a way to add arbitrary numbers together, so now we can reach much larger numbers by taking the largest number that we can count to, and adding that number to itself.&lt;/p&gt;
&lt;p&gt;Extending this approach can lead us from an increment operation (performed b times) to an addition operation (&lt;code&gt;+b&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It can also lead from an addition operation (performed b times) to a multiplication operation (&lt;code&gt;*b&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Extending the idea further, we can apply the multiplication operation (performed b times) and obtain an exponentiation operation (&lt;code&gt;^b&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This recursive definition of new operations can continue as long as we'd like: applying the exponentiation operation b times yields tetration (&lt;code&gt;^b^b^b^b^b...^b&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;But let's get back to addition.&lt;/p&gt;
&lt;p&gt;&lt;a name="z-addition1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="solution-1-positive-integers-only"&gt;Solution 1: Positive Integers Only&lt;/h3&gt;
&lt;p&gt;Adding two positive integers is the simplest case. 
Essentially, we just perform two loops: 
the first loop increments the result and increments a temporary variable 1, 
and does that until the temporary variable 1 is equal to the first number. 
The second loop increments the result and increments the result by 1 
for a number of times equal to the number at index 1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;001   Z2                    // clear space for the result
002   Z3                    // clear space for temp variable 1
003   I2                    // increment result
004   I3                    // increment temp variable 1
005   J3,0 --&amp;gt; 003
006   Z4                    // clear space for temp variable 2
007   I2                    // increment result
008   I3                    // increment temp variable 2
009   J4,1 --&amp;gt; 007
010   Z3                    // clean up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Because we only have an increment operation at our disposal, 
there is no way for us to deal with negative numbers. 
Dittos for non-integer real numbers.) &lt;/p&gt;
&lt;p&gt;This method will fail when either of the two numbers we are adding are zero.&lt;/p&gt;
&lt;p&gt;&lt;a name="z-addition2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="solution-2-dealing-with-zeros"&gt;Solution 2: Dealing With Zeros&lt;/h3&gt;
&lt;p&gt;A second solution that is a bit more challenging is dealing with the case of possible zeros 
in the first or second position. The algorithm above will increment the result and the 
temporary variable &lt;em&gt;at least once&lt;/em&gt; (similar to a do-while loop structure), 
which will always cause the comparison operation &lt;code&gt;J2,0&lt;/code&gt; or &lt;code&gt;J3,1&lt;/code&gt; to fail
if either cell 0 or cell 1 holds a zero.&lt;/p&gt;
&lt;p&gt;Here is code that can deal more gracefully with a zero in either 
the first or second positions. This utilizes some extra space in memory
to keep track of whether index 0 is a zero and whether index 1 is a zero.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// initialize
001     Z3
002     Z4 // temp 0
003     Z5 // temp 1
004     Z6 // is index 0 a zero?
005     Z7 // is index 1 a zero?
006     Z8 // zero
007     Z9 // one
008     I9

// increment by amount in index 0
009     J0,8 --&amp;gt; 014
010     I6
011     J4,6 --&amp;gt; 014
012     I4
013     I3
014     J0,4 --&amp;gt; 009

// increment by amount in index 1
015     J1,8 --&amp;gt; 020
016     I7
017     J7,8 --&amp;gt; 020
018     I5
019     I3
020     J1,5 --&amp;gt; 017

// clean up
021     Z4
022     Z5
023     Z6
024     Z7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The central idea behind this algorithm is, we keep incrementing the target cell while a 
condition is false, and the condition we are checking is based on a separate, independent counter.
That allows us to correctly increment (and stop incrementing) based on the two numbers 
in index 0 and index 1. 
(We don't want the final result cell to be involved in our final condition check.) &lt;/p&gt;
&lt;p&gt;This pattern can also be expanded to work for adding an arbitrary number of numbers; 
one simply needs to add an additional temp variable and an additional "is zero" variable 
for each new number being added to the total, then another block of 6 statements
to increment by the amount in the given index.
The block of 6 statements checks if the number we are adding is zero, 
and if it is not, the result is incremented by that many times. &lt;/p&gt;
&lt;p&gt;&lt;a name="z-decrement"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="implementing-a-decrement-operator-on-the-z-machine"&gt;Implementing a Decrement Operator on the Z-Machine&lt;/h2&gt;
&lt;p&gt;Suppose an operator places a number into cell 0 of the Z-Machine's memory. 
We require that the Z-Machine subtract 1 from that number, and place it in cell 1. &lt;/p&gt;
&lt;p&gt;The pseudocode approach here is to increment two cells in a particular order:
cell 2, which contains a sentinel value, is incremented. The program them checks if 
cell 2 is equal to cell 0. If it is not, the program increments cell 1, and repeats.
If cell 2 is equal to cell 0, the program stops before cell 1 is incremented, leaving it 
one less than the original value in cell 0.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;001   Z1            // decrement result
002   Z2            // zero
003   Z3            // one
004   I3
005   J2,3 --&amp;gt; 007  // always false
006   I1
007   I2
008   J2,0 --&amp;gt; 006
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This pseudocode uses hard-coded constants (zero and one) to create a jump condition
that is always false and therefore always followed. This allows the machine to 
skip a line of code like instruction 006, and perform the increment operation 
in a staggered manner, as described above.&lt;/p&gt;
&lt;p&gt;&lt;a name="z-lessthan"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="implementing-a-less-than-operator-on-the-z-machine"&gt;Implementing a Less Than Operator on the Z-Machine&lt;/h2&gt;
&lt;p&gt;Another challenging operation to implement with the Z-Machine is a comparison operator. 
Suppose that an operator places two numbers into the first two memory positions of 
the Z-Machine. That is, index 0 contains a number A, and index 1 contains a number B. 
Supposing these numbers are both natural numbers (either 0 or positive integers), 
a comparison operator will compare the two numbers, select the smaller of the two numbers, 
and place it into the third position in memory (index 2).&lt;/p&gt;
&lt;p&gt;The pseudocode approach to implement the comparison operator is to create 
a counter that start at zero, and check if it is equal to A or B 
(the numbers at index 0 and index 1). 
If we continue to increment our counter, and check if it is equal to A or B, 
and stop when it reaches either A or B, we can guarantee that we will stop 
when the counter reaches the smaller of the two numbers.&lt;/p&gt;
&lt;p&gt;In order to increment the memory cell at index 2 to hold the smaller of the two numbers 
at index 0 and index 1, we can use the following Z-Machine code, 
which continually checks if the number at index 2 is equal to 
either the number at index 0 or the number at index 1, increments if false, 
and stops when true (when it reaches the smaller of the two). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;001     Z2 // smaller of the two numbers
002     Z3 // zero
003     Z4 // one
004     I4

005     J0,2 --&amp;gt; 007
006     J3,4 --&amp;gt; 011
007     J1,2 --&amp;gt; 009
008     J3,4 --&amp;gt; 011
009     I2
010     J3,4 --&amp;gt; 005
011     Z4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this code successfully handles the case where either number (or both) 
is 0 or any positive integer.&lt;/p&gt;
&lt;p&gt;&lt;a name="z-whocares"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="who-cares-or-how-to-build-a-computer"&gt;Who Cares? (Or, How To Build A Computer)&lt;/h2&gt;
&lt;p&gt;This whole exercise may appear, at first glance, to be an exercise in trivial pursuit. 
Why bother reinventing the wheel? Isn't this nothing more than an entertaining puzzle?&lt;/p&gt;
&lt;p&gt;To the contrary - the process of assembling a sequence of simple operations into a cascade of
more complex operations is precisely how computational devices are assembled from 
circuit components. For example, a &lt;a href="https://en.wikipedia.org/wiki/Flip-flop_%28electronics%29"&gt;flip flop circuit&lt;/a&gt;
utilizes a pair of NOR (negation of OR) gates to store bits. The &lt;a href="https://en.wikipedia.org/wiki/Apollo_Guidance_Computer"&gt;Apollo Guidance Computer&lt;/a&gt;
was composed entirely of NOR gates. &lt;/p&gt;
&lt;p&gt;In fact, the Apollo Guidance Computer is a fantastic example of a computational device 
constructed from a set of such simple instructions as the ones available in the Z-Machine.
A few example operations from the Wikipedia article on the Apollo Guidance Computer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;AD (add)
    Add the contents of memory to register A and store the result in A.

INDEX
    Add the data retrieved at the address specified by the instruction 
    to the next instruction. INDEX can be used to add or subtract 
    an index value to the base address specified by the operand 
    of the instruction that follows INDEX. This method is used 
    to implement arrays and table look-ups.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is not unusual for a hardware platform to have a small set of basic commands or instructions
that can be carried out, and for that set of instructions to be different from hardware platform
to hardware platform. Designing a new computational device requires the system designer
to adapt to the hardware's capabilities - not the other way around. 
For that reason, it is important to keep those engineering and puzzle-solving skills sharp.
You never know when you'll be designing a new computer device.&lt;/p&gt;
&lt;p&gt;&lt;a name="z-sources"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"The Two Problems I Had To Solve In My Oxford Interview." John Graham-Cumming. Published 2 May 2013. Accessed 24 April 2017.
&amp;lt;&lt;a href="http://blog.jgc.org/2013/05/the-two-problems-i-had-to-solve-in-my.html"&gt;http://blog.jgc.org/2013/05/the-two-problems-i-had-to-solve-in-my.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Flip Flop (electronics)." Wikipedia. The Wikimedia Foundation. Edited 13 April 2017. Accessed 24 April 2017.
&amp;lt;&lt;a href="https://en.wikipedia.org/wiki/Flip-flop_%28electronics%29"&gt;https://en.wikipedia.org/wiki/Flip-flop_%28electronics%29&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Apollo Guidance Computer." Wikipedia. The Wikimedia Foundation. Edited 5 April 2017. Accessed 24 April 2017.
&amp;lt;&lt;a href="https://en.wikipedia.org/wiki/Apollo_Guidance_Computer"&gt;https://en.wikipedia.org/wiki/Apollo_Guidance_Computer&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="turing machine"></category><category term="computer science"></category><category term="computer engineering"></category><category term="apollo"></category><category term="assembly"></category></entry><entry><title>AWSome Day Seattle Notes: Part 2: Networking, Security, and Miscellany</title><link href="https://charlesreid1.github.io/awsome-day-seattle-notes-part-2-networking-security-and-miscellany.html" rel="alternate"></link><published>2017-04-12T10:00:00-07:00</published><updated>2017-04-12T10:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-04-12:/awsome-day-seattle-notes-part-2-networking-security-and-miscellany.html</id><summary type="html">&lt;p&gt;These notes are also available on git.charlesreid1.com 
&lt;a href="https://git.charlesreid1.com/charlesreid1/aws/src/branch/master/awsome-day-sea-2018/Part2.md"&gt;here&lt;/a&gt;
or in
&lt;a href="https://git.charlesreid1.com/charlesreid1/aws"&gt;https://git.charlesreid1.com/charlesreid1/aws&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="awsome-day-notes-part-2-networking-security-and-miscellany"&gt;AWSome Day Notes: Part 2: Networking, Security, and Miscellany&lt;/h1&gt;
&lt;p&gt;Following are some notes from Amazon's AWSome Day (Tuesday, February 27, 2018).&lt;/p&gt;
&lt;h2 id="nomenclature"&gt;Nomenclature&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Elastic:&lt;/strong&gt; You'll see the word "elastic" on a lot of Amazon's services. The "elastic" concept refers to a service that is able to handle huge increases in traffic (Pokemon Go - number of users grew orders of magnitude faster/larger than what they designed for).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Virtual Private Cloud (VPC):&lt;/strong&gt; The AWS equivalent of a virtual private network (VPN). A VPC is â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;These notes are also available on git.charlesreid1.com 
&lt;a href="https://git.charlesreid1.com/charlesreid1/aws/src/branch/master/awsome-day-sea-2018/Part2.md"&gt;here&lt;/a&gt;
or in
&lt;a href="https://git.charlesreid1.com/charlesreid1/aws"&gt;https://git.charlesreid1.com/charlesreid1/aws&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="awsome-day-notes-part-2-networking-security-and-miscellany"&gt;AWSome Day Notes: Part 2: Networking, Security, and Miscellany&lt;/h1&gt;
&lt;p&gt;Following are some notes from Amazon's AWSome Day (Tuesday, February 27, 2018).&lt;/p&gt;
&lt;h2 id="nomenclature"&gt;Nomenclature&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Elastic:&lt;/strong&gt; You'll see the word "elastic" on a lot of Amazon's services. The "elastic" concept refers to a service that is able to handle huge increases in traffic (Pokemon Go - number of users grew orders of magnitude faster/larger than what they designed for).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Virtual Private Cloud (VPC):&lt;/strong&gt; The AWS equivalent of a virtual private network (VPN). A VPC is a virtual network that allows a given set of nodes in the same region and zone to create a virtual network to communicate privately.&lt;/p&gt;
&lt;h2 id="services"&gt;Services&lt;/h2&gt;
&lt;p&gt;This document will give a brief summary of some of the popular cloud services. The model for most of these technologies is, the Apache Software Foundation will release an open-source big data project (can be installed/run by anyone). But since most people are using cloud providers anyway, the cloud providers offer their own ready-to-go implementation of these services. These run stable versions of the Apache software, wrapped by the cloud provider's API. This is a win-win because you don't have to fiddle with wrangling servers, and they can use their resources more wisely.&lt;/p&gt;
&lt;p&gt;As an example, Apache Kafka is software for handling message streams. (Like a giant digital mail room - some services broadcast/publish messages, some services receive/subscribe to messages.) You can install Kafka locally or on a cluster, or rent cloud nodes and install it yourself. Or, you can use Kinesis on AWS, or PubSub on Google Cloud Platform (GCP), both of which are elastic (completely transparent to you) and charge for data throughput instead of compute time. Code written for Kafka can be uploaded and used without modification.&lt;/p&gt;
&lt;p&gt;A few other important services, listing the Apache, AWS, and GCP equivalents:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Apache&lt;/th&gt;
&lt;th align="left"&gt;AWS&lt;/th&gt;
&lt;th&gt;GCP&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Hadoop&lt;/td&gt;
&lt;td align="left"&gt;Kinesis Analytics&lt;/td&gt;
&lt;td&gt;Dataproc&lt;/td&gt;
&lt;td&gt;Running data-intensive parallel jobs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spark&lt;/td&gt;
&lt;td align="left"&gt;Kinesis Analytics&lt;/td&gt;
&lt;td&gt;Dataproc&lt;/td&gt;
&lt;td&gt;Running data-intensive parallel jobs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HDFS&lt;/td&gt;
&lt;td align="left"&gt;S3&lt;/td&gt;
&lt;td&gt;GC Storage&lt;/td&gt;
&lt;td&gt;Object-based file storage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Beam&lt;/td&gt;
&lt;td align="left"&gt;Kinesis Streams&lt;/td&gt;
&lt;td&gt;Dataflow&lt;/td&gt;
&lt;td&gt;Sream/batch data processing pipelines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Impala&lt;/td&gt;
&lt;td align="left"&gt;Redshift/Athena&lt;/td&gt;
&lt;td&gt;BigQuery&lt;/td&gt;
&lt;td&gt;Handles SQL queries on massive (&amp;gt;1 PB) data sets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kafka&lt;/td&gt;
&lt;td align="left"&gt;Kinesis&lt;/td&gt;
&lt;td&gt;PubSub&lt;/td&gt;
&lt;td&gt;Message streaming&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There are many other cloud services, some without a corresponding Apache project (e.g., Google's Machine Learning APIs or Amazon's text-to-speech API) but these five are common in big data ecosystems.&lt;/p&gt;
&lt;h2 id="networking"&gt;Networking&lt;/h2&gt;
&lt;p&gt;Cloud networking is like the condiment bar of cloud providers - customers don't pay for it, but they can help themselves. &lt;/p&gt;
&lt;p&gt;Why set up a VPC? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scaling - having the ability to connect nodes via network means you can scale up client-server services (e.g., databases/web servers)&lt;/li&gt;
&lt;li&gt;Security - VPC traffic is encrypted and not visible to outsiders, even when it occurs over public channels. Services can be set up to listen only for traffic from the VPC. You can also connect from an outside box (e.g., your laptop) to the VPC using a VPN client.&lt;/li&gt;
&lt;li&gt;Learning - you have to deal with some nitty gritty details, but learning how to set up virtual networks gives you a real education in network security and in how the internet works. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can still accomplish a lot even with simple networking patterns.&lt;/p&gt;
&lt;h3 id="making-a-vpc-plan"&gt;Making a VPC: Plan&lt;/h3&gt;
&lt;p&gt;To create a VPC, you first define the entire VPC network, then define a subnet on the network. The subnet must have an internet gateway, a routing table, and DHCP/DNS added to it so that nodes on the subnet can access the outside internet and find each other.&lt;/p&gt;
&lt;p&gt;Here is a visual depiction of the architecture:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;         +--------------------------------------------------------------------------+
         | Whole Internet                                                           |
         |                                                                          |
         |                                                                          |
         |  +--------------------------------------------------------------------+  |
         |  |  Amazon                                                            |  |
         |  |                                                                    |  |
         |  |                                                                    |  |
         |  |                                                                    |  |
         |  |   +---------------------------------------------------+            |  |
         |  |   |   Virtual Private Cloud: WAN                      |            |  |
         |  |   |                                             +-----+-----+      |  |
         |  |   |   Network IP Block: 10.117.0.0/16           | Internet  |      |  |
         |  |   |                     10.117.*.*              | Gateway   |      |  |
         |  |   |                                             +-----+-----+      |  |
         |  |   |    +----------------------------------+           |            |  |
         |  |   |    |  VPC Subnet: LAN                 |           |            |  |
         |  |   |    |                                  |     +-----+-----+      |  |
         |  |   |    |  Subnet IP Block: 10.117.0.0/24  |     |  Routing  |      |  |
         |  |   |    |                   10.117.0.*     |     |  Table    |      |  |
         |  |   |    |                                  |     +-----+-----+      |  |
         |  |   |    |                                  |           |            |  |
         |  |   |    +----------------------------------+           |            |  |
         |  |   |                                             +-----+-----+      |  |
         |  |   |                                             |   DHCP    |      |  |
         |  |   |                                             +-----+-----+      |  |
         |  |   |                                                   |            |  |
         |  |   +---------------------------------------------------+            |  |
         |  |                                                                    |  |
         |  +--------------------------------------------------------------------+  |
         |                                                                          |
         +--------------------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="making-a-vpc-network-and-subnet"&gt;Making a VPC: Network and Subnet&lt;/h3&gt;
&lt;p&gt;To sepcify the network and subnet IP ranges, you use CIDR notation, which is an IP address
with zeroes in several blocks, and a suffix indicating which blocks are available for this 
network to assign. (For reference, &lt;code&gt;A.B.C.D/8&lt;/code&gt; means "the last 3 blocks" or &lt;code&gt;B.C.D&lt;/code&gt;;  &lt;code&gt;A.B.C.D/16&lt;/code&gt; means "the last 2 blocks" or &lt;code&gt;C.D&lt;/code&gt;; and &lt;code&gt;A.B.C.D/24&lt;/code&gt; means "the last block" or &lt;code&gt;.D&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The network IP address can be specified as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;10.X.0.0/16
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where X is any number between 0 and 254 (when you include the reserved 255 value, that totals 256, since IP addresses are just 32 bit strings, 4 blocks of 8 bits each - &lt;code&gt;2^8 = 256&lt;/code&gt;). The subnet can be specified with the CIDR IP range:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;10.X.Y.0/24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where X and Y are integers between 0 and 254. This means any node joining this subnet will have an IP address of the form &lt;code&gt;10.X.Y.*&lt;/code&gt;. Two IP addresses with the same &lt;code&gt;X&lt;/code&gt; value are on the same VPC network; two IP addresses with the same &lt;code&gt;Y&lt;/code&gt; value are on the same subnet.&lt;/p&gt;
&lt;p&gt;In the example above, X = 117, and we have the VPC defined by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;10.117.0.0/16
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the subnet defined by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;10.117.0.0/24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="making-a-vpc-the-essentials"&gt;Making a VPC: The Essentials&lt;/h3&gt;
&lt;p&gt;Once you've added the VPC and the subnet, you'll also need to add three essential services to the VPC network:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internet gateway - this is something you create from the VPC section of the AWS console. It's like your home wifi router that's connected to the internet. actually, it &lt;em&gt;is&lt;/em&gt; the VPC network router, and it &lt;em&gt;is&lt;/em&gt; connected to the internet.&lt;/li&gt;
&lt;li&gt;Routing table - this tells computers on the network how to find each other and how to find the gateway.&lt;/li&gt;
&lt;li&gt;DHCP - domain host control protocol, this is the service that is used to hand out IP addresses&lt;/li&gt;
&lt;li&gt;(Bundled with DHCP) DNS - domain name service, this is used to turn web URLs into IP addresses&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you should be good to go. (Scratch that - make a security group first.) &lt;/p&gt;
&lt;h3 id="making-a-vpc-security-group"&gt;Making a VPC: Security Group&lt;/h3&gt;
&lt;p&gt;One last step, after you've constructed the network, is to create a security group to control outside access to the VPC. This is an AWS-level firewall that will only allow traffic on ports you specify. Here we specify a single security group for every node on the network, and the security policy opens the following ports from and to computers in the same VPC:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;19999 - netdata&lt;/li&gt;
&lt;li&gt;9090 - prometheus&lt;/li&gt;
&lt;li&gt;3000 - grafana&lt;/li&gt;
&lt;li&gt;27017 - mongodb&lt;/li&gt;
&lt;li&gt;8080 - mongoexpress&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="adding-nodes-to-the-vpc"&gt;Adding Nodes to the VPC&lt;/h3&gt;
&lt;p&gt;Test out your network by creating a t2.micro node and specifying the subnet you created as the network the node should connect to. Check to ensure you can access the internet.&lt;/p&gt;
&lt;p&gt;A good schema to use is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;10.X.0.1      gateway
10.X.0.100    node0
10.X.0.101    node1
10.X.0.102    node2
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="scaling-your-process"&gt;Scaling Your Process&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you're SSHing into a machine, your automation is broken.
- Alex the AWS trainer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are some tricks to getting your process to scale, but the essential part is figuring out how to remove SSH from the process. Cloud OS images (e.g. Ubuntu) have cloud-init, which runs an init script on boot. &lt;a href="https://stackoverflow.com/a/10128171"&gt;More info in this Stack Overflow post&lt;/a&gt;. This must be a bash script and size is limited to 16 KB. If it takes &amp;gt; 10 minutes, AWS will treat it as hanging and kill the node, so keep it (relatively) simple.&lt;/p&gt;
&lt;p&gt;Example of what you can do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check out a git repo with initailization scripts&lt;/li&gt;
&lt;li&gt;Install a hard-coded copy of your SSH &lt;em&gt;public&lt;/em&gt; (not private) key, so you can get passwordless access to the node later&lt;/li&gt;
&lt;li&gt;Spawn a server or process in the background&lt;/li&gt;
&lt;li&gt;Start a server or process in a screen so that later you can SSH into the machine and attach to the screen to monitor the progress of the job or the service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And so on.&lt;/p&gt;
&lt;h2 id="ssh-and-identity-management"&gt;SSH and Identity Management&lt;/h2&gt;
&lt;p&gt;Identity access management (IAM) and access controls are the most confusing part of any cloud platform - don't feel frustrated if you don't pick it up easily. &lt;/p&gt;
&lt;p&gt;IAM is a way for you to provide limited, specified access to resources that you own/have created, without sharing your credentials.&lt;/p&gt;
&lt;p&gt;IAM is useful for you to use yourself (e.g., if you are using Amazon Kinesis and you want it to access an Amazon Redshift database, you can create an IAM for your Amazon Kinesis script that gives it permission to access data in a particular Amazon Reshift database, and run your Kinesis script under that identity). &lt;/p&gt;
&lt;p&gt;IAM is also useful for sharing resources with other AWS users. You can create a VPC and create an IAM group that allows people to manage the network, and add any network administrators to the group. This gives them full control over the network. You can also create an IAM group that gives members the ability to see, but not modify, the network (e.g., billing manager).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_IAM.html"&gt;More info on IAM&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="tricks-with-disks"&gt;Tricks with Disks&lt;/h2&gt;
&lt;p&gt;AMI (Amazon Machine Images) provide operating system images that you can use to initialize a new node. But you can also create your own AMIs. Use the EC2 console to create an AMI (image) from any of your running nodes; wait for the snapshot to complete (may take a few minutes); and now you can spawn a new node from the exact state of the existing node.&lt;/p&gt;
&lt;p&gt;This is useful for a couple of tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you're doing a parameter study of an analysis technique and need to run a process in parallel on the same data set, you can download the data set and set up your code on a single node, create an image once you're finished, then spawn new nodes using that snapshot&lt;/li&gt;
&lt;li&gt;If you already have a node with a huge data set that took hours to download and process, and you realize your node needs another 32 GB of RAM, or a few extra CPUs, you won't be able to resize it on the fly. But you can create an AMI from the running node, shut it down, and create a new node from the image.&lt;/li&gt;
&lt;li&gt;If you created a node in region &lt;code&gt;us-west-1a&lt;/code&gt; and another node in region &lt;code&gt;us-east-1c&lt;/code&gt; and you want to connect them together on a VPC, you won't be able to create a VPC that spans regions. But you can create an AMI from one of the running nodes, shut it down, and spawn a new node in the correct region.&lt;/li&gt;
&lt;li&gt;If you have a particularly large data set, a complicated workflow setup, or a custom operating system, you can create a public AMI and share it with others. &lt;/li&gt;
&lt;li&gt;You can also &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-explicit.html"&gt;privately share AMIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="aws-cli-and-boto3"&gt;AWS CLI and Boto3&lt;/h2&gt;
&lt;h3 id="aws-from-the-command-line"&gt;AWS from the Command Line&lt;/h3&gt;
&lt;p&gt;If you've clicked the AWS web interface to death and are looking for a better way of interacting with AWS, you can use &lt;code&gt;aws-cli&lt;/code&gt;, a command line interface to AWS. This is extremely convenient for scripting common tasks. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/cli/"&gt;aws-cli&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a really powerful way of interacting with S3 buckets, and makes copying files to/from S3 buckets as easy as copying files in local directories.&lt;/p&gt;
&lt;h3 id="boto3"&gt;Boto3&lt;/h3&gt;
&lt;p&gt;The CLI is much more powerful than the web interface, but is still missing some of the options available through the web. For the complicated stuff, use boto3, the Python API for AWS services.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/boto/boto3"&gt;boto3 on github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/sdk-for-python/"&gt;boto3 documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The basic formula for boto scripts is, you create Python objects representing different consoles or resources (e.g., a VPC object or an EC2 object), and you call functions to perform actions on those resources or in those consoles. These functions can take complicated nested dictionaries as parameters and allow you to specify every option available in AWS.&lt;/p&gt;
&lt;h3 id="to-infinity-and-beyond"&gt;To Infinity... And Beyond!&lt;/h3&gt;
&lt;p&gt;Other libraries like &lt;a href="https://www.terraform.io/intro/"&gt;terraform&lt;/a&gt; build on boto3 and simplify the routine tasks of juggling information and configuration details, providing a kubernetes-like dashboard to run and manage an AWS cluster.&lt;/p&gt;
&lt;h2 id="instance-metadata"&gt;Instance Metadata&lt;/h2&gt;
&lt;p&gt;One last topic - how to get access to information about your EC2 node, from your EC2 node.&lt;/p&gt;
&lt;p&gt;There are some special IP addresses - any IP address starting with 10 is reserved for private networks, as are networks starting with 192.168, and 127.0.0.1 is the IP address that points to yourself.&lt;/p&gt;
&lt;p&gt;The IP address 169.254 is another reserved IP block, and is normally used for crossover connections (direct ethernet-to-ethernet connections). Given its uselessness in the cloud, AWS repurposed that IP address to store instance metadata.&lt;/p&gt;
&lt;p&gt;This IP address exposes a restful API that you can call with curl. Information is organized hierarchically. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ curl http://169.254.169.254/latest/meta-data/

ami-id
ami-launch-index
ami-manifest-path
block-device-mapping/
hostname
iam/
instance-action
instance-id
instance-type
local-hostname
local-ipv4
mac
metrics/
network/
placement/
profile
public-hostname
public-ipv4
public-keys/
reservation-id
security-groups
services/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;User data is also available:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://169.254.169.254/latest/user-data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;as are the IP addresses of network interfaces. The network interface can be specified if there are more than one. To get the private VPC IP, request the &lt;code&gt;local-ipv4&lt;/code&gt; address:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://169.254.169.254/local-ipv4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and to get the public IP address, use &lt;code&gt;public-ipv4&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://169.254.169.254/public-ipv4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;by assigning these values to environment variables, you can write and run a single script across multiple machines, and control the execution behavior across those machines.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html#instancedata-user-data-retrieval"&gt;Link to more info on instance data&lt;/a&gt;&lt;/p&gt;</content><category term="Charlesreid1"></category><category term="aws"></category><category term="cloud"></category><category term="vpc"></category><category term="containers"></category><category term="data engineering"></category></entry><entry><title>AWSome Day Seattle Notes: Part 1: The Basics</title><link href="https://charlesreid1.github.io/awsome-day-seattle-notes-part-1-the-basics.html" rel="alternate"></link><published>2017-04-11T10:00:00-07:00</published><updated>2017-04-11T10:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-04-11:/awsome-day-seattle-notes-part-1-the-basics.html</id><summary type="html">&lt;p&gt;These notes are also available on git.charlesreid1.com 
&lt;a href="https://git.charlesreid1.com/charlesreid1/aws/src/branch/master/awsome-day-sea-2018/Part1.md"&gt;here&lt;/a&gt;
or in
&lt;a href="https://git.charlesreid1.com/charlesreid1/aws"&gt;https://git.charlesreid1.com/charlesreid1/aws&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="awsome-day-notes-part-1-the-basics"&gt;AWSome Day Notes: Part 1: The Basics&lt;/h1&gt;
&lt;p&gt;Following are some notes from Amazon's AWSome Day (Tuesday, February 27, 2018).&lt;/p&gt;
&lt;h2 id="ec2-costs-and-scheduling"&gt;EC2 Costs and Scheduling&lt;/h2&gt;
&lt;p&gt;Cost of a node:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Important to understand Amazon's price model: users pay for &lt;em&gt;access&lt;/em&gt;, not for &lt;em&gt;hardware&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Cost of AWS node is cost for &lt;em&gt;on the spot access&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scheduling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you can anticipate your usage, you can schedule instances in advance, and get a discount&lt;/li&gt;
&lt;li&gt;Discount of 50% for one-year reservation (if you keep it busy for 6 months â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;These notes are also available on git.charlesreid1.com 
&lt;a href="https://git.charlesreid1.com/charlesreid1/aws/src/branch/master/awsome-day-sea-2018/Part1.md"&gt;here&lt;/a&gt;
or in
&lt;a href="https://git.charlesreid1.com/charlesreid1/aws"&gt;https://git.charlesreid1.com/charlesreid1/aws&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="awsome-day-notes-part-1-the-basics"&gt;AWSome Day Notes: Part 1: The Basics&lt;/h1&gt;
&lt;p&gt;Following are some notes from Amazon's AWSome Day (Tuesday, February 27, 2018).&lt;/p&gt;
&lt;h2 id="ec2-costs-and-scheduling"&gt;EC2 Costs and Scheduling&lt;/h2&gt;
&lt;p&gt;Cost of a node:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Important to understand Amazon's price model: users pay for &lt;em&gt;access&lt;/em&gt;, not for &lt;em&gt;hardware&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Cost of AWS node is cost for &lt;em&gt;on the spot access&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scheduling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you can anticipate your usage, you can schedule instances in advance, and get a discount&lt;/li&gt;
&lt;li&gt;Discount of 50% for one-year reservation (if you keep it busy for 6 months, you've made your money back)&lt;/li&gt;
&lt;li&gt;Spot instances also available - need to be robust to sudden starts/stops (good for embarrassingly parallel jobs)&lt;/li&gt;
&lt;li&gt;Cheaper to anticipate your usage and plan ahead&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ec2-transfer-costs"&gt;EC2 Transfer Costs&lt;/h2&gt;
&lt;p&gt;EC2 Instances:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See &lt;a href="https://aws.amazon.com/ec2/pricing/on-demand/"&gt;EC2 Instance Pricing - Data Transfer&lt;/a&gt; section&lt;/li&gt;
&lt;li&gt;Network costs for AWS nodes are an important consideration for high-traffic nodes (&amp;gt;10 TB)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;EC2-Internet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traffic going from the internet &lt;em&gt;into&lt;/em&gt; a node is always free&lt;/li&gt;
&lt;li&gt;Traffic going from the node &lt;em&gt;out&lt;/em&gt; to the internet incurrs costs after 10 TB&lt;/li&gt;
&lt;li&gt;Outbound traffic costs ~$90/TB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AWS Regions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traffic &lt;em&gt;within&lt;/em&gt; a region does not incur costs (well... it's complicated)&lt;/li&gt;
&lt;li&gt;Traffic &lt;em&gt;between&lt;/em&gt; regions will incur costs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;EC2-S3:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transfer &lt;em&gt;into&lt;/em&gt; an EC2 node from S3 bucket in same AWS region does not incur costs&lt;/li&gt;
&lt;li&gt;Transfer &lt;em&gt;out of&lt;/em&gt; an EC2 node into S3 bucket in same AWS region does not incur costs&lt;/li&gt;
&lt;li&gt;(If they did charge you, they would be double-dipping...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: the list of prices is like a legal document, so use the &lt;a href="https://calculator.s3.amazonaws.com/index.html"&gt;AWS Monthly Calculator&lt;/a&gt; to estimate monthly costs with more detail.&lt;/p&gt;
&lt;h2 id="s3-transfer-costs"&gt;S3 Transfer Costs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;See &lt;a href="https://aws.amazon.com/s3/pricing/"&gt;S3 Pricing - Data Transfer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Price model for storage is simliar to price model for AWS nodes: you pay for &lt;em&gt;access&lt;/em&gt;, not for &lt;em&gt;hardware&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;To give a sense of why, think about logistics of a large "disk farm": all the intensive operations are done by the head nodes, disks are just passive&lt;/li&gt;
&lt;li&gt;Busier disk farm needs sophisticated hardware for parallel read/write, high-bandwidth network lines, fast encryption&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;S3 storage pricing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rule of thumb: ~$20/TB to store the data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;S3-Internet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transfer &lt;em&gt;into&lt;/em&gt; an S3 bucket from the internet is always free (getting stuff into the bucket is the easy part - that's how they get ya)&lt;/li&gt;
&lt;li&gt;Transfer &lt;em&gt;out&lt;/em&gt; of an S3 bucket to the internet costs ~$90/TB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;S3-EC2:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transfer &lt;em&gt;out&lt;/em&gt; of an S3 bucket to most other Amazon regions costs ~$20/TB&lt;/li&gt;
&lt;li&gt;Transfer &lt;em&gt;out&lt;/em&gt; of an S3 bucket into an EC2 node in the same AWS region does not incur costs&lt;/li&gt;
&lt;li&gt;Transfer &lt;em&gt;into&lt;/em&gt; an S3 bucket from an EC2 node in the same AWS region does not incur costs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As mentioned above, this means you won't be double-charged for transferring data from an S3 bucket to an EC2 node, then from the EC2 node out to the internet.&lt;/p&gt;
&lt;h2 id="s3-storage-hierarchies"&gt;S3 Storage Hierarchies&lt;/h2&gt;
&lt;p&gt;Continuing with the theme of planning ahead...&lt;/p&gt;
&lt;p&gt;Storage hierarchies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Biggest cost of storage is not disk space, it's transfer&lt;/li&gt;
&lt;li&gt;Paying for speed, paying for timeliness, paying for &lt;em&gt;on the spot access&lt;/em&gt; to your data&lt;/li&gt;
&lt;li&gt;Your data will be cheaper if you're willing to wait a few minutes or deal with a slow connection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Storage hierarchies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standard (~$20/TB)&lt;/li&gt;
&lt;li&gt;Infrequent access (~$13/TB) - less frequent access, but at same transfer speed&lt;/li&gt;
&lt;li&gt;Glacier (~$4/TB) - delay of up to 12 hours (smaller files = faster), deleting data &lt;em&gt;newer&lt;/em&gt; than 3 months incurrs costs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/glacier/pricing/"&gt;Glacier Pricing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lifecycle rules:
* Can create rules to move old data from S3 buckets into Glacier&lt;/p&gt;
&lt;h2 id="efs-vs-ebs-vs-s3"&gt;EFS vs EBS vs S3&lt;/h2&gt;
&lt;p&gt;When do you use EFS, EBS, or S3?&lt;/p&gt;
&lt;p&gt;Elastic Block Storage (EBS):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;This is probably what you want&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;EBS is block storage for one EC2 node - designed for general purpose applications&lt;/li&gt;
&lt;li&gt;Cost: ~$120/TB/mo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elastic File System (EFS):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EFS is block storage for multiple EC2 nodes - designed for fast read-write operations, many incremental changes to files&lt;/li&gt;
&lt;li&gt;"Elastic" part of EFS - can dynamically grow as hard drive grows (PB+ scale)&lt;/li&gt;
&lt;li&gt;Hard drive on steroids - like plugging in a hard drive over a network, but big/fast/smart enough to be accessible to thousands+ of machines&lt;/li&gt;
&lt;li&gt;Expensive: ~$300/TB/mo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;S3:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S3 is object storage - it stores blobs of raw data, creates snapshots in time&lt;/li&gt;
&lt;li&gt;If you change a single character of a large file, bucket has to create new shapshot&lt;/li&gt;
&lt;li&gt;Booting from S3 as a hard disk would take you about a thousand years... don't do that&lt;/li&gt;
&lt;li&gt;Cheapest: ~$20/TB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cool but &lt;span class="math"&gt;\($\)&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You may see "appliances" mentioned in Amazon documentation - Amazon will ship you a physical data transfer appliance that encrypts and copies data on site (&lt;a href="https://docs.aws.amazon.com/snowball/latest/ug/images/Snowball-closed-600w.png"&gt;Snowball&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Can also purchase special network connections that bypass the public internet - like ISP putting alligator clips between your network lines and Amazon's network lines&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Charlesreid1"></category><category term="aws"></category><category term="cloud"></category><category term="vpc"></category><category term="containers"></category><category term="data engineering"></category></entry><entry><title>Setting Up a Self-Hosted Github Clone with Gitea</title><link href="https://charlesreid1.github.io/setting-up-a-self-hosted-github-clone-with-gitea.html" rel="alternate"></link><published>2017-04-01T22:00:00-07:00</published><updated>2017-04-01T22:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-04-01:/setting-up-a-self-hosted-github-clone-with-gitea.html</id><summary type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#gitea-intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-running"&gt;Running with Gitea&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#gitea-bin"&gt;Binary or Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-config-dir"&gt;Configuring Gitea Directories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-fw"&gt;Opening the Firewall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-config-server"&gt;Setting Up and Configuring Gitea Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-use"&gt;How To Use Gitea&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#gitea-pushing-local"&gt;Pushing a Local Repo Into Gitea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-copying"&gt;Copying Repos from Github to Gitea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-moving"&gt;"Moving" Repos from Github to Gitea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-pushing-commits"&gt;Pushing Commits to Github or Gitea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-backing-up"&gt;Backing Up Gitea&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-patterns"&gt;How Gitea Fits Into Git Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-wrapup"&gt;Wrapup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="gitea-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;In this post we'll cover how to set up a web-hosted git server that uses Gitea,
a Github clone that is written in Go. 
While this post is not, strictly speaking, research, 
having your own hosted git server certainly â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#gitea-intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-running"&gt;Running with Gitea&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#gitea-bin"&gt;Binary or Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-config-dir"&gt;Configuring Gitea Directories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-fw"&gt;Opening the Firewall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-config-server"&gt;Setting Up and Configuring Gitea Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-use"&gt;How To Use Gitea&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#gitea-pushing-local"&gt;Pushing a Local Repo Into Gitea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-copying"&gt;Copying Repos from Github to Gitea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-moving"&gt;"Moving" Repos from Github to Gitea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-pushing-commits"&gt;Pushing Commits to Github or Gitea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-backing-up"&gt;Backing Up Gitea&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-patterns"&gt;How Gitea Fits Into Git Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-wrapup"&gt;Wrapup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="gitea-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;In this post we'll cover how to set up a web-hosted git server that uses Gitea,
a Github clone that is written in Go. 
While this post is not, strictly speaking, research, 
having your own hosted git server certainly makes it easier to
manage research codes and set up organizations to own different bits of code.&lt;/p&gt;
&lt;p&gt;Here's an image of a git repository in the finished product:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image of finished product" src="/images/gitea1.png"&gt;&lt;/p&gt;
&lt;p&gt;We will start by covering the server configuration for Gitea, 
and then we'll cover how to use Gitea's git repository.&lt;/p&gt;
&lt;p&gt;&lt;a name="gitea-running"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="running-with-gitea"&gt;Running with Gitea&lt;/h2&gt;
&lt;p&gt;Gitea is a web app for running a self-hosted Github clone. 
It is implemented entirely in the Go language,
so all of the pages that are served up are assembled by the Go binary.
The Go binary also has a local instance of git running, 
and any actions taken through the Gitea web interface
are translated, by the Go binary, into actions in the git reopsitory.&lt;/p&gt;
&lt;p&gt;Out of the box, Gitea provides all of this functionality, and takes care of all the details,
so you don't have to worry about any of this. But if you build it yourself,
you can modify the content the binary serves up and the actions it takes. &lt;/p&gt;
&lt;p&gt;In this guide, we'll stick to the binary.&lt;/p&gt;
&lt;p&gt;&lt;img alt="DIagram of how the gitea binary runs as an http server on port 3000." src="/images/gitea-diagram.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="gitea-bin"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="binary-or-source"&gt;Binary or Source&lt;/h3&gt;
&lt;p&gt;There are some problems with the source code that may make compilation from source impossible.
(See &lt;a href="https://charlesreid1.com/wiki/Gitea#Using_Binary"&gt;charlesreid1.com wiki notes&lt;/a&gt;.)
The binary version of Gitea is recommended. &lt;/p&gt;
&lt;p&gt;&lt;a name="gitea-config-dir"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="configuring-gitea-directories"&gt;Configuring Gitea Directories&lt;/h3&gt;
&lt;p&gt;Gitea expects a certain directory organization, specifically, a folder for binaries, 
certificates, a database, git repositories, and the log.&lt;/p&gt;
&lt;p&gt;The recommended arrangment is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/path/to/www/gitea/
   \
    \---------- bin/
     \--------- certs/
      \-------- data/
       \------- repositories/
        \------ log/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the files are organized in this way, navigate to the bin directory
and (preferrably using tmux or screen to send to background) 
execute the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./gitea web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This runs a setup page on port 3000.&lt;/p&gt;
&lt;p&gt;Note that you may or may not need to set your &lt;code&gt;$GOPATH&lt;/code&gt; variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;export GOPATH=&amp;quot;${HOME}/gocode&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Go ahead and follow the instructions on the page to get Gitea set up.
The &lt;a href="https://gitea.io"&gt;gitea.io&lt;/a&gt; page has good documentation.&lt;/p&gt;
&lt;p&gt;&lt;a name="gitea-fw"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="opening-the-firewall"&gt;Opening the Firewall&lt;/h3&gt;
&lt;p&gt;Assuming your port 3000 was closed on the firewall,
and assuming you plan to run the gitea service as a public service listening on an external port, 
you will want to open your firewall to accept incoming traffic on port 3000:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# allow traffic on port 3000
iptables -A INPUT -p tcp --dport 3000 -j ACCEPT
#  to allow forwarding for 3000 to internal LAN 
iptables -A FORWARD -p tcp -j ACCEPT --dport 3000 -m state --state NEW
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="gitea-config-server"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="setting-up-and-configuring-gitea-server"&gt;Setting Up and Configuring Gitea Server&lt;/h3&gt;
&lt;p&gt;To configure gitea, you will use a &lt;code&gt;.ini&lt;/code&gt; configuration file contained in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/path/to/www/gitea/custom/conf/app.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is an example gitea configuration file. It starts with a header, then has sections
for different aspects like databases, the git repository, and the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Example Gitea Config File
;;
;; https://github.com/go-gitea/gitea/blob/master/conf/app.ini
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

APP_NAME = big ugly git repo (BUGR)
RUN_USER = git
RUN_MODE = prod

[database]
DB_TYPE  = sqlite3
SSL_MODE = disable
PATH     = /www/gitea/data/gitea.db

[repository]
ROOT = /www/gitea/repositories
PREFERRED_LICENSES = MIT License

[server]
PROTOCOL     = https
DOMAIN       = yourdomain.com
CERT_FILE    = /www/gitea/certs/cert.pem
KEY_FILE     = /www/gitea/certs/key.pem
SSH_DOMAIN   = git.yourdomain.com
HTTP_PORT    = 3000
ROOT_URL     = https://yourdomain.com:3000
DISABLE_SSH  = false
SSH_PORT     = 22
OFFLINE_MODE = false

[log]
ROOT_PATH = /www/gitea/log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ultimately, there are many configuration examples available for Gitea,
so we won't go into any more detail on that.&lt;/p&gt;
&lt;p&gt;For details on how to configure Gitea with HTTPS, see &lt;a href="https://charlesreid1.com/wiki/Gitea"&gt;charlesreid1.com/wiki/Gitea&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's move on to how we actually utilize Gitea,
and focus especially on how to make gitea work in tandem with github
and other git servers, instead of being yet another complication in the toolchain.&lt;/p&gt;
&lt;p&gt;&lt;a name="gitea-use"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="how-to-use-gitea"&gt;How To Use Gitea&lt;/h2&gt;
&lt;p&gt;As we mentioned before, the gitea binary is actually wrapping a git repo, 
and interactions with the binary (via the web) are translated into actions in that repo.
This is important to understand, since it will prevent us from thinking about 
gitea as a "centralized" server, and get us thinking about gitea as just another 
computer with a copy of the repository on it.&lt;/p&gt;
&lt;p&gt;Understanding how to use gitea also requires correct thinking about how 
distributed version control works - the way that each collaborator 
with a copy of the repo can also act as a decentralized git server. 
In this way, the gitea server becomes just another git client,
with some extra frosting on top in the form of a web interface.&lt;/p&gt;
&lt;p&gt;&lt;a name="gitea-pushing-local"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="pushing-a-local-repo-into-gitea"&gt;Pushing a Local Repo Into Gitea&lt;/h3&gt;
&lt;p&gt;If you want to move existing local repositories into gitea, it's easy.
Remember that with git, everything is local, so all you need to do 
is push a copy to gitea, and gitea will have the whole repository locally too,
including its entire history and any branches and tags that were on your local machine.
If you have remotes, you'll need to get local copies of any branches or tags you want
from that remote server (covered in more detail below).&lt;/p&gt;
&lt;p&gt;The basic steps:
* Get everything you want locally (including branches and tags)
* Fetch from remotes, if you have any.
* Add new remote (gitea)
* Push to new remote&lt;/p&gt;
&lt;p&gt;The end result will be a gitea repo fully-populated with the project's commit history.&lt;/p&gt;
&lt;p&gt;Here are the steps in a bit more detail:&lt;/p&gt;
&lt;p&gt;Start by creating a git repository, or cloning an existing one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir my_git_repo/
cd my_git_repo
git init .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone http://github.com/mot_pesli/coune_car
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, create an empty git repo on the gitea server.
Sign in using a gitea username and password. 
There will be a plus sign in the upper right,
just like on Github. Click the plus sign, and choose create new repo.
Enter the repo name, and a description.
Make sure the repo will NOT automatically create
a readme or a LICENSE file, as we will be importing all files
from another repo anyway.&lt;/p&gt;
&lt;p&gt;Once you've got a local copy of the repo with everything you want to push,
and you have an empty repository on the gitea server ready for commits,
add the gitea repository as a new remote to your local repository.&lt;/p&gt;
&lt;p&gt;Example: suppose you have a gitea user named &lt;code&gt;zappa&lt;/code&gt; who has created a new empty repo 
named &lt;code&gt;linol-aquabus&lt;/code&gt; on the gitea server. 
Zappa would then cd to the local copy of the git repo,
and add the gitea repository's url as a new remote called &lt;code&gt;gitea&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git remote add gitea https://git.mydomain.com/zappa/linol-aquabus.git

# alternatively,

git remote add gitea https://mydomain.com:3000/zappa/linol-aquabus.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now Zappa can push the entire commit history of the current repo
to the gitea remote git server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git push origin gitea

# alternatively,

git push --all origin gitea
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If Zappa now visits &lt;code&gt;mydomain.com:3000/zappa/linol-aquabus&lt;/code&gt; the entire
contents of the repository and its commit history in gitea's web interface
will be available for browsing.&lt;/p&gt;
&lt;p&gt;&lt;a name="gitea-copying"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="copying-repos-from-gitub-to-gitea"&gt;Copying Repos from Gitub to Gitea&lt;/h3&gt;
&lt;p&gt;The process for copying Github repositories to Gitea follows the above procedure closely:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/user/repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out any branches or tags you may want to push to gitea.&lt;/p&gt;
&lt;p&gt;Then add the gitea remote to the repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git remote add gitea https://git.mydomain.com/zappa/linol-aquabus.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now push the contents of the local repository to the remote gitea repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git push origin gitea
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once this command is executed, the gitea remote will have the entire commit history of the repo,
which it will render and display through its web interface. Thus, the entire commit history
will be immediately available to browse through gitea.&lt;/p&gt;
&lt;p&gt;(Note that information about Github issues or Github user profiles is not stored in the git repo,
just as Gitea comments and Gitea user profiles are not stored in the git repo.)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gitea and Github - same repo, side by side." src="/images/gitea-n-github.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="gitea-moving"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="moving-repos-from-gitub-to-gitea"&gt;"Moving" Repos from Gitub to Gitea&lt;/h3&gt;
&lt;p&gt;First, it should be stated up front that you do not have to choose 
between gitea and github - you can have a copy of a repo on both,
frequently push to one or the other, and occasionally update the other
as a kind of "mirror."&lt;/p&gt;
&lt;p&gt;If you do want to &lt;em&gt;move&lt;/em&gt; a repo from github to gitea,
remember that github does not "own" the repo,
so what you're actually doing is deleting the copy of your repo 
that lives on github's server.&lt;/p&gt;
&lt;p&gt;To move the repo, all you have to do is copy it from github to somewhere else
(whether it be your local computer, or to the gitea server), then delete it from github.
You will not lose any information about the git repository history.
Github does not keep/store that information - git does.&lt;/p&gt;
&lt;p&gt;&lt;a name="gitea-pushing-commits"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="where-to-push-commits-github-or-gitea"&gt;Where to Push Commits: Github or Gitea?&lt;/h3&gt;
&lt;p&gt;It may seem confusing to use multiple repositories side-by-side,
but this is precisely how the designers of git intended it to be used - 
for decentralized version control.&lt;/p&gt;
&lt;p&gt;That means Github or Gitea are not "centralized" servers that "own" the repository,
they are merely another instance of git, running on a server, with a local copy of the repo.&lt;/p&gt;
&lt;p&gt;Accordingly, if your project exists as a repo on gitea and as a repo on github, 
it is like the project existing as a repo on your hard drive and as a repo on your collaborator's hard drive -
there is no contradiction. If you make changes to your local copy of the repo, you can commit those changes,
then push the commits to someone else. In the same way, you can make changes to your local copy of the repo 
and commit those changes, then push the commits to either gitea, or github, or both - wherever you want.&lt;/p&gt;
&lt;p&gt;&lt;a name="gitea-backing-up"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="backing-up-gitea"&gt;Backing Up Gitea&lt;/h3&gt;
&lt;p&gt;It's important to say a few words about backups.&lt;/p&gt;
&lt;p&gt;Because Gitea is configured (with the above config file) to use sqlite,
it stores its entire database (the extra "frosting" of stars, wiki pages,
issues, user pictures, etc.) in a single file on disk, in the &lt;code&gt;data/&lt;/code&gt; directory
of the gitea installation.&lt;/p&gt;
&lt;p&gt;The git repository is, similarly, a single file on disk, with the entire database 
of commits, blogs, commit histories, etc., all contained in the &lt;code&gt;.git&lt;/code&gt; directory,
which is contained in the &lt;code&gt;repositories&lt;/code&gt; directory of the gitea installation.&lt;/p&gt;
&lt;p&gt;That means backing up your git server is as easy as copying the gitea folder.
No need to back up a MySQL database or do a funny pants dance to export your database
to a proprietary format. &lt;/p&gt;
&lt;p&gt;This is another central tenent of git's design philosophy - 
be fast, pack light, and travel easily.&lt;/p&gt;
&lt;p&gt;&lt;a name="gitea-patterns"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="how-gitea-fits-into-git-patterns"&gt;How Gitea Fits Into Git Patterns&lt;/h2&gt;
&lt;p&gt;There are &lt;a href="https://charlesreid1.com/wiki/Git_Resources"&gt;many resources on git&lt;/a&gt;,
and some cover the concept of "git patterns," 
or templates for how to use git.&lt;/p&gt;
&lt;p&gt;Because git is designed to be decentralized, 
gitea provides a "centralized" node for collaboration
within a decentralized system.
So you could use gitea to collaborate with 
your local Team A, and push and pull branches 
and work on various features together.
Then, once Team A has put together a branch they've found useful,
they can push it to a different remote server that is more widely accessed.&lt;/p&gt;
&lt;p&gt;(Note that this is the logic behind why you need to 
check out all the branches and tags, &lt;em&gt;locally&lt;/em&gt;, that you want to push 
to the gitea remote server - this allows you the flexibility to 
only share select branches, so that you might have 
some branches shared in common wth gitea and github,
and other branches only existing on gitea.)&lt;/p&gt;
&lt;p&gt;Team B and Team C may use github, and not gitea, to access the project code.
The gitea server may for example be a private server on a local network,
whereas github is better suited for collaboration.
By pushing select branches from the Team A git server, gitea,
to the github server, Team B and Team C will then be able to 
access them from github.&lt;/p&gt;
&lt;p&gt;You could also have multiple gitea/gitlab/github enterprise servers 
for multiple organizations running on git, and they could share a code base 
by sharing git repositories, commit histories, branches, and so on.&lt;/p&gt;
&lt;p&gt;&lt;a name="gitea-wrapup"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="wrapup"&gt;Wrapup&lt;/h2&gt;
&lt;p&gt;Have a look at the &lt;a href="http://gitea.io"&gt;Gitea project&lt;/a&gt;, &lt;a href="https://golang.org"&gt;the Go language&lt;/a&gt;,
&lt;a href="https://git-scm.com"&gt;git&lt;/a&gt;, &lt;a href="https://github.com"&gt;Github&lt;/a&gt; for all the nice software
that made this possible. &lt;/p&gt;
&lt;p&gt;Then have a look at the finished product at &lt;a href="https://git.charlesreid1.com"&gt;git.charlesreid1.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Gitea allows you to create organizations, useful for organizing repos related to 
particular functionality or platforms. For example, &lt;a href="https://git.charlesreid1.com/rpi"&gt;rpi&lt;/a&gt; 
is an organization that owns repositories with scripts and software for raspberry pis,
&lt;a href="https://git.charlesreid1.com/docker"&gt;docker&lt;/a&gt; is an organization that owns repositories
with Dockerfiles, and &lt;a href="https://git.charlesreid1.com/mac"&gt;mac&lt;/a&gt; holds Mac-related things.&lt;/p&gt;
&lt;p&gt;This organization allows better organization of project code - a dotfiles repository
that works for a Mac laptop or a Unix server is not necessarily good for a Raspberry Pi
or a Docker container, so code is organized accordingly.&lt;/p&gt;
&lt;p&gt;Organizations can also be used to organize project-level code. 
This git repo is in its beginning phases, but has great potential
as a great tool that makes git even more functional and provides 
one more reason to switch to git.&lt;/p&gt;</content><category term="Charlesreid1"></category><category term="git"></category><category term="go"></category><category term="gitea"></category></entry><entry><title>Better Timing of Guava Traveling Salesperson Problem Code: Timing Scripts</title><link href="https://charlesreid1.github.io/better-timing-of-guava-traveling-salesperson-problem-code-timing-scripts.html" rel="alternate"></link><published>2017-04-01T09:00:00-07:00</published><updated>2017-04-01T09:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-04-01:/better-timing-of-guava-traveling-salesperson-problem-code-timing-scripts.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="#better-timing-thecode"&gt;Before We Begin: The Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-timing"&gt;Timing Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-before-u-time"&gt;Before You Time: Developing Your Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-timing-journey"&gt;Beginning Your Timing Journey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-mouse-cookie"&gt;Statistical Timing, a.k.a., If You Give A Mouse A Cookie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-hierarchical"&gt;Hierarchical Timing Strategy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-single"&gt;Single Problem/Program/Binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-multiple"&gt;Multiple Problem/Program/Binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-statistical"&gt;Statistical Averaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-results"&gt;Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="better-timing-thecode"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="before-we-begin-the-code"&gt;Before We Begin: The Code&lt;/h2&gt;
&lt;p&gt;Note that all of the code discussed/shown in this post is available from the 
traveling salesperson problem repository on &lt;a href="https://git.charlesreid1.com/charlesreid1/tsp"&gt;git.charlesreid1.com&lt;/a&gt;.
The &lt;code&gt;guava/&lt;/code&gt; directory contains the guava solution to the traveling salesperson problem,
along with the timing scripts discussed below, and several example output files.&lt;/p&gt;
&lt;p&gt;&lt;a name="better-timing-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Timing a piece â€¦&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="#better-timing-thecode"&gt;Before We Begin: The Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-timing"&gt;Timing Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-before-u-time"&gt;Before You Time: Developing Your Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-timing-journey"&gt;Beginning Your Timing Journey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-mouse-cookie"&gt;Statistical Timing, a.k.a., If You Give A Mouse A Cookie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-hierarchical"&gt;Hierarchical Timing Strategy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-single"&gt;Single Problem/Program/Binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-multiple"&gt;Multiple Problem/Program/Binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-statistical"&gt;Statistical Averaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-results"&gt;Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="better-timing-thecode"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="before-we-begin-the-code"&gt;Before We Begin: The Code&lt;/h2&gt;
&lt;p&gt;Note that all of the code discussed/shown in this post is available from the 
traveling salesperson problem repository on &lt;a href="https://git.charlesreid1.com/charlesreid1/tsp"&gt;git.charlesreid1.com&lt;/a&gt;.
The &lt;code&gt;guava/&lt;/code&gt; directory contains the guava solution to the traveling salesperson problem,
along with the timing scripts discussed below, and several example output files.&lt;/p&gt;
&lt;p&gt;&lt;a name="better-timing-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Timing a piece of code can be tricky. &lt;/p&gt;
&lt;p&gt;Choosing a random problem of a given size can be problematic,
if you happen to randomly chose a particularly easy or difficult case.
This can lead to an inaccurate picture of scale-up behavior.
Timing results should be statistically averaged - the figure below
shows scale-up behavior for the traveling salesperson problem
when solving a single random problem, versus a hundred random problems.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Average versus one-time solutions, walltime versus problem size." src="/images/avg-vs-onetime-walltime.png"&gt;&lt;/p&gt;
&lt;p&gt;This post will cover some conceptual and code tools 
for measuring the timing and performance of code.&lt;/p&gt;
&lt;p&gt;&lt;a name="better-timing-timing"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="timing-scripts"&gt;Timing Scripts&lt;/h2&gt;
&lt;p&gt;Timing a piece of code is a task that sounds simple, on its face.
However, the task of profiling code quickly balloons 
from a single timing of a single bit of code 
to running hundreds of cases, juggling output from each run,
and stitching together script upon script.
Soon you find yourself swimming in a pool of output files,
looking for your scripts...&lt;/p&gt;
&lt;p&gt;In this post we'll cover a workflow for timing a piece of Java code
that will help give you a method for thinking about timing.
This also balances the need for practicality
(i.e., just get it done in as simple a manner as possible)
with good design 
(i.e., flexible inputs and the use of scripts).&lt;/p&gt;
&lt;h2 id="before-you-time-developing-your-algorithm"&gt;Before You Time: Developing Your Algorithm&lt;/h2&gt;
&lt;p&gt;As you develop your algorithm, you may have variable values hard-coded 
and random number generators seeding from the same value each time.
The intention, as you are developing, is to work out the bugs
without the additional difficulty of solving a different problem
each time you run the program.&lt;/p&gt;
&lt;h2 id="beginning-your-timing-journey"&gt;Beginning Your Timing Journey&lt;/h2&gt;
&lt;p&gt;Once you've implemented your algorithm and verified that it works,
the timing portion begins. You can time the code using mechanisms
built into the language, which is the most accurate way of 
timing code. This is called &lt;em&gt;instrumenting&lt;/em&gt; your code.
To begin with, you might try timing a single problem size, 
but this information is hard to interpret without more data,
so you start to time the code on problems of other sizes.&lt;/p&gt;
&lt;p&gt;Here there be dragons.&lt;/p&gt;
&lt;h2 id="statistical-timing-aka-if-you-give-a-mouse-a-cookie"&gt;Statistical Timing, a.k.a., If You Give A Mouse A Cookie&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://en.wikipedia.org/wiki/If_You_Give_a_Mouse_a_Cookie"&gt;&lt;em&gt;If You Give A Mouse A Cookie&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you time the code solving a single problem,
you will want to time the code solving multiple problems.&lt;/p&gt;
&lt;p&gt;Once you time the code solving multiple problems,
you will want to time the code solving each problem multiple times 
to get an accurate statistical picture of the solution time on a variety of problems.&lt;/p&gt;
&lt;p&gt;Once you get statistics about multiple problem times,
you will want to gather statics about variations in problem types and algorithm variations.&lt;/p&gt;
&lt;p&gt;It simply does not end. A strategy for managing this deluge of new timing needs 
prevents spaghetti code.&lt;/p&gt;
&lt;h2 id="hierarchical-timing-strategy"&gt;Hierarchical Timing Strategy&lt;/h2&gt;
&lt;p&gt;The strategy here is to design code and scripts that are &lt;em&gt;hierarchical&lt;/em&gt;.
The levels of the hierarchy consist of the different scopes involved in timing:
* Single problem/program/binary
* Multiple problem/program/binary
* Statistical averages using case matrix
* Design of Computer Experiments: Testing Variations 
* Strong and weak scaling (if we decide to continue with parallelization of algorithm)&lt;/p&gt;
&lt;p&gt;At each stage, we utilize scripts to bundle the task into a single command or script.&lt;/p&gt;
&lt;h2 id="single-problemprogrambinary-makefile"&gt;Single Problem/Program/Binary: Makefile&lt;/h2&gt;
&lt;p&gt;At the scale of solving a single problem, we need a tool that will 
compile and run Java code - even if it only happens once.
Makefiles are an excellent tool for stringing together commands with flags 
(in the case of the traveling salesperson problem,
we need to link to the Guava Jars when we compile and run).&lt;/p&gt;
&lt;p&gt;By defining some variables at the top of the Makefile, 
and a few rules, we have a functional and easy way to build code 
with scalable complexity:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Set path to guava
HOME=/Users/charles
GUAVA=$(HOME)/codes/guava/jars/guava-21.0.jar

# Set compile target
BIN=TSP
TARGET=$(BIN).java

# Set java class path
# Hard to believe this actually works, but ok:
CP=-cp &amp;#39;.:$(GUAVA)&amp;#39;


build:
    javac $(CP) $(TARGET) 

run:
    # If no size, use default
    java $(CP) $(BIN) 

time:
    # Java times itself, we just have to pass it the size
    java $(CP) $(BIN) $(SIZE) 

clean:
    rm -rf *.class
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://git.charlesreid1.com/charlesreid1/tsp/src/master/guava/Makefile"&gt;Link to code on git.charlesreid1.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This enables us to run &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ make build 
/Users/charles/codes/guava/jars/guava-21.0.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and have a new version of the code compile. 
We can also run a problem with a default size of 5 nodes with a simple make run command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ make run
java -cp &amp;#39;.:/Users/charles/codes/guava/jars/guava-21.0.jar&amp;#39; TSP
------------------- TSP Version 2: The Pessimistic Algorithm ----------------------
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 2, 3, 4, 1]  Distance: 258
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 2, 3, 1, 4]  Distance: 257
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 2, 4, 1, 3]  Distance: 189
Found solution...?
Elapsed time 0.005529 s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and have the compiled code run. We can also feed arguments to make commands,
and have them passed to the command that is executed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ make time SIZE=10
# Java times itself, we just have to pass it the size
java -cp &amp;#39;.:/Users/charles/codes/guava/jars/guava-21.0.jar&amp;#39; TSP 10
------------------- TSP Version 2: The Pessimistic Algorithm ----------------------
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 6, 5, 3, 9, 7, 2, 8, 1, 4]   Distance: 446
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 6, 5, 3, 9, 7, 2, 8, 4, 1]   Distance: 395
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 6, 5, 3, 9, 7, 4, 1, 8, 2]   Distance: 382
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 6, 5, 3, 9, 1, 4, 7, 2, 8]   Distance: 365
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 6, 5, 3, 9, 1, 4, 7, 8, 2]   Distance: 326
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 6, 5, 3, 2, 8, 7, 4, 1, 9]   Distance: 303
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 6, 5, 3, 2, 8, 4, 7, 9, 1]   Distance: 298
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 6, 5, 4, 7, 3, 2, 8, 9, 1]   Distance: 286
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 6, 5, 8, 2, 3, 7, 4, 1, 9]   Distance: 283
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 9, 1, 4, 7, 3, 6, 5, 8, 2]   Distance: 275
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 3, 2, 8, 5, 6, 4, 7, 9, 1]   Distance: 274
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 2, 8, 7, 4, 1, 9, 5, 6, 3]   Distance: 262
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 2, 8, 4, 7, 3, 6, 5, 9, 1]   Distance: 256
Found solution...?
Elapsed time 0.050795 s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For running single cases and gathering small amounts of (initial) timing data,
Makefiles greatly simplify the workflow.&lt;/p&gt;
&lt;h2 id="multiple-programproblembinary-bash"&gt;Multiple Program/Problem/Binary: Bash&lt;/h2&gt;
&lt;p&gt;Bash is a faithful scripting language that makes it easy to do 
simple mechanical tasks like run commands in for loops,
necessary for the next level of complexity in our timing hierarchy.&lt;/p&gt;
&lt;p&gt;While the task at hand is simple enough, and we could easily use Makefiles, 
we'll use a separate Bash script for separate functionality 
and keep things from getting overly complicated in the Makefile.&lt;/p&gt;
&lt;p&gt;The essence of the timing script is combining the &lt;code&gt;make time&lt;/code&gt; command,
which takes a size parameter, with bash for loops.&lt;/p&gt;
&lt;p&gt;Here is a stripped down version of the timing script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make build 

for N in 4 5 6 7 8
do
    make time SIZE=${N} 
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's it... The rest is just printing!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;make time&lt;/code&gt; command passes the size argument on the command line.
The Java Traveling Salesperson Problem code checks if there is an input argument on the command line,
and if there is it uses that as the problem size.&lt;/p&gt;
&lt;p&gt;Here's a more embellished script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;export RIGHTNOW=&amp;quot;`date +&amp;quot;%Y%m%d_%H%M%S&amp;quot;`&amp;quot;
export OUT=&amp;quot;timeout_tsp_java_${RIGHTNOW}.out&amp;quot;
touch ${OUT}
cat /dev/null &amp;gt; ${OUT}

# Compile
make build 

for N in {4..8..1}
do
    echo &amp;quot;**************************************&amp;quot; &amp;gt;&amp;gt; ${OUT}
    echo &amp;quot;Running TSP with $N nodes with Java...&amp;quot; &amp;gt;&amp;gt; ${OUT}

    make time SIZE=${N} &amp;gt;&amp;gt; ${OUT} 2&amp;gt;&amp;amp;1

    make dot
    mv graphviz.png graphviz_tsp_${N}.png

    echo &amp;quot;Done.&amp;quot; &amp;gt;&amp;gt; ${OUT}

    echo &amp;quot;&amp;quot; &amp;gt;&amp;gt; ${OUT}

done

echo &amp;quot;&amp;quot;
echo ${OUTFILE}
echo &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://git.charlesreid1.com/charlesreid1/tsp/src/master/guava/time_java.sh"&gt;Link to code on git.charlesreid1.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This creates a time-and-date-stamped output file in which 
all of the output of this script goes - and which can be 
parsed for plotting the results of timing studies.&lt;/p&gt;
&lt;p&gt;Before it times the solution to the TSP, it dumps out a graphviz dot file 
containing a schematic of the graph that can be diagrammed:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example graphviz dot output showing a 14-node TSP." src="/images/graphviz_tsp_14.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;**************************************
Running TSP with 4 nodes with Java...
Found solution.
Elapsed time 0.004679 s
 Done.

**************************************
Running TSP with 5 nodes with Java...
Found solution.
Elapsed time 0.004543 s
 Done.

**************************************
Running TSP with 6 nodes with Java...
Found solution.
Elapsed time 0.006911 s
 Done.

**************************************
Running TSP with 7 nodes with Java...
Found solution.
Elapsed time 0.008286 s
 Done.

**************************************
Running TSP with 8 nodes with Java...
Found solution.
Elapsed time 0.014499 s
 Done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this way we can run a quick test matrix of different problem sizes,
and see how the code scales.&lt;/p&gt;
&lt;h2 id="statistical-averaging"&gt;Statistical Averaging&lt;/h2&gt;
&lt;p&gt;Of course, any good computational physicist will tell you that scaling behavior
extrapolated from running a single case of a single problem size is folly - 
your random choice of graph could have been an unusually easy or difficult graph,
throwing off the results of the timing. &lt;/p&gt;
&lt;p&gt;A proper scaling study really needs to take into account the statistical trends 
in solution time on a random assortment of problems, 
so we need a way of scripting solutions to dozens or hundreds of random problems 
and computing statistically representative measures of code performance.&lt;/p&gt;
&lt;p&gt;Our code implements a function to generate random graphs, 
but for testing and debugging purposes the random number generator 
was seeded with the same value each time. By making the random number generators
truly random, each problem we solve will be a different random graph
with the specified number ofn odes.&lt;/p&gt;
&lt;p&gt;We can accomplish all of this using bash again: within the for loop over different problem sizes,
we will add a for loop for repetitions.
Here is the basic framework:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make build 

for N in {4..10..1}
do
    for repetition in {0..100..1}
    do
        make time SIZE=${N} 
    done
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the embellished version that prints the resulting timing information to a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Compile
make build 

export RIGHTNOW=&amp;quot;`date +&amp;quot;%Y%m%d_%H%M%S&amp;quot;`&amp;quot;

for N in {4..10..1}
do

    export OUT=&amp;quot;avgtimeout_tsp_${RIGHTNOW}_${N}.out&amp;quot;
    touch ${OUT}

    echo &amp;quot;**************************************&amp;quot; &amp;gt;&amp;gt; ${OUT}
    echo &amp;quot;Running TSP with $N nodes with Java...&amp;quot; &amp;gt;&amp;gt; ${OUT}

    for repetition in {0..100..1}
    do
        make time SIZE=${N} &amp;gt;&amp;gt; ${OUT} 2&amp;gt;&amp;amp;1
    done
    echo &amp;quot;Done.&amp;quot; &amp;gt;&amp;gt; ${OUT}
    echo &amp;quot;&amp;quot; &amp;gt;&amp;gt; ${OUT}

done

echo &amp;quot;&amp;quot;
echo ${OUTFILE}
echo &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://git.charlesreid1.com/charlesreid1/tsp/src/master/guava/avg_time_java.sh"&gt;Link to code on git.charlesreid1.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This results in a file with a large amount of information, but it can be trimmed down 
to the quantities of interest using a little command line fu.
Here are filtered results from an 11-node traveling salesperson problem
run approximately 102 times:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cat avgtimeout_tsp_20170330_235134_11.out | grep Elapsed | wc -l
     102

$ cat avgtimeout_tsp_20170330_235134_11.out | grep Elapsed
Elapsed time 0.082839 s
Elapsed time 0.130378 s
Elapsed time 0.173737 s
Elapsed time 0.100067 s
Elapsed time 0.166046 s

&amp;lt;clipped&amp;gt;

Elapsed time 0.147801 s
Elapsed time 0.285777 s
Elapsed time 0.078655 s
Elapsed time 0.081246 s
Elapsed time 0.174288 s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have a Makefile that allows us to build and run with a single command,
and a bash script that loops over each problem size and runs a set of computations
for each problem size. But how to compute an average?&lt;/p&gt;
&lt;p&gt;We have an assortment of choices - Python being the most obvious - but in the spirit of
old-school Unix tools like make, cat, grep, and wc, let's use &lt;code&gt;awk&lt;/code&gt; to compute the average 
walltime for each case size.&lt;/p&gt;
&lt;h2 id="awk-to-compute-average-walltime"&gt;Awk to Compute Average Walltime&lt;/h2&gt;
&lt;p&gt;Given the following output of elapsed walltime for different problem sizes,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cat avgtimeout_tsp_20170330_235134_11.out | grep Elapsed
Elapsed time 0.082839 s
Elapsed time 0.130378 s
Elapsed time 0.173737 s
Elapsed time 0.100067 s
Elapsed time 0.166046 s

&amp;lt;clipped&amp;gt;

Elapsed time 0.147801 s
Elapsed time 0.285777 s
Elapsed time 0.078655 s
Elapsed time 0.081246 s
Elapsed time 0.174288 s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;we want to extract two things: 
the first is the problem size (contained in the filename),
and the second is the column of numbers.&lt;/p&gt;
&lt;p&gt;We can extract the problem size from the filename using sed,
by searching for the pattern &lt;code&gt;_8.out&lt;/code&gt; or &lt;code&gt;_10.out&lt;/code&gt;. 
Here is a Bash one-liner that does this for a variable &lt;code&gt;$f&lt;/code&gt; 
containing the filename:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    N=$(echo $f | sed &amp;#39;s/^.*_\([0-9]\{1,\}\).out/\1/&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next thing we wnat to do is extract the column of timing data.
This is a good task for the &lt;code&gt;cut&lt;/code&gt; utility. We can pass it two flags,
&lt;code&gt;-d&lt;/code&gt; to tell it what to use as a field delimiter, and &lt;code&gt;-f&lt;/code&gt; to tell it which field
(column) to return. To extract the third column,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    cat $f | grep &amp;quot;Elapsed&amp;quot; | cut -d&amp;quot; &amp;quot; -f3 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command results in a series of floating point numbers. If we can pipe it to a program
that can do simple math, like &lt;code&gt;awk&lt;/code&gt;, we can compute an average (which is pretty simple math).&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;awk&lt;/code&gt; is a text-proecssing program that happens to be able to interpret numbers as numbers,
we have to think like a text processing program. To compute an average, we accumulate the sum
of each line in the file, using an accumulator variable. When we have gone through each line in the file,
we divide this cumulative sum by the number of lines in the file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    cat $f | grep &amp;quot;Elapsed&amp;quot; | cut -d&amp;quot; &amp;quot; -f3 | awk &amp;#39;{a+=$1} END{print a/NR}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This one-liner uses two important concepts in &lt;code&gt;awk&lt;/code&gt;, the first is the bracketed blocks &lt;code&gt;{}&lt;/code&gt; 
some denoted with &lt;code&gt;BEGIN&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt;, and the second is the set of built-in variables available in &lt;code&gt;awk&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By surrounding statements by brackets, we denote a block of statements to be run together as the main body of the program.
If the bracket is prefixed by &lt;code&gt;BEFORE&lt;/code&gt;, this block of statements is run once at the beginning of the program.
If the bracket is prefixed by &lt;code&gt;END&lt;/code&gt;, this block of statements is run once at the end of the program.
To compute an average, the main body of the program is to accumulate a cumulative sum variable. 
The &lt;code&gt;END&lt;/code&gt; block, run once at the end, is to divide this cumulative sum by the total number of lines.&lt;/p&gt;
&lt;p&gt;Finally, these values can be assigned to Bash variables using &lt;code&gt;$(cmd)&lt;/code&gt; syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    export N=$(echo $f | sed &amp;#39;s/^.*_\([0-9]\{1,\}\).out/\1/&amp;#39;)
    export AVG=$(cat $f | grep &amp;quot;Elapsed&amp;quot; | cut -d&amp;quot; &amp;quot; -f3 | awk &amp;#39;{a+=$1} END{print a/NR}&amp;#39;) 
    echo &amp;quot;Average time : ${N}-node TSP problem : ${AVG} s&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is the final script, which loops over all of the output files
generated by the statistical average timing script,
which runs 10-100 cases per problem size:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#!/bin/sh

for f in `/bin/ls -1 avgtimeout_tsp*`
do
    touch tmpfile 
    cat /dev/null &amp;gt; tmpfile

    export N=$(echo $f | sed &amp;#39;s/^.*_\([0-9]\{1,\}\).out/\1/&amp;#39;)
    export AVG=$(cat $f | grep &amp;quot;Elapsed&amp;quot; | cut -d&amp;quot; &amp;quot; -f3 | awk &amp;#39;{a+=$1} END{print a/NR}&amp;#39;) 
    echo &amp;quot;Average time : ${N}-node TSP problem : ${AVG} s&amp;quot;

    rm tmpfile
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://git.charlesreid1.com/charlesreid1/tsp/src/master/guava/avg_calcs.sh"&gt;Link to code on git.charlesreid1.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./avg_calcs.sh  | sort
Average time : 10-node TSP problem : 0.0492826 s
Average time : 11-node TSP problem : 0.125827 s
Average time : 12-node TSP problem : 0.272998 s
Average time : 13-node TSP problem : 0.56743 s
Average time : 14-node TSP problem : 1.24297 s
Average time : 14-node TSP problem : 1.66563 s
Average time : 15-node TSP problem : 8.08373 s
Average time : 16-node TSP problem : 16.4353 s
Average time : 17-node TSP problem : 94.7363 s
Average time : 18-node TSP problem : 749.798 s
Average time : 4-node TSP problem : 0.00473154 s
Average time : 4-node TSP problem : 0.00475648 s
Average time : 5-node TSP problem : 0.005247 s
Average time : 5-node TSP problem : 0.005765 s
Average time : 6-node TSP problem : 0.00694926 s
Average time : 7-node TSP problem : 0.0100795 s
Average time : 8-node TSP problem : 0.0167346 s
Average time : 9-node TSP problem : 0.028239 s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Inspecting the output from particular solutions of particular random graphs 
shows a wide variation in the number of shortest paths found. For example, 
for random graphs consisting of 11 nodes, here are some sample solutions.
Note the difference in solution times:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;------------------- TSP Version 2: The Pessimistic Algorithm ----------------------
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 4, 5, 7, 6, 10, 3]   Distance: 597
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 4, 5, 7, 6, 3, 10]   Distance: 582
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 4, 5, 7, 10, 3, 6]   Distance: 560
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 4, 5, 7, 3, 6, 10]   Distance: 553
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 4, 5, 10, 3, 7, 6]   Distance: 540
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 4, 5, 10, 7, 6, 3]   Distance: 532
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 4, 5, 10, 7, 3, 6]   Distance: 503
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 4, 5, 6, 3, 7, 10]   Distance: 498
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 4, 10, 3, 7, 5, 6]   Distance: 450
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 4, 10, 5, 7, 3, 6]   Distance: 440
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 4, 10, 5, 6, 7, 3]   Distance: 422
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 4, 6, 5, 10, 3, 7]   Distance: 421
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 4, 6, 5, 10, 7, 3]   Distance: 380
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 7, 10, 5, 6, 4, 3]   Distance: 364
NEW SOLUTION    Route: [0, 9, 2, 1, 8, 7, 3, 4, 6, 5, 10]   Distance: 357
NEW SOLUTION    Route: [0, 9, 2, 1, 5, 10, 7, 3, 8, 4, 6]   Distance: 352
NEW SOLUTION    Route: [0, 9, 2, 1, 5, 10, 7, 8, 3, 4, 6]   Distance: 336
NEW SOLUTION    Route: [0, 9, 2, 1, 5, 6, 4, 10, 7, 8, 3]   Distance: 330
NEW SOLUTION    Route: [0, 9, 2, 1, 4, 8, 7, 3, 6, 5, 10]   Distance: 326
NEW SOLUTION    Route: [0, 9, 2, 1, 4, 8, 3, 7, 6, 5, 10]   Distance: 320
NEW SOLUTION    Route: [0, 9, 2, 1, 4, 8, 3, 7, 10, 5, 6]   Distance: 298
NEW SOLUTION    Route: [0, 9, 2, 1, 4, 6, 5, 10, 7, 8, 3]   Distance: 261
NEW SOLUTION    Route: [0, 9, 2, 7, 8, 3, 1, 4, 6, 5, 10]   Distance: 250
NEW SOLUTION    Route: [0, 9, 8, 7, 2, 3, 1, 4, 6, 5, 10]   Distance: 245
Found solution.
Elapsed time 0.057047 s

------------------- TSP Version 2: The Pessimistic Algorithm ----------------------
NEW SOLUTION    Route: [0, 8, 1, 6, 4, 9, 10, 5, 2, 7, 3]   Distance: 650
NEW SOLUTION    Route: [0, 8, 1, 6, 4, 9, 10, 5, 2, 3, 7]   Distance: 641
NEW SOLUTION    Route: [0, 8, 1, 6, 4, 9, 10, 5, 7, 2, 3]   Distance: 638
NEW SOLUTION    Route: [0, 8, 1, 6, 4, 9, 10, 5, 7, 3, 2]   Distance: 630
NEW SOLUTION    Route: [0, 8, 1, 6, 4, 9, 10, 7, 5, 2, 3]   Distance: 589
NEW SOLUTION    Route: [0, 8, 1, 6, 4, 9, 10, 2, 3, 7, 5]   Distance: 580
NEW SOLUTION    Route: [0, 8, 1, 6, 4, 9, 10, 2, 5, 7, 3]   Distance: 548
NEW SOLUTION    Route: [0, 8, 1, 6, 4, 9, 2, 5, 7, 3, 10]   Distance: 533
NEW SOLUTION    Route: [0, 8, 1, 6, 4, 9, 7, 5, 2, 3, 10]   Distance: 522
NEW SOLUTION    Route: [0, 8, 1, 6, 4, 9, 7, 5, 2, 10, 3]   Distance: 495
NEW SOLUTION    Route: [0, 8, 1, 6, 7, 9, 4, 5, 2, 10, 3]   Distance: 494
NEW SOLUTION    Route: [0, 8, 1, 6, 7, 5, 4, 9, 2, 10, 3]   Distance: 493
NEW SOLUTION    Route: [0, 8, 1, 6, 3, 10, 2, 5, 7, 9, 4]   Distance: 490
NEW SOLUTION    Route: [0, 8, 1, 6, 3, 10, 2, 5, 7, 4, 9]   Distance: 486
NEW SOLUTION    Route: [0, 8, 1, 6, 9, 4, 7, 5, 2, 10, 3]   Distance: 467
NEW SOLUTION    Route: [0, 8, 1, 10, 2, 5, 7, 4, 9, 6, 3]   Distance: 453
NEW SOLUTION    Route: [0, 8, 1, 2, 5, 7, 4, 9, 6, 3, 10]   Distance: 442
NEW SOLUTION    Route: [0, 8, 1, 2, 5, 7, 4, 9, 6, 10, 3]   Distance: 437
NEW SOLUTION    Route: [0, 8, 1, 5, 7, 4, 9, 2, 10, 6, 3]   Distance: 433
NEW SOLUTION    Route: [0, 8, 10, 2, 1, 5, 4, 9, 7, 6, 3]   Distance: 427
NEW SOLUTION    Route: [0, 8, 10, 2, 1, 5, 7, 4, 9, 6, 3]   Distance: 400
NEW SOLUTION    Route: [0, 8, 2, 1, 5, 7, 4, 9, 6, 10, 3]   Distance: 399
NEW SOLUTION    Route: [0, 3, 7, 4, 9, 6, 10, 2, 1, 5, 8]   Distance: 394
NEW SOLUTION    Route: [0, 3, 7, 4, 9, 6, 10, 2, 8, 5, 1]   Distance: 389
NEW SOLUTION    Route: [0, 3, 6, 9, 4, 7, 5, 8, 1, 2, 10]   Distance: 384
NEW SOLUTION    Route: [0, 3, 6, 9, 4, 7, 5, 8, 10, 2, 1]   Distance: 382
NEW SOLUTION    Route: [0, 3, 6, 9, 4, 7, 5, 1, 2, 8, 10]   Distance: 374
NEW SOLUTION    Route: [0, 9, 4, 5, 1, 2, 8, 10, 3, 6, 7]   Distance: 373
NEW SOLUTION    Route: [0, 9, 4, 7, 3, 6, 10, 8, 5, 1, 2]   Distance: 365
NEW SOLUTION    Route: [0, 9, 4, 7, 3, 6, 10, 2, 1, 5, 8]   Distance: 360
NEW SOLUTION    Route: [0, 9, 4, 7, 3, 6, 10, 2, 8, 5, 1]   Distance: 355
NEW SOLUTION    Route: [0, 9, 4, 7, 5, 8, 1, 2, 10, 6, 3]   Distance: 345
NEW SOLUTION    Route: [0, 9, 4, 7, 5, 1, 2, 8, 10, 6, 3]   Distance: 335
Found solution.
Elapsed time 0.159882 s

------------------- TSP Version 2: The Pessimistic Algorithm ----------------------
NEW SOLUTION    Route: [0, 3, 10, 2, 5, 4, 7, 8, 1, 9, 6]   Distance: 500
NEW SOLUTION    Route: [0, 3, 10, 2, 5, 4, 7, 8, 1, 6, 9]   Distance: 498
NEW SOLUTION    Route: [0, 3, 10, 2, 5, 4, 7, 8, 6, 1, 9]   Distance: 493
NEW SOLUTION    Route: [0, 3, 10, 2, 5, 4, 7, 8, 6, 9, 1]   Distance: 481
NEW SOLUTION    Route: [0, 3, 10, 2, 5, 4, 7, 8, 9, 1, 6]   Distance: 443
NEW SOLUTION    Route: [0, 3, 10, 2, 5, 4, 7, 8, 9, 6, 1]   Distance: 429
NEW SOLUTION    Route: [0, 3, 10, 2, 5, 6, 1, 9, 8, 7, 4]   Distance: 417
NEW SOLUTION    Route: [0, 3, 10, 2, 6, 5, 4, 7, 8, 9, 1]   Distance: 360
NEW SOLUTION    Route: [0, 3, 10, 2, 1, 9, 6, 5, 4, 7, 8]   Distance: 359
NEW SOLUTION    Route: [0, 3, 10, 4, 5, 6, 2, 1, 9, 7, 8]   Distance: 358
NEW SOLUTION    Route: [0, 3, 10, 4, 5, 6, 2, 1, 9, 8, 7]   Distance: 342
NEW SOLUTION    Route: [0, 3, 10, 4, 5, 6, 9, 8, 7, 2, 1]   Distance: 340
NEW SOLUTION    Route: [0, 3, 10, 4, 7, 8, 9, 1, 2, 6, 5]   Distance: 310
NEW SOLUTION    Route: [0, 3, 7, 8, 9, 10, 4, 5, 6, 2, 1]   Distance: 305
NEW SOLUTION    Route: [0, 3, 9, 8, 7, 4, 10, 1, 2, 6, 5]   Distance: 303
NEW SOLUTION    Route: [0, 5, 4, 7, 3, 10, 8, 9, 6, 2, 1]   Distance: 301
NEW SOLUTION    Route: [0, 5, 4, 7, 3, 10, 1, 2, 6, 9, 8]   Distance: 293
NEW SOLUTION    Route: [0, 5, 4, 7, 3, 1, 6, 2, 10, 9, 8]   Distance: 286
NEW SOLUTION    Route: [0, 5, 4, 7, 3, 1, 2, 6, 9, 10, 8]   Distance: 281
NEW SOLUTION    Route: [0, 5, 4, 7, 3, 1, 2, 6, 10, 9, 8]   Distance: 275
NEW SOLUTION    Route: [0, 5, 4, 7, 8, 9, 6, 2, 1, 3, 10]   Distance: 270
NEW SOLUTION    Route: [0, 5, 4, 7, 8, 9, 10, 3, 1, 2, 6]   Distance: 269
NEW SOLUTION    Route: [0, 5, 4, 10, 3, 7, 8, 9, 6, 2, 1]   Distance: 268
NEW SOLUTION    Route: [0, 5, 4, 10, 9, 8, 7, 3, 1, 2, 6]   Distance: 252
NEW SOLUTION    Route: [0, 5, 4, 10, 9, 6, 2, 1, 3, 7, 8]   Distance: 248
NEW SOLUTION    Route: [0, 5, 6, 2, 10, 4, 7, 8, 9, 3, 1]   Distance: 235
NEW SOLUTION    Route: [0, 5, 6, 2, 1, 3, 10, 4, 7, 8, 9]   Distance: 231
NEW SOLUTION    Route: [0, 5, 6, 2, 1, 3, 7, 4, 10, 9, 8]   Distance: 212
NEW SOLUTION    Route: [0, 5, 6, 2, 1, 3, 9, 10, 4, 7, 8]   Distance: 207
Found solution.
Elapsed time 0.175282 s

------------------- TSP Version 2: The Pessimistic Algorithm ----------------------
NEW SOLUTION    Route: [0, 6, 7, 2, 5, 10, 4, 9, 3, 8, 1]   Distance: 515
NEW SOLUTION    Route: [0, 6, 7, 2, 5, 10, 4, 9, 3, 1, 8]   Distance: 495
NEW SOLUTION    Route: [0, 6, 7, 2, 5, 10, 4, 9, 8, 1, 3]   Distance: 423
NEW SOLUTION    Route: [0, 6, 7, 2, 5, 10, 4, 8, 9, 1, 3]   Distance: 368
NEW SOLUTION    Route: [0, 6, 7, 2, 5, 10, 4, 3, 8, 9, 1]   Distance: 361
NEW SOLUTION    Route: [0, 6, 7, 2, 5, 10, 4, 3, 1, 9, 8]   Distance: 341
NEW SOLUTION    Route: [0, 6, 7, 2, 5, 1, 9, 8, 3, 4, 10]   Distance: 330
NEW SOLUTION    Route: [0, 6, 7, 2, 10, 5, 1, 9, 8, 4, 3]   Distance: 309
NEW SOLUTION    Route: [0, 6, 7, 10, 2, 5, 1, 9, 8, 4, 3]   Distance: 284
NEW SOLUTION    Route: [0, 6, 7, 8, 9, 1, 5, 2, 10, 4, 3]   Distance: 266
NEW SOLUTION    Route: [0, 6, 7, 8, 9, 1, 5, 10, 2, 4, 3]   Distance: 258
NEW SOLUTION    Route: [0, 6, 5, 2, 10, 4, 3, 1, 9, 8, 7]   Distance: 250
NEW SOLUTION    Route: [0, 6, 5, 2, 10, 7, 8, 9, 1, 3, 4]   Distance: 243
NEW SOLUTION    Route: [0, 6, 5, 2, 4, 3, 1, 9, 8, 7, 10]   Distance: 225
NEW SOLUTION    Route: [0, 6, 5, 1, 9, 8, 7, 10, 2, 4, 3]   Distance: 197
Found solution.
Elapsed time 0.051783 s

------------------- TSP Version 2: The Pessimistic Algorithm ----------------------
NEW SOLUTION    Route: [0, 8, 9, 6, 1, 7, 3, 4, 5, 2, 10]   Distance: 607
NEW SOLUTION    Route: [0, 8, 9, 6, 1, 7, 3, 4, 2, 5, 10]   Distance: 573
NEW SOLUTION    Route: [0, 8, 9, 6, 1, 7, 3, 4, 10, 5, 2]   Distance: 562
NEW SOLUTION    Route: [0, 8, 9, 6, 1, 7, 3, 5, 2, 4, 10]   Distance: 513
NEW SOLUTION    Route: [0, 8, 9, 6, 1, 3, 5, 2, 7, 4, 10]   Distance: 496
NEW SOLUTION    Route: [0, 8, 9, 6, 7, 3, 1, 5, 2, 4, 10]   Distance: 493
NEW SOLUTION    Route: [0, 8, 9, 6, 7, 3, 1, 10, 4, 2, 5]   Distance: 489
NEW SOLUTION    Route: [0, 8, 9, 6, 7, 2, 4, 10, 1, 3, 5]   Distance: 487
NEW SOLUTION    Route: [0, 8, 9, 6, 7, 2, 5, 3, 1, 10, 4]   Distance: 480
NEW SOLUTION    Route: [0, 8, 9, 6, 4, 3, 5, 2, 7, 1, 10]   Distance: 454
NEW SOLUTION    Route: [0, 8, 9, 6, 4, 5, 2, 7, 3, 1, 10]   Distance: 453
NEW SOLUTION    Route: [0, 8, 9, 6, 4, 10, 5, 2, 7, 3, 1]   Distance: 452
NEW SOLUTION    Route: [0, 8, 9, 6, 4, 10, 1, 7, 3, 5, 2]   Distance: 443
NEW SOLUTION    Route: [0, 8, 9, 6, 4, 10, 1, 3, 5, 2, 7]   Distance: 411
NEW SOLUTION    Route: [0, 8, 9, 10, 4, 6, 1, 3, 5, 2, 7]   Distance: 407
NEW SOLUTION    Route: [0, 8, 9, 10, 4, 6, 7, 2, 5, 3, 1]   Distance: 402
NEW SOLUTION    Route: [0, 8, 9, 10, 4, 6, 5, 2, 7, 3, 1]   Distance: 390
NEW SOLUTION    Route: [0, 8, 9, 10, 4, 6, 2, 7, 3, 1, 5]   Distance: 388
NEW SOLUTION    Route: [0, 8, 9, 10, 4, 6, 2, 7, 1, 3, 5]   Distance: 387
NEW SOLUTION    Route: [0, 8, 9, 10, 4, 6, 2, 5, 3, 1, 7]   Distance: 384
NEW SOLUTION    Route: [0, 8, 9, 10, 1, 3, 5, 2, 7, 4, 6]   Distance: 376
NEW SOLUTION    Route: [0, 8, 9, 10, 6, 4, 3, 1, 7, 2, 5]   Distance: 371
NEW SOLUTION    Route: [0, 8, 9, 10, 6, 4, 3, 1, 5, 2, 7]   Distance: 367
NEW SOLUTION    Route: [0, 8, 9, 10, 6, 4, 2, 5, 3, 1, 7]   Distance: 366
NEW SOLUTION    Route: [0, 8, 9, 10, 6, 4, 7, 2, 5, 3, 1]   Distance: 365
NEW SOLUTION    Route: [0, 8, 9, 5, 3, 1, 10, 6, 4, 2, 7]   Distance: 358
NEW SOLUTION    Route: [0, 8, 9, 5, 2, 7, 3, 1, 10, 4, 6]   Distance: 352
NEW SOLUTION    Route: [0, 8, 2, 4, 6, 10, 9, 5, 3, 7, 1]   Distance: 344
NEW SOLUTION    Route: [0, 8, 2, 4, 6, 10, 9, 5, 3, 1, 7]   Distance: 328
NEW SOLUTION    Route: [0, 8, 2, 7, 3, 1, 5, 9, 10, 4, 6]   Distance: 321
NEW SOLUTION    Route: [0, 8, 2, 7, 1, 3, 5, 9, 10, 4, 6]   Distance: 320
NEW SOLUTION    Route: [0, 8, 5, 3, 1, 9, 10, 6, 4, 2, 7]   Distance: 319
NEW SOLUTION    Route: [0, 8, 5, 9, 10, 6, 4, 2, 7, 3, 1]   Distance: 314
NEW SOLUTION    Route: [0, 8, 5, 2, 7, 3, 1, 9, 10, 4, 6]   Distance: 313
NEW SOLUTION    Route: [0, 8, 4, 3, 5, 2, 7, 1, 9, 10, 6]   Distance: 299
NEW SOLUTION    Route: [0, 8, 4, 3, 7, 2, 5, 9, 1, 10, 6]   Distance: 293
NEW SOLUTION    Route: [0, 8, 4, 3, 1, 7, 2, 5, 9, 10, 6]   Distance: 278
NEW SOLUTION    Route: [0, 8, 4, 2, 7, 3, 1, 5, 9, 10, 6]   Distance: 277
NEW SOLUTION    Route: [0, 8, 4, 2, 7, 1, 3, 5, 9, 10, 6]   Distance: 276
NEW SOLUTION    Route: [0, 8, 4, 6, 10, 9, 5, 3, 1, 7, 2]   Distance: 263
NEW SOLUTION    Route: [0, 8, 4, 6, 10, 9, 5, 3, 1, 2, 7]   Distance: 262
NEW SOLUTION    Route: [0, 8, 4, 6, 10, 9, 5, 2, 7, 3, 1]   Distance: 249
NEW SOLUTION    Route: [0, 3, 5, 9, 10, 6, 4, 8, 1, 7, 2]   Distance: 245
NEW SOLUTION    Route: [0, 3, 5, 9, 10, 6, 4, 8, 1, 2, 7]   Distance: 244
NEW SOLUTION    Route: [0, 3, 7, 2, 5, 9, 10, 1, 8, 4, 6]   Distance: 242
NEW SOLUTION    Route: [0, 3, 7, 2, 5, 9, 10, 6, 4, 8, 1]   Distance: 231
NEW SOLUTION    Route: [0, 3, 1, 8, 4, 6, 10, 9, 5, 2, 7]   Distance: 215
Found solution.
Elapsed time 0.087109 s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="results"&gt;Results&lt;/h2&gt;
&lt;p&gt;The figure below shows the results of the timing study when using the average of 100 different random problems, 
compared to the timing study performed using a single problem size.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Average versus one-time solutions, walltime versus problem size." src="/images/avg-vs-onetime-walltime.png"&gt;&lt;/p&gt;
&lt;p&gt;The results show dramatically different behavior, highlighting the importance
of computing the statistical average of solution walltime for many different problems.
This was not an issue that arose in discussing timing or profiling of codes to solve the 
8 queens problem, because in that case the problem (and resulting decision tree)
were determined by the choice of algorithm.&lt;/p&gt;
&lt;p&gt;This information is also important ot keep in mind when comparing the timing performance 
of two algorithms - using many cases to compare two algorithms is preferrable,
since it reduces the likelihood of randomly selecting a problem that highights 
a weakness of one algorithm or a strength of the other.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post we covered some scripting tools that make timing a lot easier to do,
and some ways of thinking about and building up scripts 
to allow for more complex timing studies without an increase 
in the associated post-processing work involved.&lt;/p&gt;
&lt;p&gt;We showed how to use &lt;code&gt;make&lt;/code&gt; and a Makefile to create compact, expressive commands to build and run Java programs.
We showed how to use Bash scripting to implement loops and run a case matrix of problems of various sizes,
measuring timing data for hundreds of problems in total.
All of these scripts made heavy use of Unix command line tools, 
demonstrating how to chain commands and functionality together on the command line to accomplish complex tasks.
Finally, we showed how to use the &lt;code&gt;awk&lt;/code&gt; programming language to compute the average of a set of numbers,
exploring yet another application of this unusually handy language.&lt;/p&gt;</content><category term="Java"></category><category term="computer science"></category><category term="command line"></category><category term="guava"></category><category term="graph"></category><category term="TSP"></category><category term="make"></category><category term="awk"></category><category term="performance"></category></entry><entry><title>Fixing Bottlenecks in the Guava Traveling Salesperson Problem Code</title><link href="https://charlesreid1.github.io/fixing-bottlenecks-in-the-guava-traveling-salesperson-problem-code.html" rel="alternate"></link><published>2017-03-29T14:00:00-07:00</published><updated>2017-03-29T14:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-03-29:/fixing-bottlenecks-in-the-guava-traveling-salesperson-problem-code.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp2-intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-graphs"&gt;The Graphs We Are Solving&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp2-viz-graphs"&gt;Visualizations of Graphs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-guava-tsp-soln"&gt;Guava TSP Solution&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp2-timing-guava-tsp"&gt;Timing the TSP Solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-improving"&gt;Improving the Guava TSP Solution&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp2-flaw"&gt;The Flaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-fixing"&gt;Fixing the Flaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-pessimist"&gt;The Pessimist Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-timing"&gt;Timing Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-future"&gt;Future Work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="tsp2-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;In a prior blog post we introduced you to the traveling salesperson problem (TSP),
which involves finding the shortest path through every city in a group of cities
connected by a network of roads. Using Google Guava, we have implemented a solution 
to the TSP in Java.&lt;/p&gt;
&lt;p&gt;Our philosophy toward timing, profiling, and optimization is that it is always best 
to work from data - and timing â€¦&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp2-intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-graphs"&gt;The Graphs We Are Solving&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp2-viz-graphs"&gt;Visualizations of Graphs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-guava-tsp-soln"&gt;Guava TSP Solution&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp2-timing-guava-tsp"&gt;Timing the TSP Solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-improving"&gt;Improving the Guava TSP Solution&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp2-flaw"&gt;The Flaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-fixing"&gt;Fixing the Flaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-pessimist"&gt;The Pessimist Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-timing"&gt;Timing Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-future"&gt;Future Work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="tsp2-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;
&lt;p&gt;In a prior blog post we introduced you to the traveling salesperson problem (TSP),
which involves finding the shortest path through every city in a group of cities
connected by a network of roads. Using Google Guava, we have implemented a solution 
to the TSP in Java.&lt;/p&gt;
&lt;p&gt;Our philosophy toward timing, profiling, and optimization is that it is always best 
to work from data - and timing is the first place to begin collecting data.
As we will show in this blog post, simply timing your function for different problem sizes
can reveal scaling behavior that indicates bottlenecks, bugs, or inefficiencies in the algorithm.&lt;/p&gt;
&lt;p&gt;In this post, we use simple timing tools and a spreadsheet 
to plot scaling behavior and identify bottlenecks in the 
traveling salesperson problem code. Fixing the bottleneck
led to a reduction in cost of &lt;strong&gt;two orders of magnitude&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here's a preview:&lt;/p&gt;
&lt;p&gt;&lt;img alt="TSP Guava Solution scaling results - initial and pessimist algorithms" src="/images/tsp-guava-initial-pessimist.png"&gt;&lt;/p&gt;
&lt;p&gt;In this post we'll cover what we did to time the problem,
the initial results, and the algorithm improvement that led to 
the massive performance improvement.&lt;/p&gt;
&lt;p&gt;But first, let's look at some of the graphs that are being solved.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp2-graphs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-graphs-we-are-solving"&gt;The Graphs We Are Solving&lt;/h2&gt;
&lt;p&gt;Let's start by having a look at some of the graphs we will be solving,
and the representation of the problem.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp2-viz-graphs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="visualizations-of-graphs"&gt;Visualizations of Graphs&lt;/h3&gt;
&lt;p&gt;The first few graphs start out simple: here is a randomly generated 4-node traveling salesman problem
(we wil cover the code that generates the graph pictured here in a moment):&lt;/p&gt;
&lt;p&gt;&lt;img alt="TSP graph with 4 nodes" src="/images/graphviz_tsp_4.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shortest Route: [0, 2, 3, 1] Distance: 112.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here is another randomly generated graph with 5 nodes:&lt;/p&gt;
&lt;p&gt;&lt;img alt="TSP graph with 5 nodes" src="/images/graphviz_tsp_5.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shortest Route: [0, 4, 2, 1, 3]   Distance: 130.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With 6 nodes:&lt;/p&gt;
&lt;p&gt;&lt;img alt="TSP graph with 6 nodes" src="/images/graphviz_tsp_6.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shortest Route: [0, 2, 4, 1, 5, 3]    Distance: 163.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But problem of this sise are still trivially easy for a processor to handle.
Our inefficient, first-pass algorithm started to show signs of eating up CPU cycles 
at around 9 nodes (albeit less than 1 second). Here is the graph with 9 nodes:&lt;/p&gt;
&lt;p&gt;&lt;img alt="TSP graph with 9 nodes" src="/images/graphviz_tsp_9.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shortest Route: [0, 6, 1, 7, 3, 2, 5, 8, 4]   Distance: 166.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With 12 nodes:&lt;/p&gt;
&lt;p&gt;&lt;img alt="TSP graph with 12 nodes" src="/images/graphviz_tsp_12.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shortest Route: [0, 7, 5, 4, 1, 8, 6, 10, 11, 9, 3, 2]    Distance: 236.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At 14 nodes, even the efficient algorithm crosses the 1 second threshold.&lt;/p&gt;
&lt;p&gt;&lt;img alt="TSP graph with 14 nodes" src="/images/graphviz_tsp_14.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shortest Route: [0, 2, 6, 10, 13, 12, 7, 4, 1, 11, 5, 3, 9, 8]    Distance: 277.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We tested randomly-generated, fully-connected graphs of up to 18 nodes, 
and the algorithm was able to compute solutions within a few minutes.
Here is an 18-node graph:&lt;/p&gt;
&lt;p&gt;&lt;img alt="TSP graph with 18 nodes" src="/images/graphviz_tsp_18.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shortest Route: [0, 3, 10, 6, 12, 5, 11, 2, 14, 8, 13, 4, 7, 1, 9]    Distance: 267.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp2-guava-tsp-soln"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-guava-tsp-solution"&gt;The Guava TSP Solution&lt;/h2&gt;
&lt;p&gt;In a prior post we covered the implementation of a solution to the TSP 
using Guava's Network objects. This implementation utilized a recursive
depth-first search algorithm to search for the shortest path among all nodes.&lt;/p&gt;
&lt;p&gt;To recap, here was our pseudocode for the TSP solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;explore(neighbors):

    if(no more unvisited neighbors):
        # This is the base case.
        if total distance is less than current minimum:
            save path and new minimum

    else:
        # This is the recursive case.
        for neighbor in unvisited neighbors:
            visit neighbor
            explore(new_neighbors)
            unvisit neighbor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here is what the recursive backtracking &lt;code&gt;explore()&lt;/code&gt; method looked like
when implemented in Java:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="cm"&gt;/** Recursive backtracking method: explore possible solutions starting at this node, having made nchoices */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;explore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nchoices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nchoices&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;graphSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// &lt;/span&gt;
            &lt;span class="c1"&gt;// BASE CASE&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Solution base case&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;printSolution&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
            &lt;span class="c1"&gt;// RECURSIVE CASE&lt;/span&gt;
            &lt;span class="c1"&gt;//  &lt;/span&gt;
            &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;neighbors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;adjacentNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;neighbor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;neighbors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visited&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;distance_btwn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Edge&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;edgesConnecting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;distance_btwn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;

                    &lt;span class="c1"&gt;// Make a choice&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nchoices&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;distance_btwn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="c1"&gt;// Explore the consequences&lt;/span&gt;
                    &lt;span class="n"&gt;explore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nchoices&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                    &lt;span class="c1"&gt;// Unmake the choice&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nchoices&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;unvisit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;distance_btwn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="c1"&gt;// Move on to the next choice (continue loop)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;               
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// End base/recursive case&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: full TSP code available at &lt;a href="http://git.charlesreid1.com/charlesreid1/tsp"&gt;http://git.charlesreid1.com/charlesreid1/tsp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp2-timing-guava-tsp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="timing-the-tsp-solution"&gt;Timing the TSP Solution&lt;/h3&gt;
&lt;p&gt;To time the Guava solution to the TSP, we utilized Java's system time
to measure the amount of time it took to compute solutions, 
excluding the time spent on graph construction.&lt;/p&gt;
&lt;p&gt;Here is the code that performs the timing of the call to the explore method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IllegalArgumentException&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

        &lt;span class="p"&gt;...&lt;/span&gt;

        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;TSP&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TSP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nanoTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nanoTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Elapsed time %03f s\n &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;1E9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The elapsed time is computed using &lt;code&gt;System.nanoTime()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Writing a script to feed variable size graphs and time the resulting code 
showed some pretty awful scaling behavior: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Java Guava TSP Solution Scaling" src="/images/tsp-java-scaling.png"&gt;&lt;/p&gt;
&lt;p&gt;This scaling behavior reveals a bottleneck in the algorithm:
the algorithm scales the same way the problem size scales.
A more efficient algorithm would be capable of ruling out 
more of the solution space as the graph size grows,
allowing the algorithm to scale better at large problem sizes.&lt;/p&gt;
&lt;p&gt;This led to some reconsideration of the algorithm.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp2-improving"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="improving-the-guava-tsp-solution"&gt;Improving the Guava TSP Solution&lt;/h2&gt;
&lt;p&gt;The original TSP algorithm implemented a subtle flaw - 
not by implementing a mistake in the calculation, 
but by ignoring an important piece of information.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp2-theflaw"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="the-flaw"&gt;The Flaw&lt;/h3&gt;
&lt;p&gt;As the recursive depth-first search traverses the graph, the algorithm is checking if all nodes have been traversed.
When all nodes have been traversed, it then compares the distance of that journey to the current shortest journey.
If the new journey is shorter, it is saved as the new shortest journey, otherwise it is ignored and we move on.&lt;/p&gt;
&lt;p&gt;What this ignores is the fact that any path, at any point, can be checked to see if it is 
longer than the current minimum, and if it is, any possibilities that follow from it can be skipped.&lt;/p&gt;
&lt;p&gt;For example, consider the TSP on a graph of six cities, A B C D E F.&lt;/p&gt;
&lt;p&gt;Suppose that the algorithm is in the midst of the recursive backtracking solution,
and has a current minimum distance and minimum path of the route &lt;code&gt;A-B-E-D-C-F&lt;/code&gt;, which is 24 miles.&lt;/p&gt;
&lt;p&gt;Now suppose that the algorithm is searching for solutions that begin with the choice &lt;code&gt;A-E-C&lt;/code&gt;,
and the distance &lt;code&gt;A-E-C&lt;/code&gt; is 28 miles.&lt;/p&gt;
&lt;p&gt;The naive algorithm ignores this information, and continues choosing from among the 
3 remaining cities, computing the total length for &lt;span class="math"&gt;\(3! = 6\)&lt;/span&gt; additional routes, and finding 
that all six of them do not work.&lt;/p&gt;
&lt;p&gt;The smart algorithm checks &lt;em&gt;each time it chooses a new node&lt;/em&gt; whether the length of the current route
exceeds the current minimum route distance (if one has been found/set).
If not, the algorithm keeps going, but if so, it skips choosing neighbors 
and returns directly to the parent caller.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp2-fixing"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="fixing-the-flaw"&gt;Fixing the Flaw&lt;/h3&gt;
&lt;p&gt;Fixing the flaw is surpsingly easy: we just add an if statement.&lt;/p&gt;
&lt;p&gt;Illustrating first with the pseudocode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;explore(neighbors):

    if(no more unvisited neighbors):
        # This is the base case.
        if total distance is less than current minimum:
            save path and new minimum

    else:
        # This is the recursive case.
        if current distance is greater than current minimum:
            skip
        else:
            for neighbor in unvisited neighbors:
                visit neighbor
                explore(new_neighbors)
                unvisit neighbor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In our Java implementation, the algorithm simply prints out solutions as it goes,
then returns to the calling function whether a solution was found or not.
Thus, we can "skip" a set of solutions by just returning to the calling function,
using a &lt;code&gt;return&lt;/code&gt; statement.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nchoices&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;graphSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// &lt;/span&gt;
            &lt;span class="c1"&gt;// BASE CASE&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Solution base case:&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;printSolution&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
            &lt;span class="c1"&gt;// RECURSIVE CASE&lt;/span&gt;
            &lt;span class="c1"&gt;//  &lt;/span&gt;

            &lt;span class="cm"&gt;/* &lt;/span&gt;
&lt;span class="cm"&gt;             * The following lines result in a huge computational cost savings.&lt;/span&gt;
&lt;span class="cm"&gt;            */&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Just give up already. It&amp;#39;s meaningless. There&amp;#39;s no point.&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// Everything else stays exactly the same&lt;/span&gt;
            &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;neighbors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;adjacentNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;neighbor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;neighbors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visited&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;distance_btwn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Edge&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;edgesConnecting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;distance_btwn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;

                    &lt;span class="c1"&gt;// Make a choice&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nchoices&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;distance_btwn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="c1"&gt;// Explore the consequences&lt;/span&gt;
                    &lt;span class="n"&gt;explore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nchoices&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                    &lt;span class="c1"&gt;// Unmake the choice&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nchoices&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;unvisit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;distance_btwn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="c1"&gt;// Move on to the next choice (continue loop)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;               
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// End base/recursive case&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="tsp2-pessimist"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="the-pessimist-algorithm"&gt;The Pessimist Algorithm&lt;/h3&gt;
&lt;p&gt;This algorithm is dubbed The Pessimist Algorithm. Let's see how it works.
Here is that new if statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Just give up already. It&amp;#39;s meaningless. There&amp;#39;s no point.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This if statement tests two conditions - first, we check if a first minimum distance has actually been found,
and second, we check if the distance of the current path is greater than the minimum distance.
If it is, we give up continuing our search down this path, and just return back to the calling function.&lt;/p&gt;
&lt;p&gt;This introduces a small computational cost - 
we now have an if statement to check every time the &lt;code&gt;explore()&lt;/code&gt; method is called -
but it results in such significant cost savings that it does not matter.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp-timing"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="timing-results"&gt;Timing Results&lt;/h2&gt;
&lt;p&gt;Shown below is a graph of the walltime for various problem sizes,
showing both the original algorithm and the pessimist algorithm
and their scaling behavior. &lt;/p&gt;
&lt;p&gt;The pessimist algorithm led to a &lt;em&gt;drastic&lt;/em&gt; improvement in scale-up -
the results are striking.&lt;/p&gt;
&lt;p&gt;&lt;img alt="TSP Guava Solution scaling results - initial and pessimist algorithms" src="/images/tsp-guava-initial-pessimist.png"&gt;&lt;/p&gt;
&lt;p&gt;And here are the results in a table form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-----------------------------------------------------------------------------------------
| Number of Nodes N | Initial Algorithm Walltime [s] | Pessimist Algorithm Walltime [s] |
|-------------------|--------------------------------|----------------------------------|
| 4                 | 0.005                          | 0.006                            |
| 5                 | 0.006                          | 0.006                            |
| 6                 | 0.009                          | 0.008                            |
| 7                 | 0.017                          | 0.011                            |
| 8                 | 0.029                          | 0.020                            |
| 9                 | 0.083                          | 0.023                            |
| 10                | 0.305                          | 0.053                            |
| 11                | 1.443                          | 0.118                            |
| 12                | 15.808                         | 0.149                            |
| 13                | 180.078                        | 0.524                            |
| 14                |                                | 1.276                            |
| 15                |                                | 3.905                            |
| 16                |                                | 216.827                          |
| 17                |                                | 106.992                          |
| 18                |                                | 337.930                          |
-----------------------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For a problem with 13 nodes, the initial algorithm took 3 minutes; 
the pessimist algorithm didn't even break the one second mark!&lt;/p&gt;
&lt;h2 id="future-work"&gt;Future Work&lt;/h2&gt;
&lt;p&gt;Now that we've got the algorithm running faster and more efficiently,
we can tackle larger problems and explore the impact of problem topology
on solutions, and we can rest assured we have an efficient algorithm
that can scale to larger and more interesting problems.&lt;/p&gt;
&lt;p&gt;There are further improvements we could make to the algorithm to improve it, though.
By examining the solutions that are found, we can see that the solutions
usually, but not always, connects from each neighbor to its next-closest neighbor.
If, when iterating over neighbors, we start by searching the nearest neighbors first,
we can potentially get to the minimum solution faster, which would allow us
to more quickly rule out larger portions of the solution space that are infeasible.&lt;/p&gt;
&lt;p&gt;This would induce an additional overhead cost of sorting, since the Guava library
returns the edges that connect to a node as an unordered Set. These edges would 
have to be added to a container and sorted to implement the nearest-neighbor search.&lt;/p&gt;
&lt;p&gt;However, we saw with the pessimist solution that a small increase in complexity
can rule out large enough portions of the solution space to make it worthwhile,
so it may be that the cost of sorting each edge pays off in the computational savings that result.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Java"></category><category term="computer science"></category><category term="guava"></category><category term="graph"></category><category term="TSP"></category><category term="performance"></category></entry><entry><title>Python vs. Perl: N Queens Problem</title><link href="https://charlesreid1.github.io/python-vs-perl-n-queens-problem.html" rel="alternate"></link><published>2017-03-25T20:00:00-07:00</published><updated>2017-03-25T20:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-03-25:/python-vs-perl-n-queens-problem.html</id><summary type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pvp-background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-nqueens"&gt;N Queens Revisited&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-perlsoln"&gt;Perl Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-pythonsoln"&gt;Python Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-h2hnqueens"&gt;Python vs. Perl: Walltime vs. Number of Queens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-perlprof"&gt;Perl Profiling and Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-pythonprof"&gt;Python Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-pythonprofresults"&gt;Python Profiling Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-pythonperl"&gt;Comparing Python to Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-h2hops"&gt;Python vs. Perl: Walltime vs. Number of Solutions Tested&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-winner"&gt;The Winner: Perl for Small Problems, Python for Big Ones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="pvp-background"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;Revisiting the N queens problem, this time implementing the solution in Python.&lt;/p&gt;
&lt;p&gt;Verb-oriented solution, functional, and based on Perl solution&lt;/p&gt;
&lt;p&gt;More fair comparison - both are interpreted languages, not compiled languages&lt;/p&gt;
&lt;p&gt;Compare Python and Perl, ease of implementation, speed, flexibility&lt;/p&gt;
&lt;p&gt;&lt;a name="pvp-nqueensproblem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="n-queens-problem"&gt;N Queens Problem&lt;/h2&gt;
&lt;p&gt;As a recap from the â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pvp-background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-nqueens"&gt;N Queens Revisited&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-perlsoln"&gt;Perl Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-pythonsoln"&gt;Python Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-h2hnqueens"&gt;Python vs. Perl: Walltime vs. Number of Queens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-perlprof"&gt;Perl Profiling and Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-pythonprof"&gt;Python Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-pythonprofresults"&gt;Python Profiling Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-pythonperl"&gt;Comparing Python to Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-h2hops"&gt;Python vs. Perl: Walltime vs. Number of Solutions Tested&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-winner"&gt;The Winner: Perl for Small Problems, Python for Big Ones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="pvp-background"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;Revisiting the N queens problem, this time implementing the solution in Python.&lt;/p&gt;
&lt;p&gt;Verb-oriented solution, functional, and based on Perl solution&lt;/p&gt;
&lt;p&gt;More fair comparison - both are interpreted languages, not compiled languages&lt;/p&gt;
&lt;p&gt;Compare Python and Perl, ease of implementation, speed, flexibility&lt;/p&gt;
&lt;p&gt;&lt;a name="pvp-nqueensproblem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="n-queens-problem"&gt;N Queens Problem&lt;/h2&gt;
&lt;p&gt;As a recap from the last post about the N queens problem, we're solving a chess puzzle that asks:
how many different configurations are there for placing &lt;span class="math"&gt;\(N\)&lt;/span&gt; queens on an &lt;span class="math"&gt;\(N \times N\)&lt;/span&gt; chessboard
such that no queen attacks any other queen?&lt;/p&gt;
&lt;p&gt;This is a popular problem in computer science because solutions often implement recursive backtracking.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://en.wikipedia.org/wiki/N_Queens_Problem"&gt;the Wikipedia article&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvp-nqueenssoln"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="n-queens-solution"&gt;N Queens Solution&lt;/h2&gt;
&lt;p&gt;Here is the pseudocode of the N queens solution being implemented here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;explore(column):
    if last column:
        # base case
        add to solutions
    else:
        # recursive case
        for each row:
            if this is a safe row:
                place queen on this row
                explore(column+1)
                remove queen from this row
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This solution implements recursive backtracking to explore choices of where to place each queen.
It keeps solutions simple, and can be implemented using only primitive built-in data types.
Solutions are stringified version of these arrays, consisting of 8 digits, so they are likewise very simple.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvp-perlsoln"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="perl-solution"&gt;Perl Solution&lt;/h3&gt;
&lt;p&gt;As a reminder, the Perl solution was originally from &lt;a href="http://rosettacode.org/wiki/N-queens_problem#Perl"&gt;Rosetta Code&lt;/a&gt;.
Here's another link to the Perl solution on Github.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/charlesreid1/4ce97a5f896ff1c89855a5d038d51535"&gt;Github gist: nqueens.pl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="pvp-pythonsoln"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="python-solution"&gt;Python Solution&lt;/h3&gt;
&lt;p&gt;The solution requires the use of one array of data that is fixed in size,
which for a given column stores a list of rows already occupied by queens, 
and one array of data that is variable in size, which stores where each queen has been placed.&lt;/p&gt;
&lt;p&gt;The Python solution makes use of lists by using a fixed-size list for the occupied rows
and a variable size list for storing queen locations. 
It utilizes buit-in methods for the list data type to append and pop, or add and remove items from the end of the list.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/charlesreid1/1a2ecb3a83284290d4a9daf747d0d7e4"&gt;Github gist: nqueens.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="pvp-h2hnqueens"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="head-to-head-walltime-vs-number-of-queens"&gt;Head to Head: Walltime vs. Number of Queens&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Graph of walltime versus number of queens" src="/images/python-vs-perl-nqueens.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;----------------------------------------------------------
| NQueens | Nsolutions | Java      | Perl     | Python   |
|---------|------------|-----------|----------|----------|
| 8       | 92         | 0.003628  | 0.016    | 0.018    |
| 9       | 352        | 0.006709  | 0.067    | 0.077    |
| 10      | 724        | 0.017473  | 0.259    | 0.359    |
| 11      | 2680       | 0.061291  | 1.542    | 1.684    |
| 12      | 14200      | 0.240463  | 8.431    | 8.618    |
| 13      | 73712      | 1.113491  | 48.542   | 50.401   |
| 14      | 365596     | 6.557336  | 303.278  | 322.576  |
| 15      | 2279184    | 42.619426 | 2057.052 | 1979.343 |
----------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The results of this test show that Python and Perl
are fairly closely matched.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvp-perlprof"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="perl-profiling"&gt;Perl Profiling&lt;/h2&gt;
&lt;p&gt;Results of profiling the Perl code with &lt;code&gt;Devel::NYTProf&lt;/code&gt; were detailed in a prior post.&lt;/p&gt;
&lt;p&gt;Here are those results once again,
for the 11 queens problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Profile data generated by Devel::NYTProf::Reader
# Version: v6.04
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000238,2,0.000119,use Time::HiRes qw(time);
0.000039,2,0.000019,use strict;
0.000491,2,0.000246,use warnings;
0.000021,1,0.000021,my $start = time;
0.010338,2680,0.000004,push @solutions, &amp;quot;@queens\n&amp;quot;;
0.009993,2680,0.000004,return;
0.186298,164246,0.000001,$#attacked = 2 * $board_size;
0.150338,164246,0.000001,for( 0 .. $#queens) { 
0.675523,1.26035e+06,0.000001,$attacked[ $ix2 ] = 1;
1.242624,164246,0.000008,for my $row (0 .. $board_size-1) {
0.267469,166925,0.000002,explore($depth+1);
0.125272,166925,0.000001,$occupied[$row] = 0;
0.000002,1,0.000002,explore(0);
0.000011,1,0.000011,my $duration = time - $start;
0.000075,1,0.000075,print &amp;quot;Found &amp;quot;, scalar(@solutions), &amp;quot; solutions\n&amp;quot;;
0.000050,1,0.000050,printf &amp;quot;Execution time: %0.3f s \n&amp;quot;,$duration;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="pvp-pythonprof"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="python-profiling"&gt;Python Profiling&lt;/h2&gt;
&lt;p&gt;The Python N queens solution was profiled with two tools: &lt;code&gt;cProfile&lt;/code&gt; and &lt;code&gt;line_profiler&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The built-in profiling tool &lt;code&gt;cProfile&lt;/code&gt; gives a summary of how much time was spent in each method,
but nothing lower level than that. It is similar to Java profiling tools. &lt;a href="https://docs.python.org/2/library/profile.html"&gt;(cProfile documentation)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;line_profiler&lt;/code&gt; tool is designed to profile Python code line-by-line, which gives a much more useful
breakdown of where the code spent all of its time. It is also helpful because this can be compared one-to-one
with the results from Perl, and we can get an equal basis for comparing the two languages.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvp-pythonprofresults"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="python-profiling-results"&gt;Python Profiling Results&lt;/h2&gt;
&lt;h3 id="cprofile-results"&gt;&lt;code&gt;cProfile&lt;/code&gt; Results&lt;/h3&gt;
&lt;p&gt;Here are the results from running the N queens problem for N = 11 through cProfile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;**************************************
Profiling 11 queens problem with Python...
*******************************
cProfile:
*******************************
Found 2680 solutions
         996197 function calls (829272 primitive calls) in 2.237 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
 166926/1    1.845    0.000    2.237    2.237 /Volumes/noospace/Users/charles/codes/hello-world/python/nqueens/nqueens.py:12(explore)
   328492    0.275    0.000    0.275    0.000 {range}
   166925    0.062    0.000    0.062    0.000 {method &amp;#39;pop&amp;#39; of &amp;#39;list&amp;#39; objects}
   169605    0.029    0.000    0.029    0.000 {method &amp;#39;append&amp;#39; of &amp;#39;list&amp;#39; objects}
   164247    0.026    0.000    0.026    0.000 {len}
        1    0.000    0.000    2.237    2.237 /Volumes/noospace/Users/charles/codes/hello-world/python/nqueens/nqueens.py:4(&amp;lt;module&amp;gt;)
        1    0.000    0.000    0.000    0.000 {method &amp;#39;disable&amp;#39; of &amp;#39;_lsprof.Profiler&amp;#39; objects}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="line_profiler-results"&gt;&lt;code&gt;line_profiler&lt;/code&gt; Results&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;line_profiler&lt;/code&gt; tool gives a more detailed picture of the code and where it spends its time,
breaking down profiling information line-by-line. This tool can be installed with pip: &lt;code&gt;pip install line_profiler&lt;/code&gt;.
The (INSERT LINK)(nqueens repository on github) has a file that demonstrates how to use this tool.
See &lt;a href="https://charlesreid1.com/wiki/Python/Profiling"&gt;Python/Profiling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are the results from the &lt;code&gt;line_profiler&lt;/code&gt; tool run on the same (11 queens) problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;**************************************
Profiling 11 queens problem with Python...
Found 2680 solutions
Wrote profile results to nqueens.py.lprof
Timer unit: 1e-06 s

Total time: 14.2258 s
File: nqueens.py
Function: explore at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def explore(depth):
    13                                               # base case
    14    166926       187573      1.1      1.3      if(depth==board_size):
    15                                                   # stringify/serialize the solution
    16      2680        31497     11.8      0.2          solutions.append(&amp;quot;%s&amp;quot;%(queens))
    17      2680         3117      1.2      0.0          return
    18                                           
    19                                               else:
    20    164246       384688      2.3      2.7          attacked = 2*board_size*[0,]
    21   1424595      1690693      1.2     11.9          for i in range(0,len(queens)):
    22   1260349      1471304      1.2     10.3              ix1 = queens[i] + depth - i
    23   1260349      1405141      1.1      9.9              attacked[ix1] = 1
    24                                           
    25   1260349      1494095      1.2     10.5              ix2 = queens[i] - depth + i
    26   1260349      1392563      1.1      9.8              attacked[ix2] = 1
    27                                           
    28   1970952      2229922      1.1     15.7          for row in range(0,board_size):
    29   1806706      2031139      1.1     14.3              if(occupied[row] or attacked[row]):
    30    379432       374466      1.0      2.6                  continue
    31                                           
    32                                                       # make a choice
    33    166925       241114      1.4      1.7              queens.append(row)
    34    166925       186833      1.1      1.3              occupied[row] = 1
    35                                           
    36                                                       # explore the consequences
    37    166925       610396      3.7      4.3              explore(depth+1)
    38                                           
    39                                                       # unmake the choice
    40    166925       288667      1.7      2.0              queens.pop()
    41    166925       202555      1.2      1.4              occupied[row] = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="pvp-h2hopts"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="python-vs-perl-walltime-vs-number-of-solutions-tested"&gt;Python vs Perl: Walltime vs. Number of Solutions Tested&lt;/h2&gt;
&lt;p&gt;As with the prior post, I verified that both codes were testing the same number of solutions.
Here is that table of the number of solutions for each value of N, together with the number of solutions tested:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-----------------------------------------------------------------------------
| NQueens | Nsolutions | NsolutionsTested | Java      | Perl     | Python   |
|---------|------------|------------------|-----------|----------|----------|
| 8       | 92         | 1965             | 0.003628  | 0.016    | 0.018    |
| 9       | 352        | 8042             | 0.006709  | 0.067    | 0.077    |
| 10      | 724        | 34815            | 0.017473  | 0.259    | 0.359    |
| 11      | 2680       | 164246           | 0.061291  | 1.542    | 1.684    |
| 12      | 14200      | 841989           | 0.240463  | 8.431    | 8.618    |
| 13      | 73712      | 4601178          | 1.113491  | 48.542   | 50.401   |
| 14      | 365596     | 26992957         | 6.557336  | 303.278  | 322.576  |
| 15      | 2279184    | 168849888        | 42.619426 | 2057.052 | 1979.343 |
-----------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Graph of walltime versus number of solutions tested" src="/images/python-vs-perl-ntested.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="pvp-winner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-winner-perl-for-small-problems-python-for-big-ones"&gt;The Winner: Perl for Small Problems, Python for Big Ones&lt;/h2&gt;
&lt;p&gt;It was not a big surprise to see that Perl and Python were nearly identical in their performance,
and it testament to the fact that interpreted scripting languages like Perl and Python operate at one speed,
and compiled code in C++ or Java operates at a completely different speed that is an order of magnitude faster 
(see the comparison of Perl and Java in a prior blog post).&lt;/p&gt;
&lt;p&gt;Perl and Python were close enough in performance that, although Perl came out ahead on smaller problems
and Python came out ahead on the biggest, a different CPU or platform, micro-optimizations, and various butterfly effects 
could easily turn the tables. &lt;/p&gt;
&lt;p&gt;&lt;a name="pvp-sources"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"N-Queens Problem". Rosetta Code, GNU Free Documentation License. Edited 6 March 2017. Accessed 21 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170320081421/http://rosettacode.org/wiki/N-queens_problem"&gt;https://web.archive.org/web/20170320081421/http://rosettacode.org/wiki/N-queens_problem&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"nqueens.py". Charles Reid. Github Gist, Github Inc. Edited 25 March 2017. Accessed 25 March 2017.
&amp;lt;&lt;a href="https://gist.github.com/charlesreid1/1a2ecb3a83284290d4a9daf747d0d7e4"&gt;https://gist.github.com/charlesreid1/1a2ecb3a83284290d4a9daf747d0d7e4&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"nqueens.pl". Charles Reid. Github Gist, Github Inc. Edited 20 March 2017. Accessed 23 March 2017.
&amp;lt;&lt;a href="https://gist.github.com/charlesreid1/4ce97a5f896ff1c89855a5d038d51535"&gt;https://gist.github.com/charlesreid1/4ce97a5f896ff1c89855a5d038d51535&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"The Python Profilers". Python 2.7.13 Documentation, Python Software Foundation. Updated 20 February 2017. Accessed 23 March 2017. 
&amp;lt;&lt;a href="https://docs.python.org/2/library/profile.html"&gt;https://docs.python.org/2/library/profile.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"line_profiler". Python Package Index, Python Software Foundation. Updated 20 October 2016. Accessed 23 March 2017.
&amp;lt;&lt;a href="https://pypi.python.org/pypi/line_profiler/"&gt;https://pypi.python.org/pypi/line_profiler/&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Github - rkern/line_profiler". rkern, Github Repository, Github Inc. Updated 20 October 2016. Accessed 23 March 2017.
&amp;lt;&lt;a href="https://github.com/rkern/line_profiler"&gt;https://github.com/rkern/line_profiler&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Python/Profiling". Charlesreid1.com wiki, Charles Reid. Edited 23 March 2017. Accessed 23 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170326031708/http://charlesreid1.com/wiki/Python/Profiling"&gt;https://web.archive.org/web/20170326031708/http://charlesreid1.com/wiki/Python/Profiling&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="python"></category><category term="perl"></category><category term="java"></category><category term="algorithms"></category><category term="recursion"></category><category term="n-queens"></category></entry><entry><title>Solving the Traveling Salesperson Problem with Java and Guava</title><link href="https://charlesreid1.github.io/solving-the-traveling-salesperson-problem-with-java-and-guava.html" rel="alternate"></link><published>2017-03-23T11:00:00-07:00</published><updated>2017-03-23T11:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-03-23:/solving-the-traveling-salesperson-problem-with-java-and-guava.html</id><summary type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-bkg"&gt;Background: Traveling Salesperson Problem (TSP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-graphs"&gt;Graphs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-nedges"&gt;Number of Edges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-bktk"&gt;Solution: Recursive Backtracking&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-guava"&gt;Solving the TSP with Java and Guava&lt;/a&gt; &lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-basic-guava"&gt;Basics of Guava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-guava-graphs"&gt;Guava Graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-guava-mutable-immutable"&gt;Guava Mutable vs Immutable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-importing-guava"&gt;Importing Guava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-tsp-class"&gt;TSP Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-node-class"&gt;Node Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-edge-class"&gt;Edge Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-building-graph"&gt;TSP Constructor and Building the Graph&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-constructor"&gt;Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-build-graph-method"&gt;Build Graph Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-solving-exploring"&gt;Solving and Exploring with Recursive Backtracking&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-solve"&gt;Solve Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-explore"&gt;Explore (Backtrack) Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-nextsteps"&gt;Next Steps: Timing and Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="tsp1-bkg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="background-traveling-salesperson-problem-tsp"&gt;Background: Traveling Salesperson Problem (TSP)&lt;/h2&gt;
&lt;p&gt;The traveling salesperson problem, or TSP, is a classic programming problem and an important one in computer science,
and applications in operations research and optimization.&lt;/p&gt;
&lt;p&gt;The idea is that â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-bkg"&gt;Background: Traveling Salesperson Problem (TSP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-graphs"&gt;Graphs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-nedges"&gt;Number of Edges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-bktk"&gt;Solution: Recursive Backtracking&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-guava"&gt;Solving the TSP with Java and Guava&lt;/a&gt; &lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-basic-guava"&gt;Basics of Guava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-guava-graphs"&gt;Guava Graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-guava-mutable-immutable"&gt;Guava Mutable vs Immutable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-importing-guava"&gt;Importing Guava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-tsp-class"&gt;TSP Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-node-class"&gt;Node Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-edge-class"&gt;Edge Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-building-graph"&gt;TSP Constructor and Building the Graph&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-constructor"&gt;Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-build-graph-method"&gt;Build Graph Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-solving-exploring"&gt;Solving and Exploring with Recursive Backtracking&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-solve"&gt;Solve Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-explore"&gt;Explore (Backtrack) Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-nextsteps"&gt;Next Steps: Timing and Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="tsp1-bkg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="background-traveling-salesperson-problem-tsp"&gt;Background: Traveling Salesperson Problem (TSP)&lt;/h2&gt;
&lt;p&gt;The traveling salesperson problem, or TSP, is a classic programming problem and an important one in computer science,
and applications in operations research and optimization.&lt;/p&gt;
&lt;p&gt;The idea is that you have a set of &lt;span class="math"&gt;\(N\)&lt;/span&gt; cities, connected by various roads, each with their own distances.
That is, we have a set of &lt;span class="math"&gt;\(E\)&lt;/span&gt; roads, each with their own distance &lt;span class="math"&gt;\(d_j, j=1 \dots E\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;The question is, what is the shortest path that a salesperson can take to visit all &lt;span class="math"&gt;\(N\)&lt;/span&gt; cities, traveling the shortest possible total distance
and visiting each city once and only once?&lt;/p&gt;
&lt;p&gt;Like the N queens problem, the traveling salesperson problem is a good candidate for recursive backtracking.
Also like the N queens problem, there are certain shortcuts we can take to trim down the possibilities we explore.&lt;/p&gt;
&lt;p&gt;Computer science pages on Wikipedia are generally pretty high in quality, and the &lt;a href="https://en.wikipedia.org/wiki/Traveling_salesman_problem"&gt;traveling salesman problem&lt;/a&gt;
page is no exception. It give a very thorough overview of the important aspects of the problem.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp1-graphs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="graphs"&gt;Graphs&lt;/h2&gt;
&lt;p&gt;Graphs are mathematical objects first utilized by Leonhard Euler to solve the
&lt;a href="https://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg"&gt;Seven Bridges of KÃ¶ningsberg&lt;/a&gt; problem.
The concept is simple: you have a bunch of dots connected with lines.&lt;/p&gt;
&lt;p&gt;The dots are called nodes, and the lines are called edges.&lt;/p&gt;
&lt;p&gt;Graphs can be directed, meaning the edges are like arrows with particular directions, or undirected, 
meaning the edges simply represent a connection between the two nodes.&lt;/p&gt;
&lt;p&gt;Here is an example of a graph with five nodes, with each edge labeled with its distance:&lt;/p&gt;
&lt;p&gt;&lt;img style="background:#fff;" alt="A basic graph with five nodes" src="/images/basic-graph.png" /&gt;&lt;/p&gt;
&lt;p&gt;We will skip over a vast amount of detail about graph theory that is both fascinating and useful,
but M. E. J. Newman's paper &lt;a href="http://www-personal.umich.edu/~mejn/courses/2004/cscs535/review.pdf"&gt;"The structure and function of complex networks"&lt;/a&gt; 
(self-published and written as a course review) is an extremely detailed
and academically rigorous overview of just about every important detail of the field.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp1-nedges"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="number-of-edges"&gt;Number of Edges&lt;/h3&gt;
&lt;p&gt;The maximum number of roads or edges &lt;span class="math"&gt;\(E\)&lt;/span&gt; depends on the number of nodes as &lt;span class="math"&gt;\(E = \dfrac{N(N-1)}{2}\)&lt;/span&gt;, which is derived from
the formula for 2 choose N (because edges connect 2 nodes). For k choose N, the formula is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{N,k} = \dfrac{N!}{k! (N-k)!}
$$&lt;/div&gt;
&lt;p&gt;and for 2 choose N, it is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{N,2} = \dfrac{N(N-1)}{2}
$$&lt;/div&gt;
&lt;p&gt;This is the maximum number of undirected edges in a graph. 
If the graph is directed, then order matters (the edgge &lt;code&gt;A-&amp;gt;B&lt;/code&gt; is no longer the same as &lt;code&gt;B-&amp;gt;A&lt;/code&gt;),
so we have to use the formula for k pick N, &lt;/p&gt;
&lt;div class="math"&gt;$$
P_{N,k} = \dfrac{N!}{(N-k)!}
$$&lt;/div&gt;
&lt;p&gt;which results in&lt;/p&gt;
&lt;div class="math"&gt;$$
P_{N,2} = N (N-1)
$$&lt;/div&gt;
&lt;p&gt;possible edges.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp1-nsolutions"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="number-of-solutions"&gt;Number of Solutions&lt;/h3&gt;
&lt;p&gt;Naturally, the question of the total solution space arises.
Assuming the graph of cities is perfectly connected (representing an upper limit on problem complexity),
how does the number of solutions change as the number of nodes increases?&lt;/p&gt;
&lt;p&gt;We can start with a trivial graph, and count the number of possible paths
through the entire graph, starting with a specific node.
This is equivalent to counting permutations of a string that start with a specific character.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ABCDE
ABCED
ABDCE
ABDEC
ABECD
ABEDC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For a string of length &lt;span class="math"&gt;\(N\)&lt;/span&gt;, the string has &lt;span class="math"&gt;\((N-1)!\)&lt;/span&gt; possible permutations that start with a specific character.
Therefore, as the number of nodes &lt;span class="math"&gt;\(N\)&lt;/span&gt; increases, the number of possible solutions increases as &lt;span class="math"&gt;\((N-1)!\)&lt;/span&gt;, 
making the complexity class of the problem &lt;span class="math"&gt;\(O(N!)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp1-bktk"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="solution-recursive-backtracking"&gt;Solution: Recursive Backtracking&lt;/h2&gt;
&lt;p&gt;Here is pseudocode for a recursive backtracking method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;explore(neighbors):

    if(no more unvisited neighbors):
        # This is the base case.
        if total distance is less than current minimum:
            save path and new minimum

    else:
        # This is the recursive case.
        for neighbor in unvisited neighbors:
            visit neighbor
            explore(new_neighbors)
            unvisit neighbor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Care is needed to prevent infinite loops in which the traveling salesperson goes back and forth between two cities.
As we traverse the graph, we can mark each node as visited, to ensure we don't revisit nodes and go in circles.&lt;/p&gt;
&lt;p&gt;Nodes can be implemented as a &lt;code&gt;Node&lt;/code&gt; object in Java, with each Node having a few characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String label&lt;/li&gt;
&lt;li&gt;Container of Node pointers pointing to neighbors&lt;/li&gt;
&lt;li&gt;Boolean flag: have we visited this node already?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Likewise, the graph edges can be represented using integers or doubles.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp1-guava"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="solving-the-tsp-with-java-and-guava"&gt;Solving the TSP with Java and Guava&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/google/guava"&gt;Google Guava&lt;/a&gt; is a library of high-performance data containers in Java.
The library provides some useful graph objects that we can use to easily solve the TSP on a graph.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp1-basic-guava"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="basics-of-guava"&gt;Basics of Guava&lt;/h3&gt;
&lt;p&gt;Install and use Guava by visiting the &lt;a href="https://github.com/google/guava"&gt;Guava project on Github&lt;/a&gt;, 
find the page for their latest release (&lt;a href="https://github.com/google/guava/wiki/Release21"&gt;here is version 21.0&lt;/a&gt;), 
and getting the latest &lt;code&gt;.jar&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;To compile with the jar file, you can either utilize an IDE like &lt;a href="http://www.eclipse.org/"&gt;Eclipse&lt;/a&gt; or &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ&lt;/a&gt;,
or you can compile from the command line, specifying the class path using the &lt;code&gt;-cp&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ javac -cp &lt;span class="s1"&gt;&amp;#39;.:/path/to/guava/jars/guava-21.0.jar&amp;#39;&lt;/span&gt; TSP.java
$ java -cp &lt;span class="s1"&gt;&amp;#39;.:/path/to/guava/jars/guava-21.0.jar&amp;#39;&lt;/span&gt; TSP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;More information can be found on the charlesreid1.com wiki: &lt;a href="https://charlesreid1.com/wiki/Guava"&gt;Guava&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp1-guava-graphs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="guava-graphs"&gt;Guava Graphs&lt;/h3&gt;
&lt;p&gt;Graph objects in Guava are implemented using a set of objects: Graphs, ValueGraphs, and Networks.&lt;/p&gt;
&lt;p&gt;Graph objects treat edges as very simple and assumes they contain no information and simply link nodes. &lt;/p&gt;
&lt;p&gt;ValueGraphs associate a single non-unique value with each edge on the graph. This can also be used to solve the TSP.&lt;/p&gt;
&lt;p&gt;Network objects treat nodes and edges both as objects, and has the ability to deal with more complex edges: model multi-edges, repeated edges, directed edges, etc.&lt;/p&gt;
&lt;p&gt;We will use a Network object and design our own graph Node and Edge objects.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/guava/wiki/GraphsExplained#building-graph-instances"&gt;Link to Guava wiki on how to build graph instances&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/graph/Network.html"&gt;Guava API Documentation: Network&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/graph/Graph.html"&gt;Guava API Documentation: Graph&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/graph/ValueGraph.html"&gt;Guava API Documentation: ValueGraph&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp1-guava-mutable-immutable"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="guava-mutable-vs-immutable"&gt;Guava Mutable vs Immutable&lt;/h3&gt;
&lt;p&gt;Guava makes a distinction between mutable graphs, which can be modified, and immutable graphs, which cannot.
Immutability provides some safety and assurances to programmers, and can make things faster.&lt;/p&gt;
&lt;p&gt;When we construct the network, we need a mutable graph to modify (add nodes and edges). 
But once the network is constructed, it is finished: we don't need to modify the network while we're solving the problem.&lt;/p&gt;
&lt;p&gt;Therefore, we construct a mutable network, assemble the graph for the given problem, and copy it into an immutable graph.
We then use the immutable graph to access the graph while solving.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp1-importing-guava"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="importing-guava"&gt;Importing Guava&lt;/h3&gt;
&lt;p&gt;Starting with import statements, we'll use a couple of objects from the Java API, and from Google's Guava library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.TreeMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Arrays&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.graph.Network&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.graph.NetworkBuilder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.graph.ImmutableNetwork&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.graph.MutableNetwork&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For more info on why we don't just do the lazier&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.google.common.graph.*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;see &lt;a href="https://google.github.io/styleguide/javaguide.html"&gt;Google's Java style guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp1-tsp-class"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="tsp-class"&gt;TSP Class&lt;/h3&gt;
&lt;p&gt;Let's lay out the TSP class definition. This class is simple, and wraps a few pieces of data:
the current route, the current distance, and the minimum distance.
Note that we could also save the solution in a container, instead of printing it,
by defining a static class to hold solutions, but we'll keep it simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cm"&gt;/** This class solves the traveling salesman problem on a graph. */&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TSP&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// The actual graph of cities&lt;/span&gt;
    &lt;span class="n"&gt;ImmutableNetwork&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;graphSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Storage variables used when searching for a solution &lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="c1"&gt;// store the route&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;this_distance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// store the total distance&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;min_distance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// store the shortest path found so far&lt;/span&gt;

    &lt;span class="cm"&gt;/** Defaut constructor generates the graph and initializes storage variables */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;TSP&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/** This method actually constructs the graph. */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ImmutableNetwork&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;buildGraph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/** Public solve method will call the recursive backtracking method to search for solutions on the graph */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/** Recursive backtracking method: explore possible solutions starting at this node, having made nchoices */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;explore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nchoices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/** Print out solution */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printSolution&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/** Print out failed path */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printFailure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="tsp1-node-class"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="node-class-cities"&gt;Node Class (Cities)&lt;/h3&gt;
&lt;p&gt;Now we can define the Node class to represent cities on the graph.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;visited&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Helps us to keep track of where we&amp;#39;ve been on the graph&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visited&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visited&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;unvisit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visited&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Like a lined list node, we want to keep graph nodes simple. 
Note that Nodes don't need to store information about their neighbors.
That's what we'll use Google Guava for!&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp1-edge-class"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="edge-class-roads"&gt;Edge Class (Roads)&lt;/h3&gt;
&lt;p&gt;Edge classes are even simpler, wrapping a single integer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Edge&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// For convenience in construction process. Not necessary.&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that left and right are used for convenience only during the graph construction process.
Like the nodes, the edges don't need to know who their neighbors are, 
since that's what the Google Guava graph object will take care of.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp1-building-graph"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="tsp-constructor-and-building-the-graph"&gt;TSP Constructor and Building the Graph&lt;/h2&gt;
&lt;p&gt;&lt;a name="tsp1-constructor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="constructor"&gt;Constructor&lt;/h3&gt;
&lt;p&gt;The TSP class constructor should do a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Construct a graph, with a given set of cities and distances.&lt;/li&gt;
&lt;li&gt;Initialize arrays and cumulative variables that will be used by the backtracking method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The actual graph construction process is put into another function called &lt;code&gt;buildGraph()&lt;/code&gt;,
so really the constructor just calls a function and then does #2.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="cm"&gt;/** Defaut constructor generates the graph and initializes storage variables */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;TSP&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Build the graph&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buildGraph&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;graphSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Initialize route variable, shared across recursive method instances&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;graphSize&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Initialize distance variable, shared across recursive method instances&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// negative min means uninitialized&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="tsp1-build-graph-method"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="build-graph-method"&gt;Build Graph Method&lt;/h3&gt;
&lt;p&gt;Now we actually use Guava's Immutable Network object,
which takes two templated types, T1 and T2, 
which correspond to the node types and the edge types.&lt;/p&gt;
&lt;p&gt;We use a NetworkBuilder object to build the Network 
(an example of the factory template).
This returns a MutableNetwork of Node and Edge objects,
which we can then connect up using some built-in methods.&lt;/p&gt;
&lt;p&gt;Here are some built-in methods available for a MutableNetwork:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    addEdge(node1, node2, edge)
    addNode(node1)
    removeEdge(edge)
    removeNode(node)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now here is the construction of the graph, using the Google Guava library.
There are two loops here: one for cities, and one for edges.
In the loop over each city,we create a new node and add it to the graph.
To be able to easily retrieve the Nodes we have created, 
we also store references to the nodes in a map called &lt;code&gt;all_nodes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When we construct edges, we use the map of all nodes &lt;code&gt;all_nodes&lt;/code&gt; to get references to the Node objects
that correspond to a label. That way, if an edge connects "A" with "B" at a distance of 24, 
we can turn "A" and "B" into references to the Node objects A and B.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="cm"&gt;/** This method actually constructs the graph. */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ImmutableNetwork&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;buildGraph&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// MutableNetwork is an interface requiring a type for nodes and a type for edges&lt;/span&gt;
        &lt;span class="n"&gt;MutableNetwork&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;roads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NetworkBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;undirected&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Construct Nodes for cities,&lt;/span&gt;
        &lt;span class="c1"&gt;// and add them to a map&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;cities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;D&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;E&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;all_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TreeMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Add nodes to map&lt;/span&gt;
            &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;all_nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// Add nodes to network&lt;/span&gt;
            &lt;span class="n"&gt;roads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Construct Edges for roads,&lt;/span&gt;
        &lt;span class="c1"&gt;// and add them to a map&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;distances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A:B:24&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A:C:5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A:D:20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A:E:18&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;B:C:10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;B:D:20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C:D:4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C:E:28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;D:E:3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;all_edges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TreeMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;distances&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Parse out (city1):(city2):(distance)&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;splitresult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distances&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;splitresult&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;splitresult&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;splitresult&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// Add edges to map&lt;/span&gt;
            &lt;span class="n"&gt;Edge&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;all_edges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// Add edges to network&lt;/span&gt;
            &lt;span class="n"&gt;roads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addEdge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;all_nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Freeze the network&lt;/span&gt;
        &lt;span class="n"&gt;ImmutableNetwork&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Edge&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;frozen_roads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImmutableNetwork&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;copyOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roads&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;frozen_roads&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="tsp1-recursive-backtracking"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="solving-and-exploring-with-recursive-backtracking"&gt;Solving and Exploring with Recursive Backtracking&lt;/h2&gt;
&lt;h3 id="solve-method"&gt;Solve Method&lt;/h3&gt;
&lt;p&gt;The structure of some recursive backtracking problems is to create a public and a private interface,
with the public interface taking no parameters or a single parameter that the user will know, 
and the private method taking a parameter specific to the implementation. That's the pattern we use here.&lt;/p&gt;
&lt;p&gt;The solve method sets up the problem by picking a starting node (in this case, an arbitrary starting node).
It then gets a reference to that node on the graph, and calls the recursive &lt;code&gt;explore()&lt;/code&gt; method,
which begins the recursive backtracking method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="cm"&gt;/** Public solve method will call the recursive backtracking method to search for solutions on the graph */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/** To solve the traveling salesman problem:&lt;/span&gt;
&lt;span class="cm"&gt;         * Set up the graph, choose a starting node, then call the recursive backtracking method and pass it the starting node.&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;

        &lt;span class="c1"&gt;// We need to pass a starting node to recursive backtracking method&lt;/span&gt;
        &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;startNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Grab a node, any node...&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;startNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Visit the first node&lt;/span&gt;
        &lt;span class="n"&gt;startNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Add first node to the route&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;startNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Pass the number of choices made&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nchoices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Recursive backtracking&lt;/span&gt;
        &lt;span class="n"&gt;explore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;startNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nchoices&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="explore-backtrack-method"&gt;Explore (Backtrack) Method&lt;/h3&gt;
&lt;p&gt;And now, on to the recursive backtracking method.&lt;/p&gt;
&lt;p&gt;The method takes as a parameter which node we are currently on and the number of cities we have visited.
As multiple explore methods choose different paths, they pass references to different node objects in the graph,
and they pass different values of &lt;code&gt;nchoices&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The methods, when they do not encounter a solution, will choose a next node and call the explore method on it.
Each instance of the explore method marks nodes as visited or unvisited on the same shared graph object.
This allows instances of the function to share information about their choices with other instances of the function.&lt;/p&gt;
&lt;p&gt;All recursive methods must consist of a base case and a recursive case:&lt;/p&gt;
&lt;p&gt;Base case:
- We've visited as many cities as are on the graph.
- Check if this is a new solution (distance less than the current minimum).&lt;/p&gt;
&lt;p&gt;Recursive case:
- Make a choice (mark node as visited, add city to route).
- Explore the consequences (recursive call).
- Unmake the choice (mark node as unvisited, remove city from route).
- Move on to next choice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="cm"&gt;/** Recursive backtracking method: explore possible solutions starting at this node, having made nchoices */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;explore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nchoices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;         * Solution strategy: recursive backtracking.&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nchoices&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;graphSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// &lt;/span&gt;
            &lt;span class="c1"&gt;// BASE CASE&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// if this_distance &amp;lt; min_distance, this is our new minimum distance&lt;/span&gt;
                &lt;span class="c1"&gt;// if min_distance &amp;lt; 0, this is our first minimium distance&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;printSolution&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printFailure&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//&lt;/span&gt;
            &lt;span class="c1"&gt;// RECURSIVE CASE&lt;/span&gt;
            &lt;span class="c1"&gt;//  &lt;/span&gt;
            &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;neighbors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;adjacentNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="n"&gt;neighbor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;neighbors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visited&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;distance_btwn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Edge&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;edgesConnecting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;distance_btwn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;

                    &lt;span class="c1"&gt;// Make a choice&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nchoices&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;distance_btwn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="c1"&gt;// Explore the consequences&lt;/span&gt;
                    &lt;span class="n"&gt;explore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;nchoices&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                    &lt;span class="c1"&gt;// Unmake the choice&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nchoices&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;unvisit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this_distance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;distance_btwn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="c1"&gt;// Move on to the next choice (continue loop)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;               
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// End base/recursive case&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="main-and-utility-methods"&gt;Main and Utility Methods&lt;/h2&gt;
&lt;p&gt;Last but not least, add the method that actually calls the TSP object's solve method,
and define what to do when we encounter a new solution.
This program just prints out new solutions as they are found, 
but you could also add them to a map (map routes to distances),
or quietly keep track of the shortest path and not print it until the end.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TSP&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="n"&gt;TSP&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TSP&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Additionally, we may want to perform a certain action when we find a new minimum distance.
Note that this method may be called multiple times during the solution procedure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="cm"&gt;/** Print out solution */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printSolution&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@@@@@@@@@@\tNEW SOLUTION\t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Route: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                          &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\tDistance: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min_distance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/** Do nothing with failed path */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printFailure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Nope&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="program-output"&gt;Program Output&lt;/h2&gt;
&lt;h3 id="initial-graph-structure-and-solution"&gt;Initial Graph Structure and Solution&lt;/h3&gt;
&lt;p&gt;In the construction of the graph, we defined our graph as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;distances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A:B:24&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A:C:5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A:D:20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A:E:18&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;B:C:10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;B:D:20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C:D:4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C:E:28&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;D:E:3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the graph that we're solving the TSP problem on.
Here are the results when the program is compiled and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ javac -cp &amp;#39;.:/Users/charles/codes/guava/jars/guava-21.0.jar&amp;#39; TSP.java

$ java -cp &amp;#39;.:/Users/charles/codes/guava/jars/guava-21.0.jar&amp;#39; TSP

@@@@@@@@@@  NEW SOLUTION    Route: [A, B, C, D, E]  Distance: 41.0
@@@@@@@@@@  NEW SOLUTION    Route: [A, C, B, D, E]  Distance: 38.0
@@@@@@@@@@  NEW SOLUTION    Route: [A, E, D, C, B]  Distance: 35.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The answers given were satisfactory and correct, so we moved on to 
a more advanced graph construction process that utilized a static class
to generate random, fully-connected graphs. This also implemented 
additional functionality to export to Dot format. This static RandomGraph
class will be covered in later post.&lt;/p&gt;
&lt;p&gt;Here is the resulting output of the random graph generator for a 6-node TSP problem,
with the sequence of shortest routes found by the algorithm:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Six-node traveling salesperson problem" src="graphviz_tsp_6.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;java -cp &amp;#39;.:/Users/charles/codes/guava/jars/guava-21.0.jar&amp;#39; TSP 6 
------------------- TSP ----------------------
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 3, 2, 4, 5]   Distance: 291.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 3, 5, 4, 2]   Distance: 249.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 2, 4, 3, 5]   Distance: 246.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 5, 3, 4, 2]   Distance: 203.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 3, 5, 1, 4, 2]   Distance: 178.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 2, 4, 1, 5, 3]   Distance: 163.0
 Done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And for 12 nodes, a problem twice that size, here is the graph and corresponding output:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Twelve-node traveling salesperson problem" src="graphviz_tsp_12.png"&gt;&lt;/p&gt;
&lt;p&gt;and the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;java -cp &amp;#39;.:/Users/charles/codes/guava/jars/guava-21.0.jar&amp;#39; TSP 12 
------------------- TSP Version 2: The Pessimistic Algorithm ----------------------
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 2, 9, 10, 5, 3, 6, 8, 11]   Distance: 585.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 2, 9, 10, 5, 3, 8, 11, 6]   Distance: 558.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 2, 9, 10, 5, 3, 8, 6, 11]   Distance: 522.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 2, 9, 10, 6, 5, 3, 8, 11]   Distance: 499.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 2, 9, 10, 11, 8, 6, 5, 3]   Distance: 460.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 2, 9, 10, 11, 6, 8, 3, 5]   Distance: 459.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 2, 9, 11, 8, 10, 6, 5, 3]   Distance: 449.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 2, 9, 11, 10, 6, 8, 3, 5]   Distance: 419.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 2, 9, 11, 10, 8, 6, 5, 3]   Distance: 408.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 2, 9, 3, 5, 6, 8, 10, 11]   Distance: 402.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 2, 3, 9, 11, 10, 8, 6, 5]   Distance: 385.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 11, 10, 8, 6, 2, 9, 3, 5]   Distance: 377.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 5, 3, 9, 11, 10, 8, 6, 2]   Distance: 374.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 4, 5, 6, 8, 10, 11, 9, 3, 2]   Distance: 371.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 9, 3, 5, 4, 11, 10, 8, 6, 2]   Distance: 363.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 9, 3, 2, 6, 8, 10, 11, 4, 5]   Distance: 352.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 3, 5, 4, 11, 9, 2, 6, 8, 10]   Distance: 350.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 3, 2, 9, 11, 4, 5, 6, 8, 10]   Distance: 347.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 3, 9, 2, 4, 11, 10, 8, 6, 5]   Distance: 345.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 3, 9, 2, 6, 8, 10, 11, 4, 5]   Distance: 323.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 5, 3, 9, 2, 6, 8, 10, 11, 4]   Distance: 322.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 5, 4, 2, 3, 9, 11, 10, 8, 6]   Distance: 316.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 5, 4, 2, 6, 8, 10, 11, 9, 3]   Distance: 313.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 5, 4, 11, 9, 3, 2, 6, 8, 10]   Distance: 306.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 7, 5, 4, 11, 10, 8, 6, 2, 9, 3]   Distance: 302.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 10, 11, 4, 5, 7, 3, 9, 2, 6, 8]   Distance: 289.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 10, 8, 6, 2, 9, 3, 7, 5, 4, 11]   Distance: 286.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 10, 8, 6, 2, 3, 9, 11, 4, 5, 7]   Distance: 283.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 8, 6, 10, 11, 4, 2, 9, 3, 7, 5]   Distance: 274.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 8, 6, 10, 11, 4, 5, 7, 3, 9, 2]   Distance: 260.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 4, 2, 6, 8, 10, 11, 9, 3, 7, 5]   Distance: 259.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 4, 11, 10, 8, 6, 5, 7, 3, 9, 2]   Distance: 256.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 4, 11, 10, 8, 6, 2, 9, 3, 7, 5]   Distance: 248.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 1, 4, 5, 7, 3, 9, 11, 10, 8, 6, 2]   Distance: 245.0
!!!!!YAY!!!!!!  NEW SOLUTION    Route: [0, 7, 5, 4, 1, 8, 6, 10, 11, 9, 3, 2]   Distance: 236.0
 Done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that these random graphs are fully connected - every node connects to every other node.
Among the many interesting aspects of the problem, one of them is the impact of connectivity
on the solution time. &lt;/p&gt;
&lt;p&gt;Another aspect of the problem is the topology of the network, and exploring how 
a larger number of unconnected nodes, or groups of nodes clustered together but isolated from one another,
affect the final solution time and the final route.&lt;/p&gt;
&lt;p&gt;But before get to that, we have some other things to work out.&lt;/p&gt;
&lt;h2 id="next-steps-timing-and-profiling"&gt;Next Steps: Timing and Profiling&lt;/h2&gt;
&lt;p&gt;This post described a working implementation of a recursive backtracking solution 
to the traveling salesperson problem on a graph. This is a naive solution, however,
and in the next few posts about the traveling salesperson problem we'll focus on using
timing and profiling tools for Java to profile this Guava program, identify bottlenecks, 
and speed it up. In fact, there is one small tweak we can make to the algorithm covered above
that will improve the performance by orders of magnitude. But more on that in a future post.&lt;/p&gt;
&lt;p&gt;&lt;a name="tsp1-sources"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"Traveling Salesman Problem". Wikipedia, the Free Encyclopedia. The Wikimedia Foundation. Edited 12 March 2017. Accessed 23 March 2017. 
&amp;lt;&lt;a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem"&gt;https://en.wikipedia.org/wiki/Travelling_salesman_problem&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Seven Bridges of KÃ¶nigsberg". Wikipedia, the Free Encyclopedia. The Wikimedia Foundation. Edited 11 March 2017. Accessed 23 March 2017.
&amp;lt;&lt;a href="https://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg"&gt;https://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"The structure and function of complex networks". M. E. J. Newman. 
&amp;lt;&lt;a href="http://www-personal.umich.edu/~mejn/courses/2004/cscs535/review.pdf"&gt;http://www-personal.umich.edu/~mejn/courses/2004/cscs535/review.pdf&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Google Guava - Github". Alphabet, Inc. Released under the Apache 2.0 License. Accessed 20 March 2017.
&amp;lt;&lt;a href="https://github.com/google/guava"&gt;https://github.com/google/guava&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Guava". Charles Reid. Edited 23 March 2017. Accessed 23 March 2017.
&amp;lt;&lt;a href="https://www.charlesreid1.com/wiki/Guava"&gt;https://www.charlesreid1.com/wiki/Guava&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Graphs Explained". Google Guava Wiki. Accessed 23 March 2017.
&amp;lt;&lt;a href="https://github.com/google/guava/wiki/GraphsExplained"&gt;https://github.com/google/guava/wiki/GraphsExplained&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Network". Google Guava API Documentation. Accessed 23 March 2017.
&amp;lt;&lt;a href="http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/graph/Network.html"&gt;http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/graph/Network.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Graph". Google Guava API Documentation. Accessed 23 March 2017.
&amp;lt;&lt;a href="http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/graph/Graph.html"&gt;http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/graph/Graph.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Value Graph". Google Guava API Documentation. Accessed 23 March 2017.
&amp;lt;&lt;a href="http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/graph/ValueGraph.html"&gt;http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/graph/ValueGraph.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Google Java Style Guide". Alphabet Inc. Accessed 21 March 2017.
&amp;lt;&lt;a href="https://google.github.io/styleguide/javaguide.html"&gt;https://google.github.io/styleguide/javaguide.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Java"></category><category term="computer science"></category><category term="guava"></category><category term="graph"></category><category term="TSP"></category></entry><entry><title>Perl vs. Java: N Queens Problem</title><link href="https://charlesreid1.github.io/perl-vs-java-n-queens-problem.html" rel="alternate"></link><published>2017-03-22T22:00:00-07:00</published><updated>2017-03-22T22:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-03-22:/perl-vs-java-n-queens-problem.html</id><summary type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pvj-background"&gt;Background: Huh?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-nqueensproblem"&gt;N Queens Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-nqueenssoln"&gt;N Queens Solution&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pvj-perlsoln"&gt;Perl Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-javasoln"&gt;Java Solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-h2hnqueens"&gt;Head to Head: Walltime vs. Number of Queens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-perlprof"&gt;Perl Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-perlprofresults"&gt;Perl Profiling Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-javaprof"&gt;Java Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-javaprofresults"&gt;Java Profiling Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-h2hntested"&gt;Head to Head: Walltime vs. Number of Solutions Tested&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-applesoranges"&gt;Apples and Oranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post, we describe an implementation of the &lt;a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle"&gt;N Queens Problem&lt;/a&gt;,
which is a puzzle related to optimization, combinatorics, and recursive backtracking.
The puzzle asks: how many configurations are there for placing 8 queens on a chessboard
such that no queen can attack any othr queen?&lt;/p&gt;
&lt;p&gt;This problem was implemented in Perl â€¦&lt;/p&gt;</summary><content type="html">&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pvj-background"&gt;Background: Huh?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-nqueensproblem"&gt;N Queens Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-nqueenssoln"&gt;N Queens Solution&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pvj-perlsoln"&gt;Perl Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-javasoln"&gt;Java Solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-h2hnqueens"&gt;Head to Head: Walltime vs. Number of Queens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-perlprof"&gt;Perl Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-perlprofresults"&gt;Perl Profiling Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-javaprof"&gt;Java Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-javaprofresults"&gt;Java Profiling Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-h2hntested"&gt;Head to Head: Walltime vs. Number of Solutions Tested&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-applesoranges"&gt;Apples and Oranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post, we describe an implementation of the &lt;a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle"&gt;N Queens Problem&lt;/a&gt;,
which is a puzzle related to optimization, combinatorics, and recursive backtracking.
The puzzle asks: how many configurations are there for placing 8 queens on a chessboard
such that no queen can attack any othr queen?&lt;/p&gt;
&lt;p&gt;This problem was implemented in Perl and in Java, the solution results were timed,
and the codes were profiled. While Perl is an interpreted language, and is therefore
fully expeted to be much slower than Java (which indeed it is), it is still useful
to compare the performance between these two codes to gain an appreciation for 
the advantages and disadvantages to both approaches.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvj-background"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="background-huh"&gt;Background: Huh?&lt;/h2&gt;
&lt;p&gt;Recently I read an &lt;a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html"&gt;(11 year old) article&lt;/a&gt; 
by Steve Yegge entitled "Execution in the Kingdom of Nouns." In it, Steve describes the way that in Java, 
"Classes are really the only modeling tool Java provides you. 
So whenever a new idea occurs to you, you have to sculpt it or wrap it or smash at it until it becomes a thing, 
even if it began life as an action, a process, or any other non-'thing' concept."&lt;/p&gt;
&lt;p&gt;The article inspired me to try on this verb-oriented mode of thinking in a more... active way. 
Prior experiences with OCaml were confusing, and Haskell continues to evade me,
so it was easier to dust off old Perl skills than learn enough Haskell or Ocaml to solve N queens problem.
Perl was the next-closest verb-oriented "scripting" language.&lt;/p&gt;
&lt;p&gt;I was also familiar with the N queens problem, since I'm a programming instructor (I'll let you guess which language),
and it seemed like a nice problem for both noun-based and verb-based approaches. 
But it also meant I had to learn enough Perl to solve the N queens problem.&lt;/p&gt;
&lt;p&gt;...or, use the &lt;a href="http://rosettacode.org/wiki/N-queens_problem#Perl"&gt;Perl solution to the N queens problem from Rosetta Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Right...&lt;/p&gt;
&lt;p&gt;So here's the plan: study a verb-oriented implementation of this canonical, deceptively subtle programming problem in Perl; 
translate it into a verb-oriented Java program; and run the two head-to-head, using a profiler to understand the results.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvj-nqueensproblem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="n-queens-problem"&gt;N Queens Problem&lt;/h2&gt;
&lt;p&gt;The N queens problem predates computers - it's a chess puzzle that asks: how many ways can you place 8 queens on a chessboard
such that no queen can attack any other queen? &lt;/p&gt;
&lt;p&gt;The number of possible configurations of queens on a chessboard is 64 pick 8, or&lt;/p&gt;
&lt;div class="math"&gt;$$
\dfrac{64!}{(64-8)!} = 64 \times 63 \times \dots \times 57 \times 56 = 178,462,987,637,760 
$$&lt;/div&gt;
&lt;p&gt;Here's that calculation in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; np.prod(range(64-8+1,64+1))
178462987637760
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's bigger than the net worth of most U.S. Presidents!&lt;/p&gt;
&lt;p&gt;If we implemented a dumb brute-force solution that tested each of these configurations, we'd be waiting until the heat death of the universe.&lt;/p&gt;
&lt;p&gt;Fortunately, as we place queens on the board we can check if it is an invalid placement, and rule out any configurations that would follow from that choice.
As long as we are making our choices in an orderly fashion, this enables us to rule out most of the nearly 10 quadrillion possibilities. 
If we place queens column-by-column and rule out rows where there are already queens, by keeping track of where queens have already been placed, 
we can reduce the number of possible rows by 1 with each queen placed. The first queen has 8 possible rows where it can be placed,
the second queen has 7 possible rows (excluding the row that the first queen was placed on), and so on. The number of possiblities is:&lt;/p&gt;
&lt;div class="math"&gt;$$
8! = 8 \times 7 \times \dots \times 2 \times 1 = 40,320
$$&lt;/div&gt;
&lt;p&gt;A big improvement! Here's that calculation in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;40320&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This still-large number of possibilities can be further reduced by using the same procedure, but checking for invalid rows based on the diagonal squares that each already-placed queen attacks.
This covers each precondition for a solved board, and allows the base case of the recursive backtracking method to be as simple as,
"If you've reached this point, you have a valid solution. Add it to the solutions bucket."&lt;/p&gt;
&lt;p&gt;Now, let's get to the solution algorithm.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvj-nqueenssoln"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="n-queens-solution"&gt;N Queens Solution&lt;/h2&gt;
&lt;p&gt;As a recap, we dusted off our Perl skills to utilize an N queens solution in Perl from &lt;a href="http://rosettacode.org/wiki/N-queens_problem#Perl"&gt;Rosetta Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's the pseudocode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;explore(column):
    if last column:
        # base case
        add to solutions
    else:
        # recursive case
        for each row:
            if this is a safe row:
                place queen on this row
                explore(column+1)
                remove queen from this row
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Both codes use integer arrays to keep track of where queens are placed. 
Solutions are stringified version of these arrays, consisting of 8 digits.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvj-perlsoln"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="perl-solution"&gt;Perl Solution&lt;/h3&gt;
&lt;p&gt;After looking at the Rosetta Code solution for a (long) while and marking it up with comments to understand what it was doing, 
I decided it was precisely the kind of verb-oriented solution I wanted to test out to compare Perl and Java.
It uses no objects, but instead relies on fast built-in data structures (arrays), 
for loop expansion (only &lt;code&gt;for my $i (1 .. $N)&lt;/code&gt;, no &lt;code&gt;for($i=1; $i&amp;lt;=$N; $i++)&lt;/code&gt;),
and basic integer math. The cost of solving the problem comes down to basic indexing and array access.&lt;/p&gt;
&lt;p&gt;This is the kind of solution I imagine a human calculator like Alan Turing or John Von Neuman looking at, nodding, and saying, "Makes sense! (And by the way the answer is 92.)"&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/charlesreid1/4ce97a5f896ff1c89855a5d038d51535"&gt;Github gist: nqueens.pl&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="c1"&gt;# Solve the N queens problem&lt;/span&gt;
&lt;span class="c1"&gt;# using recursive backtracking.&lt;/span&gt;
&lt;span class="c1"&gt;# &lt;/span&gt;
&lt;span class="c1"&gt;# Author: Charles Reid&lt;/span&gt;
&lt;span class="c1"&gt;# Date: March 2017&lt;/span&gt;

&lt;span class="c1"&gt;# Create an array to store solutions&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@solutions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Create an array to store where queens have been placed&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@queens&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Mark the rows already used (useful for lookup)&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@occupied&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# explore() implements a recursive, depth-first backtracking method&lt;/span&gt;
&lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="nf"&gt;explore&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="c1"&gt;# Parameters:&lt;/span&gt;
    &lt;span class="c1"&gt;#   depth : this is the argument passed by the user&lt;/span&gt;

    &lt;span class="c1"&gt;# First argument passed to the function is $depth &lt;/span&gt;
    &lt;span class="c1"&gt;# (how many queens we&amp;#39;ve placed on the board),&lt;/span&gt;
    &lt;span class="c1"&gt;# so use shift to pop that out of the parameters &lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$depth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@diag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Explore is a recursive method,&lt;/span&gt;
    &lt;span class="c1"&gt;# so we need a base case and a recursive case.&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# The base case is, we&amp;#39;ve reached a leaf node,&lt;/span&gt;
    &lt;span class="c1"&gt;# placed 8 queens, and had no problems, &lt;/span&gt;
    &lt;span class="c1"&gt;# so we found a solution.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$depth&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;$board_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="c1"&gt;# Here, we store the stringified version of @queens,&lt;/span&gt;
        &lt;span class="c1"&gt;# which are the row numbers of prior queens. &lt;/span&gt;
        &lt;span class="c1"&gt;# This is a global variable that is shared across&lt;/span&gt;
        &lt;span class="c1"&gt;# instances of this recursive function.&lt;/span&gt;
        &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@solutions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;@queens\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Mark the squares that are attackable, &lt;/span&gt;
    &lt;span class="c1"&gt;# so that we can cut down on the search space.&lt;/span&gt;
    &lt;span class="nv"&gt;$#diag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$board_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$#queens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nv"&gt;$ix1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$queens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$depth&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$diag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$ix1&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nv"&gt;$ix2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$queens&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$depth&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$diag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$ix2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$board_size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# Cut down on the search space:&lt;/span&gt;
        &lt;span class="c1"&gt;# if this square is already occupied&lt;/span&gt;
        &lt;span class="c1"&gt;# or will lead to an invalid solution,&lt;/span&gt;
        &lt;span class="c1"&gt;# don&amp;#39;t bother exploring it.&lt;/span&gt;
        &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$occupied&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$diag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;# Make a choice&lt;/span&gt;
        &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@queens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;# Mark the square as occupied&lt;/span&gt;
        &lt;span class="nv"&gt;$occupied&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;# Explore the consequences&lt;/span&gt;
        &lt;span class="n"&gt;explore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$depth&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;# Unmake the choice&lt;/span&gt;
        &lt;span class="nb"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;@queens&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;# Mark the square as unoccupied&lt;/span&gt;
        &lt;span class="nv"&gt;$occupied&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$board_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="n"&gt;explore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;total &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;scalar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@solutions&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; solutions\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="pvj-javasoln"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="java-solution"&gt;Java Solution&lt;/h3&gt;
&lt;p&gt;Starting with the Rosetta Code solution in Perl, I translated the algorithm into Java, sticking as closely as possible to the Way of the Verb.
I replicated the solution in Java with a minimal amount of object-oriented-ness. 
A Board class simply wraps the same set of arrays and array manipulations that the Perl solution implements directly.
These constitute the lookahead check for safe places to put the queen. &lt;/p&gt;
&lt;p&gt;The Java solution implements a static class containing a Linked List to store solutions. 
This is the only use of non-array objects and has a trivial impact on the solution walltime.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/charlesreid1/4ce97a5f896ff1c89855a5d038d51535"&gt;Github gist: NQueens.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Verbatim code not included for length.)&lt;/p&gt;
&lt;p&gt;&lt;a name="pvj-h2hnqueens"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="head-to-head-walltime-vs-number-of-queens"&gt;Head to Head: Walltime vs. Number of Queens&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Graph of walltime versus number of queens" src="/images/perl-vs-java-nqueens.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-----------------------------------------------
| NQueens | Nsolutions | Java [s]  | Perl [s] |
|---------|------------|-----------|----------|
| 8       | 92         | 0.003     | 0.016    |
| 9       | 352        | 0.006     | 0.067    |
| 10      | 724        | 0.017     | 0.259    |
| 11      | 2680       | 0.061     | 1.542    |
| 12      | 14200      | 0.240     | 8.431    |
| 13      | 73712      | 1.113     | 48.542   |
| 14      | 365596     | 6.557     | 303.278  |
| 15      | 2279184    | 42.619    | 2057.052 |
-----------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Java smokes Perl.&lt;/p&gt;
&lt;p&gt;Initially I was using the Unix &lt;code&gt;time&lt;/code&gt; utility to time these two,
and it seemed to be close for smaller problem sizes (N=9 or smaller) - 
Perl would start up and run faster than Java, measured end-to-end.
But when you time the program by using timers built into the language, 
it removes some of the overhead from the timing comparisons,
and Java becomes the clear winner.&lt;/p&gt;
&lt;p&gt;We can dig deeper and understand this comparison better by using some profiling tools.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvj-perlprof"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="perl-profiling"&gt;Perl Profiling&lt;/h2&gt;
&lt;p&gt;I profiled Perl with &lt;code&gt;Devel::NYTProf&lt;/code&gt; , 
an excellent Perl module &lt;a href="http://search.cpan.org/~timb/Devel-NYTProf-6.04/lib/Devel/NYTProf.pm"&gt;available here on Cpanm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More details about the profiling tools I used for Perl are on the charlesreid1 wiki at 
&lt;a href="https://charlesreid1.com/wiki/Perl/Profiling"&gt;Perl/Profiling&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;To run with &lt;code&gt;Devel::NYTProf&lt;/code&gt;, use `cpanm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cpanm Devel::NYTProf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can run Perl with &lt;code&gt;Devel::NYTProf&lt;/code&gt; by doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ perl -d:NYTProf nqueens.pl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This results in a binary output file called &lt;code&gt;nytprof.out&lt;/code&gt; that can be processed with several 
NYTProf post-processing tools. Use the CSV file tool to begin with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ nytprofcsv nytprof.out
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This puts the CSV file in a folder called &lt;code&gt;nytprof/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvj-perlprofresults"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="perl-profiling-results"&gt;Perl Profiling Results&lt;/h2&gt;
&lt;p&gt;The CSV output of the NYTProf module gives a breakdown of 
the amount of time spent in each method call, how many times it was called, and how much time per call was spent.
From this we can see the busiest lines are the lines accessing the arrays, and looping over the rows.
This is confirmation that this algorithm is testing the performance of the arrays,
and confirms the N queens problem is profiling Perl's core performance with its built-in data structures.&lt;/p&gt;
&lt;p&gt;The profiling results of the 11 queens problem are shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Profile data generated by Devel::NYTProf::Reader
# Version: v6.04
# More information at http://metacpan.org/release/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000238,2,0.000119,use Time::HiRes qw(time);
0.000039,2,0.000019,use strict;
0.000491,2,0.000246,use warnings;
0.000021,1,0.000021,my $start = time;
0.010338,2680,0.000004,push @solutions, &amp;quot;@queens\n&amp;quot;;
0.009993,2680,0.000004,return;
0.186298,164246,0.000001,$#attacked = 2 * $board_size;
0.150338,164246,0.000001,for( 0 .. $#queens) { 
0.675523,1.26035e+06,0.000001,$attacked[ $ix2 ] = 1;
1.242624,164246,0.000008,for my $row (0 .. $board_size-1) {
0.267469,166925,0.000002,explore($depth+1);
0.125272,166925,0.000001,$occupied[$row] = 0;
0.000002,1,0.000002,explore(0);
0.000011,1,0.000011,my $duration = time - $start;
0.000075,1,0.000075,print &amp;quot;Found &amp;quot;, scalar(@solutions), &amp;quot; solutions\n&amp;quot;;
0.000050,1,0.000050,printf &amp;quot;Execution time: %0.3f s \n&amp;quot;,$duration;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One of the more interesting pieces of information comes from several lines 
populating the squares that are on the diagonals with other queens (&lt;code&gt;$attacked&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Format: time,calls,time/call,code
0.186298,164246,0.000001,$#attacked = 2 * $board_size;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second column gives the number of times this line is executed - 164,246.
This is actually the number of solutions that are tried,
excluding the deepest depth of the tree (the base recursive case).&lt;/p&gt;
&lt;p&gt;The Java profiler will show us that Java explores the exact same number of solutions,
which is confirmation that these tests are comparing the two languages on equal footing.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvj-javaprof"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="java-profiling"&gt;Java Profiling&lt;/h2&gt;
&lt;p&gt;More details about the profiling tools I used for Java are on the charlesreid1 wiki at 
&lt;a href="https://charlesreid1.com/wiki/Java/Profiling"&gt;Java/Profiling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I profiled Java with two tools, the &lt;a href="http://jiprof.sourceforge.net/"&gt;Java Interactive Profiler (JIP)&lt;/a&gt;
and the &lt;a href="https://docs.oracle.com/javase/7/docs/technotes/samples/hprof.html"&gt;HPROF tool&lt;/a&gt; 
that Oracle provides with Java.&lt;/p&gt;
&lt;p&gt;No special compiler flags are needed, so compile as normal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ javac NQueens.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you are profiling with JIP, you want the JIP jar, as described on the wiki: &lt;a href="https://charlesreid1.com/wiki/Java/Profiling"&gt;Java/Profiling&lt;/a&gt; 
Then run Java with the &lt;code&gt;-javaagent&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH2JIP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/Downloads/jip&amp;quot;&lt;/span&gt;
$ java -javaagent:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PATH2JIP&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/profile/profile.jar NQueens
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This results in a &lt;code&gt;profile.txt&lt;/code&gt; file with detailed profiling information
(an example is shown below).&lt;/p&gt;
&lt;p&gt;The HPROF tool likewise requires no special compiler flags. 
It can be run with various options from the command line. 
Here's a basic usage of HPROF that will reduce the amount of output slightly,
making the size of the output file a little smaller:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ java -agentlib:hprof&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;n NQueens
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This dumps out a file called &lt;code&gt;java.hprof.txt&lt;/code&gt; that contains a significant amount of information.
The most useful, though, is at the end, so use tail to get a quick overview of the results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ tail -n 100 java.hprof.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="pvj-javaprof"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="java-profiling-results"&gt;Java Profiling Results&lt;/h2&gt;
&lt;p&gt;The profiling results from JIP for the 11 queens problem are shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;+----------------------------------------------------------------------
|  File: profile.txt
|  Date: 2017.03.19 19:34:18 PM
+----------------------------------------------------------------------

+--------------------------------------+
| Most expensive methods summarized    |
+--------------------------------------+

               Net
          ------------
 Count     Time    Pct  Location
 =====     ====    ===  ========
166926    909.5   82.2  NQueens:explore
164246     55.6    5.0  Board:getDiagAttacked
166925     41.4    3.7  Board:unchoose
166925     40.7    3.7  Board:choose
164246     31.0    2.8  Board:getOccupied
     1     18.2    1.6  NQueens:main
  2680      7.3    0.7  Board:toString
  2680      2.3    0.2  SolutionSaver:saveSolution
     1      0.2    0.0  SolutionSaver:nSolutions
     1      0.1    0.0  SolutionSaver:&amp;lt;init&amp;gt;
     1      0.0    0.0  Board:&amp;lt;init&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From this output we can see that the method getDiagAttacked, 
which is called each time we check a solution in the recursive case,
is called 164,246 times - exactly the same number of solutions that the Perl profiler showed.
One of the downsides of the JIP profiler is that it only gives high-level 
profiling information about methods and classes - it stops there.&lt;/p&gt;
&lt;p&gt;Fortunately, however, the HPROF tool picks up where JIP leaves off.
The HPROF tool makes the program much slower but yields a huge amount of information.
In addition to an enormous heap dump of all objects appearing on Java's heap at any point,
it also shows where the time was spent in the low-level methods.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SITES BEGIN (ordered by live bytes) Sun Mar 19 19:34:21 2017
          percent          live          alloc&amp;#39;ed  stack class
 rank   self  accum     bytes objs     bytes  objs trace name
    1 86.01% 86.01%  10510976 164234  10510976 164234 300462 int[]
    2  1.93% 87.94%    235840 2680    235840  2680 300467 char[]
    3  1.09% 89.03%    133320 1515    133320  1515 300465 char[]
    4  1.07% 90.11%    131200    8    131200     8 300263 char[]
    5  1.05% 91.16%    128640 2680    128640  2680 300464 char[]
    6  1.04% 92.20%    127560 1313    127560  1313 300010 char[]
    7  0.76% 92.96%     92728 1009     92728  1009 300000 char[]
    8  0.54% 93.50%     65664    8     65664     8 300260 byte[]
    9  0.53% 94.02%     64320 2680     64320  2680 300468 java.util.LinkedList$Node
   10  0.53% 94.55%     64320 2680     64320  2680 300466 java.lang.String
SITES END
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;HPROF tells us that over 86% of the time spent on this program was spent accessing integer arrays.
Again, confirmation that we are getting a fair measurement of Java's performance with a core data type, the integer array.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvj-h2hntested"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="head-to-head-walltime-vs-number-of-solutions-tested"&gt;Head to Head: Walltime vs. Number of Solutions Tested&lt;/h2&gt;
&lt;p&gt;Using the results of the profilers from each N queens problem, &lt;code&gt;N = 8 .. 15&lt;/code&gt;, 
I extracted the total number of solutions tried, and confirmed that these numbers were the same 
between Java and Perl for each of the problem sizes.&lt;/p&gt;
&lt;p&gt;Here is a table of the number of solutions found, and number of solutions tried, versus problem size:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-------------------------------------------------------------
| NQueens | Nsolutions | Ntested     | Java [s]  | Perl [s] |
|---------|------------|-------------|-----------|----------|
| 8       | 92         | 1965        | 0.003     | 0.016    |
| 9       | 352        | 8042        | 0.006     | 0.067    |
| 10      | 724        | 34815       | 0.017     | 0.259    |
| 11      | 2680       | 164246      | 0.061     | 1.542    |
| 12      | 14200      | 841989      | 0.240     | 8.431    |
| 13      | 73712      | 4601178     | 1.113     | 48.542   |
| 14      | 365596     | 26992957    | 6.557     | 303.278  |
| 15      | 2279184    | 168849888   | 42.619    | 2057.052 |
-------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the wall time for Java and Perl are plotted against the number of solutions tested,
an interesting trend emerges: the two scale the same way, with a fixed vertical offset.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Graph of walltime versus number of solutions tested" src="/images/perl-vs-java-ntested.png"&gt;&lt;/p&gt;
&lt;p&gt;While this is proving what we already knew, 
that a compiled language beats a scripted language every time,
it also provides proof Perl can scale as well as Java - 
it just takes significantly more overhead and time per statement.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvj-applesoranges"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="why-java-beat-perl"&gt;Why Java Beat Perl&lt;/h2&gt;
&lt;p&gt;Compiled languages are turned into bytecode and pre-optimized for the processor.&lt;/p&gt;
&lt;p&gt;Perl is a scripted and interpreted language, like Python, evaluated piece by piece.&lt;/p&gt;
&lt;p&gt;So, we didn't learn anything surprising. But we did find an interesting result - 
Perl can scale as well as Java in its implementation of the N queens recursive backtracking algorithm.&lt;/p&gt;
&lt;p&gt;&lt;a name="pvj-sources"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"Execution in the Kingdom of Nouns". Steve Yegge. March 2006. Accessed 18 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170320081755/https://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html"&gt;https://web.archive.org/web/20170320081755/https://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"N-Queens Problem". Rosetta Code, GNU Free Documentation License. Edited 6 March 2017. Accessed 21 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170320081421/http://rosettacode.org/wiki/N-queens_problem"&gt;https://web.archive.org/web/20170320081421/http://rosettacode.org/wiki/N-queens_problem&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"nqueens.pl". Charles Reid. Github Gist, Github Inc. Edited 20 March 2017. Accessed 20 March 2017.
&amp;lt;&lt;a href="https://gist.github.com/charlesreid1/4ce97a5f896ff1c89855a5d038d51535"&gt;https://gist.github.com/charlesreid1/4ce97a5f896ff1c89855a5d038d51535&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"NQueens.java". Charles Reid. Github Gist, Github Inc. Edited 20 March 2017. Accessed 20 March 2017.
&amp;lt;&lt;a href="https://gist.github.com/charlesreid1/7b8d7b9dffb7b3090039849d72c5fff5"&gt;https://gist.github.com/charlesreid1/7b8d7b9dffb7b3090039849d72c5fff5&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Devel::NYTProf". Adam Kaplan, Tim Bunce. Copyright 2008-2016, Tim Bunce. Published 4 March 2008. Accessed 20 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170320081508/http://search.cpan.org/~timb/Devel-NYTProf-6.04/lib/Devel/NYTProf.pm"&gt;https://web.archive.org/web/20170320081508/http://search.cpan.org/~timb/Devel-NYTProf-6.04/lib/Devel/NYTProf.pm&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Perl/Profiling". Charles Reid. Edited 20 March 2017. Accessed 20 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170320081532/https://charlesreid1.com/wiki/Perl/Profiling"&gt;https://web.archive.org/web/20170320081532/https://charlesreid1.com/wiki/Perl/Profiling&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Java/Profiling". Charles Reid. Edited 20 March 2017. Accessed 20 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170320081535/https://charlesreid1.com/wiki/Java/Profiling"&gt;https://web.archive.org/web/20170320081535/https://charlesreid1.com/wiki/Java/Profiling&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"JIP - The Java Interactive Profiler." Andrew Wilcox. Published 30 April 2010. Accessed 20 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170320081538/http://jiprof.sourceforge.net/"&gt;https://web.archive.org/web/20170320081538/http://jiprof.sourceforge.net/&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"HPROF". Oracle Corporation. Copyright 1993, 2016. Published 2016. Accessed 20 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170320081540/https://docs.oracle.com/javase/7/docs/technotes/samples/hprof.html"&gt;https://web.archive.org/web/20170320081540/https://docs.oracle.com/javase/7/docs/technotes/samples/hprof.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Computer Science"></category><category term="java"></category><category term="perl"></category><category term="algorithms"></category><category term="recursion"></category><category term="n-queens"></category></entry><entry><title>Enigma Cipher Implementation: Part 4: Combinatorics</title><link href="https://charlesreid1.github.io/enigma-cipher-implementation-part-4-combinatorics.html" rel="alternate"></link><published>2017-03-22T19:00:00-07:00</published><updated>2017-03-22T19:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-03-22:/enigma-cipher-implementation-part-4-combinatorics.html</id><summary type="html">&lt;p&gt;In this, the fourth article in a series on implementing the Enigma cipher in Java,
we use some big number libraries to explore the combinatorics of the Enigma encryption scheme
and better understand the Enigma's strengths and weaknesses. &lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#keyspace"&gt;The Key Space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#switchboard"&gt;The Switchboard&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#onecable"&gt;One Cable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#morecables"&gt;More Cables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manycables"&gt;Many Cables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dupes"&gt;Accounting for Duplicates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#finalswitchboard"&gt;Final Combination Count for Switchboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#rotors"&gt;The Rotors&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#finalrotors"&gt;Final Combination Count for Rotors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reflector"&gt;The Reflector&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#finalreflector"&gt;Final Combination Count for Reflector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#finalcount"&gt;Final Enigma Combination Count&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#javabigint"&gt;Java BigInteger Combinations Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="keyspace"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-key-space"&gt;The Key Space&lt;/h2&gt;
&lt;p&gt;Basically, what the Enigma did was to encrypt each character of a message one â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this, the fourth article in a series on implementing the Enigma cipher in Java,
we use some big number libraries to explore the combinatorics of the Enigma encryption scheme
and better understand the Enigma's strengths and weaknesses. &lt;/p&gt;
&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#keyspace"&gt;The Key Space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#switchboard"&gt;The Switchboard&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#onecable"&gt;One Cable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#morecables"&gt;More Cables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manycables"&gt;Many Cables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dupes"&gt;Accounting for Duplicates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#finalswitchboard"&gt;Final Combination Count for Switchboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#rotors"&gt;The Rotors&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#finalrotors"&gt;Final Combination Count for Rotors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reflector"&gt;The Reflector&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#finalreflector"&gt;Final Combination Count for Reflector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#finalcount"&gt;Final Enigma Combination Count&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#javabigint"&gt;Java BigInteger Combinations Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="keyspace"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-key-space"&gt;The Key Space&lt;/h2&gt;
&lt;p&gt;Basically, what the Enigma did was to encrypt each character of a message one at a time, using a different, unique key for each character. 
One key corresponded to one particular scrambled version of the alphabet (one possible set of substitutions). 
The huge number of possible initial settings for the machine - the rotors, wiring, and reflector - meant that finding the very first key was extremely difficult. 
Furthermore, as the operator entered additional characters into the Enigma, the machine would rotate the rotor wheels, 
sequentially stepping through the space of possible keys in a totally random but deterministic way. 
Any operator with a matching Enigma machine and matching settings could replicate this "random walk" through the key space.&lt;/p&gt;
&lt;p&gt;What we will do below is look at each component of the Enigma and determine the total number of 
unique settings for each component. A single machine setting corresponds to a single key, 
so the total number of possible settings of the machine yields the total number of possible keys for the Enigma.&lt;/p&gt;
&lt;p&gt;&lt;a name="switchboard"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-switchboard"&gt;The Switchboard&lt;/h2&gt;
&lt;p&gt;The switchboard at the front of the Enigma consisted of a set of plugs, one for each letter, connected by wires.
The operator would connect pairs of wires to swap pairs of letters. If the letters A and K were connected, 
any A signal entering the keyboard would become a K signal leaving the keyboard, 
and any K signal entering the keyboard would become an A signal leaving the keyboard.
Letters could not be connected to themselves, and a wire could only connect two letters together.&lt;/p&gt;
&lt;p&gt;From these constraints, we can get the total number of cable configurations on the front of the machine.
For a machine with &lt;span class="math"&gt;\(S\)&lt;/span&gt; symbols (typically 26) and &lt;span class="math"&gt;\(N\)&lt;/span&gt; patch cables, the total number of configurations is:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{sw} = \dfrac{ S! }{ N! \times (S - 2N)! \times 2^N }
$$&lt;/div&gt;
&lt;p&gt;Let's break down where those terms are coming from.&lt;/p&gt;
&lt;p&gt;&lt;a name="onecable"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="one-cable"&gt;One Cable&lt;/h3&gt;
&lt;p&gt;Let's consider a single cable connecting two letters. &lt;/p&gt;
&lt;p&gt;There are S (or, 26) places to plug in the left end, and S places to plug in the right end, for a total of &lt;span class="math"&gt;\(S^2\)&lt;/span&gt; combinations.
But no cable can connect to itself, so there are actually &lt;span class="math"&gt;\(S (S-1)\)&lt;/span&gt; possible combinations. 
Furthermore, each plug is symmetric (if A connects to B, then B connects to A), so half of the plug combinations are simply mirror images of the other half.&lt;/p&gt;
&lt;p&gt;For a single plug, we start from a total of &lt;span class="math"&gt;\(26 \times 26 = 676\)&lt;/span&gt; possible configurations.
Ruling out any combinations that connect letters to themselves eliminates 26 possibilities (A connects to A, B connects to B, etc.)
for a total of &lt;span class="math"&gt;\(26 \times 25 = 650\)&lt;/span&gt; possible configurations.
But half of those configurations are mirror images of the other half (if we connect A to B, by implication we connect B to A),
so our number of choices is actually half that, or &lt;span class="math"&gt;\(\frac{26 \times 25}{2} = 350\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a name="morecables"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="more-cables"&gt;More Cables&lt;/h3&gt;
&lt;p&gt;If we plug in a second cable, there are now 2 choices occupied by the first letter, 
so there are &lt;span class="math"&gt;\(S-2\)&lt;/span&gt; possible places to plug in the left end,
and &lt;span class="math"&gt;\(S-3\)&lt;/span&gt; possible places to plug in the right end,
but each having half duplicate solutions, since the wires are two-way,
for a total of &lt;span class="math"&gt;\(\frac{(S-2)(S-3)}{2 \times 2}\)&lt;/span&gt; combinations.&lt;/p&gt;
&lt;p&gt;&lt;a name="manycables"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="many-cables"&gt;Many Cables&lt;/h3&gt;
&lt;p&gt;Once &lt;span class="math"&gt;\(N\)&lt;/span&gt; wires have been plugged in, there are &lt;span class="math"&gt;\(S - 2N\)&lt;/span&gt; spaces remaining, and &lt;span class="math"&gt;\(2N\)&lt;/span&gt; spaces occupied by plug ends. 
That is, we are reducing the number of choices by 2 letters with each wire placed.&lt;/p&gt;
&lt;p&gt;Taking the product of these numbers explains part of the expression given above: &lt;/p&gt;
&lt;div class="math"&gt;$$
S \times (S-1) \times (S-2) \times \dots \times (S - 2N + 1) = \dfrac{ S! }{ (S - 2N) ! }
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="dupes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="accounting-for-duplicates"&gt;Accounting for Duplicates&lt;/h3&gt;
&lt;p&gt;But where did the &lt;span class="math"&gt;\(2^N\)&lt;/span&gt; and &lt;span class="math"&gt;\(N!\)&lt;/span&gt; terms come from? They come from the fact that many choices of wiring configurations are duplicates.&lt;/p&gt;
&lt;p&gt;Dividing by &lt;span class="math"&gt;\(2^N\)&lt;/span&gt; comes from the fact that the wires are doubled up: if A connects to B, B connects to A.
This means that when we choose our pair and connect A to B using a wire, we also connect B to A. 
Even though it looks like two choices, it is only one!&lt;/p&gt;
&lt;p&gt;Meanwhile, the &lt;span class="math"&gt;\(N!\)&lt;/span&gt; term accounts for the fact that order is not important when we select pairs and place wires -
making the choice to connect A to B and then making the choice to connect C to D 
is entirely equivalent to connecting C to D, then connecting A to B.
This means that &lt;span class="math"&gt;\(N!\)&lt;/span&gt; of the &lt;span class="math"&gt;\(S!\)&lt;/span&gt; possible solutions are duplicate configurations 
with the same connections chosen in a different order.&lt;/p&gt;
&lt;p&gt;&lt;a name="moreinteresting"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="switchboard-combinations"&gt;Switchboard Combinations&lt;/h3&gt;
&lt;p&gt;Here's how the number of possible combinations that result when we plug in various numbers of wires in: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;S = 2       N = 1       C = 1
S = 26      N = 1       C = 325
S = 26      N = 2       C = 44,850
S = 26      N = 3       C = 3,453,450
S = 26      N = 4       C = 164,038,875
S = 26      N = 5       C = 5,019,589,575
S = 26      N = 6       C = 100,391,791,500
S = 26      N = 7       C = 1,305,093,289,500
S = 26      N = 8       C = 10,767,019,638,375
S = 26      N = 9       C = 53,835,098,191,875
S = 26      N = 10      C = 150,738,274,937,250
S = 26      N = 11      C = 205,552,193,096,250
S = 26      N = 12      C = 102,776,096,548,125
S = 26      N = 13      C = 7,905,853,580,625
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the bump in the shape of the distribution, meaning the use of 11 wires is much more secure than the use of 13 wires.
Let's explore that.&lt;/p&gt;
&lt;h3 id="more-interesting-observations-about-the-switchboard"&gt;More Interesting Observations About the Switchboard&lt;/h3&gt;
&lt;p&gt;Notice how the switchboard expression is &lt;em&gt;not&lt;/em&gt; proportional to &lt;span class="math"&gt;\(N\)&lt;/span&gt;,
it is inversely proportional to two different terms, each changing differently
as &lt;span class="math"&gt;\(N\)&lt;/span&gt; changes.&lt;/p&gt;
&lt;p&gt;We are looking at the denominator of this expression:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{sw} = \dfrac{ S! }{ N! \times (S - 2N)! \times 2^N }
$$&lt;/div&gt;
&lt;p&gt;The term &lt;span class="math"&gt;\(N!\)&lt;/span&gt; on the bottom will increase as &lt;span class="math"&gt;\(N\)&lt;/span&gt; increases, thereby decreasing the total number of possible keys &lt;span class="math"&gt;\(C_{sw}\)&lt;/span&gt;.
However, the term &lt;span class="math"&gt;\((S - 2N)!\)&lt;/span&gt; will decrease as &lt;span class="math"&gt;\(N\)&lt;/span&gt; increases, thereby increasing the total number of possible keys &lt;span class="math"&gt;\(C_{sw}\)&lt;/span&gt;.
The tradeoff can be visualized just by printing it out - here are the total number of combinations that are possible
for an alphabet of &lt;span class="math"&gt;\(S = 26\)&lt;/span&gt; symbols, using &lt;span class="math"&gt;\(N = 1 \dots 13\)&lt;/span&gt; wires:&lt;/p&gt;
&lt;p&gt;This pattern holds for other alphabet sizes. Here's a 52-character alphabet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;S = 52      N = 1       C = 1,326
S = 52      N = 2       C = 812,175
S = 52      N = 3       C = 305,377,800
S = 52      N = 4       C = 79,016,505,750
S = 52      N = 5       C = 14,949,922,887,900
S = 52      N = 6       C = 2,145,313,934,413,650
S = 52      N = 7       C = 239,049,266,977,521,000
S = 52      N = 8       C = 21,006,454,335,649,657,875
S = 52      N = 9       C = 1,470,451,803,495,476,051,250
S = 52      N = 10      C = 82,492,346,176,096,206,475,125
S = 52      N = 11      C = 3,719,654,882,122,156,219,242,000
S = 52      N = 12      C = 134,837,489,476,928,162,947,522,500
S = 52      N = 13      C = 3,920,659,309,406,065,045,704,885,000
S = 52      N = 14      C = 91,015,305,396,926,509,989,577,687,500
S = 52      N = 15      C = 1,674,681,619,303,447,783,808,229,450,000
S = 52      N = 16      C = 24,178,215,878,693,527,378,731,312,684,375
S = 52      N = 17      C = 270,227,118,644,221,776,585,820,553,531,250
S = 52      N = 18      C = 2,296,930,508,475,885,100,979,474,705,015,625
S = 52      N = 19      C = 14,506,929,527,216,116,427,238,787,610,625,000
S = 52      N = 20      C = 66,006,529,348,833,329,743,936,483,628,343,750
S = 52      N = 21      C = 207,449,092,239,190,464,909,514,662,831,937,500
S = 52      N = 22      C = 424,327,688,671,071,405,496,734,537,610,781,250
S = 52      N = 23      C = 516,572,838,382,173,884,952,546,393,613,125,000
S = 52      N = 24      C = 322,858,023,988,858,678,095,341,496,008,203,125
S = 52      N = 25      C = 77,485,925,757,326,082,742,881,959,041,968,750
S = 52      N = 26      C = 2,980,227,913,743,310,874,726,229,193,921,875
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For a 52-symbol alphabet the optimum number of pairs is 23 keys.&lt;/p&gt;
&lt;p&gt;Okay, here we go with an alphabet of 100 characters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;S = 100     N = 1       C = 4,950
S = 100     N = 2       C = 11,763,675
S = 100     N = 3       C = 17,880,786,000
S = 100     N = 4       C = 19,539,228,901,500
S = 100     N = 5       C = 16,358,242,436,335,800
S = 100     N = 6       C = 10,919,126,826,254,146,500
S = 100     N = 7       C = 5,971,202,498,700,124,686,000
S = 100     N = 8       C = 2,728,093,141,593,619,465,916,250
S = 100     N = 9       C = 1,056,681,410,177,261,939,798,227,500
S = 100     N = 10      C = 350,923,896,319,868,690,206,991,352,750
S = 100     N = 11      C = 100,810,864,760,980,460,095,826,606,790,000
S = 100     N = 12      C = 25,227,918,906,435,360,138,980,608,349,197,500
S = 100     N = 13      C = 5,530,736,067,949,290,492,007,287,215,016,375,000
S = 100     N = 14      C = 1,067,037,008,537,930,972,779,405,911,982,802,062,500
S = 100     N = 15      C = 181,823,106,254,863,437,761,610,767,401,869,471,450,000
S = 100     N = 16      C = 27,443,925,100,343,450,137,143,125,204,719,673,346,984,375
S = 100     N = 17      C = 3,677,485,963,446,022,318,377,178,777,432,436,228,495,906,250
S = 100     N = 18      C = 438,233,743,977,317,659,606,613,804,310,698,650,562,428,828,125
S = 100     N = 19      C = 46,498,906,729,382,757,987,733,338,394,229,919,975,466,132,500,000
S = 100     N = 20      C = 4,396,471,631,263,139,767,740,187,145,174,438,933,680,322,827,875,000
S = 100     N = 21      C = 370,559,751,777,893,208,995,244,345,093,274,138,695,912,924,063,750,000
S = 100     N = 22      C = 27,842,512,258,584,430,657,688,131,929,053,734,148,379,275,612,608,125,000
S = 100     N = 23      C = 1,864,237,777,313,914,052,732,161,876,988,815,242,978,438,454,061,587,500,000
S = 100     N = 24      C = 111,155,177,472,342,125,394,155,151,915,458,108,862,589,392,823,422,154,687,500
S = 100     N = 25      C = 5,895,670,613,133,026,330,905,989,257,595,898,094,071,741,395,354,311,084,625,000
S = 100     N = 26      C = 277,776,788,503,382,971,359,993,724,636,729,814,047,610,892,665,731,964,564,062,500
S = 100     N = 27      C = 11,604,896,941,919,110,803,484,182,273,712,267,786,877,966,182,479,468,741,787,500,000
S = 100     N = 28      C = 428,966,726,245,938,560,057,361,737,617,578,469,979,239,107,102,366,076,705,359,375,000
S = 100     N = 29      C = 13,993,190,449,264,064,752,216,007,027,111,352,848,288,282,597,201,320,984,940,343,750,000
S = 100     N = 30      C = 401,604,565,893,878,658,388,599,401,678,095,826,745,873,710,539,677,912,267,787,865,625,000
S = 100     N = 31      C = 10,104,889,077,329,850,114,293,791,397,061,765,963,283,274,007,127,379,728,028,210,812,500,000
S = 100     N = 32      C = 221,991,781,917,590,144,698,391,729,754,200,671,005,879,425,844,079,623,400,119,756,287,109,375
S = 100     N = 33      C = 4,238,024,927,517,630,035,151,114,840,762,012,810,112,243,584,296,065,537,638,649,892,753,906,250
S = 100     N = 34      C = 69,927,411,304,040,895,579,993,394,872,573,211,366,852,019,140,885,081,371,037,723,230,439,453,125
S = 100     N = 35      C = 990,971,314,480,122,405,933,620,681,622,751,795,370,245,756,967,971,438,858,134,592,065,656,250,000
S = 100     N = 36      C = 11,974,236,716,634,812,405,031,249,902,941,584,194,057,136,230,029,654,886,202,459,654,126,679,687,500
S = 100     N = 37      C = 122,331,391,321,296,191,597,346,282,792,214,022,306,853,986,350,032,690,459,041,344,574,591,484,375,000
S = 100     N = 38      C = 1,046,255,320,511,085,849,187,830,050,196,567,296,045,461,725,362,121,694,715,485,183,861,637,695,312,500
S = 100     N = 39      C = 7,404,268,422,078,453,701,944,643,432,160,322,402,783,267,594,870,399,685,678,818,224,251,589,843,750,000
S = 100     N = 40      C = 42,759,650,137,503,070,128,730,315,820,725,861,876,073,370,360,376,558,184,795,175,245,052,931,347,656,250
S = 100     N = 41      C = 198,154,476,246,965,446,938,018,536,730,193,018,450,096,106,548,086,489,149,050,812,111,220,901,367,187,500
S = 100     N = 42      C = 721,848,449,185,374,128,131,353,240,945,703,138,639,635,816,710,886,496,185,827,958,405,161,854,980,468,750
S = 100     N = 43      C = 2,014,460,788,424,299,892,459,590,439,848,473,875,273,402,279,193,171,617,262,775,697,874,870,292,968,750,000
S = 100     N = 44      C = 4,166,271,176,059,347,504,859,607,500,595,707,332,951,809,259,240,423,117,520,740,647,877,572,651,367,187,500
S = 100     N = 45      C = 6,110,531,058,220,376,340,460,757,667,540,370,754,995,986,913,552,620,572,363,752,950,220,439,888,671,875,000
S = 100     N = 46      C = 5,977,693,426,519,933,376,537,697,718,246,014,869,017,813,284,997,128,820,790,627,886,085,212,934,570,312,500
S = 100     N = 47      C = 3,561,179,062,607,619,883,894,798,640,657,200,347,499,973,871,913,183,127,279,522,995,965,658,769,531,250,000
S = 100     N = 48      C = 1,112,868,457,064,881,213,717,124,575,205,375,108,593,741,834,972,869,727,274,850,936,239,268,365,478,515,625
S = 100     N = 49      C = 136,269,606,987,536,475,149,035,662,270,045,931,664,539,816,527,290,170,686,716,441,172,155,310,058,593,750
S = 100     N = 50      C = 2,725,392,139,750,729,502,980,713,245,400,918,633,290,796,330,545,803,413,734,328,823,443,106,201,171,875
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Optimum number of pairs? 45.&lt;/p&gt;
&lt;p&gt;&lt;a name="finalswitchboard"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="final-combination-count-switchboard"&gt;Final Combination Count Switchboard&lt;/h3&gt;
&lt;p&gt;For a switchboard with holes for each of &lt;span class="math"&gt;\(S\)&lt;/span&gt; symbols, with &lt;span class="math"&gt;\(N\)&lt;/span&gt; unique pairs of letters chosen from among the symbols to be swapped by the switchboard,
the number of possible combinations of ciphers with &lt;span class="math"&gt;\(N\)&lt;/span&gt; wires is:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{sw} = \dfrac{ S! }{ N! \times (S - 2N)! \times 2^N }
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="rotors"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-rotors"&gt;The Rotors&lt;/h2&gt;
&lt;p&gt;Typical Enigma machines had three rotors, with each rotor implementing a different scrambled alphabet.
Assuming there are P possible rotors to choose from, the number of choices
when selecting R rotors from P possible rotors is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{rot} = \dfrac{P!}{(P-R)!}
$$&lt;/div&gt;
&lt;p&gt;If the rotors are known, &lt;span class="math"&gt;\(P\)&lt;/span&gt; and &lt;span class="math"&gt;\(R\)&lt;/span&gt; are small numbers like 8 and 3, 
yielding a modest number of possible rotor combinations (336).
If the number of rotors is unknown, however, P becomes the set of all possible rotors
(the set of all possible alphabet scrambles), which is S!. Then we take the factorial of this number,&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{rot} = \frac{(S!)!}{(S!-R)!}
$$&lt;/div&gt;
&lt;p&gt;Note that the numerator &lt;span class="math"&gt;\((S!)!\)&lt;/span&gt; is a double factorial. &lt;a href="http://www.wolframalpha.com/input/?i=(26!)!"&gt;Here's how Wolfram Alpha describes 26 double-factorial (26!)!&lt;/a&gt;&lt;/p&gt;
&lt;div class="math"&gt;$$
10^{10^{28}}
$$&lt;/div&gt;
&lt;p&gt;This can also be written as &lt;span class="math"&gt;\(403291461126605635584000000!\)&lt;/span&gt;.
This is a number with 10^28 digits. That's &lt;em&gt;probably&lt;/em&gt; the biggest number you've ever seen in your life. 
The denominator is also pretty big, though. For small values of R, this is approximately &lt;span class="math"&gt;\((S!)^R\)&lt;/span&gt;.
For a 26-character alphabet with 3 rotors, that is approximately&lt;/p&gt;
&lt;div class="math"&gt;$$
(403,291,461,126,605,635,584,000,000)^3 
$$&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="math"&gt;$$
65,592,937,459,144,468,297,405,473,968,303,761,468,794,234,820,105,359,750,856,704,000,000,000,000,000,000
$$&lt;/div&gt;
&lt;p&gt;which is a key space with more keys than there are &lt;a href="https://en.wikipedia.org/wiki/Eddington_number"&gt;protons in the universe (the Eddington number)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition, each wheel had notches at different locations. The notches change the path the Enigma takes through the key space. 
For &lt;span class="math"&gt;\(R\)&lt;/span&gt; rotors containing &lt;span class="math"&gt;\(S\)&lt;/span&gt; symbols, the total combinations increases by a factor of &lt;span class="math"&gt;\({S}^{R-1}\)&lt;/span&gt;.
If each wheel has &lt;span class="math"&gt;\(M\)&lt;/span&gt; notches, that factor is &lt;span class="math"&gt;\({(MS)}^{R-1}\)&lt;/span&gt;.
(The &lt;span class="math"&gt;\(R-1\)&lt;/span&gt; comes from the fact that the location of the notch on the last wheel has no effect.)&lt;/p&gt;
&lt;p&gt;&lt;a name="finalrotors"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="final-combination-count-for-rotors"&gt;Final Combination Count for Rotors&lt;/h3&gt;
&lt;p&gt;The total number of combinations for &lt;span class="math"&gt;\(R\)&lt;/span&gt; rotors with &lt;span class="math"&gt;\(S\)&lt;/span&gt; symbols and &lt;span class="math"&gt;\(M\)&lt;/span&gt; notches (which advance the neighboring left wheel by one), 
chosen from among &lt;span class="math"&gt;\(P\)&lt;/span&gt; possible choices of rotors, is given by:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{rot} = S^{R-1} \dfrac{P!}{(P-R)!}
$$&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; For a very large set of possible rotors &lt;span class="math"&gt;\(P\)&lt;/span&gt;, (&lt;span class="math"&gt;\(P &amp;gt;&amp;gt; R\)&lt;/span&gt;), &lt;/p&gt;
&lt;div class="math"&gt;$$
\dfrac{P!}{(P-R)!} \approx P^R
$$&lt;/div&gt;
&lt;p&gt;so it follows that &lt;/p&gt;
&lt;div class="math"&gt;$$
C_{rot} \approx S^{R-1} P^R \qquad P &amp;gt;&amp;gt; R
$$&lt;/div&gt;
&lt;p&gt;(For example, if &lt;span class="math"&gt;\(P = S!\)&lt;/span&gt;, the set of all possible rotors.)&lt;/p&gt;
&lt;p&gt;&lt;a name="reflector"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="reflector"&gt;Reflector&lt;/h2&gt;
&lt;p&gt;Like the switchboard on the front of the Enigma, the reflector connected pairs of letters.
It could only be changed by swapping it out like a rotor, so there were a small number of mechanically produced reflectors
chosen from the set of all possible reflectors.&lt;/p&gt;
&lt;p&gt;If a reflector pairs all letters with another letter, it makes &lt;span class="math"&gt;\(N = \frac{S}{2}\)&lt;/span&gt; possible pairs. 
Using the analysis we performed above for the switchboard, and plugging that in, and using &lt;span class="math"&gt;\(0!=1\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{rfl} = \dfrac{ S! }{ (\frac{S}{2})! \times (S - 2(\frac{S}{2}))! \times 2^S } = \dfrac{S!}{(\frac{S}{2})! 2^S}
$$&lt;/div&gt;
&lt;p&gt;For the 26 characters in the English alphabet, that's:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{rfl} = \frac{26!}{13! * 2^26 } = 965,070,017
$$&lt;/div&gt;
&lt;p&gt;This is the total number of &lt;em&gt;possible&lt;/em&gt; reflectors. (Curiously enough, the number of possible keys goes down as N goes from 11 to 12 and 12 to 13, 
making the switchboard on the front, which swapped 10 pairs of letters, more secure than the rotor, which swapped 13 pairs of letters.&lt;/p&gt;
&lt;p&gt;However, like the rotors, there were a finite number of reflectors in use.
Supposing there were Q reflectors in use, that would make for Q possible sets of the 13 letter pairings.
Since the reflectors did not rotate, this would lead to only 1 possible reflector position, meaning a choice from among
Q reflectors only multiplied the number of possible combinations by Q.&lt;/p&gt;
&lt;p&gt;&lt;a name="finalreflector"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="final-combination-count-for-reflector"&gt;Final Combination Count for Reflector&lt;/h3&gt;
&lt;p&gt;Here is the final expression for the total number of combinations resulting from all possible rotors:&lt;/p&gt;
&lt;div class="math"&gt;$$ 
C_{rfl} = \dfrac{S!}{(\frac{S}{2})! 2^S} 
$$&lt;/div&gt;
&lt;p&gt;and here is the final expression for the total number of combinations if there is 1 rotor chosen from among &lt;span class="math"&gt;\(Q\)&lt;/span&gt; rotors:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{rfl} = Q
$$&lt;/div&gt;
&lt;p&gt;&lt;a name="finalcount"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="final-enigma-combination-count"&gt;Final Enigma Combination Count&lt;/h2&gt;
&lt;p&gt;Putting all of this together results in the following monstrosity of an expression for the Enigma's &lt;em&gt;complete&lt;/em&gt; key space:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{enigma-full} = 
\left( \dfrac{S!}{N! (S-2N)! 2^N} \right) 
\left( \dfrac{(S!)!}{(S!-R)!} \right) 
\left( \dfrac{ S! }{ \left( \dfrac{S}{2} \right)! 2^S } \right)
$$&lt;/div&gt;
&lt;p&gt;Note that this assumes the attacker has no idea which rotors or reflectors are actually used. If instead the attacker has knowledge that &lt;span class="math"&gt;\(R\)&lt;/span&gt; rotors out of &lt;span class="math"&gt;\(P\)&lt;/span&gt; possible rotors 
and 1 reflector out of &lt;span class="math"&gt;\(Q\)&lt;/span&gt; possible reflectors are being used, this key space reduces to:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{enigma-small} = \left( \dfrac{S!}{N! (S-2N)! 2^N} \right) \left( S^{R-1} \dfrac{P!}{(P-R)!} \right) Q
$$&lt;/div&gt;
&lt;p&gt;When you evaluate the above expressions for the following values of &lt;span class="math"&gt;\(N\)&lt;/span&gt;, &lt;span class="math"&gt;\(P\)&lt;/span&gt;, &lt;span class="math"&gt;\(Q\)&lt;/span&gt;, &lt;span class="math"&gt;\(R\)&lt;/span&gt;, and &lt;span class="math"&gt;\(S\)&lt;/span&gt;, 
here are the actual numbers you get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;N = 10; // number of switchboard wires
P = 5;  // number of possible rotors
Q = 5;  // number of possible reflectors
R = 3;  // number of rotors
S = 26; // number of symbols
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the case of utilizing the &lt;span class="math"&gt;\(P\)&lt;/span&gt; known rotors and &lt;span class="math"&gt;\(Q\)&lt;/span&gt; known reflectors, the key space is:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{enigma-small} = 537,293,436,636,253,096,800,000
$$&lt;/div&gt;
&lt;p&gt;For the completely unknown case of all possible rotors and reflectors, the key space increases to an astronomical number:&lt;/p&gt;
&lt;div class="math"&gt;$$
C_{enigma-full} = 422,732,921,460,335,478,939,047,043,039,799,222,455,533,136,281,221,092,624,796,865,514,111,348,059,884,989,972,480,000,000,000,000,000,000,000,000
$$&lt;/div&gt;
&lt;p&gt;There are plenty of additional big numbers related to the Enigma, and more math around the weaknesses in the system and how it was cracked.
There is also yet more math around how Alan Turing managed to crack the German Navy's Enigma cipher, which utilized various protective steps like bigram replacement
that made cracking via frequency analysis much more difficult.&lt;/p&gt;
&lt;p&gt;But that's enough for one post!&lt;/p&gt;
&lt;p&gt;Below you can find a Java program that uses the BigInteger class, part of the Java API, to perform calculations with extremely large numbers.&lt;/p&gt;
&lt;p&gt;&lt;a name="javabigint"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="java-biginteger-program"&gt;Java BigInteger Program&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.math.BigInteger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.text.*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/** Cryptanalysis of the Enigma Machine.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * This program uses combinatorics and big integers&lt;/span&gt;
&lt;span class="cm"&gt; * to analyze the cryptographic strength of the Enigma machine.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Author: Charles Reid&lt;/span&gt;
&lt;span class="cm"&gt; * Date: March 2017&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Combos&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

        &lt;span class="c1"&gt;// This involves a double factorial. PREPARE YOUR CPU&lt;/span&gt;
        &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;doBig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;



        &lt;span class="c1"&gt;/////////////////////////////////&lt;/span&gt;
        &lt;span class="c1"&gt;// Git Ready&lt;/span&gt;

        &lt;span class="n"&gt;DecimalFormat&lt;/span&gt; &lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DecimalFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#,###&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;BigInteger&lt;/span&gt; &lt;span class="n"&gt;small_combos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;BigInteger&lt;/span&gt; &lt;span class="n"&gt;big_combos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;/// Useful temp variable &lt;/span&gt;
        &lt;span class="n"&gt;BigInteger&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;



        &lt;span class="c1"&gt;/////////////////////////////////&lt;/span&gt;
        &lt;span class="c1"&gt;// Constants&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// number of switchboard wires&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// number of possible rotors&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// number of possible reflectors&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// number of rotors&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// number of symbols&lt;/span&gt;




        &lt;span class="c1"&gt;/////////////////////////////////&lt;/span&gt;
        &lt;span class="c1"&gt;// Plugboard combinations&lt;/span&gt;

        &lt;span class="n"&gt;BigInteger&lt;/span&gt; &lt;span class="n"&gt;plugboard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// S!/(S-2N)!&lt;/span&gt;
        &lt;span class="n"&gt;BigInteger&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// divided by 2^N&lt;/span&gt;
        &lt;span class="n"&gt;BigInteger&lt;/span&gt; &lt;span class="n"&gt;pdenom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;pdenom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pdenom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// divided by N!&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;pdenom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pdenom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;plugboard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdenom&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;



        &lt;span class="c1"&gt;/////////////////////////////////&lt;/span&gt;
        &lt;span class="c1"&gt;// Rotor combinations&lt;/span&gt;

        &lt;span class="n"&gt;BigInteger&lt;/span&gt; &lt;span class="n"&gt;small_rotors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;BigInteger&lt;/span&gt; &lt;span class="n"&gt;big_rotors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// -----------------&lt;/span&gt;
        &lt;span class="c1"&gt;// Small case:&lt;/span&gt;
        &lt;span class="c1"&gt;// R rotors selected from P possible known rotors&lt;/span&gt;

        &lt;span class="c1"&gt;// Rotor wheel combinations&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;small_rotors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;small_rotors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Rotor wheel notch positions (assume 1 per wheel). &lt;/span&gt;
        &lt;span class="c1"&gt;// Ignore left-most wheel.&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;small_rotors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;small_rotors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// Rotor wheel starting positions&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;small_rotors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;small_rotors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// -----------------&lt;/span&gt;
        &lt;span class="c1"&gt;// Big case:&lt;/span&gt;
        &lt;span class="c1"&gt;// R rotors selected from S! possible rotors&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doBig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="n"&gt;BigInteger&lt;/span&gt; &lt;span class="n"&gt;s_rm1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;BigInteger&lt;/span&gt; &lt;span class="n"&gt;sfact_r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;sfact_r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sfact_r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;sfact_r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sfact_r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;big_rotors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s_rm1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sfact_r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;/////////////////////////////////&lt;/span&gt;
        &lt;span class="c1"&gt;// Reflector combinations&lt;/span&gt;

        &lt;span class="n"&gt;BigInteger&lt;/span&gt; &lt;span class="n"&gt;small_reflector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;BigInteger&lt;/span&gt; &lt;span class="n"&gt;big_reflector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// (S!)/((S/2)!)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;big_reflector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big_reflector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// divided by 2^N&lt;/span&gt;
        &lt;span class="n"&gt;BigInteger&lt;/span&gt; &lt;span class="n"&gt;rfldenom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;rfldenom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rfldenom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doBig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="n"&gt;big_reflector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big_reflector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rfldenom&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;



        &lt;span class="c1"&gt;/////////////////////////////////&lt;/span&gt;
        &lt;span class="c1"&gt;// Final combinations&lt;/span&gt;

        &lt;span class="n"&gt;small_combos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;small_combos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plugboard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;small_combos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;small_combos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;small_rotors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;small_combos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;small_combos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;small_reflector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doBig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;big_combos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big_combos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plugboard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;big_combos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big_combos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_rotors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;big_combos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big_combos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_reflector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Final number of (small) Enigma combinations: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;small_combos&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doBig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Final number of (big) Enigma combinations: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_combos&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output of the program:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Final number of (small) Enigma combinations:
537,293,436,636,253,096,800,000
Final number of (big) Enigma combinations:
422,732,921,460,335,478,939,047,043,039,799,222,455,533,136,281,221,092,624,796,865,514,111,348,059,884,989,972,480,000,000,000,000,000,000,000,000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name="sources"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"The Enigma Cipher". Tony Sale and Andrew Hodges. Publication date unknown. Accessed 18 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170320081639/http://www.codesandciphers.org.uk/enigma/index.htm"&gt;https://web.archive.org/web/20170320081639/http://www.codesandciphers.org.uk/enigma/index.htm&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"BigInteger". Oracle Corporation. Copyright 1993-2016, Publication date unknown. Accessed 22 March 2017.
&amp;lt;&lt;a href="https://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html"&gt;https://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Enigma"></category><category term="ciphers"></category><category term="enigma"></category><category term="encryption"></category><category term="java"></category></entry><entry><title>Enigma Cipher Implementation: Part 3: Enigma in Java Without Objects</title><link href="https://charlesreid1.github.io/enigma-cipher-implementation-part-3-enigma-in-java-without-objects.html" rel="alternate"></link><published>2017-03-22T18:00:00-07:00</published><updated>2017-03-22T18:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-03-22:/enigma-cipher-implementation-part-3-enigma-in-java-without-objects.html</id><summary type="html">&lt;p&gt;As the title suggests, we're continuing with the third in a series of posts 
exploring a verb-oriented approach to programming - 
in an attempt to free ourselves from the fetishization of objects,
we are attempting to learn how to use languages against their will.&lt;/p&gt;
&lt;p&gt;This is all inspired by &lt;a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html"&gt;Steve Yegge's 2006 blog post&lt;/a&gt;,
"Execution in the Kingdom of Nouns," an excellent read that inspired me to 
explore the subject more deeply. &lt;/p&gt;
&lt;h2 id="java-pseudocode"&gt;Java Pseudocode&lt;/h2&gt;
&lt;p&gt;In the last post, we ran through the pseudocode for an Enigma machine 
based entirely upon Strings, iterators, and integer indexes, 
leading to a vastly simpler abstraction â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;As the title suggests, we're continuing with the third in a series of posts 
exploring a verb-oriented approach to programming - 
in an attempt to free ourselves from the fetishization of objects,
we are attempting to learn how to use languages against their will.&lt;/p&gt;
&lt;p&gt;This is all inspired by &lt;a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html"&gt;Steve Yegge's 2006 blog post&lt;/a&gt;,
"Execution in the Kingdom of Nouns," an excellent read that inspired me to 
explore the subject more deeply. &lt;/p&gt;
&lt;h2 id="java-pseudocode"&gt;Java Pseudocode&lt;/h2&gt;
&lt;p&gt;In the last post, we ran through the pseudocode for an Enigma machine 
based entirely upon Strings, iterators, and integer indexes, 
leading to a vastly simpler abstraction of the Enigma machine
than would have resulted if we had implicitly chosen a noun-centric approach,
divided the entire Enigma encryption process into its component nouns like rotor wheels and reflectors,
and implemented each as an object.&lt;/p&gt;
&lt;p&gt;Here was the pseudocode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define plaintext message
define normal alphabet and scrambled alphabets
define list of switchboard swap pairs
define list of reflector swap pairs
for each character in plaintext message:

    # Apply switchboard transformation
    for each pair in switchboard swap pairs:
        if character in swap pair, swap its value

    # Apply forward rotor transformation
    for each scrambled alphabet:
        get index of character in normal alphabet
        get new character at that index in scrambled alphabet
        replace character with new character 

    # Apply reflector transformation
    for each pair in reflector swap pairs:
        if character in swap pair, swap its value

    # Apply reverse rotor transformation
    for each scrambled alphabet:
        get index of input character in scrambled alphabet
        get new character at that index in normal alphabet
        replace character with new character 

    # Apply switchboard transformation
    for each pair in switchboard swap pairs:
        if character in swap pair, swap its value

    concatenate transformed input character to ciphertext message 

    # Increment rotor wheels
    for each rotor/scrambled alphabet, left to right:
        get index of left notch in left alphabet
        get index of right notch in right alphabet
        if left index equals right index:
            cycle left alphabet forward 1 character
    cycle right-most alphabet forward 1 character
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="java-code"&gt;Java Code&lt;/h2&gt;
&lt;p&gt;The Enigma code is defined in the Java program as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Enigma class defines a set of constants for historically accurate cipher settings.&lt;/li&gt;
&lt;li&gt;The main method contains the encryption procedure.&lt;/li&gt;
&lt;li&gt;There is one static helper method called rotateString.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Everything is in a public class. Starting with the definitions of constants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Enigma&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;ALPHA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Historically accurate rotor scrambles&lt;/span&gt;
    &lt;span class="c1"&gt;// See http://www.codesandciphers.org.uk/enigma/rotorspec.htm&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;WHEEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;ALPHA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;EKMFLGDQVZNTOWYHXUSPAIBRCJ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Rotor I    - Royal&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;AJDKSIRUXBLHWTMCQGZNPYFVOE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Rotor II   - Flags&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;BDFHJLCPRTXVZNYEIWGAKMUSQO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Rotor III  - Wave&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;ESOVPZJAYQUIRHXLNFTGKDCMWB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Rotor IV   - Kings&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;VZBRGITYUPSDNHLXAWMJQOFECK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Rotor V    - Above&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;JPGVOUMFYQBENHZRDKASXLICTW&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;NZJHGRCXMYSWBOUFAIVLPEKQDT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;FKQHTLXOCBJSPDZRAMEWNIUYGV&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// Knocking (notch and clasp) advances the wheel to the left&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;NOTCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// No notch&lt;/span&gt;
                                          &lt;span class="s"&gt;&amp;quot;R&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Royal&lt;/span&gt;
                                          &lt;span class="s"&gt;&amp;quot;F&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Flags&lt;/span&gt;
                                          &lt;span class="s"&gt;&amp;quot;W&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Wave&lt;/span&gt;
                                          &lt;span class="s"&gt;&amp;quot;K&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Kings&lt;/span&gt;
                                          &lt;span class="s"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Above&lt;/span&gt;
                                          &lt;span class="s"&gt;&amp;quot;AN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                          &lt;span class="s"&gt;&amp;quot;AN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                          &lt;span class="s"&gt;&amp;quot;AN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// Reflectors&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;REFLECTOR_ALPHA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AY:BR:CU:DH:EQ:FS:GL:IP:JX:KN:MO:TZ:VW&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="main-method-user-settings"&gt;Main Method: User Settings&lt;/h2&gt;
&lt;p&gt;The next part of the code is the main method, where we begin by defining variables 
that correspond to settings that the Enigma operator would set from the daily Enigma code book.
These included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The numbering and ordering of wheels (e.g., &lt;code&gt;IV II I&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The initial rotor settings for each wheel (position 0-25)&lt;/li&gt;
&lt;li&gt;The pairs of letters connected on the switch board&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The wheels are specified using the &lt;code&gt;WHEEL&lt;/code&gt; array of Strings, above.
Each element of the WHEEL array contains a different scrambled alphabet, 
corresponding to the alphabet scrambles hard-coded into the historical rotor wheels.
These go into &lt;code&gt;rotorAlpha&lt;/code&gt;, which stores each rotor's alphabet in a String.&lt;/p&gt;
&lt;p&gt;The locations of the notches that advance neighboring wheels are fixed by the choice of wheels, 
and are available through the &lt;code&gt;NOTCH&lt;/code&gt; array.
The notch locations implemented in &lt;code&gt;NOTCH&lt;/code&gt; are historically accurate for each rotor wheel. &lt;/p&gt;
&lt;p&gt;The initial rotor settings were also contained in the code book as a sequence of 3 numbers,
each 0-25, indicating how many turns each wheel was rotated before starting.&lt;/p&gt;
&lt;p&gt;The plugboard pairs specify the wired connections on the front of the machine.
These plugboard pairs were also daily machine settings specified in the daily Enigma code book.
The plugboard pairs are input as a single string, with pairs of letters separated by a ":", like this: &lt;code&gt;AB:CD:EF:GH&lt;/code&gt;.
Pairs must be unique (no letter can connect to itself). 
Letters cannot be repeated (no letter can connect to more than 1 other letter).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

        &lt;span class="c1"&gt;// These two strings should encrypt/decrypt to each other when you run them through the Enigma.&lt;/span&gt;
        &lt;span class="c1"&gt;//String message = &amp;quot;ABCDE FG HIJKL MNOP QRS TUVWXYZ&amp;quot;; &lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TVVFT KS UNVYJ FAFV NPC DZJPWEJ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


        &lt;span class="c1"&gt;//////////////////////////////////&lt;/span&gt;
        &lt;span class="c1"&gt;// Operator Settings&lt;/span&gt;
        &lt;span class="c1"&gt;// &lt;/span&gt;
        &lt;span class="c1"&gt;// Enigma operators have code sheets that specify: &lt;/span&gt;
        &lt;span class="c1"&gt;//  - The numbering/ordering of wheels &lt;/span&gt;
        &lt;span class="c1"&gt;//  - The initial rotor settings&lt;/span&gt;
        &lt;span class="c1"&gt;//  - The plugboard pairs&lt;/span&gt;

        &lt;span class="c1"&gt;// Rotor scrambles are applied right-to-left&lt;/span&gt;
        &lt;span class="c1"&gt;//              {LAST, MIDDLE, FIRST}&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;WHEEL&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;WHEEL&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;WHEEL&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;rotorNotch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;NOTCH&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;NOTCH&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;NOTCH&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;rotorInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;plugboardPairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IR:HQ:NT:WZ:VC:OY:GP:LF:BX:AK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;coded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enigma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorNotch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plugboardPairs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coded&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="cipher-procedure"&gt;Cipher Procedure&lt;/h2&gt;
&lt;p&gt;The next bit of code is the meat of the Enigma method.
Notice that this is purely procedural code, and makes no use of objects other than the built-in String type. 
This is the kind of verb-oriented code we are striving for
when we write noun-free Java code.&lt;/p&gt;
&lt;p&gt;We also pass in any information that's required. 
Normally we would wrap all of these quantities in an object,
to keep the list of parameters short, but this implementation is entirely object-free.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;enigma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;rotorNotch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;rotorInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;plugboardPairs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

        &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;message_final&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;//////////////////////////////////////&lt;/span&gt;
        &lt;span class="c1"&gt;// Enigma Cipher&lt;/span&gt;

        &lt;span class="c1"&gt;// Apply each transformation in sequence&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="c1"&gt;// Starting char&lt;/span&gt;
            &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c_orig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c_orig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;// Perform plugboard swap&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;plugboardPairs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// Perform rotor letter substitutions&lt;/span&gt;
            &lt;span class="c1"&gt;// (forward order: right-to-left)&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ALPHA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;thisAlpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thisAlpha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c_orig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// Perform reflection&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;REFLECTOR_ALPHA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// Perform rotor letter substitutions&lt;/span&gt;
            &lt;span class="c1"&gt;// (backwards order: left-to-right) &lt;/span&gt;
            &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;thisAlpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thisAlpha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ALPHA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c_orig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;


            &lt;span class="c1"&gt;// Perform plugboard swap&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;plugboardPairs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;


            &lt;span class="c1"&gt;// Final text&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="n"&gt;message_final&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Could not resolve &lt;/span&gt;
                &lt;span class="n"&gt;message_final&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c_orig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// Increment rotors&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;alphaL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ixL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alphaL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rotorNotch&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;alphaR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ixR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alphaR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rotorNotch&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixL&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;ixR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                    &lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rotateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="c1"&gt;// Always increment the right-most rotor&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lenny&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lenny&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rotateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lenny&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;message_final&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="utility-method-string-rotator"&gt;Utility Method: String Rotator&lt;/h2&gt;
&lt;p&gt;One last piece that's needed to emulate the rotation of the rotor wheels 
is a method to rotate strings forward 1 character. Here's that method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="c1"&gt;/// Rotate a string forward by 1 character, so &amp;quot;ABCDEF&amp;quot; becomes &amp;quot;FABCDE&amp;quot;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;rotateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lenny&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;rotated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;rotated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lenny&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;lenny&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="n"&gt;rotated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rotated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// end Enigma class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="complete-enigma-implementation"&gt;Complete Enigma Implementation&lt;/h2&gt;
&lt;p&gt;Here is a link to the complete Enigma code on git.charlesreid1.com: &lt;a href="https://git.charlesreid1.com/charlesreid1/java-crypto/src/master/enigma/Enigma.java"&gt;Enigma.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now that the Enigma machine implementation is finished, we can test it out.
One feature of the Enigma that makes it easy to test is, it is symmetric.
If we feed a plain text into the Enigma and get the corresponding ciphertext,
we can feed that ciphertext through the Enigma (with the same initial settings) 
and recover the original plain text.&lt;/p&gt;
&lt;p&gt;Running the alphabet through the Enigma yields:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ java Enigma
IN:  ABCDE FG HIJKL MNOP QRS TUVWXYZ
OUT: TVVFT KS UNVYJ FAFV NPC DZJPWEJ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running this back through the Enigma yields:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ java Enigma
IN:  TVVFT KS UNVYJ FAFV NPC DZJPWEJ
OUT: ABCDE FG HIJKL MNOP QRS TUVWXYZ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This code modifies the Enigma machine's settings in-place.
This means multiple sequential calls to the &lt;code&gt;enigma()&lt;/code&gt; method will not reset the rotors.
The following code will not recover the original plain text &lt;code&gt;message&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// This won&amp;#39;t work:&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;coded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enigma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorNotch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plugboardPairs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;original2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enigma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorNotch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plugboardPairs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To do this correctly, we would need multiple copies of the input arrays &lt;code&gt;rotorAlpha&lt;/code&gt;, &lt;code&gt;rotorNotch&lt;/code&gt;, and &lt;code&gt;rotorInit&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;plugboardPairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IR:HQ:NT:WZ:VC:OY:GP:LF:BX:AK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;WHEEL&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;WHEEL&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;WHEEL&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;rotorNotch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;NOTCH&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;NOTCH&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;NOTCH&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;rotorInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;coded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enigma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorNotch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plugboardPairs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;WHEEL&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;WHEEL&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;WHEEL&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;rotorNotch2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;NOTCH&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;NOTCH&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;NOTCH&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;rotorInit2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enigma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorAlpha2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorNotch2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rotorInit2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plugboardPairs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ORIGINAL:  &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RECOVERED: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This works fine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ORIGINAL:  ABCDE FG HIJKL MNOP QRS TUVWXYZ
RECOVERED: ABCDE FG HIJKL MNOP QRS TUVWXYZ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"Execution in the Kingdom of Nouns". Steve Yegge. March 2006. Accessed 18 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170320081755/https://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html"&gt;https://web.archive.org/web/20170320081755/https://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"The Enigma Cipher". Tony Sale and Andrew Hodges. Publication date unknown. Accessed 18 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170320081639/http://www.codesandciphers.org.uk/enigma/index.htm"&gt;https://web.archive.org/web/20170320081639/http://www.codesandciphers.org.uk/enigma/index.htm&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Enigma"></category><category term="ciphers"></category><category term="enigma"></category><category term="encryption"></category><category term="java"></category></entry><entry><title>Enigma Cipher Implementation: Part 2: Pseudocode</title><link href="https://charlesreid1.github.io/enigma-cipher-implementation-part-2-pseudocode.html" rel="alternate"></link><published>2017-03-21T21:00:00-07:00</published><updated>2017-03-21T21:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-03-21:/enigma-cipher-implementation-part-2-pseudocode.html</id><summary type="html">&lt;p&gt;This is the second of several posts walking through an implementation of the Enigma cipher in code.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://www.codesandciphers.org.uk/enigma/index.htm"&gt;the website of the late Tony Sale&lt;/a&gt; for providing a wealth of 
detailed, accurate information entirely free of graduate level mathematics, 
and includes some very clear &lt;a href="http://www.codesandciphers.org.uk/enigma/example1.htm"&gt;examples&lt;/a&gt; for luddites like me who need everything spelled out really clearly.&lt;/p&gt;
&lt;h2 id="the-goal"&gt;The Goal&lt;/h2&gt;
&lt;p&gt;The goal of analyzing the Enigma machine is to better understand the workings of a device that played an important role in the history of computing.
It is also an excellent system to better understand some of the design decisions we â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the second of several posts walking through an implementation of the Enigma cipher in code.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://www.codesandciphers.org.uk/enigma/index.htm"&gt;the website of the late Tony Sale&lt;/a&gt; for providing a wealth of 
detailed, accurate information entirely free of graduate level mathematics, 
and includes some very clear &lt;a href="http://www.codesandciphers.org.uk/enigma/example1.htm"&gt;examples&lt;/a&gt; for luddites like me who need everything spelled out really clearly.&lt;/p&gt;
&lt;h2 id="the-goal"&gt;The Goal&lt;/h2&gt;
&lt;p&gt;The goal of analyzing the Enigma machine is to better understand the workings of a device that played an important role in the history of computing.
It is also an excellent system to better understand some of the design decisions we make when creating a code representation of a problem. &lt;/p&gt;
&lt;p&gt;The intention is to replicate some of the encryption mechanisms of the original Enigma. 
From the Part 1 post, which covered more about how Enigma works, we have built up a basic understanding of what each step does.
In this post we discuss how to implement this functionality.&lt;/p&gt;
&lt;p&gt;The basic idea is to start with a plaintext input (typed by the operator) and apply a rotating cripher to encrypt it, resulting in a ciphertext output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                _________
               |         |
PLAINTEXT ---&amp;gt; | ENIGMA  | ----&amp;gt; CIPHERTEXT
               |_________|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="function-or-object"&gt;Function or Object?&lt;/h2&gt;
&lt;p&gt;One of the first decisions typically made (sometimes implicitly) is whether to implement the Enigma as a function or an object.
Is the Enigma a noun, or a verb?&lt;/p&gt;
&lt;h3 id="the-noun-approach"&gt;The Noun Approach&lt;/h3&gt;
&lt;p&gt;Programming in a language like Java or C++, the noun approach seems perfectly natural:
start with an Enigma object (the noun), and create more objects to represent more of the nouns (the switchboard, the rotor wheels, and the reflector). 
Each component is modeled as a black box function taking a character in and returning a character out. 
Each component stores and organizes information important for it to perform its particular transformation.
For example, the rotors would store the scrambled version of the alphabet that they implement, 
while the switchboard and the reflector would store the connected letter pairs.&lt;/p&gt;
&lt;p&gt;This approach reflects the kind of engineering approach that was taken to the design of the Enigma: 
many simple components, working together in concert, result in a more complex integrated system.&lt;/p&gt;
&lt;p&gt;But one of the reasons the Enigma machine is an interesting system for implementing in code 
is because of the simplicity of the mechanical operations performed. 
This can help identify where a person actually begins the software design process. 
If the design process starts with one foot in the world of objects already, the object approach will be adopted by default.&lt;/p&gt;
&lt;p&gt;With this approach, we are reshaping our data structures to fit the problem. 
This makes the implementation more modular and the driver easier to read at a high level. 
However, reshaping the data structures to fit the problem and our abstraction of it 
can lead to more inefficient code and implementations.&lt;/p&gt;
&lt;h3 id="the-verb-approach"&gt;The Verb Approach&lt;/h3&gt;
&lt;p&gt;Instead, we can start by examining the encryption process itself - the verb of encryption. 
The action of encryption consists of elementary steps - swapping out two characters. 
Each of these actions is simple enough that it can be implemented using built-in string manipulation methods,
and all of the quantities being stored are likewise simple enough that no exotic data structures are required. &lt;/p&gt;
&lt;p&gt;The verb approach requires considering the problem up-front (possibly recasting it in different terms),
and thinking through the actions involved in order to best utilize simple, built-in data structures and functionality.&lt;/p&gt;
&lt;p&gt;With this approach we essentially reshape the problem to fit our data structures, rather than the other way around.&lt;/p&gt;
&lt;h2 id="applying-the-verb-approach-to-the-rotors"&gt;Applying the Verb Approach to the Rotors&lt;/h2&gt;
&lt;h3 id="rotors"&gt;Rotors&lt;/h3&gt;
&lt;p&gt;To get a better sense of what the verb approach looks like, let's look at the Enigma rotors.&lt;/p&gt;
&lt;p&gt;Each rotor implements a particular permutations of the 26 letters of the alphabet: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Enigma rotor" src="/images/enigma_rotor.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This is equivalent to matching up two strings. To make things slightly more concrete, let's look at Rotor I, nicknamed Royal
(due to the location of its notch at the letter R), implemented the scrambled alphabet "EKMFLGDQVZNTOWYHXUSPAIBRCJ".
With an offset of 0, this would therefore implement the following shift:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ
||||||||||||||||||||||||||
EKMFLGDQVZNTOWYHXUSPAIBRCJ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This operation, when broken down, is trivial: we are matching two characters from two strings, both at a particular location.&lt;/p&gt;
&lt;p&gt;Starting with a char, representing the character coming into the rotor,
we can perform a two-step operation: 
1. Get the index of the incoming character in the normal alphabet &lt;code&gt;ABCDEF...&lt;/code&gt;.
2. Get the corresponding character at that index in the scrambled alphabet &lt;code&gt;EKMFLG...&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We will also need to perform the reverse operation when we return the signal back through the machine from the reflector.
In that case, we're actually performing the opposite lookup, for the same wheel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;EKMFLGDQVZNTOWYHXUSPAIBRCJ
||||||||||||||||||||||||||
ABCDEFGHIJKLMNOPQRSTUVWXYZ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When we were going through Rotor I the first time, A became E, and E became L;
when going through in reverse, E now becomes A, and L now becomes E.&lt;/p&gt;
&lt;p&gt;The procedure can also be reversed:
1. Get the index of the incoming character in the scrambled alphabet &lt;code&gt;EKMFLG...&lt;/code&gt;.
2. Get the corresponding character at that index in the normal alphabet &lt;code&gt;ABCDEF...&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Applying this multiple times in sequence applies multiple scrambles
and replicates multiple rotors.&lt;/p&gt;
&lt;h3 id="example-of-verb-approach-rotor-rotation"&gt;Example of Verb Approach: Rotor Rotation&lt;/h3&gt;
&lt;p&gt;One of the reasons an object-oriented approach may seem natural,
besides the chosen language suggesting it, 
is because the Enigma is an object with a &lt;em&gt;state&lt;/em&gt;.
Objects provide a natural way of representing things with an internal state, 
or information specific to that entity and required for its operation.&lt;/p&gt;
&lt;p&gt;For this reason, it may seem at first blush that the Engima &lt;em&gt;requires&lt;/em&gt; an object-oriented implementation.
However, we can continue with our verb-centric thinking, and examine how the operations change when the wheels are rotated.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;After 2 rotations:

ABCDEFGHIJKLMNOPQRSTUVWXYZAB
  ||||||||||||||||||||||||||
  EKMFLGDQVZNTOWYHXUSPAIBRCJ

After 4 rotations:

ABCDEFGHIJKLMNOPQRSTUVWXYZABCD
    ||||||||||||||||||||||||||
    EKMFLGDQVZNTOWYHXUSPAIBRCJ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As the wheels rotate, we are still performing the same index lookup operations, 
we are just rotating each scrambled alphabet by one character. 
Again, this is a trivial operation that is probably built in for string types. &lt;/p&gt;
&lt;h3 id="rotor-pseudocode"&gt;Rotor Pseudocode&lt;/h3&gt;
&lt;p&gt;Putting all of this together, here's pseudocode for a single forward transformation by an Engima rotor: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define plaintext message
define normal alphabet and scrambled alphabet 
for each character in plaintext message:
    get index of input character in normal alphabet
    get new character at that index in scrambled alphabet
    concatenate transformed character to ciphertext message 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Because the Enigma has multiple rotors, we also want pseudocode for multiple rotors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define plaintext message
define normal alphabet and scrambled alphabets
for each character in plaintext message:
    for each scrambled alphabet:
        get index of character in normal alphabet
        get new character at that index in scrambled alphabet
        replace character with new character 
    concatenate transformed character to ciphertext message 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Likewise, to apply multiple rotations in reverse, we just swap the alphabets out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define plaintext message
define normal alphabet and scrambled alphabets
for each character in plaintext message:
    for each scrambled alphabet:
        get index of character in scrambled alphabet
        get new character at that index in normal alphabet
        replace character with new character 
    concatenate transformed character to ciphertext message 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="a-more-complete-enigma-pseudocode"&gt;A More Complete Enigma Pseudocode&lt;/h3&gt;
&lt;p&gt;To combine these operations, or add additional operations, we just add them before concatenating the final transformed character to the ciphertext message.
Thus, a more complete pseudocode would include other steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define plaintext message
define normal alphabet and scrambled alphabets
for each character in plaintext message:

    # Apply switchboard transformation

    # Apply forward rotor transformation
    for each scrambled alphabet:
        get index of character in normal alphabet
        get new character at that index in scrambled alphabet
        replace character with new character 

    # Apply reflector transformation

    # Apply reverse rotor transformation
    for each scrambled alphabet:
        get index of input character in scrambled alphabet
        get new character at that index in normal alphabet
        replace character with new character 

    # Apply switchboard transformation

    concatenate transformed character to ciphertext message 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let's cover the switchboard and reflector transformations.&lt;/p&gt;
&lt;h2 id="the-switchboard"&gt;The Switchboard&lt;/h2&gt;
&lt;p&gt;We can take the same verb-based approach to the switchboard as we took for the rotors.
When we think through the actual operation being performed by the switchboard, 
it is even simpler than the operation performed by the rotor wheels.
We have pairs of letters, and we are simply looking for one letter in a pair, and swapping it out with the other letter in the pair.
In the case of the switchboard, Enigma operators utilized 7-10 wires to connect pairs of letters; the remaining letters were unchanged.
So the switchboard step is very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define plaintext message
define list of switchboard swap pairs
for each character in message:
    for each pair in swap pairs:
        if character in swap pair, swap its value
    add character to ciphertext
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's it! No need for a reverse function, since the swap procedure is symmetric. 
(Note that if there is no wire connecting a letter to another letter, there is no swap operation, and the character is added to the ciphertext directly.)&lt;/p&gt;
&lt;h2 id="the-reflector"&gt;The Reflector&lt;/h2&gt;
&lt;p&gt;The reflector pseudocode looks identical to the switchboard pseudocode,
except the reflector defines pairings for all 13 posible letter pairs, instead of only 7-10.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define plaintext message
define list of reflector swap pairs
for each character in message:
    for each pair in swap pairs:
        if character in swap pair, swap its value
    add character to ciphertext
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, no need for a reverse version, since the reflector is a symmetric transformation.&lt;/p&gt;
&lt;h2 id="nearing-a-complete-enigma-pseudocode"&gt;Nearing a Complete Enigma Pseudocode&lt;/h2&gt;
&lt;p&gt;Almost there. We have one more thing going on - those rotor wheels are moving.
Add the "increment rotor wheels" verb, and define that below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define plaintext message
define normal alphabet and scrambled alphabets
define list of switchboard swap pairs
define list of reflector swap pairs
for each character in plaintext message:

    # Apply switchboard transformation
    for each pair in switchboard swap pairs:
        if character in swap pair, swap its value

    # Apply forward rotor transformation
    for each rotor/scrambled alphabet:
        get index of character in normal alphabet
        get new character at that index in scrambled alphabet
        replace character with new character 

    # Apply reflector transformation
    for each pair in reflector swap pairs:
        if character in swap pair, swap its value

    # Apply reverse rotor transformation
    for each scrambled alphabet:
        get index of input character in scrambled alphabet
        get new character at that index in normal alphabet
        replace character with new character 

    # Apply switchboard transformation
    for each pair in switchboard swap pairs:
        if character in swap pair, swap its value

    concatenate transformed input character to ciphertext message 

    increment rotor wheels
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="incrementing-the-rotor-wheels"&gt;Incrementing the Rotor Wheels&lt;/h2&gt;
&lt;p&gt;Each rotor wheel has a notch located at a particular letter.
The wheels were identified by the letter on which the notch was located 
(Rotor I was "Royal" because the notch was located at "R", and so on).&lt;/p&gt;
&lt;p&gt;The notches were designed to catch on the notches of other rotor wheels,
in such a way that the wheels would turn together periodically.
The right-most wheel would rotate once per keypress. 
Once per 26 letters (if S = 26), the notch would catch the notch of the next rotor over
and advance it forward by 1 letter. It was this mechanism that kept the machine
constantly skipping through the space of possible keys, mapping each character to each other character,
with one distinct key (alphabet scramble) used per letter of the message.&lt;/p&gt;
&lt;p&gt;To increment the wheels in pseudocode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;function increment rotors:
    for each rotor/scrambled alphabet, left to right:
        get index of left notch in left alphabet
        get index of right notch in right alphabet
        if left index equals right index:
            cycle left alphabet forward 1 character
    cycle right-most alphabet forward 1 character
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="enigma-pseudocode"&gt;Enigma Pseudocode&lt;/h2&gt;
&lt;p&gt;Almost there. We have one more thing going on - those rotor wheels are moving.
Add the "increment rotor wheels" verb, and define that below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;define plaintext message
define normal alphabet and scrambled alphabets
define list of switchboard swap pairs
define list of reflector swap pairs
for each character in plaintext message:

    # Apply switchboard transformation
    for each pair in switchboard swap pairs:
        if character in swap pair, swap its value

    # Apply forward rotor transformation
    for each rotor/scrambled alphabet:
        get index of character in normal alphabet
        get new character at that index in scrambled alphabet
        replace character with new character 

    # Apply reflector transformation
    for each pair in reflector swap pairs:
        if character in swap pair, swap its value

    # Apply reverse rotor transformation
    for each scrambled alphabet:
        get index of input character in scrambled alphabet
        get new character at that index in normal alphabet
        replace character with new character 

    # Apply switchboard transformation
    for each pair in switchboard swap pairs:
        if character in swap pair, swap its value

    concatenate transformed input character to ciphertext message 

    # Increment rotor wheels
    for each rotor/scrambled alphabet, left to right:
        get index of left notch in left alphabet
        get index of right notch in right alphabet
        if left index equals right index:
            cycle left alphabet forward 1 character
    cycle right-most alphabet forward 1 character
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;"The Enigma Cipher". Tony Sale and Andrew Hodges. Publication date unknown. Accessed 18 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170320081639/http://www.codesandciphers.org.uk/enigma/index.htm"&gt;https://web.archive.org/web/20170320081639/http://www.codesandciphers.org.uk/enigma/index.htm&lt;/a&gt;&amp;gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Enigma"></category><category term="ciphers"></category><category term="enigma"></category><category term="encryption"></category></entry><entry><title>Enigma Cipher Implementation: Part 1: How It Works</title><link href="https://charlesreid1.github.io/enigma-cipher-implementation-part-1-how-it-works.html" rel="alternate"></link><published>2017-03-21T20:00:00-07:00</published><updated>2017-03-21T20:00:00-07:00</updated><author><name>charlesreid1</name></author><id>tag:charlesreid1.github.io,2017-03-21:/enigma-cipher-implementation-part-1-how-it-works.html</id><summary type="html">&lt;p&gt;This is the first of several posts that will walk through an implementation of the Enigma cipher in code.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://www.codesandciphers.org.uk/enigma/index.htm"&gt;the website of the late Tony Sale&lt;/a&gt; for providing a wealth of 
detailed, accurate information entirely free of graduate level mathematics, 
and includes some very clear &lt;a href="http://www.codesandciphers.org.uk/enigma/example1.htm"&gt;examples&lt;/a&gt; for luddites like me who need everything spelled out really clearly.&lt;/p&gt;
&lt;p&gt;There is also a Wikipedia article offering detailed information about the mathematical cryptanalysis of the Enigma,
and covering some of the strengths and weaknesses of the machine: &lt;a href="https://en.wikipedia.org/wiki/Cryptanalysis_of_the_Enigma"&gt;Cryptanalysis of the Enigma&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;The Enigma machine was a device used by the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the first of several posts that will walk through an implementation of the Enigma cipher in code.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://www.codesandciphers.org.uk/enigma/index.htm"&gt;the website of the late Tony Sale&lt;/a&gt; for providing a wealth of 
detailed, accurate information entirely free of graduate level mathematics, 
and includes some very clear &lt;a href="http://www.codesandciphers.org.uk/enigma/example1.htm"&gt;examples&lt;/a&gt; for luddites like me who need everything spelled out really clearly.&lt;/p&gt;
&lt;p&gt;There is also a Wikipedia article offering detailed information about the mathematical cryptanalysis of the Enigma,
and covering some of the strengths and weaknesses of the machine: &lt;a href="https://en.wikipedia.org/wiki/Cryptanalysis_of_the_Enigma"&gt;Cryptanalysis of the Enigma&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="background"&gt;Background&lt;/h2&gt;
&lt;p&gt;The Enigma machine was a device used by the German military to encrypt communications during World War II.
The machine was essentially a large electronic circuit implementing a black-box encrypt/decrypt function.
By design, the circuitry of the machine could be used for both encryption and decryption. &lt;/p&gt;
&lt;p&gt;The Enigma played an important role in the development of the first electronic computer. 
Alan Turing led a team at Bletchley Park, in England, that constructed machines that could crack the Enigma code.
This led to the development of the conceptual Turing machine and the creation of the first electronic computers.
By narrowing the space of possible keys using Enigma's weaknesses, 
these electronic computers could be used to explore the remaining key space.&lt;/p&gt;
&lt;p&gt;There were several variations of the Enigma. Each operated on the same basic principle:
the operator entered a letter, which was transformed into a signal. 
That signal was passed through several components of the Enigma machine,
and underwent a series of linear transformations until its ciphertext was output.
The encrypted output character would light up on a second keyboard, and the operator could transcribe the message.&lt;/p&gt;
&lt;h2 id="black-box-representation"&gt;Black Box Representation&lt;/h2&gt;
&lt;p&gt;The following diagram lays out the Enigma circuitry using black boxes. 
The signal starts at the keyboard, where the operator types a letter.
That letter is transformed into an electrical signal, which is sent through a series of components.
First is the switchboard in the front, which swaps a few letter pairs.
Next, the signal passes through three rotor wheels, each of which scrambles the alphabet.
The signal is then passed into a reflector, which swaps every character with some other character.
The reflector made the Enigma a symmetric machine. The signal was sent out of the reflector and passed through each rotor in reverse order.
Finally, the signal passed through the switchboard at the front, and the resulting letter lit up, allowing the operator to transcribe the message.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image: Enigma Black Box Representation" src="/images/enigma_blackbox.jpg"&gt;&lt;/p&gt;
&lt;h2 id="components"&gt;Components&lt;/h2&gt;
&lt;p&gt;There were three principal components of the machine: a &lt;strong&gt;switchboard&lt;/strong&gt;, a set of &lt;strong&gt;rotor wheels&lt;/strong&gt;, and a &lt;strong&gt;reflector&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="switchboard"&gt;Switchboard&lt;/h3&gt;
&lt;p&gt;When the operator entered a key on the input keyboard, the key pressed was transformed into a signal.
On the front of the Enigma machine was a set of plugs, one for each letter. Operators would connect
pairs of letters using plugs, which would swap letters. If an operator connected the A and K ports, 
and typed "A" on the keyboard, the signal representing "A" would travel to the switchboard, 
where it would be transformed into the signal representing "K". &lt;/p&gt;
&lt;p&gt;Typically the Enigma operators would only connect 7-10 pairs of letters, with the remaining 6-12 letters untransformed by the switchboard. 
The switchboard led to a huge number of possible encryption schemes, and was the single component that made the Enigma diffficult to crack.
Commercial versions of the Enigma, without the plugboard, were sold to banks and other entities in Germany, but without the plugboard,
the key space was reduced dramatically, making these codes "easy" to crack.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Enigma switchboard illustration" src="/images/enigma_switchboard.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The image above illustrates how a switchboard would work for a simple 8-symbol alphabet "ABCDEFGH". 
Only 3 of 4 pairings are made in this example. &lt;/p&gt;
&lt;h3 id="rotor-wheels"&gt;Rotor Wheels&lt;/h3&gt;
&lt;p&gt;The rotor wheels were a set of interchangeable wheels that would perform a substitution cipher. 
Each wheel corresponded to a particular alphabet in scrambled order (these rotors were not performing simple shift Caesar ciphers).
Based on the order of the wheels, the signal, representing the letter the operator typed on the keyboard, 
that came out of the switchboard would undergo three alphabet scrambles (also called affine ciphers).&lt;/p&gt;
&lt;p&gt;Because the wheels rotated with each keypress, the actual Affine cipher used by each wheel changed at each step.&lt;/p&gt;
&lt;p&gt;To complicate the way the rotors turned, the designer of the Enigma added clasps and notches to each rotor at different letters.
When the notch of one rotor and the clasp of the rotor to the left matched, they would turn together. 
The right-most wheel rotated once each key press, the center wheel rotated once every 26 key presses, and the left wheel rotated once every 676 key presses.
Although these rates remained the same due to the number of notches, the exact locations of the notches dictated the timing of the rotations.
The ordering of the wheels and their initial settings were therefore important to how the message was encrypted or decrypted.&lt;/p&gt;
&lt;p&gt;The German military distributed code books that contained daily settings for the Enigma machines, so that all Enigma operators had the same settings.
These code books specified which wheels to load into the Enigma (three out of five possible rotors I II III IV and V), as well as the initial rotation to apply to each.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Enigma rotor wheels illustration" src="/images/enigma_rotor.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The image above shows how the rotor would work for the 8-character alphabet "ABCDEFGH".
The wheel has a set arrangement of scrambled letters, but the scramble shifts each time the rotor is advanced.
This allows 1 wheel to provide as many different scrambles as there are symbols in the alphabet.&lt;/p&gt;
&lt;h3 id="reflector"&gt;Reflector&lt;/h3&gt;
&lt;p&gt;Having passed through the three rotor wheels, each scrambling the original character signal input by the operator into the keyboard, the signal then entered the reflector. 
It did precisely what the name suggests - it reflected a signal back through the machine. 
Its design was very similar to the switchboard in the front of the machine, except it created 13 pairs of letters, so that every letter was paired with some other letter.
The reflector, like the rotor wheels, was removable and could be selected from a set. &lt;/p&gt;
&lt;p&gt;The reflector is a curious part of the Enigma design, because it represents an attempt at convenience, which led to a gaping security flaw that Bletchley Park was able to exploit. 
The nature of the reflector is that it is symmetric: it pairs each letter with some other letter, and the pairings are mutual. 
If the reflector turns every "P" into "H", it also turns every "H" into "P". 
This symmetry gives the Enigma the property that you no longer need an "encrypt" or "decrypt" mode: if you take a plaintext message and run it through the Enigma machine once, you'll get the cipher text back. 
If you run it through the Enigma machine twice, you'll get the same plaintext back. 
This obviated the need for a switch on the Enigma, to go between "encrypt" and "decrypt" modes.&lt;/p&gt;
&lt;p&gt;However, this property also means that no letter can ever be encoded as itself - a property called derangement. 
While the switch board at the front and the rotor wheel scrambles would sometimes encode a letter as itself 
(for example, Rotor I encodes "S" as "S", Rotor II encodes "A" as "A" and "Q" as "Q", and Rotor III encodes "N" as "N"),
the reflector would never do so. 
Thus, despite an astronomical number of possible settings, and complicated machinery and circuitry, 
no matter what the Enigma's settings, no letter would ever be encoded as itself.
This property can be exploited to rule out the location of certain words or phrases at certain locations in the message,
which is precisely how Bletchley Park attacked the Enigma cipher.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Enigma reflector illustration" src="/images/enigma_reflector.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The image above illustrates a reflector for the 8-symbol alphabet "ABCDEFGH".
Each of the 4 possible pairings are made, so no letter will be encoded to itself by the reflector.&lt;/p&gt;
&lt;p&gt;Had the middle rotor wheels remained stationary, multiple wheels would have been redundant - 
any arbitrary sequence of alphabet scrambles can be collapsed into a single scramble.
However, the wheels were designed to rotate at various rates. Each time the wheels rotated,
it changed the scramble provided by the wheel that had rotated. &lt;/p&gt;
&lt;p&gt;This means the Enigma worked by using a totally different scramble for each character in a message,
with the scrambles constantly changing, each character, over and over. 
Because the number of possible scrambles with a 26 character alphabet is &lt;span class="math"&gt;\(26! = 403,291,461,126,605,635,584,000,000\)&lt;/span&gt;,
which is a trillion trillions.&lt;/p&gt;
&lt;h2 id="the-enigma-and-random-number-generators"&gt;The Enigma and Random Number Generators&lt;/h2&gt;
&lt;p&gt;By using a mechanical device with the same construction and the same common initial settings, 
operators were able to generate random keys from an astronomical range of permutations, 
but in a mechanically reproducible way. &lt;/p&gt;
&lt;p&gt;This makes Enigmas much like a random number generator, with the initial settings being the seed.
If there are 32 or 64 bits used to store a number, that's 32 or 64 bits of randomness. 
Large numbers of combinations indeed.&lt;/p&gt;
&lt;h2 id="sources"&gt;Sources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"The Enigma Cipher". Tony Sale and Andrew Hodges. Publication date unknown. Accessed 18 March 2017.
&amp;lt;&lt;a href="https://web.archive.org/web/20170320081639/http://www.codesandciphers.org.uk/enigma/index.htm"&gt;https://web.archive.org/web/20170320081639/http://www.codesandciphers.org.uk/enigma/index.htm&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copeland, B.J. "Alan Turing". Encyclopedia Britannica, Inc. Published 23 February 2016. Accessed 18 March 2017.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Cryptanalysis of the Enigma". Wikipedia: The Free Encyclopedia. Wikimedia Foundation, Inc. Edited 11 January 2017. Accessed 18 March 2017.
&amp;lt;&lt;a href="https://en.wikipedia.org/wiki/Cryptanalysis_of_the_Enigma"&gt;https://en.wikipedia.org/wiki/Cryptanalysis_of_the_Enigma&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Enigma"></category><category term="ciphers"></category><category term="enigma"></category><category term="encryption"></category></entry></feed>