<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>charlesreid1</title><link>https://charlesreid1.github.io/</link><description></description><lastBuildDate>Mon, 07 Oct 2019 20:00:00 -0700</lastBuildDate><item><title>Git Workflows, Part 1: Supercharging your Git Config</title><link>https://charlesreid1.github.io/git-workflows-part-1-supercharging-your-git-config.html</link><description>&lt;h1&gt;Source&lt;/h1&gt;
&lt;p&gt;Most of the good stuff is from
&lt;a href="https://github.com/mathiasbynens/dotfiles"&gt;https://github.com/mathiasbynens/dotfiles&lt;/a&gt;!&lt;/p&gt;
&lt;h1&gt;&lt;code&gt;[user]&lt;/code&gt; section&lt;/h1&gt;
&lt;p&gt;Start off easy - here's how you set your email and name for commits:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[user]&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;foo@bar.com&lt;/span&gt;
&lt;span class="s"&gt;    name = Foo Bar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Bash Aliases&lt;/h1&gt;
&lt;h2&gt;The Best One Letter Alias Ever&lt;/h2&gt;
&lt;p&gt;Start supercharging how you use git by creating a one-letter alias.&lt;/p&gt;
&lt;p&gt;Add this to your &lt;code&gt;~/.bashrc&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alias g=&amp;quot;git&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You're already saving yourself a bunch of keystrokes, and we're just getting started!&lt;/p&gt;
&lt;h2&gt;Ending Bad Habits&lt;/h2&gt;
&lt;p&gt;This is a nice trick for getting yourself out of bad habits.
My first time using a "sophisticated" branch worklow …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Mon, 07 Oct 2019 20:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-10-07:/git-workflows-part-1-supercharging-your-git-config.html</guid><category>git</category><category>rebase</category><category>cherry-pick</category><category>branching</category><category>version control</category></item><item><title>Mocking AWS in Unit Tests</title><link>https://charlesreid1.github.io/mocking-aws-in-unit-tests.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-simple-example-mocking-api-responses"&gt;A Simple Example: Mocking API Responses&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-genuine-aws-call"&gt;The Genuine AWS Call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-mocked-aws-call"&gt;The Mocked AWS Call&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This post covers a technique for mocking AWS in unit tests so that you can test functionality that normally
requires API calls and handling responses, by mocking those responses instead of making actual API calls.&lt;/p&gt;
&lt;h2&gt;A Simple Example: Mocking API Responses&lt;/h2&gt;
&lt;h3&gt;The Genuine AWS Call&lt;/h3&gt;
&lt;p&gt;Let's start with an example of an AWS API call. Here's how our program will be structured:
start with a driver &lt;code&gt;lister.py&lt;/code&gt; that creates an AWS secrets manager client and defines a 
function to list …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Mon, 23 Sep 2019 09:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-09-23:/mocking-aws-in-unit-tests.html</guid><category>python</category><category>pytest</category><category>tests</category><category>aws</category><category>mock</category><category>mocking</category></item><item><title>Deconvoluting Convolutional Neural Networks</title><link>https://charlesreid1.github.io/deconvoluting-convolutional-neural-networks.html</link><description>&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#introduction-a-simple-cnn-example"&gt;Introduction: A Simple CNN Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exploring-data"&gt;Exploring Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-cnn"&gt;Create CNN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#analyzing-network-architecture-and-tensor-shapes"&gt;Analyzing Network Architecture and Tensor Shapes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#input-image-layer"&gt;Input Image Layer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#first-convolution-layer"&gt;First Convolution Layer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#first-convolution-layer"&gt;First Activation Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#first-convolution-layer"&gt;First Pooling Layer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#second-convolution-layer"&gt;Second Convolution Layer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#second-convolution-layer"&gt;Second Activation Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#second-convolution-layer"&gt;Second Pooling Layer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#third-convolution-layer"&gt;Third Convolution Layer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#third-convolution-layer"&gt;Third Activation Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#third-convolution-layer"&gt;Third Pooling Layer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#flatten-and-dense-layers"&gt;Flatten and Dense Layers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#categorical-output"&gt;Categorical Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#image-transformer"&gt;Image Transformer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#next-steps"&gt;Next Steps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Introduction: A Simple CNN Example&lt;/h1&gt;
&lt;p&gt;As part of our weekly Deep Learning for Genomics reading group
here in the &lt;a href="http://ivory.idyll.org/lab/"&gt;Lab for Data Intensive Biology (DIB Lab)&lt;/a&gt;,
we are applying convolutional neural networks (deep learning) 
to various problems in genomics …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Wed, 29 May 2019 14:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-05-29:/deconvoluting-convolutional-neural-networks.html</guid><category>deep learning</category><category>machine learning</category><category>neural networks</category><category>python</category><category>keras</category><category>convolutional neural networks</category><category>cnn</category></item><item><title>Graphs for Bioinformatics, Part 1: de Bruijn Graphs, Hamiltonian Paths, and Eulerian Paths</title><link>https://charlesreid1.github.io/graphs-for-bioinformatics-part-1-de-bruijn-graphs-hamiltonian-paths-and-eulerian-paths.html</link><description>&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-context-rosalindinfo"&gt;The Context: Rosalind.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#graphs-for-bioinformatics"&gt;Graphs for Bioinformatics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#building-a-k-mer-graph-the-wrong-graph"&gt;Building a K-mer Graph (The Wrong Graph)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#building-a-de-bruijn-graph-the-right-graph"&gt;Building a De Bruijn Graph (The Right Graph)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#transform-the-problem-hamiltonian-paths-to-eulerian-paths"&gt;Transform the Problem: Hamiltonian Paths to Eulerian Paths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#an-example"&gt;An Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#back-to-dna"&gt;Back to DNA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;The Context: Rosalind.info&lt;/h1&gt;
&lt;p&gt;To provide a bit of context for a discussion of Euler paths and Euler cycles:
starting around December, a group of us in the &lt;a href="http://ivory.idyll.org/lab/"&gt;Lab for Data Intensive Biology (DIB Lab)&lt;/a&gt;
started working through the textbook &lt;a href="http://bioinformaticsalgorithms.com/"&gt;Bioinformatics Algorithms: An Active Learning Approach&lt;/a&gt;
and the associated website, &lt;a href="https://rosalind.info"&gt;Rosalind.info&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rosalind.info is a site that is similar in style …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Thu, 02 May 2019 19:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-05-02:/graphs-for-bioinformatics-part-1-de-bruijn-graphs-hamiltonian-paths-and-eulerian-paths.html</guid><category>go</category><category>golang</category><category>rosalind</category><category>computational biology</category><category>bioinformatics</category><category>euler</category><category>recursion</category><category>backtracking</category><category>graphs</category><category>algorithms</category><category>hamiltonian</category><category>eulerian</category></item><item><title>The Git-Commit-Ectomy</title><link>https://charlesreid1.github.io/the-git-commit-ectomy.html</link><description>&lt;p&gt;TLDR: Visit the git-commit-ectomy guide: &lt;a href="http://pages.charlesreid1.com/git-commit-ectomy"&gt;http://pages.charlesreid1.com/git-commit-ectomy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Consider the following &lt;em&gt;completely hypothetical&lt;/em&gt;
scenario.&lt;/p&gt;
&lt;p&gt;Suppose you've been working for a while on your latest
invention, a brand-new whiz-bang command line
tool that's fast and solves an important problem
and you're chugging your way to the finish line.&lt;/p&gt;
&lt;p&gt;As part of preparing to release your software tool,
you add some tests, because that's what you do.&lt;/p&gt;
&lt;p&gt;Those tests require some data, so you add a few test
data sets, a few hundred kilobytes each, nothing fancy.&lt;/p&gt;
&lt;p&gt;Then one day, &lt;strong&gt;the intern&lt;/strong&gt; (who is just trying to be 
helpful by …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Wed, 17 Apr 2019 12:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-04-17:/the-git-commit-ectomy.html</guid><category>git</category><category>rebase</category><category>cherry-pick</category><category>branching</category><category>version control</category></item><item><title>The Josephus Problem: Part 3: Solving the Double Step Case</title><link>https://charlesreid1.github.io/the-josephus-problem-part-3-solving-the-double-step-case.html</link><description>&lt;p&gt;This is Part 3 of an N-part series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-1-the-problem.html"&gt;The Josephus Problem: Part 1: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-2-two-examples.html"&gt;The Josephus Problem: Part 2: Two Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-3-solving-the-double-step-case.html"&gt;The Josephus Problem: Part 3: Solving the Double Step Case&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#solving-the-double-step-case"&gt;Solving the Double Step Case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#algorithm-d-using-doubling-permutation"&gt;Algorithm D: Using Doubling Permutation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-algorithm"&gt;The Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#write-the-doubling-permutation"&gt;Write the Doubling Permutation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#table-method"&gt;Table Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reverse-the-doubling-permutation"&gt;Reverse the Doubling Permutation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#trim-the-reversed-doubling-permutation"&gt;Trim the Reversed Doubling Permutation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-does-algorithm-d-work"&gt;Why Does Algorithm D Work?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#an-important-observation"&gt;An Important Observation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#three-facts"&gt;Three Facts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#power-of-two-example"&gt;Power of Two Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#not-a-power-of-two-example"&gt;Not a Power of Two Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-power-of-two-shortcut"&gt;The Power of Two Shortcut&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#algorithm-d-summary"&gt;Algorithm D Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="solving-the-double-step-case"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Solving the Double Step Case&lt;/h2&gt;
&lt;p&gt;The Josephus Problem for a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Fri, 22 Mar 2019 14:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-03-22:/the-josephus-problem-part-3-solving-the-double-step-case.html</guid><category>graphs</category><category>puzzles</category><category>algorithms</category><category>josephus</category><category>latex</category></item><item><title>The Josephus Problem: Part 2: Two Examples</title><link>https://charlesreid1.github.io/the-josephus-problem-part-2-two-examples.html</link><description>&lt;p&gt;This is Part 2 of an N-part series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-1-the-problem.html"&gt;The Josephus Problem: Part 1: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-2-two-examples.html"&gt;The Josephus Problem: Part 2: Two Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-3-solving-the-double-step-case.html"&gt;The Josephus Problem: Part 3: Solving the Double Step Case&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#two-examples"&gt;Two Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#n--8-m--4"&gt;n = 8, m = 4&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-by-step-removal-for-n--8"&gt;Step by Step Removal for n = 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-the-solution-permutation-two-row-notation"&gt;Writing the Solution Permutation: Two Row Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-the-solution-permutation-cycle-notation"&gt;Writing the Solution Permutation: Cycle Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#visual-representation-of-solution-permutation"&gt;Visual Representation of Solution Permutation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#n--11-m--2"&gt;n = 11, m = 2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-by-step-removal-for-n--11"&gt;Step by Step Removal for n = 11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#two-row-notation"&gt;Two Row Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cycle-notation"&gt;Cycle Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#circle-permutation-diagram"&gt;Circle Permutation Diagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next Steps: Solve!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="two-examples"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Two Examples&lt;/h2&gt;
&lt;p&gt;In this blog post we'll walk through two examples
of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Wed, 20 Mar 2019 14:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-03-20:/the-josephus-problem-part-2-two-examples.html</guid><category>graphs</category><category>puzzles</category><category>algorithms</category><category>josephus</category><category>latex</category></item><item><title>The Josephus Problem: Part 1: The Problem</title><link>https://charlesreid1.github.io/the-josephus-problem-part-1-the-problem.html</link><description>&lt;p&gt;This is Part 1 of an N-part series.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-1-the-problem.html"&gt;The Josephus Problem: Part 1: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-2-two-examples.html"&gt;The Josephus Problem: Part 2: Two Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://charlesreid1.github.io/the-josephus-problem-part-3-solving-the-double-step-case.html"&gt;The Josephus Problem: Part 3: Solving the Double Step Case&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-josephus-problem-and-variations"&gt;The Josephus Problem and Variations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-sushi-boat-variation"&gt;The Sushi Boat Variation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-backstory"&gt;More Backstory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-tools"&gt;The Tools&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#permutations"&gt;Permutations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cycles"&gt;Cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#circular-linked-lists"&gt;Circular Linked Lists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tex-for-diagrams"&gt;TeX for Diagrams&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#empty-josephus-circle-diagram"&gt;Empty Josephus Circle Diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#josephus-circle-diagram-with-permutation-paths"&gt;Josephus Circle Diagram With Permutation Paths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps-examples-and-solutions"&gt;Next Steps: Examples and Solutions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="the-josephus-problem-and-variations"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Josephus Problem and Variations&lt;/h2&gt;
&lt;p&gt;The following problem, Cat and Mice, is Puzzle 88 
in Boris Kordemsky's The Moscow Puzzles.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Purrer has decided to take a nap. He dreams …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sat, 16 Mar 2019 14:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-03-16:/the-josephus-problem-part-1-the-problem.html</guid><category>graphs</category><category>puzzles</category><category>algorithms</category><category>josephus</category><category>latex</category></item><item><title>Approximating Pi (Happy Pi Day)</title><link>https://charlesreid1.github.io/approximating-pi-happy-pi-day.html</link><description>&lt;h2&gt;Favorite Pi Approximations&lt;/h2&gt;
&lt;p&gt;What's your favorite &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; approximation?&lt;/p&gt;
&lt;p&gt;Some of my favorite approximations of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; come from
&lt;a href="https://en.wikipedia.org/wiki/Ramanujan%E2%80%93Sato_series"&gt;Ramanujan-Sato series&lt;/a&gt;.
These are mathematical series that generalize from 
a remarkable formula for &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; given by &lt;a href="https://en.wikipedia.org/wiki/Srinivasa_Ramanujan"&gt;Srinivasa Ramanujan&lt;/a&gt;,
an Indian mathematician:&lt;/p&gt;
&lt;div class="math"&gt;$$
\pi^{-1} = \dfrac{\sqrt{8}}{99^2} \sum_{k \geq 0} \dfrac{ (4k)! }{ \left( 4^k k! \right)^4 } \dfrac{ 1103 + 26390k }{ 99^{4k} } 
$$&lt;/div&gt;
&lt;p&gt;This completely novel formula opened up new branches of mathematics
and provided a whole new class of &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; approximations (the Ramanujan-Sato
series) and approximations that are extremely accurate, making them
very useful for computer applications. (Each term of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Thu, 14 Mar 2019 16:20:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-03-14:/approximating-pi-happy-pi-day.html</guid><category>pi</category><category>continued fractions</category><category>number theory</category><category>mathematics</category><category>python</category><category>irrational numbers</category></item><item><title>Five Letter Words: Part 5: The Try Trie Tree</title><link>https://charlesreid1.github.io/five-letter-words-part-5-the-try-trie-tree.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#about-the-five-letter-words"&gt;About the Five-Letter Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#intro-try-trie-tree"&gt;Introduction to the Try Trie Tree Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-try-trie-tree"&gt;The Try Trie Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#constructing-the-try-trie-tree"&gt;Constructing the Try Trie Tree&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#checking-for-minimum-number-of-matching-words"&gt;Checking for Minimum Number of Matching Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assemble-method"&gt;Assemble Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#verifying-branches-and-bubbling-up-counts"&gt;Verifying Branches and Bubbling Up Counts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bubble-up-method"&gt;Bubble Up Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#try-trie-tree-code"&gt;Try Trie Tree Code&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#try-trie-trie-class"&gt;Try Trie Trie Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-for-assembling-the-tree"&gt;Code for Assembling the Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-for-bubbling-up-large-children-counts"&gt;Code for Bubbling Up Large Children Counts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrap-it-in-a-bow"&gt;Wrap it in a Bow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#output"&gt;Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="about-the-five-letter-words"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;About the Five-Letter Words&lt;/h2&gt;
&lt;p&gt;In Volume 4 Fascicle 0 of Donald Knuth's &lt;u&gt;Art of Computer Programming&lt;/u&gt;, 
Knuth introduces a tool for exploring concepts in graph theory: the five-letter
words. This …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Mon, 11 Mar 2019 18:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-03-11:/five-letter-words-part-5-the-try-trie-tree.html</guid><category>python</category><category>computer science</category><category>graphs</category><category>algorithms</category><category>art of computer programming</category><category>knuth</category><category>five letter words</category><category>tries</category><category>trees</category></item><item><title>Five Letter Words: Part 4: Revisiting Diff by One</title><link>https://charlesreid1.github.io/five-letter-words-part-4-revisiting-diff-by-one.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#five4-about"&gt;Five Letter Words, Revisited&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five4-diff-by-one"&gt;Different By One, Revisited&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five4-diff-by-n"&gt;Different By N, Revisited&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="five4-about"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;About the Five-Letter Words&lt;/h2&gt;
&lt;p&gt;In Volume 4, Facsimile 0 of Donald Knuth's &lt;u&gt;Art of Computer Programming&lt;/u&gt;, 
in which Knuth covers graph theory, he introduces a list of five-letter words
as part of a data set useful in exploring graph theory and graph algorithms.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/charlesreid1/five-letter-words/blob/master/sgb-words.txt"&gt;list of words&lt;/a&gt; 
is part of the &lt;a href="http://www3.cs.stonybrook.edu/~algorith/implement/graphbase/implement.shtml"&gt;Stanford Graph Base&lt;/a&gt;, 
a set of data sets that are useful for studying graph theory and networks.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://charlesreid1.com/wiki/Five_Letter_Words"&gt;Five Letter Words&lt;/a&gt;
on the charlesreid1.com wiki for details.&lt;/p&gt;
&lt;p&gt;&lt;a name="five4-diff-by-one"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Different by 1, Revisited&lt;/h2&gt;
&lt;p&gt;This post …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sun, 10 Mar 2019 10:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-03-10:/five-letter-words-part-4-revisiting-diff-by-one.html</guid><category>python</category><category>computer science</category><category>graphs</category><category>algorithms</category><category>art of computer programming</category><category>knuth</category><category>five letter words</category></item><item><title>centillion: a document search engine</title><link>https://charlesreid1.github.io/centillion-a-document-search-engine.html</link><description>&lt;p&gt;We're excited to announce the public release of &lt;a href="https://github.com/dcppc/centillion"&gt;centillion&lt;/a&gt;,
a document search engine. &lt;/p&gt;
&lt;p&gt;centillion is a search tool that can be used by any individual or organization
to index Github repositories (including the content of markdown files),
Google Drive folders (including the content of .docx files), and Disqus
comment threads.&lt;/p&gt;
&lt;p&gt;centillion is &lt;a href="https://travis-ci.org/dcppc/centillion"&gt;tested using Travis CI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;centillion was originally written for the &lt;a href="https://public.nihdatacommons.us"&gt;NIH Data Commons&lt;/a&gt;
effort (which recently concluded).  centillion was built to facilitate information-finding
in a project with hundreds of people at dozens of institutions generating a sea of email threads,
Google Drive folders, markdown files, websites, and Github …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sun, 10 Mar 2019 09:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-03-10:/centillion-a-document-search-engine.html</guid><category>python</category><category>centillion</category><category>search</category><category>search engine</category><category>google drive</category><category>github</category><category>flask</category></item><item><title>Any Color You Like, As Long As It's 00ADD8</title><link>https://charlesreid1.github.io/any-color-you-like-as-long-as-its-00add8.html</link><description>&lt;p&gt;A short post with some thoughts on how writing Go code has
helped me learn to stop worrying and love auto-formatting tools.&lt;/p&gt;
&lt;p&gt;Go code is terse. Not Python-terse, but terse. And unlike Java, 
you don't find yourself constantly resorting to the security
blanket of objects - something that Python (mercifully) can 
go either way on.&lt;/p&gt;
&lt;p&gt;I used Java when I taught computer science at South Seattle College,
and remember telling students once that one day, students taking
CSC 142/143 would be using Go instead of Java. These days, I'm not
as certain of that, but given that Go's strengths are …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sat, 23 Feb 2019 10:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-02-23:/any-color-you-like-as-long-as-its-00add8.html</guid><category>go</category><category>golang</category><category>rosalind</category><category>bioinformatics</category><category>black</category><category>python</category><category>gofmt</category></item><item><title>A Few of My Favorite PEPs</title><link>https://charlesreid1.github.io/a-few-of-my-favorite-peps.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#fav"&gt;What's your favorite PEP?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#p0"&gt;PEP 0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#p8"&gt;PEP 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#p20"&gt;PEP 20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#p3099"&gt;PEP 3099&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2to3"&gt;Addendum: 2 to 3 Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#p202"&gt;PEP 202&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gh"&gt;All the PEPs on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="fav"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What's your favorite PEP?&lt;/h2&gt;
&lt;p&gt;PEPs, or &lt;strong&gt;Python Enhancement Proposals&lt;/strong&gt;, are documents in which
features, additions, or general ideas are proposed as additions
to the core Python language.&lt;/p&gt;
&lt;p&gt;As a Python user, we believe it's important to ask questions like this.&lt;/p&gt;
&lt;p&gt;Picking a "favorite PEP" is not just about having a ready and clever
answer to a question you might expect in a technical interview;
the PEP documents really &lt;em&gt;are&lt;/em&gt; important, and really &lt;em&gt;do …&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Mon, 11 Feb 2019 12:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-02-11:/a-few-of-my-favorite-peps.html</guid><category>python</category><category>pep</category><category>computer science</category><category>programming</category></item><item><title>Context Managers in Python</title><link>https://charlesreid1.github.io/context-managers-in-python.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#predicament"&gt;A Predicament&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wat"&gt;What is a context manager?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wat"&gt;What is Graphviz dot?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stdout"&gt;Capturing stdout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#replacing"&gt;Replacing stdout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#context"&gt;Creating a context manager&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_init"&gt;Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_enter"&gt;Enter method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_exit"&gt;Exit method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#action"&gt;In action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#using"&gt;Using the new dag flags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other"&gt;Other context manager applications&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ssh"&gt;SSH connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ssh"&gt;Jupyter notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#figs"&gt;iPython (Jupyter) notebook and matplotlib figure management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dbconn"&gt;Database connection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#refs"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="predicament"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;A Predicament&lt;/h2&gt;
&lt;p&gt;Recently we spent some time contributing to
&lt;a href="https://github.com/dib-lab/eelpond"&gt;dib-lab/eelpond (renamed to elvers)&lt;/a&gt;,
an executable &lt;a href="https://snakemake.readthedocs.io/en/stable/"&gt;Snakemake&lt;/a&gt;
workflow for running the 
&lt;a href="https://khmer-protocols.readthedocs.io/en/latest/mrnaseq/index.html"&gt;eelpond mRNAseq workflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the process of tracking down a confusing
bug in the Snakemake workflow, we used Snakemake's
ability to print a directed acyclic graph (hereafter …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sat, 02 Feb 2019 10:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-02-02:/context-managers-in-python.html</guid><category>context managers</category><category>testing</category><category>python</category><category>programming</category></item><item><title>Building Snakemake Command Line Wrappers for Kubernetes Workflows</title><link>https://charlesreid1.github.io/building-snakemake-command-line-wrappers-for-kubernetes-workflows.html</link><description>&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; These ideas are implemented in the repository
&lt;a href="https://github.com/charlesreid/2019-snakemake-byok8s"&gt;charlesreid1/2019-snakemake-byok8s&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#exe"&gt;Recap: Workflows as Executables&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2018"&gt;2018-snakemake-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2019"&gt;2019-snakemake-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#byok8s"&gt;2019-snakemake-byok8s&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#byok8s2"&gt;Overview of 2019-snakemake-byok8s&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#k8s"&gt;Cloud + Scale = Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#smkk8s"&gt;Snakemake k8s support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#cli"&gt;Modifying the CLI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ns"&gt;Namespaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flags"&gt;Adding flags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#minikube"&gt;Local Kubernetes Clusters with Minikube&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#minikube"&gt;What is minikube?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aws"&gt;AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dns-aws"&gt;Fixing DNS issues with AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#travis"&gt;Travis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#travis-yml"&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#byok8s3"&gt;End Product: byok8s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#docs"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next"&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="exe"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Recap: Workflows as Executables&lt;/h1&gt;
&lt;p&gt;In our previous blog post, &lt;a href="https://charlesreid1.github.io/building-snakemake-command-line-wrappers.html"&gt;Building Snakemake Command Line Wrappers&lt;/a&gt;,
we covered some approaches to making Snakemake
workflows into executables that can be run as
command line utilities.&lt;/p&gt;
&lt;p&gt;In this post, we extend those ideas to Snakemake workflows …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Mon, 28 Jan 2019 20:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-01-28:/building-snakemake-command-line-wrappers-for-kubernetes-workflows.html</guid><category>python</category><category>bioinformatics</category><category>workflows</category><category>pipelines</category><category>snakemake</category><category>travis</category><category>kubernetes</category><category>minikube</category></item><item><title>Building Snakemake Command Line Wrappers for Workflows</title><link>https://charlesreid1.github.io/building-snakemake-command-line-wrappers-for-workflows.html</link><description>&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; These ideas are implemented in the repository
&lt;a href="https://github.com/charlesreid/2019-snakemake-cli"&gt;charlesreid1/2019-snakemake-cli&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#basic"&gt;Basic Idea: Wrapping Snakemake API Calls&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2018"&gt;2018-snakemake-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2019"&gt;2019-snakemake-cli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#exe"&gt;Turning Executables into Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using"&gt;End Result: Using bananas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#travis"&gt;Adding Travis CI Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next"&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="basic"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Basic Idea: Wrapping Snakemake API Calls&lt;/h1&gt;
&lt;p&gt;&lt;a name="2018"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;2018-snakemake-cli&lt;/h2&gt;
&lt;p&gt;This blog post covers the implementation of an idea
that was originally explored in a blog post from 
Titus Brown, &lt;a href="http://ivory.idyll.org/blog/2018-workflows-applications.html"&gt;Pydoit, snakemake, and workflows-as-applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That blog post implemented a basic command line
wrapper around the Snakemake API to demonstrate
how a Snakemake workflow could be turned into
an executable.&lt;/p&gt;
&lt;p&gt;Relevant code is in &lt;a href="https://github.com/ctb/2018-snakemake-cli"&gt;ctb/2018-snakemake-cli&lt;/a&gt;,
but the basic …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Mon, 21 Jan 2019 22:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-01-21:/building-snakemake-command-line-wrappers-for-workflows.html</guid><category>python</category><category>bioinformatics</category><category>workflows</category><category>pipelines</category><category>snakemake</category><category>travis</category></item><item><title>Recursive Backtracking in Go for Bioinformatics Applications: 3. Go Implementation of Backtracking</title><link>https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html</link><description>&lt;p&gt;&lt;em&gt;This is the third in a series of three blog posts describing our
solution to a bioinformatics problem from Rosalind.info,
&lt;a href="http://rosalind.info/problems/ba1i/"&gt;Problem BA1(i) (Find most frequent words with mismatches
in a string)&lt;/a&gt;.
To solve this problem and generate variations of a DNA string
as required, we implemented a recursive backtracking method
in the Go programming language.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html"&gt;Part 1: Counting Variations&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html"&gt;Part 2: Generating Variations&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Part 3: Go Implementation of Recursive Backtracking (you are here)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="toc"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#problem-descr"&gt;Problem Description&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#backtracking"&gt;Recursive Backtracking Pseudocode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#go-implementation"&gt;Recursive Backtracking: Go Implementation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#visit-hamming"&gt;Visit Hamming Neighbors Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assemble-visit"&gt;Assemble Visit Variations Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#tests"&gt;Tests&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#final"&gt;Final Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#fruitful"&gt;Go forth …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Thu, 03 Jan 2019 10:30:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2019-01-03:/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html</guid><category>go</category><category>golang</category><category>rosalind</category><category>computational biology</category><category>bioinformatics</category><category>recursion</category><category>backtracking</category><category>strings</category><category>combinatorics</category></item><item><title>Recursive Backtracking in Go for Bioinformatics Applications: 2. Generating Variations</title><link>https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html</link><description>&lt;p&gt;&lt;em&gt;This is the second in a series of three blog posts describing our
solution to a bioinformatics problem from Rosalind.info,
&lt;a href="http://rosalind.info/problems/ba1i/"&gt;Problem BA1(i) (Find most frequent words with mismatches
in a string)&lt;/a&gt;.
To solve this problem and generate variations of a DNA string
as required, we implemented a recursive backtracking method
in the Go programming language.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html"&gt;Part 1: Counting Variations&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Part 2: Generating Variations (you are here)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html"&gt;Part 3: Go Implementation of Recursive Backtracking&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="toc"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem-descr"&gt;Problem Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#perms-combs-vars"&gt;Permutations vs Combinations vs Variations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recursion"&gt;Recursion&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#backtracking"&gt;Recursive Backtracking Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#dna"&gt;Appying to DNA Variations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#generating-visits"&gt;Generating Visits with Binary Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assembling"&gt;Assembling the …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Fri, 28 Dec 2018 14:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-12-28:/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html</guid><category>go</category><category>golang</category><category>rosalind</category><category>bioinformatics</category><category>recursion</category><category>backtracking</category><category>strings</category><category>combinatorics</category></item><item><title>Recursive Backtracking in Go for Bioinformatics Applications: 1. Counting Variations</title><link>https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html</link><description>&lt;p&gt;&lt;em&gt;This is the first in a series of three blog posts describing our
solution to a bioinformatics problem from Rosalind.info,
&lt;a href="http://rosalind.info/problems/ba1i/"&gt;Problem BA1(i) (Find most frequent words with mismatches
in a string)&lt;/a&gt;.
To solve this problem and generate variations of a DNA string
as required, we implemented a recursive backtracking method
in the Go programming language.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Part 1: Counting Variations (you are here)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-2-generating-variations.html"&gt;Part 2: Generating Variations&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://charlesreid1.github.io/recursive-backtracking-in-go-for-bioinformatics-applications-3-go-implementation-of-backtracking.html"&gt;Part 3: Go Implementation of Recursive Backtracking&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="toc"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem-descr"&gt;Problem Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functions"&gt;Useful Functions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#binomial"&gt;Binomial Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#factorial"&gt;Factorial Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#counting-permutations"&gt;Counting Permutations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#deriving"&gt;Deriving the Formula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#indices"&gt;Term 1: Picking DNA Indices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#side-note"&gt;Term 1: Side Note …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Wed, 26 Dec 2018 18:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-12-26:/recursive-backtracking-in-go-for-bioinformatics-applications-1-counting-variations.html</guid><category>go</category><category>golang</category><category>rosalind</category><category>computational biology</category><category>bioinformatics</category><category>recursion</category><category>backtracking</category><category>strings</category><category>combinatorics</category></item><item><title>Basic Data Structures in Go: Maps</title><link>https://charlesreid1.github.io/basic-data-structures-in-go-maps.html</link><description>&lt;h2&gt;Basic Data Structures in Go: Maps&lt;/h2&gt;
&lt;p&gt;Continuing with our series of blog posts on what
we've been learning about Go in the process of solving
problems on Rosalind.info, this post will cover how 
some basic data structures work in Go, and how we
used each to solve problems from the Chapter 1 Rosalind
problems.&lt;/p&gt;
&lt;h2&gt;Maps&lt;/h2&gt;
&lt;p&gt;The simplest way to describe a map is to say it is a
structure useful for storing key-value pairs.&lt;/p&gt;
&lt;p&gt;Before we walk through what maps look like in Go, let's
talk about what a map is (in the data structure sense).
And to do …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Thu, 20 Dec 2018 17:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-12-20:/basic-data-structures-in-go-maps.html</guid><category>go</category><category>golang</category><category>rosalind</category><category>computational biology</category><category>bioinformatics</category><category>maps</category></item><item><title>Learning Bioinformatics with Go and Rosalind</title><link>https://charlesreid1.github.io/learning-bioinformatics-with-go-and-rosalind.html</link><description>&lt;h2&gt;Learning Go with Rosalind&lt;/h2&gt;
&lt;h3&gt;What is Rosalind?&lt;/h3&gt;
&lt;p&gt;Rosalind.info is a website with programming challenges, similar in spirit
to &lt;a href="https://charlesreid1.com/wiki/Project_Euler"&gt;Project Euler&lt;/a&gt;, but with
a focus on bioinformatics. &lt;/p&gt;
&lt;p&gt;Problems in the bioinformatics track are presented grouped by chapter,
with several problems per chapter. The problems are designed like a coding
competition, with problems providing structured input files and expecting
structured output from each calculation. Each time you solve a problem, a
unique input is generated, and you have a time limit in which to run your
code to solve the problem.&lt;/p&gt;
&lt;h3&gt;What is Go?&lt;/h3&gt;
&lt;p&gt;Go is a programming language that is …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Tue, 18 Dec 2018 20:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-12-18:/learning-bioinformatics-with-go-and-rosalind.html</guid><category>go</category><category>golang</category><category>rosalind</category><category>computational biology</category><category>bioinformatics</category></item><item><title>First Post of the Fall, Part 2: Flaskadillo</title><link>https://charlesreid1.github.io/first-post-of-the-fall-part-2-flaskadillo.html</link><description>&lt;h2&gt;Flask + ILLO = Flaskadillo&lt;/h2&gt;
&lt;p&gt;On October 15, 2018, I had the opportunity to 
offer an in-lab learning opportunity (ILLO) at the 
&lt;a href="http://ivory.idyll.org/lab/"&gt;Lab for Data Intensive Biology&lt;/a&gt;.
The ILLO focused on Flask, a useful Python library
for creating and running web servers. This
library is useful because it has a very low
learning curve, but also has the complexity to
handle complicated, real-world projects.&lt;/p&gt;
&lt;p&gt;As a part of this in-lab learning opportunity, 
I created repository with five simple Flask examples
to highlight five useful capabilities of Flask.&lt;/p&gt;
&lt;p&gt;The repository is called flaskadillo and it is 
available on &lt;a href="https://git.charlesreid1.com/charlesreid1/flaskadillo/"&gt;git.charlesreid1.com&lt;/a&gt;
or on …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Tue, 30 Oct 2018 16:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-10-30:/first-post-of-the-fall-part-2-flaskadillo.html</guid><category>Github</category><category>Software</category><category>Python</category><category>Flask</category></item><item><title>First Post of the Fall, Part 1: Data Commons</title><link>https://charlesreid1.github.io/first-post-of-the-fall-part-1-data-commons.html</link><description>&lt;h2&gt;Background: a bit about the Data Commons&lt;/h2&gt;
&lt;p&gt;It has been a productive but busy summer at the
&lt;a href="http://ivory.idyll.org/lab/"&gt;Lab for Data Intensive Biology&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As part of my job, I am supporting a lot of websites
and infrastructure for the &lt;a href="https://public.nihdatacommons.us"&gt;Data Commons Pilot Phase
Consortium (DCPPC)&lt;/a&gt;,
which wrapped up Phase 1 this month.&lt;/p&gt;
&lt;p&gt;The Data Commons is a large-scale effort to establish
a community-driven set of standards for interoperability
for biological data and computation, a massive effort and
a broad mandate that has the potential to enable breakthrough
research that is currently impossible because data and computations
cannot inter-operate between the data …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sat, 27 Oct 2018 19:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-10-27:/first-post-of-the-fall-part-1-data-commons.html</guid><category>DCPPC</category><category>Data Commons</category><category>Github</category><category>Community</category><category>Science</category><category>Centillion</category></item><item><title>Current Projects</title><link>https://charlesreid1.github.io/current-projects.html</link><description>&lt;p&gt;A list of various ongoing projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pandocs and panflute - &lt;a href="http://pages.charlesreid1.com/how-do-i-pandoc"&gt;how do i pandoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pages.charlesreid1.com/b-captain-hook"&gt;captain hook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Git College of Surgery:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/git-college-of-surgery"&gt;git college of surgery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The first successful git-commit-ectomy took place on Friday, June 1, 2018.
    See &lt;a href="https://pages.charlesreid1.com/git-commit-ectomy"&gt;https://pages.charlesreid1.com/git-commit-ectomy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Finishing this requires a better way to visualize git commits&lt;/li&gt;
&lt;li&gt;To do that, we have developed &lt;a href="https://pages.charlesreid1.com/git-subway-maps"&gt;git-subway-maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python + APIs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;building an API that calls APIs so you can API while you API
    (a webhook that calls a hook - see &lt;a href="https://pages.charlesreid1.com/b-captain-hook"&gt;captain hook&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;testing APIs with Python + requests (currently top secret,
    coming soon.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python + Command line:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;command line utilities with python …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sat, 12 May 2018 15:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-05-12:/current-projects.html</guid><category>Git</category><category>Github</category><category>Software</category><category>Python</category></item><item><title>Charlesreid1.com Stack</title><link>https://charlesreid1.github.io/charlesreid1com-stack.html</link><description>&lt;p&gt;This post is a preview of a series of posts to come, which will document
the process of containerizing the entire &lt;a href="https://charlesreid1.com"&gt;charlesreid1.com&lt;/a&gt; website.&lt;/p&gt;
&lt;p&gt;We will run through a lot of different moving parts and how to get them all working:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple domains and subdomains pointing to different services&lt;/li&gt;
&lt;li&gt;Docker pod for all services&lt;/li&gt;
&lt;li&gt;Nginx + SSL&lt;/li&gt;
&lt;li&gt;Reverse proxies via nginx&lt;/li&gt;
&lt;li&gt;Apache + MySQL + MediaWiki&lt;/li&gt;
&lt;li&gt;phpMyAdmin&lt;/li&gt;
&lt;li&gt;Gitea&lt;/li&gt;
&lt;li&gt;Configuration files under version control&lt;/li&gt;
&lt;li&gt;Data managed with backup/restore scripts and cron jobs&lt;/li&gt;
&lt;li&gt;Static content under version control&lt;/li&gt;
&lt;li&gt;Files server&lt;/li&gt;
&lt;li&gt;REST API&lt;/li&gt;
&lt;li&gt;Management LAN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the code for doing this is in &lt;a href="https://git.charlesreid1.com/docker/pod-charlesreid1"&gt;docker …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sat, 31 Mar 2018 23:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-03-31:/charlesreid1com-stack.html</guid><category>web</category><category>git</category><category>pelican</category><category>nginx</category><category>ssl</category><category>apache</category><category>mediawiki</category><category>javascript</category><category>php</category><category>docker</category><category>security</category></item><item><title>D3 Calendar Visualizations</title><link>https://charlesreid1.github.io/d3-calendar-visualizations.html</link><description>&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cal-starting"&gt;Starting example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-changed"&gt;What needs to be changed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-data"&gt;Formatting the data&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#cal-data-mediawiki"&gt;MediaWiki edits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-data-git"&gt;Git commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-colormap"&gt;Creating the color map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-code"&gt;How the calendar code works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cal-final"&gt;Final result&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="cal-starting"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Starting example&lt;/h1&gt;
&lt;p&gt;Let's begin with a D3 example. Mike Bostock provided a &lt;a href="https://bl.ocks.org/mbostock/4063318"&gt;Calendar View&lt;/a&gt;
block illustrating how to draw a very interesting visualization of
large amounts of data over time:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bl.ocks.org/mbostock/4063318"&gt;
&lt;img src="images/calendar_example.png" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You might recognize this type of graph from Github, whose activity graph
shows the same visualization.&lt;/p&gt;
&lt;p&gt;The data shown in this example consists of several years of stock market data.
It is a simple but very large data set, with each data …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Fri, 16 Feb 2018 23:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-02-16:/d3-calendar-visualizations.html</guid><category>javascript</category><category>d3</category><category>computer science</category><category>python</category><category>colors</category></item><item><title>Project Euler Problem 172</title><link>https://charlesreid1.github.io/project-euler-problem-172.html</link><description>&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe172-problem"&gt;Overview: Problem 172&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-background"&gt;Background&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe172-multiset"&gt;Multiset Permutations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-problemsoln"&gt;A Simple Problem (And Solution)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-complicated"&gt;A Slightly More Complicated Problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-algorithm"&gt;Algorithm&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe172-zero"&gt;Ignoring Numbers Starting with 0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-code"&gt;Code&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe172-test"&gt;Test Cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-recursion"&gt;Recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-pseudocode"&gt;Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-python-code"&gt;Python Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe172-final"&gt;Final Answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="pe172-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Overview: Problem 172&lt;/h1&gt;
&lt;p&gt;How many 18-digit numbers &lt;span class="math"&gt;\(n\)&lt;/span&gt; (without leading zeros) are there 
such that no digit occurs more than three times in &lt;span class="math"&gt;\(n\)&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://projecteuler.net/problem=172"&gt;Link to Project Euler Problem 172&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="pe172-background"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;Project Euler Problem 172 is your classic Project Euler problem: short, simple, and overwhelmingly complicated.&lt;/p&gt;
&lt;p&gt;To nail this one, it's important to start simple - very simple. What I'll do is walk through the process 
of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Fri, 16 Feb 2018 18:30:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-02-16:/project-euler-problem-172.html</guid><category>computer science</category><category>mathematics</category><category>factors</category><category>sequences</category><category>euler</category><category>project euler</category></item><item><title>4x4 Rubik's Cube: Part 4: Sequence Order</title><link>https://charlesreid1.github.io/4x4-rubiks-cube-part-4-sequence-order.html</link><description>&lt;p&gt;&lt;em&gt;This is Part 4 of a 4-part blog post 
on the mathematics of the 4x4 Rubik's Cube, 
its relation to algorithms, and some 
curious properties of Rubik's Cubes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;See Part 1 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html"&gt;Part 1: Representations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 2 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-2-permutations.html"&gt;Part 2: Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 3 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html"&gt;Part 3: Factoring Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You are currently reading Part 4 of this blog post: &lt;strong&gt;Part 4: Sequence Order&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks4-intro"&gt;Introduction&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks4-intro-order"&gt;Order of a Sequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks4-intro-sofar"&gt;What We Have Covered So Far&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks4-factoring"&gt;Factoring Rubik's Cube Permutations&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks4-factoring-review"&gt;Factoring Permutations: A Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks4-factoring-cube"&gt;Factoring Rubik's …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Thu, 25 Jan 2018 10:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-01-25:/4x4-rubiks-cube-part-4-sequence-order.html</guid><category>rubiks cube</category><category>combinatorics</category><category>permutations</category><category>python</category><category>puzzles</category><category>art of computer programming</category><category>knuth</category></item><item><title>4x4 Rubik's Cube: Part 3: Factoring Permutations</title><link>https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html</link><description>&lt;p&gt;&lt;em&gt;This is Part 3 of a 4-part blog post 
on the mathematics of the 4x4 Rubik's Cube, 
its relation to algorithms, and some 
curious properties of Rubik's Cubes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;See Part 1 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html"&gt;Part 1: Representations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 2 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-2-permutations.html"&gt;Part 2: Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You are currently reading Part 3 of this blog post: &lt;strong&gt;Part 3: Factoring Permutations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See Part 4 of this blog post here: &lt;a href="#"&gt;Part 4: Sequence Order&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks3-rubiks3-intro"&gt;Introduction: Cycles, Sequences, and Order&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks3-rubiks3-intro-cycles"&gt;Cycles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks3-rubiks3-intro-sequences"&gt;Sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks3-rubiks3-intro-order"&gt;Order&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks3-rubiks3-intercalation"&gt;Intercalation Product&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks3-intercalation-definition"&gt;Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks3-intercalation-properties"&gt;Properties&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks3-factoring"&gt;Factoring Permutations Using Knuth's Theorem A&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks3-factoring-significance"&gt;Significance of Factors …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sat, 20 Jan 2018 12:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-01-20:/4x4-rubiks-cube-part-3-factoring-permutations.html</guid><category>rubiks cube</category><category>combinatorics</category><category>permutations</category><category>python</category><category>puzzles</category><category>art of computer programming</category><category>knuth</category></item><item><title>4x4 Rubik's Cube: Part 2: Permutations</title><link>https://charlesreid1.github.io/4x4-rubiks-cube-part-2-permutations.html</link><description>&lt;p&gt;&lt;em&gt;This is Part 2 of a 4-part blog post 
on the mathematics of the 4x4 Rubik's Cube, 
its relation to algorithms, and some 
curious properties of Rubik's Cubes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;See Part 1 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html"&gt;Part 1: Representations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You are currently reading Part 2 of this blog post: &lt;strong&gt;Part 2: Permutations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See Part 3 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html"&gt;Part 3: Factoring Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 4 of this blog post here: &lt;a href="#"&gt;Part 4: Sequence Order&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-intro"&gt;Introduction: Sequences and Permutations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-representing"&gt;Representing Permutations: Two-Row Notation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks2-representing-tworow"&gt;Two-Row Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks2-representing-tworow-rubiks"&gt;Two-Row Notation for Rubik's Cube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks2-sequences"&gt;Sequences&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks2-sequences-review"&gt;Review of Move/Sequence Notation …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sun, 14 Jan 2018 20:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-01-14:/4x4-rubiks-cube-part-2-permutations.html</guid><category>rubiks cube</category><category>combinatorics</category><category>permutations</category><category>python</category><category>puzzles</category><category>art of computer programming</category><category>knuth</category></item><item><title>4x4 Rubik's Cube: Part 1: Representations</title><link>https://charlesreid1.github.io/4x4-rubiks-cube-part-1-representations.html</link><description>&lt;p&gt;&lt;em&gt;This is Part 1 of a 4-part blog post 
on the mathematics of the 4x4 Rubik's Cube, 
its relation to algorithms, and some 
curious properties of Rubik's Cubes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You are currently reading Part 1 of this blog post: &lt;strong&gt;Part 1: Representations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See Part 2 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-2-permutations.html"&gt;Part 2: Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 3 of this blog post here: &lt;a href="https://charlesreid1.github.io/4x4-rubiks-cube-part-3-factoring-permutations.html"&gt;Part 3: Factoring Permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See Part 4 of this blog post here: &lt;a href="#"&gt;Part 4: Sequence Order&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks1-intro"&gt;Introduction: Why the Rubik's Cube&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks1-intro-why"&gt;Why the 4x4 Rubik's Cube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#rubiks1-how"&gt;How the Rubik's Cube Works&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-pieces"&gt;The Pieces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-face"&gt;Face Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rubiks1-how-color"&gt;Color Notation …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Thu, 11 Jan 2018 15:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-01-11:/4x4-rubiks-cube-part-1-representations.html</guid><category>rubiks cube</category><category>mathematics</category><category>combinatorics</category><category>permutations</category><category>python</category><category>puzzles</category></item><item><title>Let's Generate Permutations!</title><link>https://charlesreid1.github.io/lets-generate-permutations.html</link><description>&lt;h1&gt;Generating Permutations&lt;/h1&gt;
&lt;p&gt;In today's post we're going to discuss the generation of permutations.&lt;/p&gt;
&lt;p&gt;Often, in combinatorics problems, we are interested in &lt;em&gt;how many&lt;/em&gt; different
instances or configurations of a particular thing we can have (what we'll call
"enumeration" or "counting"). However, that is different from wanting to 
actually see all of those configurations. Indeed, if we are counting 
something with an astronomical number of configurations, we don't want 
to try to list all of them.&lt;/p&gt;
&lt;p&gt;However, as usual, Donald Knuth, who covers the topic of permutation 
generation in Volume 4A of his classic work, 
&lt;u&gt;The Art of Computer Programming&lt;/u&gt;,
uncovers …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Tue, 02 Jan 2018 18:00:00 -0800</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2018-01-02:/lets-generate-permutations.html</guid><category>combinatorics</category><category>permutations</category><category>python</category><category>computer science</category><category>algorithms</category><category>art of computer programming</category><category>knuth</category></item><item><title>Five Letter Words: Part 3: Letter Coverage and Dynamic Programming</title><link>https://charlesreid1.github.io/five-letter-words-part-3-letter-coverage-and-dynamic-programming.html</link><description>&lt;p&gt;&lt;em&gt;NOTE: The code covered in this post uses Python 3. The scripts can be converted to Python 2 with minimal effort,
but the author would encourage any user of Python 2 to "put on your big kid pants" and 
make the switch to Python 3. Let's all make this painful, drawn-out switch from Python 2 
to Python 3 a thing of the past, shall we?&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#five3-intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five3-example"&gt;A Simple Manual Exmaple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five3-pseudocode"&gt;Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five3-python"&gt;Python Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five3-output"&gt;Output and Timing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="five3-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The letter/word coverage problem, as presented by Donald Knuth in Volume 4, Facicle 0 
of his masterpiece &lt;u&gt;Art of …&lt;/u&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Tue, 19 Sep 2017 12:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-09-19:/five-letter-words-part-3-letter-coverage-and-dynamic-programming.html</guid><category>dynamic programming</category><category>python</category><category>computer science</category><category>graphs</category><category>algorithms</category><category>art of computer programming</category><category>knuth</category><category>five letter words</category></item><item><title>Five Letter Words: Part 2: More Five-Word Algorithms</title><link>https://charlesreid1.github.io/five-letter-words-part-2-more-five-word-algorithms.html</link><description>&lt;p&gt;&lt;em&gt;NOTE: The code covered in this post uses Python 3. The scripts can be converted to Python 2 with minimal effort,
but the author would encourage any user of Python 2 to "put on your big kid pants" and 
make the switch to Python 3. Let's all make this painful, drawn-out switch from Python 2 
to Python 3 a thing of the past, shall we?&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#five2-intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-distinct"&gt;Five-Letter Words with k Distinct Letters&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#five2-variation"&gt;Examining a Variation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-lex"&gt;Lexicographic Ordering of Letters&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#five2-lexicographic"&gt;Five-Letter Words with Lexicographically Ordered Letters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-rlexicographic"&gt;Five-Letter Words with Lexicographically Reversed Letters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-findpalindromes"&gt;Finding Palindromes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#five2-palindromes"&gt;Palindromes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-palindromepairs"&gt;Palindrome Pairs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five2-nearpalindromes"&gt;Near …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sat, 02 Sep 2017 21:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-09-02:/five-letter-words-part-2-more-five-word-algorithms.html</guid><category>python</category><category>computer science</category><category>graphs</category><category>algorithms</category><category>art of computer programming</category><category>knuth</category><category>five letter words</category></item><item><title>Five Letter Words: Part 1: Getting Familiar With The List</title><link>https://charlesreid1.github.io/five-letter-words-part-1-getting-familiar-with-the-list.html</link><description>&lt;p&gt;&lt;em&gt;NOTE: The code covered in this post uses Python 3. The scripts can be converted to Python 2 with minimal effort,
but the author would encourage any user of Python 2 to "put on your big kid pants" and 
make the switch to Python 3. Let's all make this painful, drawn-out switch from Python 2 
to Python 3 a thing of the past, shall we?&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#five1-about"&gt;About the Five Letter Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-usefulness"&gt;The Usefulness of Five Letter Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-warmup"&gt;Warm-Up Exercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-get"&gt;Get Words Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-euclidean"&gt;Euclidean Distance&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#five1-euclidean-code"&gt;Euclidean Distance Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-euclidean-examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-euclidean-n"&gt;Different-by-N Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-moproblems"&gt;Mo Words, Mo Problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#five1-refs"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="five1-about"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;About the Five-Letter …&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Fri, 01 Sep 2017 21:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-09-01:/five-letter-words-part-1-getting-familiar-with-the-list.html</guid><category>python</category><category>computer science</category><category>graphs</category><category>algorithms</category><category>art of computer programming</category><category>knuth</category><category>five letter words</category></item><item><title>Euler's Theorem, the Totient Function, and Calculating Totients By Hand</title><link>https://charlesreid1.github.io/eulers-theorem-the-totient-function-and-calculating-totients-by-hand.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#totient-intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#totient-complete-reduced"&gt;Complete and Reduced Residue Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#totient-totient"&gt;Euler's Totient Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#totient-byhand"&gt;Calculating the Totient Function by Hand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
* [Applications](#totient-applications)
    * [Euler's Theorem and Fermat's Little Theorem](#totient-eulers-theorem)
    * [RSA Cryptography](#totient-rsa)
    * [Ramanujan's Sum](#totient-ramanujan)
    * [Vinogradov's Theorem](#totient-vinogradov)
--&gt;

&lt;p&gt;&lt;a name="totient-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Today we're going to delve into a little bit of number theory.&lt;/p&gt;
&lt;p&gt;In number theory, we are usually dealing with modular arithmetic - 
expressions of the form:&lt;/p&gt;
&lt;div class="math"&gt;$$
a \equiv b \mod m
$$&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="math"&gt;$$
f(x) \equiv 0 \mod m
$$&lt;/div&gt;
&lt;p&gt;The mod indicates we're doing modular arithmetic, 
which is (formally) an algebraic system called a ring,
which consists of the integers 0 through m.&lt;/p&gt;
&lt;p&gt;An analogy to modular arithmetic is the way that the sine 
and cosine function "wrap around," and &lt;/p&gt;
&lt;div class="math"&gt;$$
\sin \left …&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Thu, 31 Aug 2017 11:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-08-31:/eulers-theorem-the-totient-function-and-calculating-totients-by-hand.html</guid><category>mathematics</category><category>factors</category><category>number theory</category><category>euler</category></item><item><title>Mad Combinatoric Castles</title><link>https://charlesreid1.github.io/mad-combinatoric-castles.html</link><description>&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#castles-problem"&gt;Overview: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#polyominoes"&gt;Polyominoes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#castle-rules"&gt;Castle Rules for Polynominoes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#castles-enumerate"&gt;Don't Generate - Enumerate!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="castles-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Overview: The Problem&lt;/h1&gt;
&lt;p&gt;In an earlier post, I mentioned &lt;a href="https://charlesreid1.com/wiki/Project_Euler"&gt;my efforts on Project Euler problems&lt;/a&gt;
and the wide variety of problems there that can offer some profound mathematical insights.&lt;/p&gt;
&lt;p&gt;Given that the first post covered Project Euler problem 1, I thought it would be nice
if the next problem cranked up the difficulty factor by an order of magnitude.
&lt;a href="https://projecteuler.net/problem=502"&gt;Project Euler Problem 502&lt;/a&gt; is a very hairy combinatorics problem that required me to learn about 
a wide variety of combinatorial enumeration techniques.&lt;/p&gt;
&lt;p&gt;Let's start with the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Tue, 25 Jul 2017 18:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-07-25:/mad-combinatoric-castles.html</guid><category>computer science</category><category>mathematics</category><category>factors</category><category>sequences</category><category>project euler</category></item><item><title>Project Euler Problem 1</title><link>https://charlesreid1.github.io/project-euler-problem-1.html</link><description>&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pe1-problem"&gt;Overview: The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe1-why"&gt;Why This Problem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pe1-deeper"&gt;Going Deeper: An Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="pe1-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Overview: The Problem&lt;/h1&gt;
&lt;p&gt;Project Euler is a website that provides mathematically-oriented programming problems.
There are many (over 500) and they are a rich source of profound mathematical insights.&lt;/p&gt;
&lt;p&gt;I have been considering a writeup that goes deep into a particular problem,
so why not do it with problem 1?&lt;/p&gt;
&lt;p&gt;Problem 1 of Project Euler asks:&lt;/p&gt;
&lt;blockquote&gt;
Find the sum of all the multiples of 3 or 5 below 1000.
&lt;/blockquote&gt;

&lt;p&gt;It is a pretty simple task - one of the first things covered in a decent programming course
is the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sat, 22 Jul 2017 09:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-07-22:/project-euler-problem-1.html</guid><category>computer science</category><category>mathematics</category><category>factors</category><category>sequences</category><category>euler</category><category>project euler</category></item><item><title>Shortest Lattice Paths and Multiset Permutations</title><link>https://charlesreid1.github.io/shortest-lattice-paths-and-multiset-permutations.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#multiset-lattice"&gt;The Lattice Paths Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiset-permutations"&gt;Problem Formulation: Permutations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#multiset-permutations-unique"&gt;Permutations of Unique Items (Factorial)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiset-permutations-dupes"&gt;Permutations of Items with Duplicates (Multichoose)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiset-permutations-example"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiset-2d-rectangular"&gt;Solving 2D Rectangular Lattice&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#multiset-2d-examples"&gt;More Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiset-2d-square"&gt;Solving 2D Square Lattice (Special Case)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiset-3d-rectangular"&gt;Solving 3D Cuboid Lattice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiset-3d-square"&gt;Solving 3D Cube Lattice (Special Case)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiset-ndim"&gt;Solving N-Dimensional Square Lattice (N-Dimensional Multisets)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="multiset-lattice"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Lattice Paths Problem&lt;/h2&gt;
&lt;p&gt;I first came across the lattice paths problem in &lt;a href="https://projecteuler.net/problem=15"&gt;Project Euler problem 15&lt;/a&gt;. 
The question described a 2x2 square lattice,
and illustrated the 6 ways of navigating from the top left corner to the bottom right corner by taking the minimum number
of steps - 2 right …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Tue, 18 Jul 2017 08:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-07-18:/shortest-lattice-paths-and-multiset-permutations.html</guid><category>computer science</category><category>mathematics</category><category>combinatorics</category><category>permutations</category><category>lattice paths</category><category>puzzles</category><category>project euler</category></item><item><title>Computing Square Roots: Part 2: Using Continued Fractions</title><link>https://charlesreid1.github.io/computing-square-roots-part-2-using-continued-fractions.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cf-number-systems"&gt;Number Systems and Representations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-cf"&gt;Continued Fraction Representations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-convergents"&gt;Convergents of Continued Fractions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-example-coeffs"&gt;Example: Continued Fraction Coefficients of &lt;span class="math"&gt;\(\sqrt{14}\)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-example-convergents"&gt;Example: Convergents of &lt;span class="math"&gt;\(\sqrt{14}\)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cf-sqrt-approx"&gt;Approximating Square Roots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="cf-number-systems"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Continued Fractions&lt;/h2&gt;
&lt;p&gt;Let's start part 2 of our discussion of computing square roots by talking about 
continued fractions. When we first learn mathematics, we learn to count in the 
base 10 system: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. We can construct representations of 
all of the integers using these 10 digits, by arranging them in a different order.
So, for example, saying 125 is equivalent to saying …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Fri, 14 Jul 2017 20:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-07-14:/computing-square-roots-part-2-using-continued-fractions.html</guid><category>computer science</category><category>java</category><category>mathematics</category><category>number theory</category><category>square roots</category><category>numerical methods</category><category>continued fractions</category><category>irrational numbers</category></item><item><title>Computing Square Roots: Part 1: Using Newton's Method</title><link>https://charlesreid1.github.io/computing-square-roots-part-1-using-newtons-method.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-roots"&gt;Newton's Method for Finding Roots of Equations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-square-roots"&gt;Newton's Method for Finding Square Roots&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-program"&gt;Newton's Method for Finding Square Roots: Program&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-accuracy"&gt;Accuracy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-speed"&gt;Speed&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-next"&gt;Next Steps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#newton-refs"&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="newton-roots"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Newton's Method for Finding Roots of Equations&lt;/h2&gt;
&lt;p&gt;Suppose we have a function &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; and we want to 
compute values of &lt;span class="math"&gt;\(x\)&lt;/span&gt; for which &lt;span class="math"&gt;\(f(x)=0\)&lt;/span&gt;. These values 
of &lt;span class="math"&gt;\(x\)&lt;/span&gt; are called the &lt;strong&gt;roots&lt;/strong&gt; of &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We can compute the roots using Newton's Method,
which utilizes the derivative of the function
to iteratively compute the roots of the function.&lt;/p&gt;
&lt;p&gt;Newton's method begins with an initial guess.
It evaluates the derivative …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Fri, 14 Jul 2017 18:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-07-14:/computing-square-roots-part-1-using-newtons-method.html</guid><category>computer science</category><category>java</category><category>mathematics</category><category>number theory</category><category>square roots</category><category>numerical methods</category><category>newtons method</category><category>irrational numbers</category></item><item><title>CSE 143 Final Project: Hilbert Sort: 3. The Code</title><link>https://charlesreid1.github.io/cse-143-final-project-hilbert-sort-3-the-code.html</link><description>&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;p&gt;This is the third in a series of three posts 
detailing the Hilbert Sort problem,
its solution, and its implementation.
This post deals with the code to solve the
Hilbert Sort problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#hilbert3-pseudocode"&gt;Pseudocode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#hilbert3-code"&gt;Code&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#hilbert3-utility"&gt;Utility Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert3-recursive"&gt;Recursive Sort Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert3-main"&gt;Main Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#hilbert2-references"&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="hilbert3-pseudocode"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Hilbert Sort: Pseudocode&lt;/h1&gt;
&lt;p&gt;From our prior post, here is the psudocode for our Hilbert Sort function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;define hilbert_sort( unsorted queue, square dimension ):
    create southwest queue
    create northwest queue
    create northeast queue
    create southeast queue
    for each point:
        if in southwest:
            create new point using X -&amp;gt; Y, Y -&amp;gt; X
            add to southwest queue
        if in northwest …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Fri, 30 Jun 2017 20:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-06-30:/cse-143-final-project-hilbert-sort-3-the-code.html</guid><category>programming</category><category>computer science</category><category>final project</category><category>competitive programming</category><category>hilbert sort</category><category>java</category></item><item><title>CSE 143 Final Project: Hilbert Sort: 2. The Solution Algorithm</title><link>https://charlesreid1.github.io/cse-143-final-project-hilbert-sort-2-the-solution-algorithm.html</link><description>&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;p&gt;This is the second in a series of three posts 
detailing the Hilbert Sort problem,
its solution, and its implementation.
This post solves the problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#hilbert2-problem"&gt;Hilbert Sort Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-space"&gt;Space Is The Place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-reflections"&gt;The Reflections&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#hilbert2-quad"&gt;Reflected Quadrants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-scaling"&gt;Scaling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-reflection"&gt;Reflection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-reflection-solution"&gt;Solving the Reflection Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-procedure"&gt;Procedure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert2-references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="hilbert2-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Hilbert Sort Problem&lt;/h1&gt;
&lt;p&gt;In the prior post, we covered the Hilbert Sort problem, 
but we state it once more succinctly here before 
detailing a solution to the problem.&lt;/p&gt;
&lt;p&gt;The Hilbert Sort problem asks the following: 
given a set of labeled &lt;span class="math"&gt;\((x,y)\)&lt;/span&gt; points,
how can we sort the points according to 
the order …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Tue, 27 Jun 2017 11:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-06-27:/cse-143-final-project-hilbert-sort-2-the-solution-algorithm.html</guid><category>programming</category><category>computer science</category><category>final project</category><category>competitive programming</category><category>hilbert sort</category></item><item><title>CSE 143 Final Project: Hilbert Sort: 1. The Problem</title><link>https://charlesreid1.github.io/cse-143-final-project-hilbert-sort-1-the-problem.html</link><description>&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;p&gt;This is the first in a series of three posts 
detailing the Hilbert Sort problem,
its solution, and its implementation.
This post sets up the problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#hilbert-motivation"&gt;Hilbert Sort: Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-spacefilling"&gt;Hilbert, Peano, and Space-Filling Curves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-curve"&gt;Constructing a Hilbert Curve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-sort"&gt;Performing a Hilbert Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-problem"&gt;Problem Statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hilbert-refs"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="hilbert-motivation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Hilbert Sort: Motivation&lt;/h1&gt;
&lt;p&gt;In the next few series of posts, we will cover the Hilbert Sort problem,
how it works, and how to implement it.&lt;br&gt;
However, before we describe the problem further, 
let's start with some motivation for solving this problem.&lt;/p&gt;
&lt;p&gt;Suppose we're dealing with a very large number of independent objects …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Fri, 23 Jun 2017 16:30:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-06-23:/cse-143-final-project-hilbert-sort-1-the-problem.html</guid><category>programming</category><category>computer science</category><category>final project</category><category>competitive programming</category><category>hilbert sort</category></item><item><title>CSE 143 Final Project: Classy</title><link>https://charlesreid1.github.io/cse-143-final-project-classy.html</link><description>&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#classy-problem"&gt;Problem Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-approach"&gt;Solution Approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-algo"&gt;Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-pseudo"&gt;Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-oop"&gt;Using an Object-Oriented Approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-code"&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#classy-refs"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="classy-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Problem Description&lt;/h1&gt;
&lt;p&gt;Comedian John Cleese, in his memoir &lt;strong&gt;So Anyway...&lt;/strong&gt;, described the social classes of his
mother and father as "upper-uper-lower-middle class" and "middle-middle-middle-lower-middle class",
respectively. Write a program that will sort individuals based on a labeling of their 
social standing by class.&lt;/p&gt;
&lt;p&gt;The three main classes are upper, middle, and lower. Classes progress hierarchically
from right to left. For example, lower-upper would come before lower-lower.
There is also ordering within a class, so upper-upper is a higher class than middle-upper.&lt;/p&gt;
&lt;p&gt;Once you have reached …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Fri, 23 Jun 2017 09:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-06-23:/cse-143-final-project-classy.html</guid><category>programming</category><category>comparison</category><category>sorting</category><category>algorithms</category><category>computer science</category><category>final project</category><category>competitive programming</category></item><item><title>CSE 143 Final Project: Checkers</title><link>https://charlesreid1.github.io/cse-143-final-project-checkers.html</link><description>&lt;h1&gt;Table of Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#checkers-intro"&gt;The Problem&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#checkers-problem"&gt;Problem Description: Checkers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-input"&gt;Input File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-output"&gt;Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-solution"&gt;The Solution&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#checkers-kiss"&gt;Keep It Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-parity"&gt;Solution Analysis: Parity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-euler"&gt;Solution Analysis: Graphs and Euler Tours&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-algo"&gt;Solution Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-pseudocode"&gt;Solution Pseudocode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Solution Code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#checkers-refs"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="checkers-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;The Problem&lt;/h1&gt;
&lt;p&gt;This is a programming challenge that was assigned to some of my CSE 143 students 
as a final project for their class.&lt;/p&gt;
&lt;p&gt;The origin of this problem was the Association of Computing Machinery (ACM)'s 
International Collegiate Programming Competition (ICPC),
in particular the Pacific Northwest Regional Competition, Division 1 challenges from 2015.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://acmicpc-pacnw.org/"&gt;Link to Pacific NW ACM ICPC page.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="checkers-problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Problem Description: Checkers&lt;/h2&gt;
&lt;p&gt;In the Checkers problem …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Mon, 19 Jun 2017 11:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-06-19:/cse-143-final-project-checkers.html</guid><category>programming</category><category>computer science</category><category>final project</category><category>competitive programming</category></item><item><title>Teaching Recursion with the N Queens Problem</title><link>https://charlesreid1.github.io/teaching-recursion-with-the-n-queens-problem.html</link><description>&lt;p&gt;Table of Contents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-gentle-intro"&gt;A Gentle Introduction to Recursion&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-backtrack"&gt;Recursive Backtracking&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-decision"&gt;Paring Down the Decision Tree&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-pseudocode"&gt;The Pseudocode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-diag"&gt;Accounting for Diagonal Attacks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#8q-why"&gt;Why the N Queens Problem?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="8q-gentle-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;A Gentle Introduction to Recursion&lt;/h2&gt;
&lt;p&gt;Recursion, particularly recursive backtracking, is far and away the most challenging topic 
I cover when I teach the CSE 143 (Java Programming II) course at South Seattle College.
Teaching the concept of recursion, on its own, is challenging: 
the concept is a hard one to encounter in everyday life, making it unfamiliar, 
and that creates a lot of friction when students try to understand how to apply recursion. &lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Tue, 16 May 2017 18:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-05-16:/teaching-recursion-with-the-n-queens-problem.html</guid><category>java</category><category>algorithms</category><category>recursion</category><category>n-queens</category></item><item><title>Undergraduate Research Project: Wireless Sensor Networks for Internet of Things Applications (Part 2: The Technologies)</title><link>https://charlesreid1.github.io/undergraduate-research-project-wireless-sensor-networks-for-internet-of-things-applications-part-2-the-technologies.html</link><description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr2-tech"&gt;Undergraduate Research (UGR) Project: The Technologies&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr2-overview"&gt;Overview of the UGR Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-student"&gt;Student-Led Components&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr2-pi"&gt;Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-questions"&gt;Question Skills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-aircrack"&gt;Aircrack/Airodump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-csv"&gt;Pi CSV Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-db"&gt;NoSQL Database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-backend"&gt;Backend Components&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr2-stunnel"&gt;Stunnel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-vps"&gt;Virtual Private Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-docker"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr2-flowchart"&gt;Technologies Flowchart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="ugr2-tech"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Undergraduate Research Project (UGR): The Technologies&lt;/h1&gt;
&lt;p&gt;In this post we'll cover some of the technologies that were used in our
South Seatte College undergraduate research project.
The project involved an ensemble of different technologies
to complete each component of the data analysis pipeline.
Some components were planned for, but other components 
were implemented due to "surprise" challenges that cropped up 
during the course of the project, while …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sun, 14 May 2017 12:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-05-14:/undergraduate-research-project-wireless-sensor-networks-for-internet-of-things-applications-part-2-the-technologies.html</guid><category>wireless</category><category>security</category><category>undergraduate research project</category><category>stunnel</category><category>SSH</category><category>aircrack</category><category>mongodb</category><category>python</category><category>jupyter</category><category>linux</category><category>raspberry pi</category></item><item><title>Undergraduate Research Project: Wireless Sensor Networks for Internet of Things Applications (Part 1: The Project)</title><link>https://charlesreid1.github.io/undergraduate-research-project-wireless-sensor-networks-for-internet-of-things-applications-part-1-the-project.html</link><description>&lt;p&gt;Table of Contents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr-overview"&gt;Overview of the Undergraduate Research (UGR) Project&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ugr-ugr"&gt;South Seattle UGR Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr-engr-design"&gt;Engineering Design Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr-components"&gt;Project Components: Extract, Store, and Analyze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr-buzzword"&gt;The Internet of Things: Not Just a Buzzword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ugr-uw"&gt;UW Research Symposium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="ugr-overview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Overview of the Undergraduate Research (UGR) Project&lt;/h1&gt;
&lt;p&gt;&lt;a name="ugr-ugr"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;South Seattle UGR Project&lt;/h2&gt;
&lt;p&gt;For the past year, in addition to my duties as a computer science and math instructor at South Seattle College,
I have served as a research mentor for an NSF-funded undergraduate research project involving (off-and-on) five different 
South Seattle students - all of whom have expressed interest in transferring to the University of Washington's 
computer science …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sun, 14 May 2017 11:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-05-14:/undergraduate-research-project-wireless-sensor-networks-for-internet-of-things-applications-part-1-the-project.html</guid><category>wireless</category><category>security</category><category>undergraduate research project</category><category>stunnel</category><category>SSH</category><category>aircrack</category><category>mongodb</category><category>python</category><category>jupyter</category><category>linux</category><category>raspberry pi</category></item><item><title>Stunnel</title><link>https://charlesreid1.github.io/stunnel.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-intro"&gt;Introduction&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#stunnel-what"&gt;What Does Stunnel Do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stunnel-work"&gt;How Does Stunnel Work?&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-server"&gt;Setting Up an Stunnel Server&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#stunnel-server-resoures"&gt;Charlesreid1.com Resources for Stunnel Servers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-client"&gt;Setting Up an Stunnel Client&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-protocols"&gt;Example Protocols&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-docker"&gt;Stunnel with Docker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-troubleshooting"&gt;Troubleshooting Stunnel Connections&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#stunnel-refs"&gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="stunnel-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a name="stunnel-what"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;What Does Stunnel Do?&lt;/h3&gt;
&lt;p&gt;Stunnel is a tool for creating SSL tunnels between a client and a server.&lt;/p&gt;
&lt;p&gt;Creating SSL connections is a general task that is very useful.
In particular, any packet of any protocol can always be wrapped in an
additional SSL layer, with packets embedded within packets, so this means 
you can wrap arbitrary traffic protocols in SSL using Stunnel.&lt;/p&gt;
&lt;p&gt;Stunnel requires …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sun, 30 Apr 2017 20:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-04-30:/stunnel.html</guid><category>stunnel</category><category>SSL</category><category>encryption</category><category>SSH</category><category>networking</category><category>OpenVPN</category></item><item><title>Traveling Schoolteacher Problem</title><link>https://charlesreid1.github.io/traveling-schoolteacher-problem.html</link><description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#tstp-intro"&gt;The Traveling Schoolteacher Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-math"&gt;The Mathematical Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-pseudocode"&gt;The Pseudocode&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-java"&gt;The Java Code&lt;/a&gt; &lt;ul&gt;
&lt;li&gt;&lt;a href="#tstp-classes"&gt;TSTP Class Fields and Methods&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-base"&gt;Explore: Base Case&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-recursive"&gt;Explore: Recursive Case&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-graphs"&gt;Example Graphs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-results"&gt;Results&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tstp-walltime-nodes"&gt;Walltime vs Number of Nodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tstp-references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="tstp-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Traveling Schoolteacher Problem&lt;/h2&gt;
&lt;p&gt;The Traveling Schoolteacher Problem (TSTP) is a variation on the Traveling Salesperson Problem (TSP).&lt;/p&gt;
&lt;p&gt;The Traveling Schoolteacher Problem supposes a schoolteacher that is traveling from school to school
in order to give lessons at different schools. Being a poor schoolteacher, they are only able to afford an older car that gets bad mileage and has a small gas tank.&lt;/p&gt;
&lt;p&gt;After visiting each school …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sun, 30 Apr 2017 13:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-04-30:/traveling-schoolteacher-problem.html</guid><category>computer science</category><category>guava</category><category>graph</category><category>TSP</category></item><item><title>The Z-Machine: A Simple Turing Machine</title><link>https://charlesreid1.github.io/the-z-machine-a-simple-turing-machine.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#z-bkg"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-setup"&gt;The Z-Machine: Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-instructions"&gt;The Z-Machine: Instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-loop"&gt;Simple Example: Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-addition"&gt;Implementing an Addition Operator on the Z-Machine&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#z-solution-approach"&gt;The Solution Approach (The Maths)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-addition1"&gt;Solution 1: Positive Integers Only&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-addition2"&gt;Solution 2: Dealing with Zeros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-subtraction"&gt;Implementing a Decrement Operator on the Z-Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-lessthan"&gt;Implementing a Less Than Operator on the Z-Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-whocares"&gt;Who Cares? (Or, How To Build A Computer)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#z-sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="z-bkg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Recently I discovered the wonderful blog of &lt;a href="http://blog.jgc.org/2013/05/the-two-problems-i-had-to-solve-in-my.html"&gt;John Graham-Cumming&lt;/a&gt;.
One of hist posts, from 2013, details a question that he had to answer for the Oxford University Department of Computer Science's "interviews" 
(which, I believe, are a kind of final …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Mon, 24 Apr 2017 20:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-04-24:/the-z-machine-a-simple-turing-machine.html</guid><category>turing machine</category><category>computer science</category><category>computer engineering</category><category>apollo</category><category>assembly</category></item><item><title>AWSome Day Seattle Notes: Part 2: Networking, Security, and Miscellany</title><link>https://charlesreid1.github.io/awsome-day-seattle-notes-part-2-networking-security-and-miscellany.html</link><description>&lt;p&gt;These notes are also available on git.charlesreid1.com 
&lt;a href="https://git.charlesreid1.com/charlesreid1/aws/src/branch/master/awsome-day-sea-2018/Part2.md"&gt;here&lt;/a&gt;
or in
&lt;a href="https://git.charlesreid1.com/charlesreid1/aws"&gt;https://git.charlesreid1.com/charlesreid1/aws&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;AWSome Day Notes: Part 2: Networking, Security, and Miscellany&lt;/h1&gt;
&lt;p&gt;Following are some notes from Amazon's AWSome Day (Tuesday, February 27, 2018).&lt;/p&gt;
&lt;h2&gt;Nomenclature&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Elastic:&lt;/strong&gt; You'll see the word "elastic" on a lot of Amazon's services. The "elastic" concept refers to a service that is able to handle huge increases in traffic (Pokemon Go - number of users grew orders of magnitude faster/larger than what they designed for).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Virtual Private Cloud (VPC):&lt;/strong&gt; The AWS equivalent of a virtual private network (VPN). A VPC is …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Wed, 12 Apr 2017 10:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-04-12:/awsome-day-seattle-notes-part-2-networking-security-and-miscellany.html</guid><category>aws</category><category>cloud</category><category>vpc</category><category>containers</category><category>data engineering</category></item><item><title>AWSome Day Seattle Notes: Part 1: The Basics</title><link>https://charlesreid1.github.io/awsome-day-seattle-notes-part-1-the-basics.html</link><description>&lt;p&gt;These notes are also available on git.charlesreid1.com 
&lt;a href="https://git.charlesreid1.com/charlesreid1/aws/src/branch/master/awsome-day-sea-2018/Part1.md"&gt;here&lt;/a&gt;
or in
&lt;a href="https://git.charlesreid1.com/charlesreid1/aws"&gt;https://git.charlesreid1.com/charlesreid1/aws&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;AWSome Day Notes: Part 1: The Basics&lt;/h1&gt;
&lt;p&gt;Following are some notes from Amazon's AWSome Day (Tuesday, February 27, 2018).&lt;/p&gt;
&lt;h2&gt;EC2 Costs and Scheduling&lt;/h2&gt;
&lt;p&gt;Cost of a node:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Important to understand Amazon's price model: users pay for &lt;em&gt;access&lt;/em&gt;, not for &lt;em&gt;hardware&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Cost of AWS node is cost for &lt;em&gt;on the spot access&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scheduling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you can anticipate your usage, you can schedule instances in advance, and get a discount&lt;/li&gt;
&lt;li&gt;Discount of 50% for one-year reservation (if you keep it busy for 6 months …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Tue, 11 Apr 2017 10:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-04-11:/awsome-day-seattle-notes-part-1-the-basics.html</guid><category>aws</category><category>cloud</category><category>vpc</category><category>containers</category><category>data engineering</category></item><item><title>Setting Up a Self-Hosted Github Clone with Gitea</title><link>https://charlesreid1.github.io/setting-up-a-self-hosted-github-clone-with-gitea.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#gitea-intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-running"&gt;Running with Gitea&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#gitea-bin"&gt;Binary or Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-config-dir"&gt;Configuring Gitea Directories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-fw"&gt;Opening the Firewall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-config-server"&gt;Setting Up and Configuring Gitea Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-use"&gt;How To Use Gitea&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#gitea-pushing-local"&gt;Pushing a Local Repo Into Gitea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-copying"&gt;Copying Repos from Github to Gitea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-moving"&gt;"Moving" Repos from Github to Gitea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-pushing-commits"&gt;Pushing Commits to Github or Gitea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-backing-up"&gt;Backing Up Gitea&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-patterns"&gt;How Gitea Fits Into Git Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitea-wrapup"&gt;Wrapup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="gitea-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;In this post we'll cover how to set up a web-hosted git server that uses Gitea,
a Github clone that is written in Go. 
While this post is not, strictly speaking, research, 
having your own hosted git server certainly …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sat, 01 Apr 2017 22:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-04-01:/setting-up-a-self-hosted-github-clone-with-gitea.html</guid><category>git</category><category>go</category><category>gitea</category></item><item><title>Better Timing of Guava Traveling Salesperson Problem Code: Timing Scripts</title><link>https://charlesreid1.github.io/better-timing-of-guava-traveling-salesperson-problem-code-timing-scripts.html</link><description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#better-timing-thecode"&gt;Before We Begin: The Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-timing"&gt;Timing Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-before-u-time"&gt;Before You Time: Developing Your Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-timing-journey"&gt;Beginning Your Timing Journey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-mouse-cookie"&gt;Statistical Timing, a.k.a., If You Give A Mouse A Cookie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-hierarchical"&gt;Hierarchical Timing Strategy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-single"&gt;Single Problem/Program/Binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-multiple"&gt;Multiple Problem/Program/Binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-statistical"&gt;Statistical Averaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-results"&gt;Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-timing-summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="better-timing-thecode"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Before We Begin: The Code&lt;/h2&gt;
&lt;p&gt;Note that all of the code discussed/shown in this post is available from the 
traveling salesperson problem repository on &lt;a href="https://git.charlesreid1.com/charlesreid1/tsp"&gt;git.charlesreid1.com&lt;/a&gt;.
The &lt;code&gt;guava/&lt;/code&gt; directory contains the guava solution to the traveling salesperson problem,
along with the timing scripts discussed below, and several example output files.&lt;/p&gt;
&lt;p&gt;&lt;a name="better-timing-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Timing a piece …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sat, 01 Apr 2017 09:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-04-01:/better-timing-of-guava-traveling-salesperson-problem-code-timing-scripts.html</guid><category>computer science</category><category>command line</category><category>guava</category><category>graph</category><category>TSP</category><category>make</category><category>awk</category><category>performance</category></item><item><title>Fixing Bottlenecks in the Guava Traveling Salesperson Problem Code</title><link>https://charlesreid1.github.io/fixing-bottlenecks-in-the-guava-traveling-salesperson-problem-code.html</link><description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp2-intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-graphs"&gt;The Graphs We Are Solving&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp2-viz-graphs"&gt;Visualizations of Graphs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-guava-tsp-soln"&gt;Guava TSP Solution&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp2-timing-guava-tsp"&gt;Timing the TSP Solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-improving"&gt;Improving the Guava TSP Solution&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp2-flaw"&gt;The Flaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-fixing"&gt;Fixing the Flaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-pessimist"&gt;The Pessimist Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-timing"&gt;Timing Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp2-future"&gt;Future Work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="tsp2-intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;In a prior blog post we introduced you to the traveling salesperson problem (TSP),
which involves finding the shortest path through every city in a group of cities
connected by a network of roads. Using Google Guava, we have implemented a solution 
to the TSP in Java.&lt;/p&gt;
&lt;p&gt;Our philosophy toward timing, profiling, and optimization is that it is always best 
to work from data - and timing …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Wed, 29 Mar 2017 14:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-03-29:/fixing-bottlenecks-in-the-guava-traveling-salesperson-problem-code.html</guid><category>computer science</category><category>guava</category><category>graph</category><category>TSP</category><category>performance</category></item><item><title>Python vs. Perl: N Queens Problem</title><link>https://charlesreid1.github.io/python-vs-perl-n-queens-problem.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pvp-background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-nqueens"&gt;N Queens Revisited&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-perlsoln"&gt;Perl Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-pythonsoln"&gt;Python Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-h2hnqueens"&gt;Python vs. Perl: Walltime vs. Number of Queens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-perlprof"&gt;Perl Profiling and Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-pythonprof"&gt;Python Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-pythonprofresults"&gt;Python Profiling Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-pythonperl"&gt;Comparing Python to Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-h2hops"&gt;Python vs. Perl: Walltime vs. Number of Solutions Tested&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-winner"&gt;The Winner: Perl for Small Problems, Python for Big Ones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvp-sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="pvp-background"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Revisiting the N queens problem, this time implementing the solution in Python.&lt;/p&gt;
&lt;p&gt;Verb-oriented solution, functional, and based on Perl solution&lt;/p&gt;
&lt;p&gt;More fair comparison - both are interpreted languages, not compiled languages&lt;/p&gt;
&lt;p&gt;Compare Python and Perl, ease of implementation, speed, flexibility&lt;/p&gt;
&lt;p&gt;&lt;a name="pvp-nqueensproblem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;N Queens Problem&lt;/h2&gt;
&lt;p&gt;As a recap from the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Sat, 25 Mar 2017 20:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-03-25:/python-vs-perl-n-queens-problem.html</guid><category>python</category><category>perl</category><category>java</category><category>algorithms</category><category>recursion</category><category>n-queens</category></item><item><title>Solving the Traveling Salesperson Problem with Java and Guava</title><link>https://charlesreid1.github.io/solving-the-traveling-salesperson-problem-with-java-and-guava.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-bkg"&gt;Background: Traveling Salesperson Problem (TSP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-graphs"&gt;Graphs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-nedges"&gt;Number of Edges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-bktk"&gt;Solution: Recursive Backtracking&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-guava"&gt;Solving the TSP with Java and Guava&lt;/a&gt; &lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-basic-guava"&gt;Basics of Guava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-guava-graphs"&gt;Guava Graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-guava-mutable-immutable"&gt;Guava Mutable vs Immutable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-importing-guava"&gt;Importing Guava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-tsp-class"&gt;TSP Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-node-class"&gt;Node Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-edge-class"&gt;Edge Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-building-graph"&gt;TSP Constructor and Building the Graph&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-constructor"&gt;Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-build-graph-method"&gt;Build Graph Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-solving-exploring"&gt;Solving and Exploring with Recursive Backtracking&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#tsp1-solve"&gt;Solve Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-explore"&gt;Explore (Backtrack) Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-nextsteps"&gt;Next Steps: Timing and Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tsp1-sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="tsp1-bkg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Background: Traveling Salesperson Problem (TSP)&lt;/h2&gt;
&lt;p&gt;The traveling salesperson problem, or TSP, is a classic programming problem and an important one in computer science,
and applications in operations research and optimization.&lt;/p&gt;
&lt;p&gt;The idea is that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Thu, 23 Mar 2017 11:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-03-23:/solving-the-traveling-salesperson-problem-with-java-and-guava.html</guid><category>computer science</category><category>guava</category><category>graph</category><category>TSP</category></item><item><title>Perl vs. Java: N Queens Problem</title><link>https://charlesreid1.github.io/perl-vs-java-n-queens-problem.html</link><description>&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pvj-background"&gt;Background: Huh?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-nqueensproblem"&gt;N Queens Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-nqueenssoln"&gt;N Queens Solution&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pvj-perlsoln"&gt;Perl Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-javasoln"&gt;Java Solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-h2hnqueens"&gt;Head to Head: Walltime vs. Number of Queens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-perlprof"&gt;Perl Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-perlprofresults"&gt;Perl Profiling Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-javaprof"&gt;Java Profiling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-javaprofresults"&gt;Java Profiling Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-h2hntested"&gt;Head to Head: Walltime vs. Number of Solutions Tested&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-applesoranges"&gt;Apples and Oranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pvj-sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post, we describe an implementation of the &lt;a href="https://en.wikipedia.org/wiki/Eight_queens_puzzle"&gt;N Queens Problem&lt;/a&gt;,
which is a puzzle related to optimization, combinatorics, and recursive backtracking.
The puzzle asks: how many configurations are there for placing 8 queens on a chessboard
such that no queen can attack any othr queen?&lt;/p&gt;
&lt;p&gt;This problem was implemented in Perl …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Wed, 22 Mar 2017 22:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-03-22:/perl-vs-java-n-queens-problem.html</guid><category>java</category><category>perl</category><category>algorithms</category><category>recursion</category><category>n-queens</category></item><item><title>Enigma Cipher Implementation: Part 4: Combinatorics</title><link>https://charlesreid1.github.io/enigma-cipher-implementation-part-4-combinatorics.html</link><description>&lt;p&gt;In this, the fourth article in a series on implementing the Enigma cipher in Java,
we use some big number libraries to explore the combinatorics of the Enigma encryption scheme
and better understand the Enigma's strengths and weaknesses. &lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#keyspace"&gt;The Key Space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#switchboard"&gt;The Switchboard&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#onecable"&gt;One Cable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#morecables"&gt;More Cables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manycables"&gt;Many Cables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dupes"&gt;Accounting for Duplicates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#finalswitchboard"&gt;Final Combination Count for Switchboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#rotors"&gt;The Rotors&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#finalrotors"&gt;Final Combination Count for Rotors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reflector"&gt;The Reflector&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#finalreflector"&gt;Final Combination Count for Reflector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#finalcount"&gt;Final Enigma Combination Count&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#javabigint"&gt;Java BigInteger Combinations Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sources"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name="keyspace"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Key Space&lt;/h2&gt;
&lt;p&gt;Basically, what the Enigma did was to encrypt each character of a message one …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Wed, 22 Mar 2017 19:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-03-22:/enigma-cipher-implementation-part-4-combinatorics.html</guid><category>ciphers</category><category>enigma</category><category>encryption</category><category>java</category></item><item><title>Enigma Cipher Implementation: Part 3: Enigma in Java Without Objects</title><link>https://charlesreid1.github.io/enigma-cipher-implementation-part-3-enigma-in-java-without-objects.html</link><description>&lt;p&gt;As the title suggests, we're continuing with the third in a series of posts 
exploring a verb-oriented approach to programming - 
in an attempt to free ourselves from the fetishization of objects,
we are attempting to learn how to use languages against their will.&lt;/p&gt;
&lt;p&gt;This is all inspired by &lt;a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html"&gt;Steve Yegge's 2006 blog post&lt;/a&gt;,
"Execution in the Kingdom of Nouns," an excellent read that inspired me to 
explore the subject more deeply. &lt;/p&gt;
&lt;h2&gt;Java Pseudocode&lt;/h2&gt;
&lt;p&gt;In the last post, we ran through the pseudocode for an Enigma machine 
based entirely upon Strings, iterators, and integer indexes, 
leading to a vastly simpler abstraction …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Wed, 22 Mar 2017 18:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-03-22:/enigma-cipher-implementation-part-3-enigma-in-java-without-objects.html</guid><category>ciphers</category><category>enigma</category><category>encryption</category><category>java</category></item><item><title>Enigma Cipher Implementation: Part 2: Pseudocode</title><link>https://charlesreid1.github.io/enigma-cipher-implementation-part-2-pseudocode.html</link><description>&lt;p&gt;This is the second of several posts walking through an implementation of the Enigma cipher in code.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://www.codesandciphers.org.uk/enigma/index.htm"&gt;the website of the late Tony Sale&lt;/a&gt; for providing a wealth of 
detailed, accurate information entirely free of graduate level mathematics, 
and includes some very clear &lt;a href="http://www.codesandciphers.org.uk/enigma/example1.htm"&gt;examples&lt;/a&gt; for luddites like me who need everything spelled out really clearly.&lt;/p&gt;
&lt;h2&gt;The Goal&lt;/h2&gt;
&lt;p&gt;The goal of analyzing the Enigma machine is to better understand the workings of a device that played an important role in the history of computing.
It is also an excellent system to better understand some of the design decisions we …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Tue, 21 Mar 2017 21:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-03-21:/enigma-cipher-implementation-part-2-pseudocode.html</guid><category>ciphers</category><category>enigma</category><category>encryption</category></item><item><title>Enigma Cipher Implementation: Part 1: How It Works</title><link>https://charlesreid1.github.io/enigma-cipher-implementation-part-1-how-it-works.html</link><description>&lt;p&gt;This is the first of several posts that will walk through an implementation of the Enigma cipher in code.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://www.codesandciphers.org.uk/enigma/index.htm"&gt;the website of the late Tony Sale&lt;/a&gt; for providing a wealth of 
detailed, accurate information entirely free of graduate level mathematics, 
and includes some very clear &lt;a href="http://www.codesandciphers.org.uk/enigma/example1.htm"&gt;examples&lt;/a&gt; for luddites like me who need everything spelled out really clearly.&lt;/p&gt;
&lt;p&gt;There is also a Wikipedia article offering detailed information about the mathematical cryptanalysis of the Enigma,
and covering some of the strengths and weaknesses of the machine: &lt;a href="https://en.wikipedia.org/wiki/Cryptanalysis_of_the_Enigma"&gt;Cryptanalysis of the Enigma&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;The Enigma machine was a device used by the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">charlesreid1</dc:creator><pubDate>Tue, 21 Mar 2017 20:00:00 -0700</pubDate><guid isPermaLink="false">tag:charlesreid1.github.io,2017-03-21:/enigma-cipher-implementation-part-1-how-it-works.html</guid><category>ciphers</category><category>enigma</category><category>encryption</category></item></channel></rss>